/*
 * HashiCorp Vault API
 *
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.13.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Vault.Client.FileParameter;

namespace Vault.Model
{
    /// <summary>
    /// CertConfigRequest
    /// </summary>
    [DataContract(Name = "CertConfigRequest")]
    public partial class CertConfigRequest : IEquatable<CertConfigRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertConfigRequest" /> class.
        /// </summary>
        /// <param name="disableBinding">If set, during renewal, skips the matching of presented client identity with the client identity used during login. Defaults to false. (default to false).</param>
        /// <param name="enableIdentityAliasMetadata">If set, metadata of the certificate including the metadata corresponding to allowed_metadata_extensions will be stored in the alias. Defaults to false. (default to false).</param>
        public CertConfigRequest(bool disableBinding = false, bool enableIdentityAliasMetadata = false)
        {
            this.DisableBinding = disableBinding;
            this.EnableIdentityAliasMetadata = enableIdentityAliasMetadata;
        }

        /// <summary>
        /// If set, during renewal, skips the matching of presented client identity with the client identity used during login. Defaults to false.
        /// </summary>
        /// <value>If set, during renewal, skips the matching of presented client identity with the client identity used during login. Defaults to false.</value>
        [DataMember(Name = "disable_binding", EmitDefaultValue = true)]
        public bool DisableBinding { get; set; }

        /// <summary>
        /// If set, metadata of the certificate including the metadata corresponding to allowed_metadata_extensions will be stored in the alias. Defaults to false.
        /// </summary>
        /// <value>If set, metadata of the certificate including the metadata corresponding to allowed_metadata_extensions will be stored in the alias. Defaults to false.</value>
        [DataMember(Name = "enable_identity_alias_metadata", EmitDefaultValue = true)]
        public bool EnableIdentityAliasMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CertConfigRequest {\n");
            sb.Append("  DisableBinding: ").Append(DisableBinding).Append("\n");
            sb.Append("  EnableIdentityAliasMetadata: ").Append(EnableIdentityAliasMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertConfigRequest);
        }

        /// <summary>
        /// Returns true if CertConfigRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CertConfigRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertConfigRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisableBinding == input.DisableBinding ||
                    this.DisableBinding.Equals(input.DisableBinding)
                ) && 
                (
                    this.EnableIdentityAliasMetadata == input.EnableIdentityAliasMetadata ||
                    this.EnableIdentityAliasMetadata.Equals(input.EnableIdentityAliasMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DisableBinding.GetHashCode();
                hashCode = (hashCode * 59) + this.EnableIdentityAliasMetadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
