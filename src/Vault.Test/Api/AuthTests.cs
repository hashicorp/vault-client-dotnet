/*
 * HashiCorp Vault API
 *
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.13.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Vault.Client;
using Vault.Api;
// uncomment below to import models
//using Vault.Model;

namespace Vault.Test.Api
{
    /// <summary>
    ///  Class for testing Auth
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AuthTests : IDisposable
    {
        private Vault.Api.Auth instance;

        public AuthTests()
        {
            // instance = new Vault.Api.Auth();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Auth
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' Auth
            //Assert.IsType<Auth>(instance);
        }

        /// <summary>
        /// Test AuthUpdateAwsConfigRotateRoot
        /// </summary>
        [Fact]
        public void AuthUpdateAwsConfigRotateRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.AuthUpdateAwsConfigRotateRoot(mountPath);
        }

        /// <summary>
        /// Test DeleteApproleRoleRoleName
        /// </summary>
        [Fact]
        public void DeleteApproleRoleRoleNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.DeleteApproleRoleRoleName(roleName, mountPath);
        }

        /// <summary>
        /// Test DeleteApproleRoleRoleNameBindSecretId
        /// </summary>
        [Fact]
        public void DeleteApproleRoleRoleNameBindSecretIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.DeleteApproleRoleRoleNameBindSecretId(roleName, mountPath);
        }

        /// <summary>
        /// Test DeleteApproleRoleRoleNameBoundCidrList
        /// </summary>
        [Fact]
        public void DeleteApproleRoleRoleNameBoundCidrListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.DeleteApproleRoleRoleNameBoundCidrList(roleName, mountPath);
        }

        /// <summary>
        /// Test DeleteApproleRoleRoleNamePeriod
        /// </summary>
        [Fact]
        public void DeleteApproleRoleRoleNamePeriodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.DeleteApproleRoleRoleNamePeriod(roleName, mountPath);
        }

        /// <summary>
        /// Test DeleteApproleRoleRoleNamePolicies
        /// </summary>
        [Fact]
        public void DeleteApproleRoleRoleNamePoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.DeleteApproleRoleRoleNamePolicies(roleName, mountPath);
        }

        /// <summary>
        /// Test DeleteApproleRoleRoleNameSecretIdAccessorDestroy
        /// </summary>
        [Fact]
        public void DeleteApproleRoleRoleNameSecretIdAccessorDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.DeleteApproleRoleRoleNameSecretIdAccessorDestroy(roleName, mountPath);
        }

        /// <summary>
        /// Test DeleteApproleRoleRoleNameSecretIdBoundCidrs
        /// </summary>
        [Fact]
        public void DeleteApproleRoleRoleNameSecretIdBoundCidrsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.DeleteApproleRoleRoleNameSecretIdBoundCidrs(roleName, mountPath);
        }

        /// <summary>
        /// Test DeleteApproleRoleRoleNameSecretIdDestroy
        /// </summary>
        [Fact]
        public void DeleteApproleRoleRoleNameSecretIdDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.DeleteApproleRoleRoleNameSecretIdDestroy(roleName, mountPath);
        }

        /// <summary>
        /// Test DeleteApproleRoleRoleNameSecretIdNumUses
        /// </summary>
        [Fact]
        public void DeleteApproleRoleRoleNameSecretIdNumUsesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.DeleteApproleRoleRoleNameSecretIdNumUses(roleName, mountPath);
        }

        /// <summary>
        /// Test DeleteApproleRoleRoleNameSecretIdTtl
        /// </summary>
        [Fact]
        public void DeleteApproleRoleRoleNameSecretIdTtlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.DeleteApproleRoleRoleNameSecretIdTtl(roleName, mountPath);
        }

        /// <summary>
        /// Test DeleteApproleRoleRoleNameTokenBoundCidrs
        /// </summary>
        [Fact]
        public void DeleteApproleRoleRoleNameTokenBoundCidrsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.DeleteApproleRoleRoleNameTokenBoundCidrs(roleName, mountPath);
        }

        /// <summary>
        /// Test DeleteApproleRoleRoleNameTokenMaxTtl
        /// </summary>
        [Fact]
        public void DeleteApproleRoleRoleNameTokenMaxTtlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.DeleteApproleRoleRoleNameTokenMaxTtl(roleName, mountPath);
        }

        /// <summary>
        /// Test DeleteApproleRoleRoleNameTokenNumUses
        /// </summary>
        [Fact]
        public void DeleteApproleRoleRoleNameTokenNumUsesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.DeleteApproleRoleRoleNameTokenNumUses(roleName, mountPath);
        }

        /// <summary>
        /// Test DeleteApproleRoleRoleNameTokenTtl
        /// </summary>
        [Fact]
        public void DeleteApproleRoleRoleNameTokenTtlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.DeleteApproleRoleRoleNameTokenTtl(roleName, mountPath);
        }

        /// <summary>
        /// Test DeleteAwsConfigCertificateCertName
        /// </summary>
        [Fact]
        public void DeleteAwsConfigCertificateCertNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string certName = null;
            //string mountPath = null;
            //instance.DeleteAwsConfigCertificateCertName(certName, mountPath);
        }

        /// <summary>
        /// Test DeleteAwsConfigClient
        /// </summary>
        [Fact]
        public void DeleteAwsConfigClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.DeleteAwsConfigClient(mountPath);
        }

        /// <summary>
        /// Test DeleteAwsConfigStsAccountId
        /// </summary>
        [Fact]
        public void DeleteAwsConfigStsAccountIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string mountPath = null;
            //instance.DeleteAwsConfigStsAccountId(accountId, mountPath);
        }

        /// <summary>
        /// Test DeleteAwsConfigTidyIdentityAccesslist
        /// </summary>
        [Fact]
        public void DeleteAwsConfigTidyIdentityAccesslistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.DeleteAwsConfigTidyIdentityAccesslist(mountPath);
        }

        /// <summary>
        /// Test DeleteAwsConfigTidyIdentityWhitelist
        /// </summary>
        [Fact]
        public void DeleteAwsConfigTidyIdentityWhitelistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.DeleteAwsConfigTidyIdentityWhitelist(mountPath);
        }

        /// <summary>
        /// Test DeleteAwsConfigTidyRoletagBlacklist
        /// </summary>
        [Fact]
        public void DeleteAwsConfigTidyRoletagBlacklistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.DeleteAwsConfigTidyRoletagBlacklist(mountPath);
        }

        /// <summary>
        /// Test DeleteAwsConfigTidyRoletagDenylist
        /// </summary>
        [Fact]
        public void DeleteAwsConfigTidyRoletagDenylistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.DeleteAwsConfigTidyRoletagDenylist(mountPath);
        }

        /// <summary>
        /// Test DeleteAwsIdentityAccesslistInstanceId
        /// </summary>
        [Fact]
        public void DeleteAwsIdentityAccesslistInstanceIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceId = null;
            //string mountPath = null;
            //instance.DeleteAwsIdentityAccesslistInstanceId(instanceId, mountPath);
        }

        /// <summary>
        /// Test DeleteAwsIdentityWhitelistInstanceId
        /// </summary>
        [Fact]
        public void DeleteAwsIdentityWhitelistInstanceIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceId = null;
            //string mountPath = null;
            //instance.DeleteAwsIdentityWhitelistInstanceId(instanceId, mountPath);
        }

        /// <summary>
        /// Test DeleteAwsRoleRole
        /// </summary>
        [Fact]
        public void DeleteAwsRoleRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //string mountPath = null;
            //instance.DeleteAwsRoleRole(role, mountPath);
        }

        /// <summary>
        /// Test DeleteAwsRoletagBlacklistRoleTag
        /// </summary>
        [Fact]
        public void DeleteAwsRoletagBlacklistRoleTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleTag = null;
            //string mountPath = null;
            //instance.DeleteAwsRoletagBlacklistRoleTag(roleTag, mountPath);
        }

        /// <summary>
        /// Test DeleteAwsRoletagDenylistRoleTag
        /// </summary>
        [Fact]
        public void DeleteAwsRoletagDenylistRoleTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleTag = null;
            //string mountPath = null;
            //instance.DeleteAwsRoletagDenylistRoleTag(roleTag, mountPath);
        }

        /// <summary>
        /// Test DeleteCertCertsName
        /// </summary>
        [Fact]
        public void DeleteCertCertsNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.DeleteCertCertsName(name, mountPath);
        }

        /// <summary>
        /// Test DeleteCertCrlsName
        /// </summary>
        [Fact]
        public void DeleteCertCrlsNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.DeleteCertCrlsName(name, mountPath);
        }

        /// <summary>
        /// Test DeleteCfRolesRole
        /// </summary>
        [Fact]
        public void DeleteCfRolesRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //string mountPath = null;
            //instance.DeleteCfRolesRole(role, mountPath);
        }

        /// <summary>
        /// Test DeleteGithubMapTeamsKey
        /// </summary>
        [Fact]
        public void DeleteGithubMapTeamsKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string mountPath = null;
            //instance.DeleteGithubMapTeamsKey(key, mountPath);
        }

        /// <summary>
        /// Test DeleteGithubMapUsersKey
        /// </summary>
        [Fact]
        public void DeleteGithubMapUsersKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string mountPath = null;
            //instance.DeleteGithubMapUsersKey(key, mountPath);
        }

        /// <summary>
        /// Test DeleteKerberosGroupsName
        /// </summary>
        [Fact]
        public void DeleteKerberosGroupsNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.DeleteKerberosGroupsName(name, mountPath);
        }

        /// <summary>
        /// Test DeleteKubernetesRoleName
        /// </summary>
        [Fact]
        public void DeleteKubernetesRoleNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.DeleteKubernetesRoleName(name, mountPath);
        }

        /// <summary>
        /// Test DeleteOktaUsersName
        /// </summary>
        [Fact]
        public void DeleteOktaUsersNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.DeleteOktaUsersName(name, mountPath);
        }

        /// <summary>
        /// Test DeleteTokenRolesRoleName
        /// </summary>
        [Fact]
        public void DeleteTokenRolesRoleNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.DeleteTokenRolesRoleName(roleName, mountPath);
        }

        /// <summary>
        /// Test DeleteUserpassUsersUsername
        /// </summary>
        [Fact]
        public void DeleteUserpassUsersUsernameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string mountPath = null;
            //instance.DeleteUserpassUsersUsername(username, mountPath);
        }

        /// <summary>
        /// Test ListApproleRoleRoleNameSecretId
        /// </summary>
        [Fact]
        public void ListApproleRoleRoleNameSecretIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string list = null;
            //string mountPath = null;
            //instance.ListApproleRoleRoleNameSecretId(roleName, list, mountPath);
        }

        /// <summary>
        /// Test ListAwsConfigCertificates
        /// </summary>
        [Fact]
        public void ListAwsConfigCertificatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mountPath = null;
            //instance.ListAwsConfigCertificates(list, mountPath);
        }

        /// <summary>
        /// Test ListAwsConfigSts
        /// </summary>
        [Fact]
        public void ListAwsConfigStsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mountPath = null;
            //instance.ListAwsConfigSts(list, mountPath);
        }

        /// <summary>
        /// Test ListAwsIdentityAccesslist
        /// </summary>
        [Fact]
        public void ListAwsIdentityAccesslistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mountPath = null;
            //instance.ListAwsIdentityAccesslist(list, mountPath);
        }

        /// <summary>
        /// Test ListAwsIdentityWhitelist
        /// </summary>
        [Fact]
        public void ListAwsIdentityWhitelistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mountPath = null;
            //instance.ListAwsIdentityWhitelist(list, mountPath);
        }

        /// <summary>
        /// Test ListAwsRoletagBlacklist
        /// </summary>
        [Fact]
        public void ListAwsRoletagBlacklistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mountPath = null;
            //instance.ListAwsRoletagBlacklist(list, mountPath);
        }

        /// <summary>
        /// Test ListAwsRoletagDenylist
        /// </summary>
        [Fact]
        public void ListAwsRoletagDenylistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mountPath = null;
            //instance.ListAwsRoletagDenylist(list, mountPath);
        }

        /// <summary>
        /// Test ListCertCerts
        /// </summary>
        [Fact]
        public void ListCertCertsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mountPath = null;
            //instance.ListCertCerts(list, mountPath);
        }

        /// <summary>
        /// Test ListGcpRoles
        /// </summary>
        [Fact]
        public void ListGcpRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mountPath = null;
            //instance.ListGcpRoles(list, mountPath);
        }

        /// <summary>
        /// Test ListKerberosGroups
        /// </summary>
        [Fact]
        public void ListKerberosGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mountPath = null;
            //instance.ListKerberosGroups(list, mountPath);
        }

        /// <summary>
        /// Test ListKubernetesRole
        /// </summary>
        [Fact]
        public void ListKubernetesRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mountPath = null;
            //instance.ListKubernetesRole(list, mountPath);
        }

        /// <summary>
        /// Test ListOktaUsers
        /// </summary>
        [Fact]
        public void ListOktaUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mountPath = null;
            //instance.ListOktaUsers(list, mountPath);
        }

        /// <summary>
        /// Test ListTokenAccessors
        /// </summary>
        [Fact]
        public void ListTokenAccessorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mountPath = null;
            //instance.ListTokenAccessors(list, mountPath);
        }

        /// <summary>
        /// Test ReadApproleRoleRoleName
        /// </summary>
        [Fact]
        public void ReadApproleRoleRoleNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.ReadApproleRoleRoleName(roleName, mountPath);
        }

        /// <summary>
        /// Test ReadApproleRoleRoleNameBindSecretId
        /// </summary>
        [Fact]
        public void ReadApproleRoleRoleNameBindSecretIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.ReadApproleRoleRoleNameBindSecretId(roleName, mountPath);
        }

        /// <summary>
        /// Test ReadApproleRoleRoleNameBoundCidrList
        /// </summary>
        [Fact]
        public void ReadApproleRoleRoleNameBoundCidrListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.ReadApproleRoleRoleNameBoundCidrList(roleName, mountPath);
        }

        /// <summary>
        /// Test ReadApproleRoleRoleNameLocalSecretIds
        /// </summary>
        [Fact]
        public void ReadApproleRoleRoleNameLocalSecretIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.ReadApproleRoleRoleNameLocalSecretIds(roleName, mountPath);
        }

        /// <summary>
        /// Test ReadApproleRoleRoleNamePeriod
        /// </summary>
        [Fact]
        public void ReadApproleRoleRoleNamePeriodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.ReadApproleRoleRoleNamePeriod(roleName, mountPath);
        }

        /// <summary>
        /// Test ReadApproleRoleRoleNamePolicies
        /// </summary>
        [Fact]
        public void ReadApproleRoleRoleNamePoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.ReadApproleRoleRoleNamePolicies(roleName, mountPath);
        }

        /// <summary>
        /// Test ReadApproleRoleRoleNameRoleId
        /// </summary>
        [Fact]
        public void ReadApproleRoleRoleNameRoleIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.ReadApproleRoleRoleNameRoleId(roleName, mountPath);
        }

        /// <summary>
        /// Test ReadApproleRoleRoleNameSecretIdBoundCidrs
        /// </summary>
        [Fact]
        public void ReadApproleRoleRoleNameSecretIdBoundCidrsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.ReadApproleRoleRoleNameSecretIdBoundCidrs(roleName, mountPath);
        }

        /// <summary>
        /// Test ReadApproleRoleRoleNameSecretIdNumUses
        /// </summary>
        [Fact]
        public void ReadApproleRoleRoleNameSecretIdNumUsesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.ReadApproleRoleRoleNameSecretIdNumUses(roleName, mountPath);
        }

        /// <summary>
        /// Test ReadApproleRoleRoleNameSecretIdTtl
        /// </summary>
        [Fact]
        public void ReadApproleRoleRoleNameSecretIdTtlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.ReadApproleRoleRoleNameSecretIdTtl(roleName, mountPath);
        }

        /// <summary>
        /// Test ReadApproleRoleRoleNameTokenBoundCidrs
        /// </summary>
        [Fact]
        public void ReadApproleRoleRoleNameTokenBoundCidrsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.ReadApproleRoleRoleNameTokenBoundCidrs(roleName, mountPath);
        }

        /// <summary>
        /// Test ReadApproleRoleRoleNameTokenMaxTtl
        /// </summary>
        [Fact]
        public void ReadApproleRoleRoleNameTokenMaxTtlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.ReadApproleRoleRoleNameTokenMaxTtl(roleName, mountPath);
        }

        /// <summary>
        /// Test ReadApproleRoleRoleNameTokenNumUses
        /// </summary>
        [Fact]
        public void ReadApproleRoleRoleNameTokenNumUsesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.ReadApproleRoleRoleNameTokenNumUses(roleName, mountPath);
        }

        /// <summary>
        /// Test ReadApproleRoleRoleNameTokenTtl
        /// </summary>
        [Fact]
        public void ReadApproleRoleRoleNameTokenTtlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.ReadApproleRoleRoleNameTokenTtl(roleName, mountPath);
        }

        /// <summary>
        /// Test ReadAwsConfigCertificateCertName
        /// </summary>
        [Fact]
        public void ReadAwsConfigCertificateCertNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string certName = null;
            //string mountPath = null;
            //instance.ReadAwsConfigCertificateCertName(certName, mountPath);
        }

        /// <summary>
        /// Test ReadAwsConfigClient
        /// </summary>
        [Fact]
        public void ReadAwsConfigClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadAwsConfigClient(mountPath);
        }

        /// <summary>
        /// Test ReadAwsConfigIdentity
        /// </summary>
        [Fact]
        public void ReadAwsConfigIdentityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadAwsConfigIdentity(mountPath);
        }

        /// <summary>
        /// Test ReadAwsConfigStsAccountId
        /// </summary>
        [Fact]
        public void ReadAwsConfigStsAccountIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string mountPath = null;
            //instance.ReadAwsConfigStsAccountId(accountId, mountPath);
        }

        /// <summary>
        /// Test ReadAwsConfigTidyIdentityAccesslist
        /// </summary>
        [Fact]
        public void ReadAwsConfigTidyIdentityAccesslistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadAwsConfigTidyIdentityAccesslist(mountPath);
        }

        /// <summary>
        /// Test ReadAwsConfigTidyIdentityWhitelist
        /// </summary>
        [Fact]
        public void ReadAwsConfigTidyIdentityWhitelistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadAwsConfigTidyIdentityWhitelist(mountPath);
        }

        /// <summary>
        /// Test ReadAwsConfigTidyRoletagBlacklist
        /// </summary>
        [Fact]
        public void ReadAwsConfigTidyRoletagBlacklistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadAwsConfigTidyRoletagBlacklist(mountPath);
        }

        /// <summary>
        /// Test ReadAwsConfigTidyRoletagDenylist
        /// </summary>
        [Fact]
        public void ReadAwsConfigTidyRoletagDenylistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadAwsConfigTidyRoletagDenylist(mountPath);
        }

        /// <summary>
        /// Test ReadAwsIdentityAccesslistInstanceId
        /// </summary>
        [Fact]
        public void ReadAwsIdentityAccesslistInstanceIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceId = null;
            //string mountPath = null;
            //instance.ReadAwsIdentityAccesslistInstanceId(instanceId, mountPath);
        }

        /// <summary>
        /// Test ReadAwsIdentityWhitelistInstanceId
        /// </summary>
        [Fact]
        public void ReadAwsIdentityWhitelistInstanceIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceId = null;
            //string mountPath = null;
            //instance.ReadAwsIdentityWhitelistInstanceId(instanceId, mountPath);
        }

        /// <summary>
        /// Test ReadAwsRoleRole
        /// </summary>
        [Fact]
        public void ReadAwsRoleRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //string mountPath = null;
            //instance.ReadAwsRoleRole(role, mountPath);
        }

        /// <summary>
        /// Test ReadAwsRoletagBlacklistRoleTag
        /// </summary>
        [Fact]
        public void ReadAwsRoletagBlacklistRoleTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleTag = null;
            //string mountPath = null;
            //instance.ReadAwsRoletagBlacklistRoleTag(roleTag, mountPath);
        }

        /// <summary>
        /// Test ReadAwsRoletagDenylistRoleTag
        /// </summary>
        [Fact]
        public void ReadAwsRoletagDenylistRoleTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleTag = null;
            //string mountPath = null;
            //instance.ReadAwsRoletagDenylistRoleTag(roleTag, mountPath);
        }

        /// <summary>
        /// Test ReadCertCertsName
        /// </summary>
        [Fact]
        public void ReadCertCertsNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.ReadCertCertsName(name, mountPath);
        }

        /// <summary>
        /// Test ReadCertCrlsName
        /// </summary>
        [Fact]
        public void ReadCertCrlsNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.ReadCertCrlsName(name, mountPath);
        }

        /// <summary>
        /// Test ReadCfRolesRole
        /// </summary>
        [Fact]
        public void ReadCfRolesRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //string mountPath = null;
            //instance.ReadCfRolesRole(role, mountPath);
        }

        /// <summary>
        /// Test ReadGithubMapTeams
        /// </summary>
        [Fact]
        public void ReadGithubMapTeamsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //string list = null;
            //instance.ReadGithubMapTeams(mountPath, list);
        }

        /// <summary>
        /// Test ReadGithubMapTeamsKey
        /// </summary>
        [Fact]
        public void ReadGithubMapTeamsKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string mountPath = null;
            //instance.ReadGithubMapTeamsKey(key, mountPath);
        }

        /// <summary>
        /// Test ReadGithubMapUsers
        /// </summary>
        [Fact]
        public void ReadGithubMapUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //string list = null;
            //instance.ReadGithubMapUsers(mountPath, list);
        }

        /// <summary>
        /// Test ReadGithubMapUsersKey
        /// </summary>
        [Fact]
        public void ReadGithubMapUsersKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string mountPath = null;
            //instance.ReadGithubMapUsersKey(key, mountPath);
        }

        /// <summary>
        /// Test ReadKerberosConfigLdap
        /// </summary>
        [Fact]
        public void ReadKerberosConfigLdapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadKerberosConfigLdap(mountPath);
        }

        /// <summary>
        /// Test ReadKerberosGroupsName
        /// </summary>
        [Fact]
        public void ReadKerberosGroupsNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.ReadKerberosGroupsName(name, mountPath);
        }

        /// <summary>
        /// Test ReadKubernetesConfig
        /// </summary>
        [Fact]
        public void ReadKubernetesConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadKubernetesConfig(mountPath);
        }

        /// <summary>
        /// Test ReadKubernetesRoleName
        /// </summary>
        [Fact]
        public void ReadKubernetesRoleNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.ReadKubernetesRoleName(name, mountPath);
        }

        /// <summary>
        /// Test ReadOidcOidcCallback
        /// </summary>
        [Fact]
        public void ReadOidcOidcCallbackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadOidcOidcCallback(mountPath);
        }

        /// <summary>
        /// Test ReadOktaUsersName
        /// </summary>
        [Fact]
        public void ReadOktaUsersNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.ReadOktaUsersName(name, mountPath);
        }

        /// <summary>
        /// Test ReadOktaVerifyNonce
        /// </summary>
        [Fact]
        public void ReadOktaVerifyNonceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string nonce = null;
            //string mountPath = null;
            //instance.ReadOktaVerifyNonce(nonce, mountPath);
        }

        /// <summary>
        /// Test ReadTokenLookup
        /// </summary>
        [Fact]
        public void ReadTokenLookupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadTokenLookup(mountPath);
        }

        /// <summary>
        /// Test ReadTokenLookupSelf
        /// </summary>
        [Fact]
        public void ReadTokenLookupSelfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadTokenLookupSelf(mountPath);
        }

        /// <summary>
        /// Test ReadTokenRolesRoleName
        /// </summary>
        [Fact]
        public void ReadTokenRolesRoleNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //string mountPath = null;
            //instance.ReadTokenRolesRoleName(roleName, mountPath);
        }

        /// <summary>
        /// Test ReadUserpassUsersUsername
        /// </summary>
        [Fact]
        public void ReadUserpassUsersUsernameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //string mountPath = null;
            //instance.ReadUserpassUsersUsername(username, mountPath);
        }

        /// <summary>
        /// Test UpdateApproleRoleRoleName
        /// </summary>
        [Fact]
        public void UpdateApproleRoleRoleNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //ApproleRoleRequest approleRoleRequest = null;
            //string mountPath = null;
            //instance.UpdateApproleRoleRoleName(roleName, approleRoleRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateApproleRoleRoleNameBindSecretId
        /// </summary>
        [Fact]
        public void UpdateApproleRoleRoleNameBindSecretIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //ApproleRoleBindSecretIdRequest approleRoleBindSecretIdRequest = null;
            //string mountPath = null;
            //instance.UpdateApproleRoleRoleNameBindSecretId(roleName, approleRoleBindSecretIdRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateApproleRoleRoleNameBoundCidrList
        /// </summary>
        [Fact]
        public void UpdateApproleRoleRoleNameBoundCidrListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //ApproleRoleBoundCidrListRequest approleRoleBoundCidrListRequest = null;
            //string mountPath = null;
            //instance.UpdateApproleRoleRoleNameBoundCidrList(roleName, approleRoleBoundCidrListRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateApproleRoleRoleNameCustomSecretId
        /// </summary>
        [Fact]
        public void UpdateApproleRoleRoleNameCustomSecretIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //ApproleRoleCustomSecretIdRequest approleRoleCustomSecretIdRequest = null;
            //string mountPath = null;
            //instance.UpdateApproleRoleRoleNameCustomSecretId(roleName, approleRoleCustomSecretIdRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateApproleRoleRoleNamePeriod
        /// </summary>
        [Fact]
        public void UpdateApproleRoleRoleNamePeriodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //ApproleRolePeriodRequest approleRolePeriodRequest = null;
            //string mountPath = null;
            //instance.UpdateApproleRoleRoleNamePeriod(roleName, approleRolePeriodRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateApproleRoleRoleNamePolicies
        /// </summary>
        [Fact]
        public void UpdateApproleRoleRoleNamePoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //ApproleRolePoliciesRequest approleRolePoliciesRequest = null;
            //string mountPath = null;
            //instance.UpdateApproleRoleRoleNamePolicies(roleName, approleRolePoliciesRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateApproleRoleRoleNameRoleId
        /// </summary>
        [Fact]
        public void UpdateApproleRoleRoleNameRoleIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //ApproleRoleRoleIdRequest approleRoleRoleIdRequest = null;
            //string mountPath = null;
            //instance.UpdateApproleRoleRoleNameRoleId(roleName, approleRoleRoleIdRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateApproleRoleRoleNameSecretId
        /// </summary>
        [Fact]
        public void UpdateApproleRoleRoleNameSecretIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //ApproleRoleSecretIdRequest approleRoleSecretIdRequest = null;
            //string mountPath = null;
            //instance.UpdateApproleRoleRoleNameSecretId(roleName, approleRoleSecretIdRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateApproleRoleRoleNameSecretIdAccessorDestroy
        /// </summary>
        [Fact]
        public void UpdateApproleRoleRoleNameSecretIdAccessorDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //ApproleRoleSecretIdAccessorDestroyRequest approleRoleSecretIdAccessorDestroyRequest = null;
            //string mountPath = null;
            //instance.UpdateApproleRoleRoleNameSecretIdAccessorDestroy(roleName, approleRoleSecretIdAccessorDestroyRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateApproleRoleRoleNameSecretIdAccessorLookup
        /// </summary>
        [Fact]
        public void UpdateApproleRoleRoleNameSecretIdAccessorLookupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //ApproleRoleSecretIdAccessorLookupRequest approleRoleSecretIdAccessorLookupRequest = null;
            //string mountPath = null;
            //instance.UpdateApproleRoleRoleNameSecretIdAccessorLookup(roleName, approleRoleSecretIdAccessorLookupRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateApproleRoleRoleNameSecretIdBoundCidrs
        /// </summary>
        [Fact]
        public void UpdateApproleRoleRoleNameSecretIdBoundCidrsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //ApproleRoleSecretIdBoundCidrsRequest approleRoleSecretIdBoundCidrsRequest = null;
            //string mountPath = null;
            //instance.UpdateApproleRoleRoleNameSecretIdBoundCidrs(roleName, approleRoleSecretIdBoundCidrsRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateApproleRoleRoleNameSecretIdDestroy
        /// </summary>
        [Fact]
        public void UpdateApproleRoleRoleNameSecretIdDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //ApproleRoleSecretIdDestroyRequest approleRoleSecretIdDestroyRequest = null;
            //string mountPath = null;
            //instance.UpdateApproleRoleRoleNameSecretIdDestroy(roleName, approleRoleSecretIdDestroyRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateApproleRoleRoleNameSecretIdLookup
        /// </summary>
        [Fact]
        public void UpdateApproleRoleRoleNameSecretIdLookupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //ApproleRoleSecretIdLookupRequest approleRoleSecretIdLookupRequest = null;
            //string mountPath = null;
            //instance.UpdateApproleRoleRoleNameSecretIdLookup(roleName, approleRoleSecretIdLookupRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateApproleRoleRoleNameSecretIdNumUses
        /// </summary>
        [Fact]
        public void UpdateApproleRoleRoleNameSecretIdNumUsesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //ApproleRoleSecretIdNumUsesRequest approleRoleSecretIdNumUsesRequest = null;
            //string mountPath = null;
            //instance.UpdateApproleRoleRoleNameSecretIdNumUses(roleName, approleRoleSecretIdNumUsesRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateApproleRoleRoleNameSecretIdTtl
        /// </summary>
        [Fact]
        public void UpdateApproleRoleRoleNameSecretIdTtlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //ApproleRoleSecretIdTtlRequest approleRoleSecretIdTtlRequest = null;
            //string mountPath = null;
            //instance.UpdateApproleRoleRoleNameSecretIdTtl(roleName, approleRoleSecretIdTtlRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateApproleRoleRoleNameTokenBoundCidrs
        /// </summary>
        [Fact]
        public void UpdateApproleRoleRoleNameTokenBoundCidrsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //ApproleRoleTokenBoundCidrsRequest approleRoleTokenBoundCidrsRequest = null;
            //string mountPath = null;
            //instance.UpdateApproleRoleRoleNameTokenBoundCidrs(roleName, approleRoleTokenBoundCidrsRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateApproleRoleRoleNameTokenMaxTtl
        /// </summary>
        [Fact]
        public void UpdateApproleRoleRoleNameTokenMaxTtlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //ApproleRoleTokenMaxTtlRequest approleRoleTokenMaxTtlRequest = null;
            //string mountPath = null;
            //instance.UpdateApproleRoleRoleNameTokenMaxTtl(roleName, approleRoleTokenMaxTtlRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateApproleRoleRoleNameTokenNumUses
        /// </summary>
        [Fact]
        public void UpdateApproleRoleRoleNameTokenNumUsesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //ApproleRoleTokenNumUsesRequest approleRoleTokenNumUsesRequest = null;
            //string mountPath = null;
            //instance.UpdateApproleRoleRoleNameTokenNumUses(roleName, approleRoleTokenNumUsesRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateApproleRoleRoleNameTokenTtl
        /// </summary>
        [Fact]
        public void UpdateApproleRoleRoleNameTokenTtlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //ApproleRoleTokenTtlRequest approleRoleTokenTtlRequest = null;
            //string mountPath = null;
            //instance.UpdateApproleRoleRoleNameTokenTtl(roleName, approleRoleTokenTtlRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateApproleTidySecretId
        /// </summary>
        [Fact]
        public void UpdateApproleTidySecretIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.UpdateApproleTidySecretId(mountPath);
        }

        /// <summary>
        /// Test UpdateAwsConfigCertificateCertName
        /// </summary>
        [Fact]
        public void UpdateAwsConfigCertificateCertNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string certName = null;
            //AwsConfigCertificateRequest awsConfigCertificateRequest = null;
            //string mountPath = null;
            //instance.UpdateAwsConfigCertificateCertName(certName, awsConfigCertificateRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateAwsConfigClient
        /// </summary>
        [Fact]
        public void UpdateAwsConfigClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AwsConfigClientRequest awsConfigClientRequest = null;
            //string mountPath = null;
            //instance.UpdateAwsConfigClient(awsConfigClientRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateAwsConfigIdentity
        /// </summary>
        [Fact]
        public void UpdateAwsConfigIdentityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AwsConfigIdentityRequest awsConfigIdentityRequest = null;
            //string mountPath = null;
            //instance.UpdateAwsConfigIdentity(awsConfigIdentityRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateAwsConfigStsAccountId
        /// </summary>
        [Fact]
        public void UpdateAwsConfigStsAccountIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //AwsConfigStsRequest awsConfigStsRequest = null;
            //string mountPath = null;
            //instance.UpdateAwsConfigStsAccountId(accountId, awsConfigStsRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateAwsConfigTidyIdentityAccesslist
        /// </summary>
        [Fact]
        public void UpdateAwsConfigTidyIdentityAccesslistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AwsConfigTidyIdentityAccesslistRequest awsConfigTidyIdentityAccesslistRequest = null;
            //string mountPath = null;
            //instance.UpdateAwsConfigTidyIdentityAccesslist(awsConfigTidyIdentityAccesslistRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateAwsConfigTidyIdentityWhitelist
        /// </summary>
        [Fact]
        public void UpdateAwsConfigTidyIdentityWhitelistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AwsConfigTidyIdentityWhitelistRequest awsConfigTidyIdentityWhitelistRequest = null;
            //string mountPath = null;
            //instance.UpdateAwsConfigTidyIdentityWhitelist(awsConfigTidyIdentityWhitelistRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateAwsConfigTidyRoletagBlacklist
        /// </summary>
        [Fact]
        public void UpdateAwsConfigTidyRoletagBlacklistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AwsConfigTidyRoletagBlacklistRequest awsConfigTidyRoletagBlacklistRequest = null;
            //string mountPath = null;
            //instance.UpdateAwsConfigTidyRoletagBlacklist(awsConfigTidyRoletagBlacklistRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateAwsConfigTidyRoletagDenylist
        /// </summary>
        [Fact]
        public void UpdateAwsConfigTidyRoletagDenylistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AwsConfigTidyRoletagDenylistRequest awsConfigTidyRoletagDenylistRequest = null;
            //string mountPath = null;
            //instance.UpdateAwsConfigTidyRoletagDenylist(awsConfigTidyRoletagDenylistRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateAwsRoleRole
        /// </summary>
        [Fact]
        public void UpdateAwsRoleRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //AwsRoleRequest awsRoleRequest = null;
            //string mountPath = null;
            //instance.UpdateAwsRoleRole(role, awsRoleRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateAwsRoleRoleTag
        /// </summary>
        [Fact]
        public void UpdateAwsRoleRoleTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //AwsRoleTagRequest awsRoleTagRequest = null;
            //string mountPath = null;
            //instance.UpdateAwsRoleRoleTag(role, awsRoleTagRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateAwsRoletagBlacklistRoleTag
        /// </summary>
        [Fact]
        public void UpdateAwsRoletagBlacklistRoleTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleTag = null;
            //string mountPath = null;
            //instance.UpdateAwsRoletagBlacklistRoleTag(roleTag, mountPath);
        }

        /// <summary>
        /// Test UpdateAwsRoletagDenylistRoleTag
        /// </summary>
        [Fact]
        public void UpdateAwsRoletagDenylistRoleTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleTag = null;
            //string mountPath = null;
            //instance.UpdateAwsRoletagDenylistRoleTag(roleTag, mountPath);
        }

        /// <summary>
        /// Test UpdateAwsTidyIdentityAccesslist
        /// </summary>
        [Fact]
        public void UpdateAwsTidyIdentityAccesslistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AwsTidyIdentityAccesslistRequest awsTidyIdentityAccesslistRequest = null;
            //string mountPath = null;
            //instance.UpdateAwsTidyIdentityAccesslist(awsTidyIdentityAccesslistRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateAwsTidyIdentityWhitelist
        /// </summary>
        [Fact]
        public void UpdateAwsTidyIdentityWhitelistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AwsTidyIdentityWhitelistRequest awsTidyIdentityWhitelistRequest = null;
            //string mountPath = null;
            //instance.UpdateAwsTidyIdentityWhitelist(awsTidyIdentityWhitelistRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateAwsTidyRoletagBlacklist
        /// </summary>
        [Fact]
        public void UpdateAwsTidyRoletagBlacklistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AwsTidyRoletagBlacklistRequest awsTidyRoletagBlacklistRequest = null;
            //string mountPath = null;
            //instance.UpdateAwsTidyRoletagBlacklist(awsTidyRoletagBlacklistRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateAwsTidyRoletagDenylist
        /// </summary>
        [Fact]
        public void UpdateAwsTidyRoletagDenylistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AwsTidyRoletagDenylistRequest awsTidyRoletagDenylistRequest = null;
            //string mountPath = null;
            //instance.UpdateAwsTidyRoletagDenylist(awsTidyRoletagDenylistRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateCertCertsName
        /// </summary>
        [Fact]
        public void UpdateCertCertsNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //CertCertsRequest certCertsRequest = null;
            //string mountPath = null;
            //instance.UpdateCertCertsName(name, certCertsRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateCertCrlsName
        /// </summary>
        [Fact]
        public void UpdateCertCrlsNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //CertCrlsRequest certCrlsRequest = null;
            //string mountPath = null;
            //instance.UpdateCertCrlsName(name, certCrlsRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateCfRolesRole
        /// </summary>
        [Fact]
        public void UpdateCfRolesRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //CfRolesRequest cfRolesRequest = null;
            //string mountPath = null;
            //instance.UpdateCfRolesRole(role, cfRolesRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateGcpRoleNameLabels
        /// </summary>
        [Fact]
        public void UpdateGcpRoleNameLabelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //GcpRoleLabelsRequest gcpRoleLabelsRequest = null;
            //string mountPath = null;
            //instance.UpdateGcpRoleNameLabels(name, gcpRoleLabelsRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateGcpRoleNameServiceAccounts
        /// </summary>
        [Fact]
        public void UpdateGcpRoleNameServiceAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //GcpRoleServiceAccountsRequest gcpRoleServiceAccountsRequest = null;
            //string mountPath = null;
            //instance.UpdateGcpRoleNameServiceAccounts(name, gcpRoleServiceAccountsRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateGithubMapTeamsKey
        /// </summary>
        [Fact]
        public void UpdateGithubMapTeamsKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //GithubMapTeamsRequest githubMapTeamsRequest = null;
            //string mountPath = null;
            //instance.UpdateGithubMapTeamsKey(key, githubMapTeamsRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateGithubMapUsersKey
        /// </summary>
        [Fact]
        public void UpdateGithubMapUsersKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //GithubMapUsersRequest githubMapUsersRequest = null;
            //string mountPath = null;
            //instance.UpdateGithubMapUsersKey(key, githubMapUsersRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateKerberosConfigLdap
        /// </summary>
        [Fact]
        public void UpdateKerberosConfigLdapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //KerberosConfigLdapRequest kerberosConfigLdapRequest = null;
            //string mountPath = null;
            //instance.UpdateKerberosConfigLdap(kerberosConfigLdapRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateKerberosGroupsName
        /// </summary>
        [Fact]
        public void UpdateKerberosGroupsNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //KerberosGroupsRequest kerberosGroupsRequest = null;
            //string mountPath = null;
            //instance.UpdateKerberosGroupsName(name, kerberosGroupsRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateKubernetesConfig
        /// </summary>
        [Fact]
        public void UpdateKubernetesConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //KubernetesConfigRequest kubernetesConfigRequest = null;
            //string mountPath = null;
            //instance.UpdateKubernetesConfig(kubernetesConfigRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateKubernetesLogin
        /// </summary>
        [Fact]
        public void UpdateKubernetesLoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //KubernetesLoginRequest kubernetesLoginRequest = null;
            //string mountPath = null;
            //instance.UpdateKubernetesLogin(kubernetesLoginRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateKubernetesRoleName
        /// </summary>
        [Fact]
        public void UpdateKubernetesRoleNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //KubernetesRoleRequest kubernetesRoleRequest = null;
            //string mountPath = null;
            //instance.UpdateKubernetesRoleName(name, kubernetesRoleRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateOciLoginRole
        /// </summary>
        [Fact]
        public void UpdateOciLoginRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //OciLoginRequest ociLoginRequest = null;
            //string mountPath = null;
            //instance.UpdateOciLoginRole(role, ociLoginRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateOidcOidcAuthUrl
        /// </summary>
        [Fact]
        public void UpdateOidcOidcAuthUrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OidcOidcAuthUrlRequest oidcOidcAuthUrlRequest = null;
            //string mountPath = null;
            //instance.UpdateOidcOidcAuthUrl(oidcOidcAuthUrlRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateOidcOidcCallback
        /// </summary>
        [Fact]
        public void UpdateOidcOidcCallbackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OidcOidcCallbackRequest oidcOidcCallbackRequest = null;
            //string mountPath = null;
            //instance.UpdateOidcOidcCallback(oidcOidcCallbackRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateOktaLoginUsername
        /// </summary>
        [Fact]
        public void UpdateOktaLoginUsernameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //OktaLoginRequest oktaLoginRequest = null;
            //string mountPath = null;
            //instance.UpdateOktaLoginUsername(username, oktaLoginRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateOktaUsersName
        /// </summary>
        [Fact]
        public void UpdateOktaUsersNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //OktaUsersRequest oktaUsersRequest = null;
            //string mountPath = null;
            //instance.UpdateOktaUsersName(name, oktaUsersRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateRadiusLoginUrlusername
        /// </summary>
        [Fact]
        public void UpdateRadiusLoginUrlusernameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string urlusername = null;
            //RadiusLoginRequest radiusLoginRequest = null;
            //string mountPath = null;
            //instance.UpdateRadiusLoginUrlusername(urlusername, radiusLoginRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateTokenCreate
        /// </summary>
        [Fact]
        public void UpdateTokenCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TokenCreateRequest tokenCreateRequest = null;
            //string format = null;
            //string mountPath = null;
            //instance.UpdateTokenCreate(tokenCreateRequest, format, mountPath);
        }

        /// <summary>
        /// Test UpdateTokenCreateOrphan
        /// </summary>
        [Fact]
        public void UpdateTokenCreateOrphanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TokenCreateOrphanRequest tokenCreateOrphanRequest = null;
            //string format = null;
            //string mountPath = null;
            //instance.UpdateTokenCreateOrphan(tokenCreateOrphanRequest, format, mountPath);
        }

        /// <summary>
        /// Test UpdateTokenCreateRoleName
        /// </summary>
        [Fact]
        public void UpdateTokenCreateRoleNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //TokenCreateRequest tokenCreateRequest = null;
            //string format = null;
            //string mountPath = null;
            //instance.UpdateTokenCreateRoleName(roleName, tokenCreateRequest, format, mountPath);
        }

        /// <summary>
        /// Test UpdateTokenLookup
        /// </summary>
        [Fact]
        public void UpdateTokenLookupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TokenLookupRequest tokenLookupRequest = null;
            //string mountPath = null;
            //instance.UpdateTokenLookup(tokenLookupRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateTokenLookupAccessor
        /// </summary>
        [Fact]
        public void UpdateTokenLookupAccessorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TokenLookupAccessorRequest tokenLookupAccessorRequest = null;
            //string mountPath = null;
            //instance.UpdateTokenLookupAccessor(tokenLookupAccessorRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateTokenLookupSelf
        /// </summary>
        [Fact]
        public void UpdateTokenLookupSelfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TokenLookupSelfRequest tokenLookupSelfRequest = null;
            //string mountPath = null;
            //instance.UpdateTokenLookupSelf(tokenLookupSelfRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateTokenRenew
        /// </summary>
        [Fact]
        public void UpdateTokenRenewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TokenRenewRequest tokenRenewRequest = null;
            //string mountPath = null;
            //instance.UpdateTokenRenew(tokenRenewRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateTokenRenewAccessor
        /// </summary>
        [Fact]
        public void UpdateTokenRenewAccessorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TokenRenewAccessorRequest tokenRenewAccessorRequest = null;
            //string mountPath = null;
            //instance.UpdateTokenRenewAccessor(tokenRenewAccessorRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateTokenRenewSelf
        /// </summary>
        [Fact]
        public void UpdateTokenRenewSelfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TokenRenewSelfRequest tokenRenewSelfRequest = null;
            //string mountPath = null;
            //instance.UpdateTokenRenewSelf(tokenRenewSelfRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateTokenRevoke
        /// </summary>
        [Fact]
        public void UpdateTokenRevokeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TokenRevokeRequest tokenRevokeRequest = null;
            //string mountPath = null;
            //instance.UpdateTokenRevoke(tokenRevokeRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateTokenRevokeAccessor
        /// </summary>
        [Fact]
        public void UpdateTokenRevokeAccessorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TokenRevokeAccessorRequest tokenRevokeAccessorRequest = null;
            //string mountPath = null;
            //instance.UpdateTokenRevokeAccessor(tokenRevokeAccessorRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateTokenRevokeOrphan
        /// </summary>
        [Fact]
        public void UpdateTokenRevokeOrphanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TokenRevokeOrphanRequest tokenRevokeOrphanRequest = null;
            //string mountPath = null;
            //instance.UpdateTokenRevokeOrphan(tokenRevokeOrphanRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateTokenRevokeSelf
        /// </summary>
        [Fact]
        public void UpdateTokenRevokeSelfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.UpdateTokenRevokeSelf(mountPath);
        }

        /// <summary>
        /// Test UpdateTokenRolesRoleName
        /// </summary>
        [Fact]
        public void UpdateTokenRolesRoleNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleName = null;
            //TokenRolesRequest tokenRolesRequest = null;
            //string mountPath = null;
            //instance.UpdateTokenRolesRoleName(roleName, tokenRolesRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateTokenTidy
        /// </summary>
        [Fact]
        public void UpdateTokenTidyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.UpdateTokenTidy(mountPath);
        }

        /// <summary>
        /// Test UpdateUserpassUsersUsername
        /// </summary>
        [Fact]
        public void UpdateUserpassUsersUsernameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //UserpassUsersRequest userpassUsersRequest = null;
            //string mountPath = null;
            //instance.UpdateUserpassUsersUsername(username, userpassUsersRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateUserpassUsersUsernamePassword
        /// </summary>
        [Fact]
        public void UpdateUserpassUsersUsernamePasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //UserpassUsersPasswordRequest userpassUsersPasswordRequest = null;
            //string mountPath = null;
            //instance.UpdateUserpassUsersUsernamePassword(username, userpassUsersPasswordRequest, mountPath);
        }

        /// <summary>
        /// Test UpdateUserpassUsersUsernamePolicies
        /// </summary>
        [Fact]
        public void UpdateUserpassUsersUsernamePoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //UserpassUsersPoliciesRequest userpassUsersPoliciesRequest = null;
            //string mountPath = null;
            //instance.UpdateUserpassUsersUsernamePolicies(username, userpassUsersPoliciesRequest, mountPath);
        }
    }
}
