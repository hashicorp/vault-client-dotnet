/*
 * HashiCorp Vault API
 *
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.13.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Vault.Client;
using Vault.Api;
// uncomment below to import models
//using Vault.Model;

namespace Vault.Test.Api
{
    /// <summary>
    ///  Class for testing Identity
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class IdentityTests : IDisposable
    {
        private Vault.Api.Identity instance;

        public IdentityTests()
        {
            // instance = new Vault.Api.Identity();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Identity
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' Identity
            //Assert.IsType<Identity>(instance);
        }

        /// <summary>
        /// Test AliasDeleteByID
        /// </summary>
        [Fact]
        public void AliasDeleteByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.AliasDeleteByID(id);
        }

        /// <summary>
        /// Test AliasListByID
        /// </summary>
        [Fact]
        public void AliasListByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.AliasListByID(list);
        }

        /// <summary>
        /// Test AliasReadByID
        /// </summary>
        [Fact]
        public void AliasReadByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.AliasReadByID(id);
        }

        /// <summary>
        /// Test AliasWrite
        /// </summary>
        [Fact]
        public void AliasWriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AliasWriteRequest aliasWriteRequest = null;
            //instance.AliasWrite(aliasWriteRequest);
        }

        /// <summary>
        /// Test AliasWriteByID
        /// </summary>
        [Fact]
        public void AliasWriteByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //AliasWriteByIDRequest aliasWriteByIDRequest = null;
            //instance.AliasWriteByID(id, aliasWriteByIDRequest);
        }

        /// <summary>
        /// Test EntityBatchDelete
        /// </summary>
        [Fact]
        public void EntityBatchDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EntityBatchDeleteRequest entityBatchDeleteRequest = null;
            //instance.EntityBatchDelete(entityBatchDeleteRequest);
        }

        /// <summary>
        /// Test EntityDeleteAliasByID
        /// </summary>
        [Fact]
        public void EntityDeleteAliasByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.EntityDeleteAliasByID(id);
        }

        /// <summary>
        /// Test EntityDeleteByID
        /// </summary>
        [Fact]
        public void EntityDeleteByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.EntityDeleteByID(id);
        }

        /// <summary>
        /// Test EntityDeleteByName
        /// </summary>
        [Fact]
        public void EntityDeleteByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.EntityDeleteByName(name);
        }

        /// <summary>
        /// Test EntityListAliasesByID
        /// </summary>
        [Fact]
        public void EntityListAliasesByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.EntityListAliasesByID(list);
        }

        /// <summary>
        /// Test EntityListByID
        /// </summary>
        [Fact]
        public void EntityListByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.EntityListByID(list);
        }

        /// <summary>
        /// Test EntityListByName
        /// </summary>
        [Fact]
        public void EntityListByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.EntityListByName(list);
        }

        /// <summary>
        /// Test EntityLookup
        /// </summary>
        [Fact]
        public void EntityLookupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EntityLookupRequest entityLookupRequest = null;
            //instance.EntityLookup(entityLookupRequest);
        }

        /// <summary>
        /// Test EntityMerge
        /// </summary>
        [Fact]
        public void EntityMergeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EntityMergeRequest entityMergeRequest = null;
            //instance.EntityMerge(entityMergeRequest);
        }

        /// <summary>
        /// Test EntityReadAliasByID
        /// </summary>
        [Fact]
        public void EntityReadAliasByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.EntityReadAliasByID(id);
        }

        /// <summary>
        /// Test EntityReadByID
        /// </summary>
        [Fact]
        public void EntityReadByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.EntityReadByID(id);
        }

        /// <summary>
        /// Test EntityReadByName
        /// </summary>
        [Fact]
        public void EntityReadByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.EntityReadByName(name);
        }

        /// <summary>
        /// Test EntityWrite
        /// </summary>
        [Fact]
        public void EntityWriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EntityWriteRequest entityWriteRequest = null;
            //instance.EntityWrite(entityWriteRequest);
        }

        /// <summary>
        /// Test EntityWriteAlias
        /// </summary>
        [Fact]
        public void EntityWriteAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EntityWriteAliasRequest entityWriteAliasRequest = null;
            //instance.EntityWriteAlias(entityWriteAliasRequest);
        }

        /// <summary>
        /// Test EntityWriteAliasByID
        /// </summary>
        [Fact]
        public void EntityWriteAliasByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //EntityWriteAliasByIDRequest entityWriteAliasByIDRequest = null;
            //instance.EntityWriteAliasByID(id, entityWriteAliasByIDRequest);
        }

        /// <summary>
        /// Test EntityWriteByID
        /// </summary>
        [Fact]
        public void EntityWriteByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //EntityWriteByIDRequest entityWriteByIDRequest = null;
            //instance.EntityWriteByID(id, entityWriteByIDRequest);
        }

        /// <summary>
        /// Test EntityWriteByName
        /// </summary>
        [Fact]
        public void EntityWriteByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //EntityWriteByNameRequest entityWriteByNameRequest = null;
            //instance.EntityWriteByName(name, entityWriteByNameRequest);
        }

        /// <summary>
        /// Test GroupDeleteAliasByID
        /// </summary>
        [Fact]
        public void GroupDeleteAliasByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.GroupDeleteAliasByID(id);
        }

        /// <summary>
        /// Test GroupDeleteByID
        /// </summary>
        [Fact]
        public void GroupDeleteByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.GroupDeleteByID(id);
        }

        /// <summary>
        /// Test GroupDeleteByName
        /// </summary>
        [Fact]
        public void GroupDeleteByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.GroupDeleteByName(name);
        }

        /// <summary>
        /// Test GroupListAliasesByID
        /// </summary>
        [Fact]
        public void GroupListAliasesByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.GroupListAliasesByID(list);
        }

        /// <summary>
        /// Test GroupListByID
        /// </summary>
        [Fact]
        public void GroupListByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.GroupListByID(list);
        }

        /// <summary>
        /// Test GroupListByName
        /// </summary>
        [Fact]
        public void GroupListByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.GroupListByName(list);
        }

        /// <summary>
        /// Test GroupLookup
        /// </summary>
        [Fact]
        public void GroupLookupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GroupLookupRequest groupLookupRequest = null;
            //instance.GroupLookup(groupLookupRequest);
        }

        /// <summary>
        /// Test GroupReadAliasByID
        /// </summary>
        [Fact]
        public void GroupReadAliasByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.GroupReadAliasByID(id);
        }

        /// <summary>
        /// Test GroupReadByID
        /// </summary>
        [Fact]
        public void GroupReadByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.GroupReadByID(id);
        }

        /// <summary>
        /// Test GroupReadByName
        /// </summary>
        [Fact]
        public void GroupReadByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.GroupReadByName(name);
        }

        /// <summary>
        /// Test GroupWrite
        /// </summary>
        [Fact]
        public void GroupWriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GroupWriteRequest groupWriteRequest = null;
            //instance.GroupWrite(groupWriteRequest);
        }

        /// <summary>
        /// Test GroupWriteAlias
        /// </summary>
        [Fact]
        public void GroupWriteAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GroupWriteAliasRequest groupWriteAliasRequest = null;
            //instance.GroupWriteAlias(groupWriteAliasRequest);
        }

        /// <summary>
        /// Test GroupWriteAliasByID
        /// </summary>
        [Fact]
        public void GroupWriteAliasByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GroupWriteAliasByIDRequest groupWriteAliasByIDRequest = null;
            //instance.GroupWriteAliasByID(id, groupWriteAliasByIDRequest);
        }

        /// <summary>
        /// Test GroupWriteByID
        /// </summary>
        [Fact]
        public void GroupWriteByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GroupWriteByIDRequest groupWriteByIDRequest = null;
            //instance.GroupWriteByID(id, groupWriteByIDRequest);
        }

        /// <summary>
        /// Test GroupWriteByName
        /// </summary>
        [Fact]
        public void GroupWriteByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //GroupWriteByNameRequest groupWriteByNameRequest = null;
            //instance.GroupWriteByName(name, groupWriteByNameRequest);
        }

        /// <summary>
        /// Test MFADeleteLoginEnforcement
        /// </summary>
        [Fact]
        public void MFADeleteLoginEnforcementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.MFADeleteLoginEnforcement(name);
        }

        /// <summary>
        /// Test MFAListLoginEnforcements
        /// </summary>
        [Fact]
        public void MFAListLoginEnforcementsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.MFAListLoginEnforcements(list);
        }

        /// <summary>
        /// Test MFAMethodAdminDestroyTOTP
        /// </summary>
        [Fact]
        public void MFAMethodAdminDestroyTOTPTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MFAMethodAdminDestroyTOTPRequest mFAMethodAdminDestroyTOTPRequest = null;
            //instance.MFAMethodAdminDestroyTOTP(mFAMethodAdminDestroyTOTPRequest);
        }

        /// <summary>
        /// Test MFAMethodAdminGenerateTOTP
        /// </summary>
        [Fact]
        public void MFAMethodAdminGenerateTOTPTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MFAMethodAdminGenerateTOTPRequest mFAMethodAdminGenerateTOTPRequest = null;
            //instance.MFAMethodAdminGenerateTOTP(mFAMethodAdminGenerateTOTPRequest);
        }

        /// <summary>
        /// Test MFAMethodDeleteDuo
        /// </summary>
        [Fact]
        public void MFAMethodDeleteDuoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string methodId = null;
            //instance.MFAMethodDeleteDuo(methodId);
        }

        /// <summary>
        /// Test MFAMethodDeleteOkta
        /// </summary>
        [Fact]
        public void MFAMethodDeleteOktaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string methodId = null;
            //instance.MFAMethodDeleteOkta(methodId);
        }

        /// <summary>
        /// Test MFAMethodDeletePingID
        /// </summary>
        [Fact]
        public void MFAMethodDeletePingIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string methodId = null;
            //instance.MFAMethodDeletePingID(methodId);
        }

        /// <summary>
        /// Test MFAMethodDeleteTOTP
        /// </summary>
        [Fact]
        public void MFAMethodDeleteTOTPTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string methodId = null;
            //instance.MFAMethodDeleteTOTP(methodId);
        }

        /// <summary>
        /// Test MFAMethodGenerateTOTP
        /// </summary>
        [Fact]
        public void MFAMethodGenerateTOTPTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MFAMethodGenerateTOTPRequest mFAMethodGenerateTOTPRequest = null;
            //instance.MFAMethodGenerateTOTP(mFAMethodGenerateTOTPRequest);
        }

        /// <summary>
        /// Test MFAMethodList
        /// </summary>
        [Fact]
        public void MFAMethodListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.MFAMethodList(list);
        }

        /// <summary>
        /// Test MFAMethodListDuo
        /// </summary>
        [Fact]
        public void MFAMethodListDuoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.MFAMethodListDuo(list);
        }

        /// <summary>
        /// Test MFAMethodListOkta
        /// </summary>
        [Fact]
        public void MFAMethodListOktaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.MFAMethodListOkta(list);
        }

        /// <summary>
        /// Test MFAMethodListPingID
        /// </summary>
        [Fact]
        public void MFAMethodListPingIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.MFAMethodListPingID(list);
        }

        /// <summary>
        /// Test MFAMethodListTOTP
        /// </summary>
        [Fact]
        public void MFAMethodListTOTPTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.MFAMethodListTOTP(list);
        }

        /// <summary>
        /// Test MFAMethodRead
        /// </summary>
        [Fact]
        public void MFAMethodReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string methodId = null;
            //instance.MFAMethodRead(methodId);
        }

        /// <summary>
        /// Test MFAMethodReadDuo
        /// </summary>
        [Fact]
        public void MFAMethodReadDuoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string methodId = null;
            //instance.MFAMethodReadDuo(methodId);
        }

        /// <summary>
        /// Test MFAMethodReadOkta
        /// </summary>
        [Fact]
        public void MFAMethodReadOktaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string methodId = null;
            //instance.MFAMethodReadOkta(methodId);
        }

        /// <summary>
        /// Test MFAMethodReadPingID
        /// </summary>
        [Fact]
        public void MFAMethodReadPingIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string methodId = null;
            //instance.MFAMethodReadPingID(methodId);
        }

        /// <summary>
        /// Test MFAMethodReadTOTP
        /// </summary>
        [Fact]
        public void MFAMethodReadTOTPTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string methodId = null;
            //instance.MFAMethodReadTOTP(methodId);
        }

        /// <summary>
        /// Test MFAMethodWriteDuo
        /// </summary>
        [Fact]
        public void MFAMethodWriteDuoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string methodId = null;
            //MFAMethodWriteDuoRequest mFAMethodWriteDuoRequest = null;
            //instance.MFAMethodWriteDuo(methodId, mFAMethodWriteDuoRequest);
        }

        /// <summary>
        /// Test MFAMethodWriteOkta
        /// </summary>
        [Fact]
        public void MFAMethodWriteOktaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string methodId = null;
            //MFAMethodWriteOktaRequest mFAMethodWriteOktaRequest = null;
            //instance.MFAMethodWriteOkta(methodId, mFAMethodWriteOktaRequest);
        }

        /// <summary>
        /// Test MFAMethodWritePingID
        /// </summary>
        [Fact]
        public void MFAMethodWritePingIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string methodId = null;
            //MFAMethodWritePingIDRequest mFAMethodWritePingIDRequest = null;
            //instance.MFAMethodWritePingID(methodId, mFAMethodWritePingIDRequest);
        }

        /// <summary>
        /// Test MFAMethodWriteTOTP
        /// </summary>
        [Fact]
        public void MFAMethodWriteTOTPTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string methodId = null;
            //MFAMethodWriteTOTPRequest mFAMethodWriteTOTPRequest = null;
            //instance.MFAMethodWriteTOTP(methodId, mFAMethodWriteTOTPRequest);
        }

        /// <summary>
        /// Test MFAReadLoginEnforcement
        /// </summary>
        [Fact]
        public void MFAReadLoginEnforcementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.MFAReadLoginEnforcement(name);
        }

        /// <summary>
        /// Test MFAWriteLoginEnforcement
        /// </summary>
        [Fact]
        public void MFAWriteLoginEnforcementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //MFAWriteLoginEnforcementRequest mFAWriteLoginEnforcementRequest = null;
            //instance.MFAWriteLoginEnforcement(name, mFAWriteLoginEnforcementRequest);
        }

        /// <summary>
        /// Test OIDCDeleteAssignment
        /// </summary>
        [Fact]
        public void OIDCDeleteAssignmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.OIDCDeleteAssignment(name);
        }

        /// <summary>
        /// Test OIDCDeleteClient
        /// </summary>
        [Fact]
        public void OIDCDeleteClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.OIDCDeleteClient(name);
        }

        /// <summary>
        /// Test OIDCDeleteKey
        /// </summary>
        [Fact]
        public void OIDCDeleteKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.OIDCDeleteKey(name);
        }

        /// <summary>
        /// Test OIDCDeleteProvider
        /// </summary>
        [Fact]
        public void OIDCDeleteProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.OIDCDeleteProvider(name);
        }

        /// <summary>
        /// Test OIDCDeleteRole
        /// </summary>
        [Fact]
        public void OIDCDeleteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.OIDCDeleteRole(name);
        }

        /// <summary>
        /// Test OIDCDeleteScope
        /// </summary>
        [Fact]
        public void OIDCDeleteScopeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.OIDCDeleteScope(name);
        }

        /// <summary>
        /// Test OIDCIntrospect
        /// </summary>
        [Fact]
        public void OIDCIntrospectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OIDCIntrospectRequest oIDCIntrospectRequest = null;
            //instance.OIDCIntrospect(oIDCIntrospectRequest);
        }

        /// <summary>
        /// Test OIDCListAssignments
        /// </summary>
        [Fact]
        public void OIDCListAssignmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.OIDCListAssignments(list);
        }

        /// <summary>
        /// Test OIDCListClients
        /// </summary>
        [Fact]
        public void OIDCListClientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.OIDCListClients(list);
        }

        /// <summary>
        /// Test OIDCListKeys
        /// </summary>
        [Fact]
        public void OIDCListKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.OIDCListKeys(list);
        }

        /// <summary>
        /// Test OIDCListProviders
        /// </summary>
        [Fact]
        public void OIDCListProvidersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string allowedClientId = null;
            //instance.OIDCListProviders(list, allowedClientId);
        }

        /// <summary>
        /// Test OIDCListRoles
        /// </summary>
        [Fact]
        public void OIDCListRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.OIDCListRoles(list);
        }

        /// <summary>
        /// Test OIDCListScopes
        /// </summary>
        [Fact]
        public void OIDCListScopesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.OIDCListScopes(list);
        }

        /// <summary>
        /// Test OIDCReadAssignment
        /// </summary>
        [Fact]
        public void OIDCReadAssignmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.OIDCReadAssignment(name);
        }

        /// <summary>
        /// Test OIDCReadClient
        /// </summary>
        [Fact]
        public void OIDCReadClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.OIDCReadClient(name);
        }

        /// <summary>
        /// Test OIDCReadConfig
        /// </summary>
        [Fact]
        public void OIDCReadConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.OIDCReadConfig();
        }

        /// <summary>
        /// Test OIDCReadKey
        /// </summary>
        [Fact]
        public void OIDCReadKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.OIDCReadKey(name);
        }

        /// <summary>
        /// Test OIDCReadProvider
        /// </summary>
        [Fact]
        public void OIDCReadProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.OIDCReadProvider(name);
        }

        /// <summary>
        /// Test OIDCReadProviderAuthorize
        /// </summary>
        [Fact]
        public void OIDCReadProviderAuthorizeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.OIDCReadProviderAuthorize(name);
        }

        /// <summary>
        /// Test OIDCReadProviderUserInfo
        /// </summary>
        [Fact]
        public void OIDCReadProviderUserInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.OIDCReadProviderUserInfo(name);
        }

        /// <summary>
        /// Test OIDCReadProviderWellKnownKeys
        /// </summary>
        [Fact]
        public void OIDCReadProviderWellKnownKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.OIDCReadProviderWellKnownKeys(name);
        }

        /// <summary>
        /// Test OIDCReadProviderWellKnownOpenIDConfiguration
        /// </summary>
        [Fact]
        public void OIDCReadProviderWellKnownOpenIDConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.OIDCReadProviderWellKnownOpenIDConfiguration(name);
        }

        /// <summary>
        /// Test OIDCReadRole
        /// </summary>
        [Fact]
        public void OIDCReadRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.OIDCReadRole(name);
        }

        /// <summary>
        /// Test OIDCReadScope
        /// </summary>
        [Fact]
        public void OIDCReadScopeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.OIDCReadScope(name);
        }

        /// <summary>
        /// Test OIDCReadToken
        /// </summary>
        [Fact]
        public void OIDCReadTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.OIDCReadToken(name);
        }

        /// <summary>
        /// Test OIDCReadWellKnownKeys
        /// </summary>
        [Fact]
        public void OIDCReadWellKnownKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.OIDCReadWellKnownKeys();
        }

        /// <summary>
        /// Test OIDCReadWellKnownOpenIDConfiguration
        /// </summary>
        [Fact]
        public void OIDCReadWellKnownOpenIDConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.OIDCReadWellKnownOpenIDConfiguration();
        }

        /// <summary>
        /// Test OIDCRotateKey
        /// </summary>
        [Fact]
        public void OIDCRotateKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //OIDCRotateKeyRequest oIDCRotateKeyRequest = null;
            //instance.OIDCRotateKey(name, oIDCRotateKeyRequest);
        }

        /// <summary>
        /// Test OIDCWriteAssignment
        /// </summary>
        [Fact]
        public void OIDCWriteAssignmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //OIDCWriteAssignmentRequest oIDCWriteAssignmentRequest = null;
            //instance.OIDCWriteAssignment(name, oIDCWriteAssignmentRequest);
        }

        /// <summary>
        /// Test OIDCWriteClient
        /// </summary>
        [Fact]
        public void OIDCWriteClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //OIDCWriteClientRequest oIDCWriteClientRequest = null;
            //instance.OIDCWriteClient(name, oIDCWriteClientRequest);
        }

        /// <summary>
        /// Test OIDCWriteConfig
        /// </summary>
        [Fact]
        public void OIDCWriteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OIDCWriteConfigRequest oIDCWriteConfigRequest = null;
            //instance.OIDCWriteConfig(oIDCWriteConfigRequest);
        }

        /// <summary>
        /// Test OIDCWriteKey
        /// </summary>
        [Fact]
        public void OIDCWriteKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //OIDCWriteKeyRequest oIDCWriteKeyRequest = null;
            //instance.OIDCWriteKey(name, oIDCWriteKeyRequest);
        }

        /// <summary>
        /// Test OIDCWriteProvider
        /// </summary>
        [Fact]
        public void OIDCWriteProviderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //OIDCWriteProviderRequest oIDCWriteProviderRequest = null;
            //instance.OIDCWriteProvider(name, oIDCWriteProviderRequest);
        }

        /// <summary>
        /// Test OIDCWriteProviderAuthorize
        /// </summary>
        [Fact]
        public void OIDCWriteProviderAuthorizeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //OIDCWriteProviderAuthorizeRequest oIDCWriteProviderAuthorizeRequest = null;
            //instance.OIDCWriteProviderAuthorize(name, oIDCWriteProviderAuthorizeRequest);
        }

        /// <summary>
        /// Test OIDCWriteProviderToken
        /// </summary>
        [Fact]
        public void OIDCWriteProviderTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //OIDCWriteProviderTokenRequest oIDCWriteProviderTokenRequest = null;
            //instance.OIDCWriteProviderToken(name, oIDCWriteProviderTokenRequest);
        }

        /// <summary>
        /// Test OIDCWriteProviderUserInfo
        /// </summary>
        [Fact]
        public void OIDCWriteProviderUserInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.OIDCWriteProviderUserInfo(name);
        }

        /// <summary>
        /// Test OIDCWriteRole
        /// </summary>
        [Fact]
        public void OIDCWriteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //OIDCWriteRoleRequest oIDCWriteRoleRequest = null;
            //instance.OIDCWriteRole(name, oIDCWriteRoleRequest);
        }

        /// <summary>
        /// Test OIDCWriteScope
        /// </summary>
        [Fact]
        public void OIDCWriteScopeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //OIDCWriteScopeRequest oIDCWriteScopeRequest = null;
            //instance.OIDCWriteScope(name, oIDCWriteScopeRequest);
        }

        /// <summary>
        /// Test PersonaIDDeleteByID
        /// </summary>
        [Fact]
        public void PersonaIDDeleteByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.PersonaIDDeleteByID(id);
        }

        /// <summary>
        /// Test PersonaIDReadByID
        /// </summary>
        [Fact]
        public void PersonaIDReadByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.PersonaIDReadByID(id);
        }

        /// <summary>
        /// Test PersonaIDWriteByID
        /// </summary>
        [Fact]
        public void PersonaIDWriteByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //PersonaIDWriteByIDRequest personaIDWriteByIDRequest = null;
            //instance.PersonaIDWriteByID(id, personaIDWriteByIDRequest);
        }

        /// <summary>
        /// Test PersonaListByID
        /// </summary>
        [Fact]
        public void PersonaListByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.PersonaListByID(list);
        }

        /// <summary>
        /// Test PersonaWrite
        /// </summary>
        [Fact]
        public void PersonaWriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PersonaWriteRequest personaWriteRequest = null;
            //instance.PersonaWrite(personaWriteRequest);
        }
    }
}
