/*
 * HashiCorp Vault API
 *
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.13.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Vault.Client;
using Vault.Api;
// uncomment below to import models
//using Vault.Model;

namespace Vault.Test.Api
{
    /// <summary>
    ///  Class for testing Secrets
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SecretsTests : IDisposable
    {
        private Vault.Api.Secrets instance;

        public SecretsTests()
        {
            // instance = new Vault.Api.Secrets();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Secrets
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' Secrets
            //Assert.IsType<Secrets>(instance);
        }

        /// <summary>
        /// Test DeleteAwsRolesName
        /// </summary>
        [Fact]
        public void DeleteAwsRolesNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.DeleteAwsRolesName(name, mountPath);
        }

        /// <summary>
        /// Test DeleteCubbyholePath
        /// </summary>
        [Fact]
        public void DeleteCubbyholePathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string mountPath = null;
            //instance.DeleteCubbyholePath(path, mountPath);
        }

        /// <summary>
        /// Test DeleteGcpRolesetName
        /// </summary>
        [Fact]
        public void DeleteGcpRolesetNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.DeleteGcpRolesetName(name, mountPath);
        }

        /// <summary>
        /// Test DeleteGcpStaticAccountName
        /// </summary>
        [Fact]
        public void DeleteGcpStaticAccountNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.DeleteGcpStaticAccountName(name, mountPath);
        }

        /// <summary>
        /// Test DeleteGcpkmsKeysDeregisterKey
        /// </summary>
        [Fact]
        public void DeleteGcpkmsKeysDeregisterKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string mountPath = null;
            //instance.DeleteGcpkmsKeysDeregisterKey(key, mountPath);
        }

        /// <summary>
        /// Test DeleteGcpkmsKeysKey
        /// </summary>
        [Fact]
        public void DeleteGcpkmsKeysKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string mountPath = null;
            //instance.DeleteGcpkmsKeysKey(key, mountPath);
        }

        /// <summary>
        /// Test DeleteGcpkmsKeysTrimKey
        /// </summary>
        [Fact]
        public void DeleteGcpkmsKeysTrimKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string mountPath = null;
            //instance.DeleteGcpkmsKeysTrimKey(key, mountPath);
        }

        /// <summary>
        /// Test DeleteLdapLibraryName
        /// </summary>
        [Fact]
        public void DeleteLdapLibraryNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.DeleteLdapLibraryName(name, mountPath);
        }

        /// <summary>
        /// Test DeleteLdapRoleName
        /// </summary>
        [Fact]
        public void DeleteLdapRoleNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.DeleteLdapRoleName(name, mountPath);
        }

        /// <summary>
        /// Test DeleteLdapStaticRoleName
        /// </summary>
        [Fact]
        public void DeleteLdapStaticRoleNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.DeleteLdapStaticRoleName(name, mountPath);
        }

        /// <summary>
        /// Test DeleteNomadConfigAccess
        /// </summary>
        [Fact]
        public void DeleteNomadConfigAccessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.DeleteNomadConfigAccess(mountPath);
        }

        /// <summary>
        /// Test DeletePkiIssuerRefDerPem
        /// </summary>
        [Fact]
        public void DeletePkiIssuerRefDerPemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //string mountPath = null;
            //instance.DeletePkiIssuerRefDerPem(issuerRef, mountPath);
        }

        /// <summary>
        /// Test DeletePkiJson
        /// </summary>
        [Fact]
        public void DeletePkiJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.DeletePkiJson(mountPath);
        }

        /// <summary>
        /// Test DeletePkiKeyKeyRef
        /// </summary>
        [Fact]
        public void DeletePkiKeyKeyRefTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string keyRef = null;
            //string mountPath = null;
            //instance.DeletePkiKeyKeyRef(keyRef, mountPath);
        }

        /// <summary>
        /// Test DeletePkiRoot
        /// </summary>
        [Fact]
        public void DeletePkiRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.DeletePkiRoot(mountPath);
        }

        /// <summary>
        /// Test DeleteSecretDataPath
        /// </summary>
        [Fact]
        public void DeleteSecretDataPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string mountPath = null;
            //instance.DeleteSecretDataPath(path, mountPath);
        }

        /// <summary>
        /// Test DeleteSecretMetadataPath
        /// </summary>
        [Fact]
        public void DeleteSecretMetadataPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string mountPath = null;
            //instance.DeleteSecretMetadataPath(path, mountPath);
        }

        /// <summary>
        /// Test DeleteSshConfigZeroaddress
        /// </summary>
        [Fact]
        public void DeleteSshConfigZeroaddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.DeleteSshConfigZeroaddress(mountPath);
        }

        /// <summary>
        /// Test DeleteSshKeysKeyName
        /// </summary>
        [Fact]
        public void DeleteSshKeysKeyNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string keyName = null;
            //string mountPath = null;
            //instance.DeleteSshKeysKeyName(keyName, mountPath);
        }

        /// <summary>
        /// Test DeleteSshRolesRole
        /// </summary>
        [Fact]
        public void DeleteSshRolesRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //string mountPath = null;
            //instance.DeleteSshRolesRole(role, mountPath);
        }

        /// <summary>
        /// Test DeleteTotpKeysName
        /// </summary>
        [Fact]
        public void DeleteTotpKeysNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.DeleteTotpKeysName(name, mountPath);
        }

        /// <summary>
        /// Test ListAwsRoles
        /// </summary>
        [Fact]
        public void ListAwsRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mountPath = null;
            //instance.ListAwsRoles(list, mountPath);
        }

        /// <summary>
        /// Test ListGcpRolesets
        /// </summary>
        [Fact]
        public void ListGcpRolesetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mountPath = null;
            //instance.ListGcpRolesets(list, mountPath);
        }

        /// <summary>
        /// Test ListGcpStaticAccounts
        /// </summary>
        [Fact]
        public void ListGcpStaticAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mountPath = null;
            //instance.ListGcpStaticAccounts(list, mountPath);
        }

        /// <summary>
        /// Test ListLdapLibrary
        /// </summary>
        [Fact]
        public void ListLdapLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mountPath = null;
            //instance.ListLdapLibrary(list, mountPath);
        }

        /// <summary>
        /// Test ListLdapRole
        /// </summary>
        [Fact]
        public void ListLdapRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mountPath = null;
            //instance.ListLdapRole(list, mountPath);
        }

        /// <summary>
        /// Test ListLdapStaticRole
        /// </summary>
        [Fact]
        public void ListLdapStaticRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mountPath = null;
            //instance.ListLdapStaticRole(list, mountPath);
        }

        /// <summary>
        /// Test ListPkiCerts
        /// </summary>
        [Fact]
        public void ListPkiCertsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mountPath = null;
            //instance.ListPkiCerts(list, mountPath);
        }

        /// <summary>
        /// Test ListPkiIssuers
        /// </summary>
        [Fact]
        public void ListPkiIssuersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mountPath = null;
            //instance.ListPkiIssuers(list, mountPath);
        }

        /// <summary>
        /// Test ListTotpKeys
        /// </summary>
        [Fact]
        public void ListTotpKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mountPath = null;
            //instance.ListTotpKeys(list, mountPath);
        }

        /// <summary>
        /// Test ReadAwsConfigLease
        /// </summary>
        [Fact]
        public void ReadAwsConfigLeaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadAwsConfigLease(mountPath);
        }

        /// <summary>
        /// Test ReadAwsConfigRoot
        /// </summary>
        [Fact]
        public void ReadAwsConfigRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadAwsConfigRoot(mountPath);
        }

        /// <summary>
        /// Test ReadAwsCreds
        /// </summary>
        [Fact]
        public void ReadAwsCredsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadAwsCreds(mountPath);
        }

        /// <summary>
        /// Test ReadAwsRolesName
        /// </summary>
        [Fact]
        public void ReadAwsRolesNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.ReadAwsRolesName(name, mountPath);
        }

        /// <summary>
        /// Test ReadAwsStsName
        /// </summary>
        [Fact]
        public void ReadAwsStsNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.ReadAwsStsName(name, mountPath);
        }

        /// <summary>
        /// Test ReadAzureCredsRole
        /// </summary>
        [Fact]
        public void ReadAzureCredsRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //string mountPath = null;
            //instance.ReadAzureCredsRole(role, mountPath);
        }

        /// <summary>
        /// Test ReadCubbyholePath
        /// </summary>
        [Fact]
        public void ReadCubbyholePathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string mountPath = null;
            //string list = null;
            //instance.ReadCubbyholePath(path, mountPath, list);
        }

        /// <summary>
        /// Test ReadGcpConfig
        /// </summary>
        [Fact]
        public void ReadGcpConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadGcpConfig(mountPath);
        }

        /// <summary>
        /// Test ReadGcpKeyRoleset
        /// </summary>
        [Fact]
        public void ReadGcpKeyRolesetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleset = null;
            //string mountPath = null;
            //instance.ReadGcpKeyRoleset(roleset, mountPath);
        }

        /// <summary>
        /// Test ReadGcpRolesetName
        /// </summary>
        [Fact]
        public void ReadGcpRolesetNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.ReadGcpRolesetName(name, mountPath);
        }

        /// <summary>
        /// Test ReadGcpRolesetRolesetKey
        /// </summary>
        [Fact]
        public void ReadGcpRolesetRolesetKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleset = null;
            //string mountPath = null;
            //instance.ReadGcpRolesetRolesetKey(roleset, mountPath);
        }

        /// <summary>
        /// Test ReadGcpRolesetRolesetToken
        /// </summary>
        [Fact]
        public void ReadGcpRolesetRolesetTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleset = null;
            //string mountPath = null;
            //instance.ReadGcpRolesetRolesetToken(roleset, mountPath);
        }

        /// <summary>
        /// Test ReadGcpStaticAccountName
        /// </summary>
        [Fact]
        public void ReadGcpStaticAccountNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.ReadGcpStaticAccountName(name, mountPath);
        }

        /// <summary>
        /// Test ReadGcpStaticAccountNameKey
        /// </summary>
        [Fact]
        public void ReadGcpStaticAccountNameKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.ReadGcpStaticAccountNameKey(name, mountPath);
        }

        /// <summary>
        /// Test ReadGcpStaticAccountNameToken
        /// </summary>
        [Fact]
        public void ReadGcpStaticAccountNameTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.ReadGcpStaticAccountNameToken(name, mountPath);
        }

        /// <summary>
        /// Test ReadGcpTokenRoleset
        /// </summary>
        [Fact]
        public void ReadGcpTokenRolesetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleset = null;
            //string mountPath = null;
            //instance.ReadGcpTokenRoleset(roleset, mountPath);
        }

        /// <summary>
        /// Test ReadGcpkmsKeysConfigKey
        /// </summary>
        [Fact]
        public void ReadGcpkmsKeysConfigKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string mountPath = null;
            //instance.ReadGcpkmsKeysConfigKey(key, mountPath);
        }

        /// <summary>
        /// Test ReadGcpkmsKeysKey
        /// </summary>
        [Fact]
        public void ReadGcpkmsKeysKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string mountPath = null;
            //instance.ReadGcpkmsKeysKey(key, mountPath);
        }

        /// <summary>
        /// Test ReadGcpkmsPubkeyKey
        /// </summary>
        [Fact]
        public void ReadGcpkmsPubkeyKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string mountPath = null;
            //instance.ReadGcpkmsPubkeyKey(key, mountPath);
        }

        /// <summary>
        /// Test ReadLdapCredsName
        /// </summary>
        [Fact]
        public void ReadLdapCredsNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.ReadLdapCredsName(name, mountPath);
        }

        /// <summary>
        /// Test ReadLdapLibraryName
        /// </summary>
        [Fact]
        public void ReadLdapLibraryNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.ReadLdapLibraryName(name, mountPath);
        }

        /// <summary>
        /// Test ReadLdapLibraryNameStatus
        /// </summary>
        [Fact]
        public void ReadLdapLibraryNameStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.ReadLdapLibraryNameStatus(name, mountPath);
        }

        /// <summary>
        /// Test ReadLdapRoleName
        /// </summary>
        [Fact]
        public void ReadLdapRoleNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.ReadLdapRoleName(name, mountPath);
        }

        /// <summary>
        /// Test ReadLdapStaticCredName
        /// </summary>
        [Fact]
        public void ReadLdapStaticCredNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.ReadLdapStaticCredName(name, mountPath);
        }

        /// <summary>
        /// Test ReadLdapStaticRoleName
        /// </summary>
        [Fact]
        public void ReadLdapStaticRoleNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.ReadLdapStaticRoleName(name, mountPath);
        }

        /// <summary>
        /// Test ReadNomadConfigAccess
        /// </summary>
        [Fact]
        public void ReadNomadConfigAccessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadNomadConfigAccess(mountPath);
        }

        /// <summary>
        /// Test ReadPkiCa
        /// </summary>
        [Fact]
        public void ReadPkiCaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadPkiCa(mountPath);
        }

        /// <summary>
        /// Test ReadPkiCaChain
        /// </summary>
        [Fact]
        public void ReadPkiCaChainTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadPkiCaChain(mountPath);
        }

        /// <summary>
        /// Test ReadPkiCaPem
        /// </summary>
        [Fact]
        public void ReadPkiCaPemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadPkiCaPem(mountPath);
        }

        /// <summary>
        /// Test ReadPkiCertCaChain
        /// </summary>
        [Fact]
        public void ReadPkiCertCaChainTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadPkiCertCaChain(mountPath);
        }

        /// <summary>
        /// Test ReadPkiCertSerial
        /// </summary>
        [Fact]
        public void ReadPkiCertSerialTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serial = null;
            //string mountPath = null;
            //instance.ReadPkiCertSerial(serial, mountPath);
        }

        /// <summary>
        /// Test ReadPkiCertSerialRaw
        /// </summary>
        [Fact]
        public void ReadPkiCertSerialRawTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serial = null;
            //string mountPath = null;
            //instance.ReadPkiCertSerialRaw(serial, mountPath);
        }

        /// <summary>
        /// Test ReadPkiCertSerialRawPem
        /// </summary>
        [Fact]
        public void ReadPkiCertSerialRawPemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serial = null;
            //string mountPath = null;
            //instance.ReadPkiCertSerialRawPem(serial, mountPath);
        }

        /// <summary>
        /// Test ReadPkiConfigAutoTidy
        /// </summary>
        [Fact]
        public void ReadPkiConfigAutoTidyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadPkiConfigAutoTidy(mountPath);
        }

        /// <summary>
        /// Test ReadPkiConfigCrl
        /// </summary>
        [Fact]
        public void ReadPkiConfigCrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadPkiConfigCrl(mountPath);
        }

        /// <summary>
        /// Test ReadPkiConfigIssuers
        /// </summary>
        [Fact]
        public void ReadPkiConfigIssuersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadPkiConfigIssuers(mountPath);
        }

        /// <summary>
        /// Test ReadPkiConfigKeys
        /// </summary>
        [Fact]
        public void ReadPkiConfigKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadPkiConfigKeys(mountPath);
        }

        /// <summary>
        /// Test ReadPkiConfigUrls
        /// </summary>
        [Fact]
        public void ReadPkiConfigUrlsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadPkiConfigUrls(mountPath);
        }

        /// <summary>
        /// Test ReadPkiCrl
        /// </summary>
        [Fact]
        public void ReadPkiCrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadPkiCrl(mountPath);
        }

        /// <summary>
        /// Test ReadPkiCrlRotate
        /// </summary>
        [Fact]
        public void ReadPkiCrlRotateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadPkiCrlRotate(mountPath);
        }

        /// <summary>
        /// Test ReadPkiCrlRotateDelta
        /// </summary>
        [Fact]
        public void ReadPkiCrlRotateDeltaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadPkiCrlRotateDelta(mountPath);
        }

        /// <summary>
        /// Test ReadPkiDelta
        /// </summary>
        [Fact]
        public void ReadPkiDeltaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadPkiDelta(mountPath);
        }

        /// <summary>
        /// Test ReadPkiDeltaCrl
        /// </summary>
        [Fact]
        public void ReadPkiDeltaCrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadPkiDeltaCrl(mountPath);
        }

        /// <summary>
        /// Test ReadPkiDeltaPem
        /// </summary>
        [Fact]
        public void ReadPkiDeltaPemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadPkiDeltaPem(mountPath);
        }

        /// <summary>
        /// Test ReadPkiDer
        /// </summary>
        [Fact]
        public void ReadPkiDerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadPkiDer(mountPath);
        }

        /// <summary>
        /// Test ReadPkiIssuerRefCrlPemDerDeltaPem
        /// </summary>
        [Fact]
        public void ReadPkiIssuerRefCrlPemDerDeltaPemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //string mountPath = null;
            //instance.ReadPkiIssuerRefCrlPemDerDeltaPem(issuerRef, mountPath);
        }

        /// <summary>
        /// Test ReadPkiIssuerRefDerPem
        /// </summary>
        [Fact]
        public void ReadPkiIssuerRefDerPemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //string mountPath = null;
            //instance.ReadPkiIssuerRefDerPem(issuerRef, mountPath);
        }

        /// <summary>
        /// Test ReadPkiJson
        /// </summary>
        [Fact]
        public void ReadPkiJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadPkiJson(mountPath);
        }

        /// <summary>
        /// Test ReadPkiKeyKeyRef
        /// </summary>
        [Fact]
        public void ReadPkiKeyKeyRefTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string keyRef = null;
            //string mountPath = null;
            //instance.ReadPkiKeyKeyRef(keyRef, mountPath);
        }

        /// <summary>
        /// Test ReadPkiOcspReq
        /// </summary>
        [Fact]
        public void ReadPkiOcspReqTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string req = null;
            //string mountPath = null;
            //instance.ReadPkiOcspReq(req, mountPath);
        }

        /// <summary>
        /// Test ReadPkiPem
        /// </summary>
        [Fact]
        public void ReadPkiPemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadPkiPem(mountPath);
        }

        /// <summary>
        /// Test ReadPkiTidyStatus
        /// </summary>
        [Fact]
        public void ReadPkiTidyStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadPkiTidyStatus(mountPath);
        }

        /// <summary>
        /// Test ReadSecretDataPath
        /// </summary>
        [Fact]
        public void ReadSecretDataPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string mountPath = null;
            //instance.ReadSecretDataPath(path, mountPath);
        }

        /// <summary>
        /// Test ReadSecretMetadataPath
        /// </summary>
        [Fact]
        public void ReadSecretMetadataPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string mountPath = null;
            //string list = null;
            //instance.ReadSecretMetadataPath(path, mountPath, list);
        }

        /// <summary>
        /// Test ReadSecretSubkeysPath
        /// </summary>
        [Fact]
        public void ReadSecretSubkeysPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string mountPath = null;
            //instance.ReadSecretSubkeysPath(path, mountPath);
        }

        /// <summary>
        /// Test ReadSshConfigZeroaddress
        /// </summary>
        [Fact]
        public void ReadSshConfigZeroaddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadSshConfigZeroaddress(mountPath);
        }

        /// <summary>
        /// Test ReadSshPublicKey
        /// </summary>
        [Fact]
        public void ReadSshPublicKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadSshPublicKey(mountPath);
        }

        /// <summary>
        /// Test ReadSshRolesRole
        /// </summary>
        [Fact]
        public void ReadSshRolesRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //string mountPath = null;
            //instance.ReadSshRolesRole(role, mountPath);
        }

        /// <summary>
        /// Test ReadTotpCodeName
        /// </summary>
        [Fact]
        public void ReadTotpCodeNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.ReadTotpCodeName(name, mountPath);
        }

        /// <summary>
        /// Test ReadTotpKeysName
        /// </summary>
        [Fact]
        public void ReadTotpKeysNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.ReadTotpKeysName(name, mountPath);
        }

        /// <summary>
        /// Test ReadTransitBackupName
        /// </summary>
        [Fact]
        public void ReadTransitBackupNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.ReadTransitBackupName(name, mountPath);
        }

        /// <summary>
        /// Test ReadTransitCacheConfig
        /// </summary>
        [Fact]
        public void ReadTransitCacheConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadTransitCacheConfig(mountPath);
        }

        /// <summary>
        /// Test ReadTransitExportTypeName
        /// </summary>
        [Fact]
        public void ReadTransitExportTypeNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string type = null;
            //string mountPath = null;
            //instance.ReadTransitExportTypeName(name, type, mountPath);
        }

        /// <summary>
        /// Test ReadTransitExportTypeNameVersion
        /// </summary>
        [Fact]
        public void ReadTransitExportTypeNameVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string type = null;
            //string version = null;
            //string mountPath = null;
            //instance.ReadTransitExportTypeNameVersion(name, type, version, mountPath);
        }

        /// <summary>
        /// Test ReadTransitWrappingKey
        /// </summary>
        [Fact]
        public void ReadTransitWrappingKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.ReadTransitWrappingKey(mountPath);
        }

        /// <summary>
        /// Test UpdateAwsConfigLease
        /// </summary>
        [Fact]
        public void UpdateAwsConfigLeaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //AwsConfigLeaseRequest awsConfigLeaseRequest = null;
            //instance.UpdateAwsConfigLease(mountPath, awsConfigLeaseRequest);
        }

        /// <summary>
        /// Test UpdateAwsConfigRoot
        /// </summary>
        [Fact]
        public void UpdateAwsConfigRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //AwsConfigRootRequest awsConfigRootRequest = null;
            //instance.UpdateAwsConfigRoot(mountPath, awsConfigRootRequest);
        }

        /// <summary>
        /// Test UpdateAwsCreds
        /// </summary>
        [Fact]
        public void UpdateAwsCredsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //AwsCredsRequest awsCredsRequest = null;
            //instance.UpdateAwsCreds(mountPath, awsCredsRequest);
        }

        /// <summary>
        /// Test UpdateAwsRolesName
        /// </summary>
        [Fact]
        public void UpdateAwsRolesNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //AwsRolesRequest awsRolesRequest = null;
            //instance.UpdateAwsRolesName(name, mountPath, awsRolesRequest);
        }

        /// <summary>
        /// Test UpdateAwsStsName
        /// </summary>
        [Fact]
        public void UpdateAwsStsNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //AwsStsRequest awsStsRequest = null;
            //instance.UpdateAwsStsName(name, mountPath, awsStsRequest);
        }

        /// <summary>
        /// Test UpdateCubbyholePath
        /// </summary>
        [Fact]
        public void UpdateCubbyholePathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string mountPath = null;
            //instance.UpdateCubbyholePath(path, mountPath);
        }

        /// <summary>
        /// Test UpdateGcpConfig
        /// </summary>
        [Fact]
        public void UpdateGcpConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //GcpConfigRequest gcpConfigRequest = null;
            //instance.UpdateGcpConfig(mountPath, gcpConfigRequest);
        }

        /// <summary>
        /// Test UpdateGcpConfigRotateRoot
        /// </summary>
        [Fact]
        public void UpdateGcpConfigRotateRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.UpdateGcpConfigRotateRoot(mountPath);
        }

        /// <summary>
        /// Test UpdateGcpKeyRoleset
        /// </summary>
        [Fact]
        public void UpdateGcpKeyRolesetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleset = null;
            //string mountPath = null;
            //GcpKeyRequest gcpKeyRequest = null;
            //instance.UpdateGcpKeyRoleset(roleset, mountPath, gcpKeyRequest);
        }

        /// <summary>
        /// Test UpdateGcpRolesetName
        /// </summary>
        [Fact]
        public void UpdateGcpRolesetNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //GcpRolesetRequest gcpRolesetRequest = null;
            //instance.UpdateGcpRolesetName(name, mountPath, gcpRolesetRequest);
        }

        /// <summary>
        /// Test UpdateGcpRolesetNameRotate
        /// </summary>
        [Fact]
        public void UpdateGcpRolesetNameRotateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.UpdateGcpRolesetNameRotate(name, mountPath);
        }

        /// <summary>
        /// Test UpdateGcpRolesetNameRotateKey
        /// </summary>
        [Fact]
        public void UpdateGcpRolesetNameRotateKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.UpdateGcpRolesetNameRotateKey(name, mountPath);
        }

        /// <summary>
        /// Test UpdateGcpRolesetRolesetKey
        /// </summary>
        [Fact]
        public void UpdateGcpRolesetRolesetKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleset = null;
            //string mountPath = null;
            //GcpRolesetKeyRequest gcpRolesetKeyRequest = null;
            //instance.UpdateGcpRolesetRolesetKey(roleset, mountPath, gcpRolesetKeyRequest);
        }

        /// <summary>
        /// Test UpdateGcpRolesetRolesetToken
        /// </summary>
        [Fact]
        public void UpdateGcpRolesetRolesetTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleset = null;
            //string mountPath = null;
            //instance.UpdateGcpRolesetRolesetToken(roleset, mountPath);
        }

        /// <summary>
        /// Test UpdateGcpStaticAccountName
        /// </summary>
        [Fact]
        public void UpdateGcpStaticAccountNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //GcpStaticAccountRequest gcpStaticAccountRequest = null;
            //instance.UpdateGcpStaticAccountName(name, mountPath, gcpStaticAccountRequest);
        }

        /// <summary>
        /// Test UpdateGcpStaticAccountNameKey
        /// </summary>
        [Fact]
        public void UpdateGcpStaticAccountNameKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //GcpStaticAccountKeyRequest gcpStaticAccountKeyRequest = null;
            //instance.UpdateGcpStaticAccountNameKey(name, mountPath, gcpStaticAccountKeyRequest);
        }

        /// <summary>
        /// Test UpdateGcpStaticAccountNameRotateKey
        /// </summary>
        [Fact]
        public void UpdateGcpStaticAccountNameRotateKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.UpdateGcpStaticAccountNameRotateKey(name, mountPath);
        }

        /// <summary>
        /// Test UpdateGcpStaticAccountNameToken
        /// </summary>
        [Fact]
        public void UpdateGcpStaticAccountNameTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.UpdateGcpStaticAccountNameToken(name, mountPath);
        }

        /// <summary>
        /// Test UpdateGcpTokenRoleset
        /// </summary>
        [Fact]
        public void UpdateGcpTokenRolesetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleset = null;
            //string mountPath = null;
            //instance.UpdateGcpTokenRoleset(roleset, mountPath);
        }

        /// <summary>
        /// Test UpdateGcpkmsDecryptKey
        /// </summary>
        [Fact]
        public void UpdateGcpkmsDecryptKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string mountPath = null;
            //GcpkmsDecryptRequest gcpkmsDecryptRequest = null;
            //instance.UpdateGcpkmsDecryptKey(key, mountPath, gcpkmsDecryptRequest);
        }

        /// <summary>
        /// Test UpdateGcpkmsEncryptKey
        /// </summary>
        [Fact]
        public void UpdateGcpkmsEncryptKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string mountPath = null;
            //GcpkmsEncryptRequest gcpkmsEncryptRequest = null;
            //instance.UpdateGcpkmsEncryptKey(key, mountPath, gcpkmsEncryptRequest);
        }

        /// <summary>
        /// Test UpdateGcpkmsKeysConfigKey
        /// </summary>
        [Fact]
        public void UpdateGcpkmsKeysConfigKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string mountPath = null;
            //GcpkmsKeysConfigRequest gcpkmsKeysConfigRequest = null;
            //instance.UpdateGcpkmsKeysConfigKey(key, mountPath, gcpkmsKeysConfigRequest);
        }

        /// <summary>
        /// Test UpdateGcpkmsKeysDeregisterKey
        /// </summary>
        [Fact]
        public void UpdateGcpkmsKeysDeregisterKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string mountPath = null;
            //instance.UpdateGcpkmsKeysDeregisterKey(key, mountPath);
        }

        /// <summary>
        /// Test UpdateGcpkmsKeysKey
        /// </summary>
        [Fact]
        public void UpdateGcpkmsKeysKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string mountPath = null;
            //GcpkmsKeysRequest gcpkmsKeysRequest = null;
            //instance.UpdateGcpkmsKeysKey(key, mountPath, gcpkmsKeysRequest);
        }

        /// <summary>
        /// Test UpdateGcpkmsKeysRegisterKey
        /// </summary>
        [Fact]
        public void UpdateGcpkmsKeysRegisterKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string mountPath = null;
            //GcpkmsKeysRegisterRequest gcpkmsKeysRegisterRequest = null;
            //instance.UpdateGcpkmsKeysRegisterKey(key, mountPath, gcpkmsKeysRegisterRequest);
        }

        /// <summary>
        /// Test UpdateGcpkmsKeysRotateKey
        /// </summary>
        [Fact]
        public void UpdateGcpkmsKeysRotateKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string mountPath = null;
            //instance.UpdateGcpkmsKeysRotateKey(key, mountPath);
        }

        /// <summary>
        /// Test UpdateGcpkmsKeysTrimKey
        /// </summary>
        [Fact]
        public void UpdateGcpkmsKeysTrimKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string mountPath = null;
            //instance.UpdateGcpkmsKeysTrimKey(key, mountPath);
        }

        /// <summary>
        /// Test UpdateGcpkmsReencryptKey
        /// </summary>
        [Fact]
        public void UpdateGcpkmsReencryptKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string mountPath = null;
            //GcpkmsReencryptRequest gcpkmsReencryptRequest = null;
            //instance.UpdateGcpkmsReencryptKey(key, mountPath, gcpkmsReencryptRequest);
        }

        /// <summary>
        /// Test UpdateGcpkmsSignKey
        /// </summary>
        [Fact]
        public void UpdateGcpkmsSignKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string mountPath = null;
            //GcpkmsSignRequest gcpkmsSignRequest = null;
            //instance.UpdateGcpkmsSignKey(key, mountPath, gcpkmsSignRequest);
        }

        /// <summary>
        /// Test UpdateGcpkmsVerifyKey
        /// </summary>
        [Fact]
        public void UpdateGcpkmsVerifyKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string mountPath = null;
            //GcpkmsVerifyRequest gcpkmsVerifyRequest = null;
            //instance.UpdateGcpkmsVerifyKey(key, mountPath, gcpkmsVerifyRequest);
        }

        /// <summary>
        /// Test UpdateLdapLibraryManageNameCheckIn
        /// </summary>
        [Fact]
        public void UpdateLdapLibraryManageNameCheckInTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //LdapLibraryManageCheckInRequest ldapLibraryManageCheckInRequest = null;
            //instance.UpdateLdapLibraryManageNameCheckIn(name, mountPath, ldapLibraryManageCheckInRequest);
        }

        /// <summary>
        /// Test UpdateLdapLibraryName
        /// </summary>
        [Fact]
        public void UpdateLdapLibraryNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //LdapLibraryRequest ldapLibraryRequest = null;
            //instance.UpdateLdapLibraryName(name, mountPath, ldapLibraryRequest);
        }

        /// <summary>
        /// Test UpdateLdapLibraryNameCheckIn
        /// </summary>
        [Fact]
        public void UpdateLdapLibraryNameCheckInTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //LdapLibraryCheckInRequest ldapLibraryCheckInRequest = null;
            //instance.UpdateLdapLibraryNameCheckIn(name, mountPath, ldapLibraryCheckInRequest);
        }

        /// <summary>
        /// Test UpdateLdapLibraryNameCheckOut
        /// </summary>
        [Fact]
        public void UpdateLdapLibraryNameCheckOutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //LdapLibraryCheckOutRequest ldapLibraryCheckOutRequest = null;
            //instance.UpdateLdapLibraryNameCheckOut(name, mountPath, ldapLibraryCheckOutRequest);
        }

        /// <summary>
        /// Test UpdateLdapRoleName
        /// </summary>
        [Fact]
        public void UpdateLdapRoleNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //LdapRoleRequest ldapRoleRequest = null;
            //instance.UpdateLdapRoleName(name, mountPath, ldapRoleRequest);
        }

        /// <summary>
        /// Test UpdateLdapRotateRoleName
        /// </summary>
        [Fact]
        public void UpdateLdapRotateRoleNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.UpdateLdapRotateRoleName(name, mountPath);
        }

        /// <summary>
        /// Test UpdateLdapRotateRoot
        /// </summary>
        [Fact]
        public void UpdateLdapRotateRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.UpdateLdapRotateRoot(mountPath);
        }

        /// <summary>
        /// Test UpdateLdapStaticRoleName
        /// </summary>
        [Fact]
        public void UpdateLdapStaticRoleNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //LdapStaticRoleRequest ldapStaticRoleRequest = null;
            //instance.UpdateLdapStaticRoleName(name, mountPath, ldapStaticRoleRequest);
        }

        /// <summary>
        /// Test UpdateNomadConfigAccess
        /// </summary>
        [Fact]
        public void UpdateNomadConfigAccessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //NomadConfigAccessRequest nomadConfigAccessRequest = null;
            //instance.UpdateNomadConfigAccess(mountPath, nomadConfigAccessRequest);
        }

        /// <summary>
        /// Test UpdatePkiBundle
        /// </summary>
        [Fact]
        public void UpdatePkiBundleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //PkiBundleRequest pkiBundleRequest = null;
            //instance.UpdatePkiBundle(mountPath, pkiBundleRequest);
        }

        /// <summary>
        /// Test UpdatePkiCert
        /// </summary>
        [Fact]
        public void UpdatePkiCertTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //PkiCertRequest pkiCertRequest = null;
            //instance.UpdatePkiCert(mountPath, pkiCertRequest);
        }

        /// <summary>
        /// Test UpdatePkiConfigAutoTidy
        /// </summary>
        [Fact]
        public void UpdatePkiConfigAutoTidyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //PkiConfigAutoTidyRequest pkiConfigAutoTidyRequest = null;
            //instance.UpdatePkiConfigAutoTidy(mountPath, pkiConfigAutoTidyRequest);
        }

        /// <summary>
        /// Test UpdatePkiConfigCa
        /// </summary>
        [Fact]
        public void UpdatePkiConfigCaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //PkiConfigCaRequest pkiConfigCaRequest = null;
            //instance.UpdatePkiConfigCa(mountPath, pkiConfigCaRequest);
        }

        /// <summary>
        /// Test UpdatePkiConfigCrl
        /// </summary>
        [Fact]
        public void UpdatePkiConfigCrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //PkiConfigCrlRequest pkiConfigCrlRequest = null;
            //instance.UpdatePkiConfigCrl(mountPath, pkiConfigCrlRequest);
        }

        /// <summary>
        /// Test UpdatePkiConfigIssuers
        /// </summary>
        [Fact]
        public void UpdatePkiConfigIssuersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //PkiConfigIssuersRequest pkiConfigIssuersRequest = null;
            //instance.UpdatePkiConfigIssuers(mountPath, pkiConfigIssuersRequest);
        }

        /// <summary>
        /// Test UpdatePkiConfigKeys
        /// </summary>
        [Fact]
        public void UpdatePkiConfigKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //PkiConfigKeysRequest pkiConfigKeysRequest = null;
            //instance.UpdatePkiConfigKeys(mountPath, pkiConfigKeysRequest);
        }

        /// <summary>
        /// Test UpdatePkiConfigUrls
        /// </summary>
        [Fact]
        public void UpdatePkiConfigUrlsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //PkiConfigUrlsRequest pkiConfigUrlsRequest = null;
            //instance.UpdatePkiConfigUrls(mountPath, pkiConfigUrlsRequest);
        }

        /// <summary>
        /// Test UpdatePkiIntermediateCrossSign
        /// </summary>
        [Fact]
        public void UpdatePkiIntermediateCrossSignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //PkiIntermediateCrossSignRequest pkiIntermediateCrossSignRequest = null;
            //instance.UpdatePkiIntermediateCrossSign(mountPath, pkiIntermediateCrossSignRequest);
        }

        /// <summary>
        /// Test UpdatePkiIntermediateGenerateExported
        /// </summary>
        [Fact]
        public void UpdatePkiIntermediateGenerateExportedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string exported = null;
            //string mountPath = null;
            //PkiIntermediateGenerateRequest pkiIntermediateGenerateRequest = null;
            //instance.UpdatePkiIntermediateGenerateExported(exported, mountPath, pkiIntermediateGenerateRequest);
        }

        /// <summary>
        /// Test UpdatePkiIntermediateSetSigned
        /// </summary>
        [Fact]
        public void UpdatePkiIntermediateSetSignedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //PkiIntermediateSetSignedRequest pkiIntermediateSetSignedRequest = null;
            //instance.UpdatePkiIntermediateSetSigned(mountPath, pkiIntermediateSetSignedRequest);
        }

        /// <summary>
        /// Test UpdatePkiIssueRole
        /// </summary>
        [Fact]
        public void UpdatePkiIssueRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //string mountPath = null;
            //PkiIssueRequest pkiIssueRequest = null;
            //instance.UpdatePkiIssueRole(role, mountPath, pkiIssueRequest);
        }

        /// <summary>
        /// Test UpdatePkiIssuerIssuerRefIssueRole
        /// </summary>
        [Fact]
        public void UpdatePkiIssuerIssuerRefIssueRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //string role = null;
            //string mountPath = null;
            //PkiIssuerIssueRequest pkiIssuerIssueRequest = null;
            //instance.UpdatePkiIssuerIssuerRefIssueRole(issuerRef, role, mountPath, pkiIssuerIssueRequest);
        }

        /// <summary>
        /// Test UpdatePkiIssuerIssuerRefRevoke
        /// </summary>
        [Fact]
        public void UpdatePkiIssuerIssuerRefRevokeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //string mountPath = null;
            //instance.UpdatePkiIssuerIssuerRefRevoke(issuerRef, mountPath);
        }

        /// <summary>
        /// Test UpdatePkiIssuerIssuerRefSignIntermediate
        /// </summary>
        [Fact]
        public void UpdatePkiIssuerIssuerRefSignIntermediateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //string mountPath = null;
            //PkiIssuerSignIntermediateRequest pkiIssuerSignIntermediateRequest = null;
            //instance.UpdatePkiIssuerIssuerRefSignIntermediate(issuerRef, mountPath, pkiIssuerSignIntermediateRequest);
        }

        /// <summary>
        /// Test UpdatePkiIssuerIssuerRefSignRole
        /// </summary>
        [Fact]
        public void UpdatePkiIssuerIssuerRefSignRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //string role = null;
            //string mountPath = null;
            //PkiIssuerSignRequest pkiIssuerSignRequest = null;
            //instance.UpdatePkiIssuerIssuerRefSignRole(issuerRef, role, mountPath, pkiIssuerSignRequest);
        }

        /// <summary>
        /// Test UpdatePkiIssuerIssuerRefSignSelfIssued
        /// </summary>
        [Fact]
        public void UpdatePkiIssuerIssuerRefSignSelfIssuedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //string mountPath = null;
            //PkiIssuerSignSelfIssuedRequest pkiIssuerSignSelfIssuedRequest = null;
            //instance.UpdatePkiIssuerIssuerRefSignSelfIssued(issuerRef, mountPath, pkiIssuerSignSelfIssuedRequest);
        }

        /// <summary>
        /// Test UpdatePkiIssuerIssuerRefSignVerbatim
        /// </summary>
        [Fact]
        public void UpdatePkiIssuerIssuerRefSignVerbatimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //string mountPath = null;
            //PkiIssuerSignVerbatimRequest pkiIssuerSignVerbatimRequest = null;
            //instance.UpdatePkiIssuerIssuerRefSignVerbatim(issuerRef, mountPath, pkiIssuerSignVerbatimRequest);
        }

        /// <summary>
        /// Test UpdatePkiIssuerIssuerRefSignVerbatimRole
        /// </summary>
        [Fact]
        public void UpdatePkiIssuerIssuerRefSignVerbatimRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //string role = null;
            //string mountPath = null;
            //PkiIssuerSignVerbatimRequest pkiIssuerSignVerbatimRequest = null;
            //instance.UpdatePkiIssuerIssuerRefSignVerbatimRole(issuerRef, role, mountPath, pkiIssuerSignVerbatimRequest);
        }

        /// <summary>
        /// Test UpdatePkiIssuersGenerateIntermediateExported
        /// </summary>
        [Fact]
        public void UpdatePkiIssuersGenerateIntermediateExportedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string exported = null;
            //string mountPath = null;
            //PkiIssuersGenerateIntermediateRequest pkiIssuersGenerateIntermediateRequest = null;
            //instance.UpdatePkiIssuersGenerateIntermediateExported(exported, mountPath, pkiIssuersGenerateIntermediateRequest);
        }

        /// <summary>
        /// Test UpdatePkiIssuersGenerateRootExported
        /// </summary>
        [Fact]
        public void UpdatePkiIssuersGenerateRootExportedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string exported = null;
            //string mountPath = null;
            //PkiIssuersGenerateRootRequest pkiIssuersGenerateRootRequest = null;
            //instance.UpdatePkiIssuersGenerateRootExported(exported, mountPath, pkiIssuersGenerateRootRequest);
        }

        /// <summary>
        /// Test UpdatePkiJson
        /// </summary>
        [Fact]
        public void UpdatePkiJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //PkiJsonRequest pkiJsonRequest = null;
            //instance.UpdatePkiJson(mountPath, pkiJsonRequest);
        }

        /// <summary>
        /// Test UpdatePkiKeyKeyRef
        /// </summary>
        [Fact]
        public void UpdatePkiKeyKeyRefTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string keyRef = null;
            //string mountPath = null;
            //PkiKeyRequest pkiKeyRequest = null;
            //instance.UpdatePkiKeyKeyRef(keyRef, mountPath, pkiKeyRequest);
        }

        /// <summary>
        /// Test UpdatePkiKeysImport
        /// </summary>
        [Fact]
        public void UpdatePkiKeysImportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //PkiKeysImportRequest pkiKeysImportRequest = null;
            //instance.UpdatePkiKeysImport(mountPath, pkiKeysImportRequest);
        }

        /// <summary>
        /// Test UpdatePkiKms
        /// </summary>
        [Fact]
        public void UpdatePkiKmsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //PkiKmsRequest pkiKmsRequest = null;
            //instance.UpdatePkiKms(mountPath, pkiKmsRequest);
        }

        /// <summary>
        /// Test UpdatePkiOcsp
        /// </summary>
        [Fact]
        public void UpdatePkiOcspTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.UpdatePkiOcsp(mountPath);
        }

        /// <summary>
        /// Test UpdatePkiRevoke
        /// </summary>
        [Fact]
        public void UpdatePkiRevokeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //PkiRevokeRequest pkiRevokeRequest = null;
            //instance.UpdatePkiRevoke(mountPath, pkiRevokeRequest);
        }

        /// <summary>
        /// Test UpdatePkiRevokeWithKey
        /// </summary>
        [Fact]
        public void UpdatePkiRevokeWithKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //PkiRevokeWithKeyRequest pkiRevokeWithKeyRequest = null;
            //instance.UpdatePkiRevokeWithKey(mountPath, pkiRevokeWithKeyRequest);
        }

        /// <summary>
        /// Test UpdatePkiRootGenerateExported
        /// </summary>
        [Fact]
        public void UpdatePkiRootGenerateExportedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string exported = null;
            //string mountPath = null;
            //PkiRootGenerateRequest pkiRootGenerateRequest = null;
            //instance.UpdatePkiRootGenerateExported(exported, mountPath, pkiRootGenerateRequest);
        }

        /// <summary>
        /// Test UpdatePkiRootReplace
        /// </summary>
        [Fact]
        public void UpdatePkiRootReplaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //PkiRootReplaceRequest pkiRootReplaceRequest = null;
            //instance.UpdatePkiRootReplace(mountPath, pkiRootReplaceRequest);
        }

        /// <summary>
        /// Test UpdatePkiRootRotateExported
        /// </summary>
        [Fact]
        public void UpdatePkiRootRotateExportedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string exported = null;
            //string mountPath = null;
            //PkiRootRotateRequest pkiRootRotateRequest = null;
            //instance.UpdatePkiRootRotateExported(exported, mountPath, pkiRootRotateRequest);
        }

        /// <summary>
        /// Test UpdatePkiRootSignIntermediate
        /// </summary>
        [Fact]
        public void UpdatePkiRootSignIntermediateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //PkiRootSignIntermediateRequest pkiRootSignIntermediateRequest = null;
            //instance.UpdatePkiRootSignIntermediate(mountPath, pkiRootSignIntermediateRequest);
        }

        /// <summary>
        /// Test UpdatePkiRootSignSelfIssued
        /// </summary>
        [Fact]
        public void UpdatePkiRootSignSelfIssuedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //PkiRootSignSelfIssuedRequest pkiRootSignSelfIssuedRequest = null;
            //instance.UpdatePkiRootSignSelfIssued(mountPath, pkiRootSignSelfIssuedRequest);
        }

        /// <summary>
        /// Test UpdatePkiSignRole
        /// </summary>
        [Fact]
        public void UpdatePkiSignRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //string mountPath = null;
            //PkiSignRequest pkiSignRequest = null;
            //instance.UpdatePkiSignRole(role, mountPath, pkiSignRequest);
        }

        /// <summary>
        /// Test UpdatePkiSignVerbatim
        /// </summary>
        [Fact]
        public void UpdatePkiSignVerbatimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //PkiSignVerbatimRequest pkiSignVerbatimRequest = null;
            //instance.UpdatePkiSignVerbatim(mountPath, pkiSignVerbatimRequest);
        }

        /// <summary>
        /// Test UpdatePkiSignVerbatimRole
        /// </summary>
        [Fact]
        public void UpdatePkiSignVerbatimRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //string mountPath = null;
            //PkiSignVerbatimRequest pkiSignVerbatimRequest = null;
            //instance.UpdatePkiSignVerbatimRole(role, mountPath, pkiSignVerbatimRequest);
        }

        /// <summary>
        /// Test UpdatePkiTidy
        /// </summary>
        [Fact]
        public void UpdatePkiTidyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //PkiTidyRequest pkiTidyRequest = null;
            //instance.UpdatePkiTidy(mountPath, pkiTidyRequest);
        }

        /// <summary>
        /// Test UpdatePkiTidyCancel
        /// </summary>
        [Fact]
        public void UpdatePkiTidyCancelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //instance.UpdatePkiTidyCancel(mountPath);
        }

        /// <summary>
        /// Test UpdateRabbitmqConfigConnection
        /// </summary>
        [Fact]
        public void UpdateRabbitmqConfigConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //RabbitmqConfigConnectionRequest rabbitmqConfigConnectionRequest = null;
            //instance.UpdateRabbitmqConfigConnection(mountPath, rabbitmqConfigConnectionRequest);
        }

        /// <summary>
        /// Test UpdateSecretDataPath
        /// </summary>
        [Fact]
        public void UpdateSecretDataPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string mountPath = null;
            //KvDataRequest kvDataRequest = null;
            //instance.UpdateSecretDataPath(path, mountPath, kvDataRequest);
        }

        /// <summary>
        /// Test UpdateSecretDeletePath
        /// </summary>
        [Fact]
        public void UpdateSecretDeletePathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string mountPath = null;
            //KvDeleteRequest kvDeleteRequest = null;
            //instance.UpdateSecretDeletePath(path, mountPath, kvDeleteRequest);
        }

        /// <summary>
        /// Test UpdateSecretDestroyPath
        /// </summary>
        [Fact]
        public void UpdateSecretDestroyPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string mountPath = null;
            //KvDestroyRequest kvDestroyRequest = null;
            //instance.UpdateSecretDestroyPath(path, mountPath, kvDestroyRequest);
        }

        /// <summary>
        /// Test UpdateSecretMetadataPath
        /// </summary>
        [Fact]
        public void UpdateSecretMetadataPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string mountPath = null;
            //KvMetadataRequest kvMetadataRequest = null;
            //instance.UpdateSecretMetadataPath(path, mountPath, kvMetadataRequest);
        }

        /// <summary>
        /// Test UpdateSecretUndeletePath
        /// </summary>
        [Fact]
        public void UpdateSecretUndeletePathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string mountPath = null;
            //KvUndeleteRequest kvUndeleteRequest = null;
            //instance.UpdateSecretUndeletePath(path, mountPath, kvUndeleteRequest);
        }

        /// <summary>
        /// Test UpdateSshConfigZeroaddress
        /// </summary>
        [Fact]
        public void UpdateSshConfigZeroaddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //SshConfigZeroaddressRequest sshConfigZeroaddressRequest = null;
            //instance.UpdateSshConfigZeroaddress(mountPath, sshConfigZeroaddressRequest);
        }

        /// <summary>
        /// Test UpdateSshKeysKeyName
        /// </summary>
        [Fact]
        public void UpdateSshKeysKeyNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string keyName = null;
            //string mountPath = null;
            //SshKeysRequest sshKeysRequest = null;
            //instance.UpdateSshKeysKeyName(keyName, mountPath, sshKeysRequest);
        }

        /// <summary>
        /// Test UpdateSshLookup
        /// </summary>
        [Fact]
        public void UpdateSshLookupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //SshLookupRequest sshLookupRequest = null;
            //instance.UpdateSshLookup(mountPath, sshLookupRequest);
        }

        /// <summary>
        /// Test UpdateSshRolesRole
        /// </summary>
        [Fact]
        public void UpdateSshRolesRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //string mountPath = null;
            //SshRolesRequest sshRolesRequest = null;
            //instance.UpdateSshRolesRole(role, mountPath, sshRolesRequest);
        }

        /// <summary>
        /// Test UpdateSshVerify
        /// </summary>
        [Fact]
        public void UpdateSshVerifyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //SshVerifyRequest sshVerifyRequest = null;
            //instance.UpdateSshVerify(mountPath, sshVerifyRequest);
        }

        /// <summary>
        /// Test UpdateTotpCodeName
        /// </summary>
        [Fact]
        public void UpdateTotpCodeNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //TotpCodeRequest totpCodeRequest = null;
            //instance.UpdateTotpCodeName(name, mountPath, totpCodeRequest);
        }

        /// <summary>
        /// Test UpdateTotpKeysName
        /// </summary>
        [Fact]
        public void UpdateTotpKeysNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //TotpKeysRequest totpKeysRequest = null;
            //instance.UpdateTotpKeysName(name, mountPath, totpKeysRequest);
        }

        /// <summary>
        /// Test UpdateTransitCacheConfig
        /// </summary>
        [Fact]
        public void UpdateTransitCacheConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //TransitCacheConfigRequest transitCacheConfigRequest = null;
            //instance.UpdateTransitCacheConfig(mountPath, transitCacheConfigRequest);
        }

        /// <summary>
        /// Test UpdateTransitDatakeyPlaintextName
        /// </summary>
        [Fact]
        public void UpdateTransitDatakeyPlaintextNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string plaintext = null;
            //string mountPath = null;
            //TransitDatakeyRequest transitDatakeyRequest = null;
            //instance.UpdateTransitDatakeyPlaintextName(name, plaintext, mountPath, transitDatakeyRequest);
        }

        /// <summary>
        /// Test UpdateTransitDecryptName
        /// </summary>
        [Fact]
        public void UpdateTransitDecryptNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //TransitDecryptRequest transitDecryptRequest = null;
            //instance.UpdateTransitDecryptName(name, mountPath, transitDecryptRequest);
        }

        /// <summary>
        /// Test UpdateTransitEncryptName
        /// </summary>
        [Fact]
        public void UpdateTransitEncryptNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //TransitEncryptRequest transitEncryptRequest = null;
            //instance.UpdateTransitEncryptName(name, mountPath, transitEncryptRequest);
        }

        /// <summary>
        /// Test UpdateTransitHash
        /// </summary>
        [Fact]
        public void UpdateTransitHashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //TransitHashRequest transitHashRequest = null;
            //instance.UpdateTransitHash(mountPath, transitHashRequest);
        }

        /// <summary>
        /// Test UpdateTransitHashUrlalgorithm
        /// </summary>
        [Fact]
        public void UpdateTransitHashUrlalgorithmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string urlalgorithm = null;
            //string mountPath = null;
            //TransitHashRequest transitHashRequest = null;
            //instance.UpdateTransitHashUrlalgorithm(urlalgorithm, mountPath, transitHashRequest);
        }

        /// <summary>
        /// Test UpdateTransitHmacName
        /// </summary>
        [Fact]
        public void UpdateTransitHmacNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //TransitHmacRequest transitHmacRequest = null;
            //instance.UpdateTransitHmacName(name, mountPath, transitHmacRequest);
        }

        /// <summary>
        /// Test UpdateTransitHmacNameUrlalgorithm
        /// </summary>
        [Fact]
        public void UpdateTransitHmacNameUrlalgorithmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string urlalgorithm = null;
            //string mountPath = null;
            //TransitHmacRequest transitHmacRequest = null;
            //instance.UpdateTransitHmacNameUrlalgorithm(name, urlalgorithm, mountPath, transitHmacRequest);
        }

        /// <summary>
        /// Test UpdateTransitKeysNameConfig
        /// </summary>
        [Fact]
        public void UpdateTransitKeysNameConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //TransitKeysConfigRequest transitKeysConfigRequest = null;
            //instance.UpdateTransitKeysNameConfig(name, mountPath, transitKeysConfigRequest);
        }

        /// <summary>
        /// Test UpdateTransitKeysNameImport
        /// </summary>
        [Fact]
        public void UpdateTransitKeysNameImportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //TransitKeysImportRequest transitKeysImportRequest = null;
            //instance.UpdateTransitKeysNameImport(name, mountPath, transitKeysImportRequest);
        }

        /// <summary>
        /// Test UpdateTransitKeysNameImportVersion
        /// </summary>
        [Fact]
        public void UpdateTransitKeysNameImportVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //TransitKeysImportVersionRequest transitKeysImportVersionRequest = null;
            //instance.UpdateTransitKeysNameImportVersion(name, mountPath, transitKeysImportVersionRequest);
        }

        /// <summary>
        /// Test UpdateTransitKeysNameRotate
        /// </summary>
        [Fact]
        public void UpdateTransitKeysNameRotateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //instance.UpdateTransitKeysNameRotate(name, mountPath);
        }

        /// <summary>
        /// Test UpdateTransitKeysNameTrim
        /// </summary>
        [Fact]
        public void UpdateTransitKeysNameTrimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //TransitKeysTrimRequest transitKeysTrimRequest = null;
            //instance.UpdateTransitKeysNameTrim(name, mountPath, transitKeysTrimRequest);
        }

        /// <summary>
        /// Test UpdateTransitRandom
        /// </summary>
        [Fact]
        public void UpdateTransitRandomTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //TransitRandomRequest transitRandomRequest = null;
            //instance.UpdateTransitRandom(mountPath, transitRandomRequest);
        }

        /// <summary>
        /// Test UpdateTransitRandomSource
        /// </summary>
        [Fact]
        public void UpdateTransitRandomSourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;
            //string mountPath = null;
            //TransitRandomRequest transitRandomRequest = null;
            //instance.UpdateTransitRandomSource(source, mountPath, transitRandomRequest);
        }

        /// <summary>
        /// Test UpdateTransitRandomSourceUrlbytes
        /// </summary>
        [Fact]
        public void UpdateTransitRandomSourceUrlbytesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;
            //string urlbytes = null;
            //string mountPath = null;
            //TransitRandomRequest transitRandomRequest = null;
            //instance.UpdateTransitRandomSourceUrlbytes(source, urlbytes, mountPath, transitRandomRequest);
        }

        /// <summary>
        /// Test UpdateTransitRandomUrlbytes
        /// </summary>
        [Fact]
        public void UpdateTransitRandomUrlbytesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string urlbytes = null;
            //string mountPath = null;
            //TransitRandomRequest transitRandomRequest = null;
            //instance.UpdateTransitRandomUrlbytes(urlbytes, mountPath, transitRandomRequest);
        }

        /// <summary>
        /// Test UpdateTransitRestore
        /// </summary>
        [Fact]
        public void UpdateTransitRestoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mountPath = null;
            //TransitRestoreRequest transitRestoreRequest = null;
            //instance.UpdateTransitRestore(mountPath, transitRestoreRequest);
        }

        /// <summary>
        /// Test UpdateTransitRestoreName
        /// </summary>
        [Fact]
        public void UpdateTransitRestoreNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //TransitRestoreRequest transitRestoreRequest = null;
            //instance.UpdateTransitRestoreName(name, mountPath, transitRestoreRequest);
        }

        /// <summary>
        /// Test UpdateTransitRewrapName
        /// </summary>
        [Fact]
        public void UpdateTransitRewrapNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //TransitRewrapRequest transitRewrapRequest = null;
            //instance.UpdateTransitRewrapName(name, mountPath, transitRewrapRequest);
        }

        /// <summary>
        /// Test UpdateTransitSignName
        /// </summary>
        [Fact]
        public void UpdateTransitSignNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //TransitSignRequest transitSignRequest = null;
            //instance.UpdateTransitSignName(name, mountPath, transitSignRequest);
        }

        /// <summary>
        /// Test UpdateTransitSignNameUrlalgorithm
        /// </summary>
        [Fact]
        public void UpdateTransitSignNameUrlalgorithmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string urlalgorithm = null;
            //string mountPath = null;
            //TransitSignRequest transitSignRequest = null;
            //instance.UpdateTransitSignNameUrlalgorithm(name, urlalgorithm, mountPath, transitSignRequest);
        }

        /// <summary>
        /// Test UpdateTransitVerifyName
        /// </summary>
        [Fact]
        public void UpdateTransitVerifyNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mountPath = null;
            //TransitVerifyRequest transitVerifyRequest = null;
            //instance.UpdateTransitVerifyName(name, mountPath, transitVerifyRequest);
        }

        /// <summary>
        /// Test UpdateTransitVerifyNameUrlalgorithm
        /// </summary>
        [Fact]
        public void UpdateTransitVerifyNameUrlalgorithmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string urlalgorithm = null;
            //string mountPath = null;
            //TransitVerifyRequest transitVerifyRequest = null;
            //instance.UpdateTransitVerifyNameUrlalgorithm(name, urlalgorithm, mountPath, transitVerifyRequest);
        }
    }
}
