// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
//
// Code generated with OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Vault.Client;
using Vault.Api;
// uncomment below to import models
//using Vault.Model;

namespace Vault.Test.Api
{
    /// <summary>
    ///  Class for testing Secrets
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SecretsTests : IDisposable
    {
        private Vault.Api.Secrets instance;

        public SecretsTests()
        {
            // instance = new Vault.Api.Secrets();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Secrets
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' Secrets
            //Assert.IsType<Secrets>(instance);
        }

        /// <summary>
        /// Test AWSConfigReadLease
        /// </summary>
        [Fact]
        public void AWSConfigReadLeaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string awsMountPath = null;
            //instance.AWSConfigReadLease(awsMountPath);
        }

        /// <summary>
        /// Test AWSConfigReadRootIAMCredentials
        /// </summary>
        [Fact]
        public void AWSConfigReadRootIAMCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string awsMountPath = null;
            //instance.AWSConfigReadRootIAMCredentials(awsMountPath);
        }

        /// <summary>
        /// Test AWSConfigRotateRootIAMCredentials
        /// </summary>
        [Fact]
        public void AWSConfigRotateRootIAMCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string awsMountPath = null;
            //instance.AWSConfigRotateRootIAMCredentials(awsMountPath);
        }

        /// <summary>
        /// Test AWSConfigWriteLease
        /// </summary>
        [Fact]
        public void AWSConfigWriteLeaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AWSConfigWriteLeaseRequest aWSConfigWriteLeaseRequest = null;
            //string awsMountPath = null;
            //instance.AWSConfigWriteLease(aWSConfigWriteLeaseRequest, awsMountPath);
        }

        /// <summary>
        /// Test AWSConfigWriteRootIAMCredentials
        /// </summary>
        [Fact]
        public void AWSConfigWriteRootIAMCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AWSConfigWriteRootIAMCredentialsRequest aWSConfigWriteRootIAMCredentialsRequest = null;
            //string awsMountPath = null;
            //instance.AWSConfigWriteRootIAMCredentials(aWSConfigWriteRootIAMCredentialsRequest, awsMountPath);
        }

        /// <summary>
        /// Test AWSDeleteRole
        /// </summary>
        [Fact]
        public void AWSDeleteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string awsMountPath = null;
            //instance.AWSDeleteRole(name, awsMountPath);
        }

        /// <summary>
        /// Test AWSListRoles
        /// </summary>
        [Fact]
        public void AWSListRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string awsMountPath = null;
            //instance.AWSListRoles(list, awsMountPath);
        }

        /// <summary>
        /// Test AWSReadCredentials
        /// </summary>
        [Fact]
        public void AWSReadCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string awsMountPath = null;
            //instance.AWSReadCredentials(awsMountPath);
        }

        /// <summary>
        /// Test AWSReadRole
        /// </summary>
        [Fact]
        public void AWSReadRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string awsMountPath = null;
            //instance.AWSReadRole(name, awsMountPath);
        }

        /// <summary>
        /// Test AWSReadSecurityTokenService
        /// </summary>
        [Fact]
        public void AWSReadSecurityTokenServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string awsMountPath = null;
            //instance.AWSReadSecurityTokenService(name, awsMountPath);
        }

        /// <summary>
        /// Test AWSWriteCredentials
        /// </summary>
        [Fact]
        public void AWSWriteCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AWSWriteCredentialsRequest aWSWriteCredentialsRequest = null;
            //string awsMountPath = null;
            //instance.AWSWriteCredentials(aWSWriteCredentialsRequest, awsMountPath);
        }

        /// <summary>
        /// Test AWSWriteRole
        /// </summary>
        [Fact]
        public void AWSWriteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //AWSWriteRoleRequest aWSWriteRoleRequest = null;
            //string awsMountPath = null;
            //instance.AWSWriteRole(name, aWSWriteRoleRequest, awsMountPath);
        }

        /// <summary>
        /// Test AWSWriteSecurityTokenService
        /// </summary>
        [Fact]
        public void AWSWriteSecurityTokenServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //AWSWriteSecurityTokenServiceRequest aWSWriteSecurityTokenServiceRequest = null;
            //string awsMountPath = null;
            //instance.AWSWriteSecurityTokenService(name, aWSWriteSecurityTokenServiceRequest, awsMountPath);
        }

        /// <summary>
        /// Test ActiveDirectoryCheckInLibrary
        /// </summary>
        [Fact]
        public void ActiveDirectoryCheckInLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ActiveDirectoryCheckInLibraryRequest activeDirectoryCheckInLibraryRequest = null;
            //string adMountPath = null;
            //instance.ActiveDirectoryCheckInLibrary(name, activeDirectoryCheckInLibraryRequest, adMountPath);
        }

        /// <summary>
        /// Test ActiveDirectoryCheckInManageLibrary
        /// </summary>
        [Fact]
        public void ActiveDirectoryCheckInManageLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ActiveDirectoryCheckInManageLibraryRequest activeDirectoryCheckInManageLibraryRequest = null;
            //string adMountPath = null;
            //instance.ActiveDirectoryCheckInManageLibrary(name, activeDirectoryCheckInManageLibraryRequest, adMountPath);
        }

        /// <summary>
        /// Test ActiveDirectoryCheckOutLibrary
        /// </summary>
        [Fact]
        public void ActiveDirectoryCheckOutLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ActiveDirectoryCheckOutLibraryRequest activeDirectoryCheckOutLibraryRequest = null;
            //string adMountPath = null;
            //instance.ActiveDirectoryCheckOutLibrary(name, activeDirectoryCheckOutLibraryRequest, adMountPath);
        }

        /// <summary>
        /// Test ActiveDirectoryDeleteConfig
        /// </summary>
        [Fact]
        public void ActiveDirectoryDeleteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string adMountPath = null;
            //instance.ActiveDirectoryDeleteConfig(adMountPath);
        }

        /// <summary>
        /// Test ActiveDirectoryDeleteLibrary
        /// </summary>
        [Fact]
        public void ActiveDirectoryDeleteLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string adMountPath = null;
            //instance.ActiveDirectoryDeleteLibrary(name, adMountPath);
        }

        /// <summary>
        /// Test ActiveDirectoryDeleteRole
        /// </summary>
        [Fact]
        public void ActiveDirectoryDeleteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string adMountPath = null;
            //instance.ActiveDirectoryDeleteRole(name, adMountPath);
        }

        /// <summary>
        /// Test ActiveDirectoryListLibraries
        /// </summary>
        [Fact]
        public void ActiveDirectoryListLibrariesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string adMountPath = null;
            //instance.ActiveDirectoryListLibraries(list, adMountPath);
        }

        /// <summary>
        /// Test ActiveDirectoryListRoles
        /// </summary>
        [Fact]
        public void ActiveDirectoryListRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string adMountPath = null;
            //instance.ActiveDirectoryListRoles(list, adMountPath);
        }

        /// <summary>
        /// Test ActiveDirectoryReadConfig
        /// </summary>
        [Fact]
        public void ActiveDirectoryReadConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string adMountPath = null;
            //instance.ActiveDirectoryReadConfig(adMountPath);
        }

        /// <summary>
        /// Test ActiveDirectoryReadCredentials
        /// </summary>
        [Fact]
        public void ActiveDirectoryReadCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string adMountPath = null;
            //instance.ActiveDirectoryReadCredentials(name, adMountPath);
        }

        /// <summary>
        /// Test ActiveDirectoryReadLibrary
        /// </summary>
        [Fact]
        public void ActiveDirectoryReadLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string adMountPath = null;
            //instance.ActiveDirectoryReadLibrary(name, adMountPath);
        }

        /// <summary>
        /// Test ActiveDirectoryReadLibraryStatus
        /// </summary>
        [Fact]
        public void ActiveDirectoryReadLibraryStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string adMountPath = null;
            //instance.ActiveDirectoryReadLibraryStatus(name, adMountPath);
        }

        /// <summary>
        /// Test ActiveDirectoryReadRole
        /// </summary>
        [Fact]
        public void ActiveDirectoryReadRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string adMountPath = null;
            //instance.ActiveDirectoryReadRole(name, adMountPath);
        }

        /// <summary>
        /// Test ActiveDirectoryRotateRole
        /// </summary>
        [Fact]
        public void ActiveDirectoryRotateRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string adMountPath = null;
            //instance.ActiveDirectoryRotateRole(name, adMountPath);
        }

        /// <summary>
        /// Test ActiveDirectoryRotateRoot
        /// </summary>
        [Fact]
        public void ActiveDirectoryRotateRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string adMountPath = null;
            //instance.ActiveDirectoryRotateRoot(adMountPath);
        }

        /// <summary>
        /// Test ActiveDirectoryWriteConfig
        /// </summary>
        [Fact]
        public void ActiveDirectoryWriteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ActiveDirectoryWriteConfigRequest activeDirectoryWriteConfigRequest = null;
            //string adMountPath = null;
            //instance.ActiveDirectoryWriteConfig(activeDirectoryWriteConfigRequest, adMountPath);
        }

        /// <summary>
        /// Test ActiveDirectoryWriteLibrary
        /// </summary>
        [Fact]
        public void ActiveDirectoryWriteLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ActiveDirectoryWriteLibraryRequest activeDirectoryWriteLibraryRequest = null;
            //string adMountPath = null;
            //instance.ActiveDirectoryWriteLibrary(name, activeDirectoryWriteLibraryRequest, adMountPath);
        }

        /// <summary>
        /// Test ActiveDirectoryWriteRole
        /// </summary>
        [Fact]
        public void ActiveDirectoryWriteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ActiveDirectoryWriteRoleRequest activeDirectoryWriteRoleRequest = null;
            //string adMountPath = null;
            //instance.ActiveDirectoryWriteRole(name, activeDirectoryWriteRoleRequest, adMountPath);
        }

        /// <summary>
        /// Test AliCloudDeleteConfig
        /// </summary>
        [Fact]
        public void AliCloudDeleteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string alicloudMountPath = null;
            //instance.AliCloudDeleteConfig(alicloudMountPath);
        }

        /// <summary>
        /// Test AliCloudDeleteRole
        /// </summary>
        [Fact]
        public void AliCloudDeleteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string alicloudMountPath = null;
            //instance.AliCloudDeleteRole(name, alicloudMountPath);
        }

        /// <summary>
        /// Test AliCloudListRoles
        /// </summary>
        [Fact]
        public void AliCloudListRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string alicloudMountPath = null;
            //instance.AliCloudListRoles(list, alicloudMountPath);
        }

        /// <summary>
        /// Test AliCloudReadConfig
        /// </summary>
        [Fact]
        public void AliCloudReadConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string alicloudMountPath = null;
            //instance.AliCloudReadConfig(alicloudMountPath);
        }

        /// <summary>
        /// Test AliCloudReadCredentials
        /// </summary>
        [Fact]
        public void AliCloudReadCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string alicloudMountPath = null;
            //instance.AliCloudReadCredentials(name, alicloudMountPath);
        }

        /// <summary>
        /// Test AliCloudReadRole
        /// </summary>
        [Fact]
        public void AliCloudReadRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string alicloudMountPath = null;
            //instance.AliCloudReadRole(name, alicloudMountPath);
        }

        /// <summary>
        /// Test AliCloudWriteConfig
        /// </summary>
        [Fact]
        public void AliCloudWriteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AliCloudWriteConfigRequest aliCloudWriteConfigRequest = null;
            //string alicloudMountPath = null;
            //instance.AliCloudWriteConfig(aliCloudWriteConfigRequest, alicloudMountPath);
        }

        /// <summary>
        /// Test AliCloudWriteRole
        /// </summary>
        [Fact]
        public void AliCloudWriteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //AliCloudWriteRoleRequest aliCloudWriteRoleRequest = null;
            //string alicloudMountPath = null;
            //instance.AliCloudWriteRole(name, aliCloudWriteRoleRequest, alicloudMountPath);
        }

        /// <summary>
        /// Test AzureDeleteConfig
        /// </summary>
        [Fact]
        public void AzureDeleteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string azureMountPath = null;
            //instance.AzureDeleteConfig(azureMountPath);
        }

        /// <summary>
        /// Test AzureDeleteRole
        /// </summary>
        [Fact]
        public void AzureDeleteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string azureMountPath = null;
            //instance.AzureDeleteRole(name, azureMountPath);
        }

        /// <summary>
        /// Test AzureListRoles
        /// </summary>
        [Fact]
        public void AzureListRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string azureMountPath = null;
            //instance.AzureListRoles(list, azureMountPath);
        }

        /// <summary>
        /// Test AzureReadConfig
        /// </summary>
        [Fact]
        public void AzureReadConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string azureMountPath = null;
            //instance.AzureReadConfig(azureMountPath);
        }

        /// <summary>
        /// Test AzureReadCredentials
        /// </summary>
        [Fact]
        public void AzureReadCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //string azureMountPath = null;
            //instance.AzureReadCredentials(role, azureMountPath);
        }

        /// <summary>
        /// Test AzureReadRole
        /// </summary>
        [Fact]
        public void AzureReadRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string azureMountPath = null;
            //instance.AzureReadRole(name, azureMountPath);
        }

        /// <summary>
        /// Test AzureRotateRoot
        /// </summary>
        [Fact]
        public void AzureRotateRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string azureMountPath = null;
            //instance.AzureRotateRoot(azureMountPath);
        }

        /// <summary>
        /// Test AzureWriteConfig
        /// </summary>
        [Fact]
        public void AzureWriteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AzureWriteConfigRequest azureWriteConfigRequest = null;
            //string azureMountPath = null;
            //instance.AzureWriteConfig(azureWriteConfigRequest, azureMountPath);
        }

        /// <summary>
        /// Test AzureWriteRole
        /// </summary>
        [Fact]
        public void AzureWriteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //AzureWriteRoleRequest azureWriteRoleRequest = null;
            //string azureMountPath = null;
            //instance.AzureWriteRole(name, azureWriteRoleRequest, azureMountPath);
        }

        /// <summary>
        /// Test ConsulDeleteRole
        /// </summary>
        [Fact]
        public void ConsulDeleteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string consulMountPath = null;
            //instance.ConsulDeleteRole(name, consulMountPath);
        }

        /// <summary>
        /// Test ConsulListRoles
        /// </summary>
        [Fact]
        public void ConsulListRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string consulMountPath = null;
            //instance.ConsulListRoles(list, consulMountPath);
        }

        /// <summary>
        /// Test ConsulReadAccessConfig
        /// </summary>
        [Fact]
        public void ConsulReadAccessConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string consulMountPath = null;
            //instance.ConsulReadAccessConfig(consulMountPath);
        }

        /// <summary>
        /// Test ConsulReadCredentials
        /// </summary>
        [Fact]
        public void ConsulReadCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //string consulMountPath = null;
            //instance.ConsulReadCredentials(role, consulMountPath);
        }

        /// <summary>
        /// Test ConsulReadRole
        /// </summary>
        [Fact]
        public void ConsulReadRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string consulMountPath = null;
            //instance.ConsulReadRole(name, consulMountPath);
        }

        /// <summary>
        /// Test ConsulWriteAccessConfig
        /// </summary>
        [Fact]
        public void ConsulWriteAccessConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ConsulWriteAccessConfigRequest consulWriteAccessConfigRequest = null;
            //string consulMountPath = null;
            //instance.ConsulWriteAccessConfig(consulWriteAccessConfigRequest, consulMountPath);
        }

        /// <summary>
        /// Test ConsulWriteRole
        /// </summary>
        [Fact]
        public void ConsulWriteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ConsulWriteRoleRequest consulWriteRoleRequest = null;
            //string consulMountPath = null;
            //instance.ConsulWriteRole(name, consulWriteRoleRequest, consulMountPath);
        }

        /// <summary>
        /// Test CubbyholeDelete
        /// </summary>
        [Fact]
        public void CubbyholeDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string cubbyholeMountPath = null;
            //instance.CubbyholeDelete(path, cubbyholeMountPath);
        }

        /// <summary>
        /// Test CubbyholeRead
        /// </summary>
        [Fact]
        public void CubbyholeReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string cubbyholeMountPath = null;
            //string list = null;
            //instance.CubbyholeRead(path, cubbyholeMountPath, list);
        }

        /// <summary>
        /// Test CubbyholeWrite
        /// </summary>
        [Fact]
        public void CubbyholeWriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string cubbyholeMountPath = null;
            //instance.CubbyholeWrite(path, cubbyholeMountPath);
        }

        /// <summary>
        /// Test DatabaseDeleteConfig
        /// </summary>
        [Fact]
        public void DatabaseDeleteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string databaseMountPath = null;
            //instance.DatabaseDeleteConfig(name, databaseMountPath);
        }

        /// <summary>
        /// Test DatabaseDeleteRole
        /// </summary>
        [Fact]
        public void DatabaseDeleteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string databaseMountPath = null;
            //instance.DatabaseDeleteRole(name, databaseMountPath);
        }

        /// <summary>
        /// Test DatabaseDeleteStaticRole
        /// </summary>
        [Fact]
        public void DatabaseDeleteStaticRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string databaseMountPath = null;
            //instance.DatabaseDeleteStaticRole(name, databaseMountPath);
        }

        /// <summary>
        /// Test DatabaseListConfig
        /// </summary>
        [Fact]
        public void DatabaseListConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string databaseMountPath = null;
            //instance.DatabaseListConfig(list, databaseMountPath);
        }

        /// <summary>
        /// Test DatabaseListRoles
        /// </summary>
        [Fact]
        public void DatabaseListRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string databaseMountPath = null;
            //instance.DatabaseListRoles(list, databaseMountPath);
        }

        /// <summary>
        /// Test DatabaseListStaticRoles
        /// </summary>
        [Fact]
        public void DatabaseListStaticRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string databaseMountPath = null;
            //instance.DatabaseListStaticRoles(list, databaseMountPath);
        }

        /// <summary>
        /// Test DatabaseReadConfig
        /// </summary>
        [Fact]
        public void DatabaseReadConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string databaseMountPath = null;
            //instance.DatabaseReadConfig(name, databaseMountPath);
        }

        /// <summary>
        /// Test DatabaseReadCredentials
        /// </summary>
        [Fact]
        public void DatabaseReadCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string databaseMountPath = null;
            //instance.DatabaseReadCredentials(name, databaseMountPath);
        }

        /// <summary>
        /// Test DatabaseReadRole
        /// </summary>
        [Fact]
        public void DatabaseReadRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string databaseMountPath = null;
            //instance.DatabaseReadRole(name, databaseMountPath);
        }

        /// <summary>
        /// Test DatabaseReadStaticCredentials
        /// </summary>
        [Fact]
        public void DatabaseReadStaticCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string databaseMountPath = null;
            //instance.DatabaseReadStaticCredentials(name, databaseMountPath);
        }

        /// <summary>
        /// Test DatabaseReadStaticRole
        /// </summary>
        [Fact]
        public void DatabaseReadStaticRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string databaseMountPath = null;
            //instance.DatabaseReadStaticRole(name, databaseMountPath);
        }

        /// <summary>
        /// Test DatabaseReset
        /// </summary>
        [Fact]
        public void DatabaseResetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string databaseMountPath = null;
            //instance.DatabaseReset(name, databaseMountPath);
        }

        /// <summary>
        /// Test DatabaseRotateRole
        /// </summary>
        [Fact]
        public void DatabaseRotateRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string databaseMountPath = null;
            //instance.DatabaseRotateRole(name, databaseMountPath);
        }

        /// <summary>
        /// Test DatabaseRotateRoot
        /// </summary>
        [Fact]
        public void DatabaseRotateRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string databaseMountPath = null;
            //instance.DatabaseRotateRoot(name, databaseMountPath);
        }

        /// <summary>
        /// Test DatabaseWriteConfig
        /// </summary>
        [Fact]
        public void DatabaseWriteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //DatabaseWriteConfigRequest databaseWriteConfigRequest = null;
            //string databaseMountPath = null;
            //instance.DatabaseWriteConfig(name, databaseWriteConfigRequest, databaseMountPath);
        }

        /// <summary>
        /// Test DatabaseWriteRole
        /// </summary>
        [Fact]
        public void DatabaseWriteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //DatabaseWriteRoleRequest databaseWriteRoleRequest = null;
            //string databaseMountPath = null;
            //instance.DatabaseWriteRole(name, databaseWriteRoleRequest, databaseMountPath);
        }

        /// <summary>
        /// Test DatabaseWriteStaticRole
        /// </summary>
        [Fact]
        public void DatabaseWriteStaticRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //DatabaseWriteStaticRoleRequest databaseWriteStaticRoleRequest = null;
            //string databaseMountPath = null;
            //instance.DatabaseWriteStaticRole(name, databaseWriteStaticRoleRequest, databaseMountPath);
        }

        /// <summary>
        /// Test GoogleCloudDeleteRoleset
        /// </summary>
        [Fact]
        public void GoogleCloudDeleteRolesetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudDeleteRoleset(name, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudDeleteStaticAccount
        /// </summary>
        [Fact]
        public void GoogleCloudDeleteStaticAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudDeleteStaticAccount(name, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudKMSDecrypt
        /// </summary>
        [Fact]
        public void GoogleCloudKMSDecryptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //GoogleCloudKMSDecryptRequest googleCloudKMSDecryptRequest = null;
            //string gcpkmsMountPath = null;
            //instance.GoogleCloudKMSDecrypt(key, googleCloudKMSDecryptRequest, gcpkmsMountPath);
        }

        /// <summary>
        /// Test GoogleCloudKMSDeleteConfig
        /// </summary>
        [Fact]
        public void GoogleCloudKMSDeleteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string gcpkmsMountPath = null;
            //instance.GoogleCloudKMSDeleteConfig(gcpkmsMountPath);
        }

        /// <summary>
        /// Test GoogleCloudKMSDeleteKey
        /// </summary>
        [Fact]
        public void GoogleCloudKMSDeleteKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string gcpkmsMountPath = null;
            //instance.GoogleCloudKMSDeleteKey(key, gcpkmsMountPath);
        }

        /// <summary>
        /// Test GoogleCloudKMSDeregisterKey
        /// </summary>
        [Fact]
        public void GoogleCloudKMSDeregisterKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string gcpkmsMountPath = null;
            //instance.GoogleCloudKMSDeregisterKey(key, gcpkmsMountPath);
        }

        /// <summary>
        /// Test GoogleCloudKMSEncrypt
        /// </summary>
        [Fact]
        public void GoogleCloudKMSEncryptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //GoogleCloudKMSEncryptRequest googleCloudKMSEncryptRequest = null;
            //string gcpkmsMountPath = null;
            //instance.GoogleCloudKMSEncrypt(key, googleCloudKMSEncryptRequest, gcpkmsMountPath);
        }

        /// <summary>
        /// Test GoogleCloudKMSListKeys
        /// </summary>
        [Fact]
        public void GoogleCloudKMSListKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string gcpkmsMountPath = null;
            //instance.GoogleCloudKMSListKeys(list, gcpkmsMountPath);
        }

        /// <summary>
        /// Test GoogleCloudKMSReadConfig
        /// </summary>
        [Fact]
        public void GoogleCloudKMSReadConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string gcpkmsMountPath = null;
            //instance.GoogleCloudKMSReadConfig(gcpkmsMountPath);
        }

        /// <summary>
        /// Test GoogleCloudKMSReadKey
        /// </summary>
        [Fact]
        public void GoogleCloudKMSReadKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string gcpkmsMountPath = null;
            //instance.GoogleCloudKMSReadKey(key, gcpkmsMountPath);
        }

        /// <summary>
        /// Test GoogleCloudKMSReadKeyConfig
        /// </summary>
        [Fact]
        public void GoogleCloudKMSReadKeyConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string gcpkmsMountPath = null;
            //instance.GoogleCloudKMSReadKeyConfig(key, gcpkmsMountPath);
        }

        /// <summary>
        /// Test GoogleCloudKMSReadPubkey
        /// </summary>
        [Fact]
        public void GoogleCloudKMSReadPubkeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string gcpkmsMountPath = null;
            //instance.GoogleCloudKMSReadPubkey(key, gcpkmsMountPath);
        }

        /// <summary>
        /// Test GoogleCloudKMSReencrypt
        /// </summary>
        [Fact]
        public void GoogleCloudKMSReencryptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //GoogleCloudKMSReencryptRequest googleCloudKMSReencryptRequest = null;
            //string gcpkmsMountPath = null;
            //instance.GoogleCloudKMSReencrypt(key, googleCloudKMSReencryptRequest, gcpkmsMountPath);
        }

        /// <summary>
        /// Test GoogleCloudKMSRegisterKey
        /// </summary>
        [Fact]
        public void GoogleCloudKMSRegisterKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //GoogleCloudKMSRegisterKeyRequest googleCloudKMSRegisterKeyRequest = null;
            //string gcpkmsMountPath = null;
            //instance.GoogleCloudKMSRegisterKey(key, googleCloudKMSRegisterKeyRequest, gcpkmsMountPath);
        }

        /// <summary>
        /// Test GoogleCloudKMSRotateKey
        /// </summary>
        [Fact]
        public void GoogleCloudKMSRotateKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string gcpkmsMountPath = null;
            //instance.GoogleCloudKMSRotateKey(key, gcpkmsMountPath);
        }

        /// <summary>
        /// Test GoogleCloudKMSSign
        /// </summary>
        [Fact]
        public void GoogleCloudKMSSignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //GoogleCloudKMSSignRequest googleCloudKMSSignRequest = null;
            //string gcpkmsMountPath = null;
            //instance.GoogleCloudKMSSign(key, googleCloudKMSSignRequest, gcpkmsMountPath);
        }

        /// <summary>
        /// Test GoogleCloudKMSTrimKey
        /// </summary>
        [Fact]
        public void GoogleCloudKMSTrimKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //string gcpkmsMountPath = null;
            //instance.GoogleCloudKMSTrimKey(key, gcpkmsMountPath);
        }

        /// <summary>
        /// Test GoogleCloudKMSVerify
        /// </summary>
        [Fact]
        public void GoogleCloudKMSVerifyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //GoogleCloudKMSVerifyRequest googleCloudKMSVerifyRequest = null;
            //string gcpkmsMountPath = null;
            //instance.GoogleCloudKMSVerify(key, googleCloudKMSVerifyRequest, gcpkmsMountPath);
        }

        /// <summary>
        /// Test GoogleCloudKMSWriteConfig
        /// </summary>
        [Fact]
        public void GoogleCloudKMSWriteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GoogleCloudKMSWriteConfigRequest googleCloudKMSWriteConfigRequest = null;
            //string gcpkmsMountPath = null;
            //instance.GoogleCloudKMSWriteConfig(googleCloudKMSWriteConfigRequest, gcpkmsMountPath);
        }

        /// <summary>
        /// Test GoogleCloudKMSWriteKey
        /// </summary>
        [Fact]
        public void GoogleCloudKMSWriteKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //GoogleCloudKMSWriteKeyRequest googleCloudKMSWriteKeyRequest = null;
            //string gcpkmsMountPath = null;
            //instance.GoogleCloudKMSWriteKey(key, googleCloudKMSWriteKeyRequest, gcpkmsMountPath);
        }

        /// <summary>
        /// Test GoogleCloudKMSWriteKeyConfig
        /// </summary>
        [Fact]
        public void GoogleCloudKMSWriteKeyConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //GoogleCloudKMSWriteKeyConfigRequest googleCloudKMSWriteKeyConfigRequest = null;
            //string gcpkmsMountPath = null;
            //instance.GoogleCloudKMSWriteKeyConfig(key, googleCloudKMSWriteKeyConfigRequest, gcpkmsMountPath);
        }

        /// <summary>
        /// Test GoogleCloudListRolesets
        /// </summary>
        [Fact]
        public void GoogleCloudListRolesetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudListRolesets(list, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudListStaticAccounts
        /// </summary>
        [Fact]
        public void GoogleCloudListStaticAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudListStaticAccounts(list, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudReadConfig
        /// </summary>
        [Fact]
        public void GoogleCloudReadConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string gcpMountPath = null;
            //instance.GoogleCloudReadConfig(gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudReadKey
        /// </summary>
        [Fact]
        public void GoogleCloudReadKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleset = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudReadKey(roleset, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudReadRoleset
        /// </summary>
        [Fact]
        public void GoogleCloudReadRolesetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudReadRoleset(name, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudReadRolesetKey
        /// </summary>
        [Fact]
        public void GoogleCloudReadRolesetKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleset = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudReadRolesetKey(roleset, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudReadRolesetToken
        /// </summary>
        [Fact]
        public void GoogleCloudReadRolesetTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleset = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudReadRolesetToken(roleset, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudReadStaticAccount
        /// </summary>
        [Fact]
        public void GoogleCloudReadStaticAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudReadStaticAccount(name, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudReadStaticAccountKey
        /// </summary>
        [Fact]
        public void GoogleCloudReadStaticAccountKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudReadStaticAccountKey(name, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudReadStaticAccountToken
        /// </summary>
        [Fact]
        public void GoogleCloudReadStaticAccountTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudReadStaticAccountToken(name, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudReadToken
        /// </summary>
        [Fact]
        public void GoogleCloudReadTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleset = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudReadToken(roleset, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudRotateRoleset
        /// </summary>
        [Fact]
        public void GoogleCloudRotateRolesetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudRotateRoleset(name, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudRotateRolesetKey
        /// </summary>
        [Fact]
        public void GoogleCloudRotateRolesetKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudRotateRolesetKey(name, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudRotateRoot
        /// </summary>
        [Fact]
        public void GoogleCloudRotateRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string gcpMountPath = null;
            //instance.GoogleCloudRotateRoot(gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudRotateStaticAccountKey
        /// </summary>
        [Fact]
        public void GoogleCloudRotateStaticAccountKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudRotateStaticAccountKey(name, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudWriteConfig
        /// </summary>
        [Fact]
        public void GoogleCloudWriteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GoogleCloudWriteConfigRequest googleCloudWriteConfigRequest = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudWriteConfig(googleCloudWriteConfigRequest, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudWriteKey
        /// </summary>
        [Fact]
        public void GoogleCloudWriteKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleset = null;
            //GoogleCloudWriteKeyRequest googleCloudWriteKeyRequest = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudWriteKey(roleset, googleCloudWriteKeyRequest, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudWriteRoleset
        /// </summary>
        [Fact]
        public void GoogleCloudWriteRolesetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //GoogleCloudWriteRolesetRequest googleCloudWriteRolesetRequest = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudWriteRoleset(name, googleCloudWriteRolesetRequest, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudWriteRolesetKey
        /// </summary>
        [Fact]
        public void GoogleCloudWriteRolesetKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleset = null;
            //GoogleCloudWriteRolesetKeyRequest googleCloudWriteRolesetKeyRequest = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudWriteRolesetKey(roleset, googleCloudWriteRolesetKeyRequest, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudWriteRolesetToken
        /// </summary>
        [Fact]
        public void GoogleCloudWriteRolesetTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleset = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudWriteRolesetToken(roleset, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudWriteStaticAccount
        /// </summary>
        [Fact]
        public void GoogleCloudWriteStaticAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //GoogleCloudWriteStaticAccountRequest googleCloudWriteStaticAccountRequest = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudWriteStaticAccount(name, googleCloudWriteStaticAccountRequest, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudWriteStaticAccountKey
        /// </summary>
        [Fact]
        public void GoogleCloudWriteStaticAccountKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //GoogleCloudWriteStaticAccountKeyRequest googleCloudWriteStaticAccountKeyRequest = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudWriteStaticAccountKey(name, googleCloudWriteStaticAccountKeyRequest, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudWriteStaticAccountToken
        /// </summary>
        [Fact]
        public void GoogleCloudWriteStaticAccountTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudWriteStaticAccountToken(name, gcpMountPath);
        }

        /// <summary>
        /// Test GoogleCloudWriteToken
        /// </summary>
        [Fact]
        public void GoogleCloudWriteTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roleset = null;
            //string gcpMountPath = null;
            //instance.GoogleCloudWriteToken(roleset, gcpMountPath);
        }

        /// <summary>
        /// Test KVv1Delete
        /// </summary>
        [Fact]
        public void KVv1DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string kvMountPath = null;
            //instance.KVv1Delete(path, kvMountPath);
        }

        /// <summary>
        /// Test KVv1Read
        /// </summary>
        [Fact]
        public void KVv1ReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string kvMountPath = null;
            //string list = null;
            //instance.KVv1Read(path, kvMountPath, list);
        }

        /// <summary>
        /// Test KVv1Write
        /// </summary>
        [Fact]
        public void KVv1WriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string kvMountPath = null;
            //instance.KVv1Write(path, kvMountPath);
        }

        /// <summary>
        /// Test KVv2Delete
        /// </summary>
        [Fact]
        public void KVv2DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string secretMountPath = null;
            //instance.KVv2Delete(path, secretMountPath);
        }

        /// <summary>
        /// Test KVv2DeleteMetadata
        /// </summary>
        [Fact]
        public void KVv2DeleteMetadataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string secretMountPath = null;
            //instance.KVv2DeleteMetadata(path, secretMountPath);
        }

        /// <summary>
        /// Test KVv2DeleteVersions
        /// </summary>
        [Fact]
        public void KVv2DeleteVersionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //KVv2DeleteVersionsRequest kVv2DeleteVersionsRequest = null;
            //string secretMountPath = null;
            //instance.KVv2DeleteVersions(path, kVv2DeleteVersionsRequest, secretMountPath);
        }

        /// <summary>
        /// Test KVv2DestroyVersions
        /// </summary>
        [Fact]
        public void KVv2DestroyVersionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //KVv2DestroyVersionsRequest kVv2DestroyVersionsRequest = null;
            //string secretMountPath = null;
            //instance.KVv2DestroyVersions(path, kVv2DestroyVersionsRequest, secretMountPath);
        }

        /// <summary>
        /// Test KVv2Read
        /// </summary>
        [Fact]
        public void KVv2ReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string secretMountPath = null;
            //instance.KVv2Read(path, secretMountPath);
        }

        /// <summary>
        /// Test KVv2ReadConfig
        /// </summary>
        [Fact]
        public void KVv2ReadConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string secretMountPath = null;
            //instance.KVv2ReadConfig(secretMountPath);
        }

        /// <summary>
        /// Test KVv2ReadMetadata
        /// </summary>
        [Fact]
        public void KVv2ReadMetadataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string secretMountPath = null;
            //string list = null;
            //instance.KVv2ReadMetadata(path, secretMountPath, list);
        }

        /// <summary>
        /// Test KVv2ReadSubkeys
        /// </summary>
        [Fact]
        public void KVv2ReadSubkeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string secretMountPath = null;
            //instance.KVv2ReadSubkeys(path, secretMountPath);
        }

        /// <summary>
        /// Test KVv2UndeleteVersions
        /// </summary>
        [Fact]
        public void KVv2UndeleteVersionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //KVv2UndeleteVersionsRequest kVv2UndeleteVersionsRequest = null;
            //string secretMountPath = null;
            //instance.KVv2UndeleteVersions(path, kVv2UndeleteVersionsRequest, secretMountPath);
        }

        /// <summary>
        /// Test KVv2Write
        /// </summary>
        [Fact]
        public void KVv2WriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //KVv2WriteRequest kVv2WriteRequest = null;
            //string secretMountPath = null;
            //instance.KVv2Write(path, kVv2WriteRequest, secretMountPath);
        }

        /// <summary>
        /// Test KVv2WriteConfig
        /// </summary>
        [Fact]
        public void KVv2WriteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //KVv2WriteConfigRequest kVv2WriteConfigRequest = null;
            //string secretMountPath = null;
            //instance.KVv2WriteConfig(kVv2WriteConfigRequest, secretMountPath);
        }

        /// <summary>
        /// Test KVv2WriteMetadata
        /// </summary>
        [Fact]
        public void KVv2WriteMetadataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //KVv2WriteMetadataRequest kVv2WriteMetadataRequest = null;
            //string secretMountPath = null;
            //instance.KVv2WriteMetadata(path, kVv2WriteMetadataRequest, secretMountPath);
        }

        /// <summary>
        /// Test KubernetesDeleteConfig
        /// </summary>
        [Fact]
        public void KubernetesDeleteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string kubernetesMountPath = null;
            //instance.KubernetesDeleteConfig(kubernetesMountPath);
        }

        /// <summary>
        /// Test KubernetesDeleteRole
        /// </summary>
        [Fact]
        public void KubernetesDeleteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string kubernetesMountPath = null;
            //instance.KubernetesDeleteRole(name, kubernetesMountPath);
        }

        /// <summary>
        /// Test KubernetesListRoles
        /// </summary>
        [Fact]
        public void KubernetesListRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string kubernetesMountPath = null;
            //instance.KubernetesListRoles(list, kubernetesMountPath);
        }

        /// <summary>
        /// Test KubernetesReadConfig
        /// </summary>
        [Fact]
        public void KubernetesReadConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string kubernetesMountPath = null;
            //instance.KubernetesReadConfig(kubernetesMountPath);
        }

        /// <summary>
        /// Test KubernetesReadRole
        /// </summary>
        [Fact]
        public void KubernetesReadRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string kubernetesMountPath = null;
            //instance.KubernetesReadRole(name, kubernetesMountPath);
        }

        /// <summary>
        /// Test KubernetesWriteConfig
        /// </summary>
        [Fact]
        public void KubernetesWriteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //KubernetesWriteConfigRequest kubernetesWriteConfigRequest = null;
            //string kubernetesMountPath = null;
            //instance.KubernetesWriteConfig(kubernetesWriteConfigRequest, kubernetesMountPath);
        }

        /// <summary>
        /// Test KubernetesWriteCredentials
        /// </summary>
        [Fact]
        public void KubernetesWriteCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //KubernetesWriteCredentialsRequest kubernetesWriteCredentialsRequest = null;
            //string kubernetesMountPath = null;
            //instance.KubernetesWriteCredentials(name, kubernetesWriteCredentialsRequest, kubernetesMountPath);
        }

        /// <summary>
        /// Test KubernetesWriteRole
        /// </summary>
        [Fact]
        public void KubernetesWriteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //KubernetesWriteRoleRequest kubernetesWriteRoleRequest = null;
            //string kubernetesMountPath = null;
            //instance.KubernetesWriteRole(name, kubernetesWriteRoleRequest, kubernetesMountPath);
        }

        /// <summary>
        /// Test LDAPCheckInLibrary
        /// </summary>
        [Fact]
        public void LDAPCheckInLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //LDAPCheckInLibraryRequest lDAPCheckInLibraryRequest = null;
            //string ldapMountPath = null;
            //instance.LDAPCheckInLibrary(name, lDAPCheckInLibraryRequest, ldapMountPath);
        }

        /// <summary>
        /// Test LDAPCheckInManageLibrary
        /// </summary>
        [Fact]
        public void LDAPCheckInManageLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //LDAPCheckInManageLibraryRequest lDAPCheckInManageLibraryRequest = null;
            //string ldapMountPath = null;
            //instance.LDAPCheckInManageLibrary(name, lDAPCheckInManageLibraryRequest, ldapMountPath);
        }

        /// <summary>
        /// Test LDAPCheckOutLibrary
        /// </summary>
        [Fact]
        public void LDAPCheckOutLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //LDAPCheckOutLibraryRequest lDAPCheckOutLibraryRequest = null;
            //string ldapMountPath = null;
            //instance.LDAPCheckOutLibrary(name, lDAPCheckOutLibraryRequest, ldapMountPath);
        }

        /// <summary>
        /// Test LDAPDeleteConfig
        /// </summary>
        [Fact]
        public void LDAPDeleteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ldapMountPath = null;
            //instance.LDAPDeleteConfig(ldapMountPath);
        }

        /// <summary>
        /// Test LDAPDeleteLibrary
        /// </summary>
        [Fact]
        public void LDAPDeleteLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string ldapMountPath = null;
            //instance.LDAPDeleteLibrary(name, ldapMountPath);
        }

        /// <summary>
        /// Test LDAPDeleteRole
        /// </summary>
        [Fact]
        public void LDAPDeleteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string ldapMountPath = null;
            //instance.LDAPDeleteRole(name, ldapMountPath);
        }

        /// <summary>
        /// Test LDAPDeleteStaticRole
        /// </summary>
        [Fact]
        public void LDAPDeleteStaticRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string ldapMountPath = null;
            //instance.LDAPDeleteStaticRole(name, ldapMountPath);
        }

        /// <summary>
        /// Test LDAPListLibraries
        /// </summary>
        [Fact]
        public void LDAPListLibrariesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string ldapMountPath = null;
            //instance.LDAPListLibraries(list, ldapMountPath);
        }

        /// <summary>
        /// Test LDAPListRoles
        /// </summary>
        [Fact]
        public void LDAPListRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string ldapMountPath = null;
            //instance.LDAPListRoles(list, ldapMountPath);
        }

        /// <summary>
        /// Test LDAPListStaticRoles
        /// </summary>
        [Fact]
        public void LDAPListStaticRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string ldapMountPath = null;
            //instance.LDAPListStaticRoles(list, ldapMountPath);
        }

        /// <summary>
        /// Test LDAPReadConfig
        /// </summary>
        [Fact]
        public void LDAPReadConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ldapMountPath = null;
            //instance.LDAPReadConfig(ldapMountPath);
        }

        /// <summary>
        /// Test LDAPReadCredentials
        /// </summary>
        [Fact]
        public void LDAPReadCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string ldapMountPath = null;
            //instance.LDAPReadCredentials(name, ldapMountPath);
        }

        /// <summary>
        /// Test LDAPReadLibrary
        /// </summary>
        [Fact]
        public void LDAPReadLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string ldapMountPath = null;
            //instance.LDAPReadLibrary(name, ldapMountPath);
        }

        /// <summary>
        /// Test LDAPReadLibraryStatus
        /// </summary>
        [Fact]
        public void LDAPReadLibraryStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string ldapMountPath = null;
            //instance.LDAPReadLibraryStatus(name, ldapMountPath);
        }

        /// <summary>
        /// Test LDAPReadRole
        /// </summary>
        [Fact]
        public void LDAPReadRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string ldapMountPath = null;
            //instance.LDAPReadRole(name, ldapMountPath);
        }

        /// <summary>
        /// Test LDAPReadStaticCredentials
        /// </summary>
        [Fact]
        public void LDAPReadStaticCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string ldapMountPath = null;
            //instance.LDAPReadStaticCredentials(name, ldapMountPath);
        }

        /// <summary>
        /// Test LDAPReadStaticRole
        /// </summary>
        [Fact]
        public void LDAPReadStaticRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string ldapMountPath = null;
            //instance.LDAPReadStaticRole(name, ldapMountPath);
        }

        /// <summary>
        /// Test LDAPRotateRole
        /// </summary>
        [Fact]
        public void LDAPRotateRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string ldapMountPath = null;
            //instance.LDAPRotateRole(name, ldapMountPath);
        }

        /// <summary>
        /// Test LDAPRotateRoot
        /// </summary>
        [Fact]
        public void LDAPRotateRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ldapMountPath = null;
            //instance.LDAPRotateRoot(ldapMountPath);
        }

        /// <summary>
        /// Test LDAPWriteConfig
        /// </summary>
        [Fact]
        public void LDAPWriteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LDAPWriteConfigRequest lDAPWriteConfigRequest = null;
            //string ldapMountPath = null;
            //instance.LDAPWriteConfig(lDAPWriteConfigRequest, ldapMountPath);
        }

        /// <summary>
        /// Test LDAPWriteLibrary
        /// </summary>
        [Fact]
        public void LDAPWriteLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //LDAPWriteLibraryRequest lDAPWriteLibraryRequest = null;
            //string ldapMountPath = null;
            //instance.LDAPWriteLibrary(name, lDAPWriteLibraryRequest, ldapMountPath);
        }

        /// <summary>
        /// Test LDAPWriteRole
        /// </summary>
        [Fact]
        public void LDAPWriteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //LDAPWriteRoleRequest lDAPWriteRoleRequest = null;
            //string ldapMountPath = null;
            //instance.LDAPWriteRole(name, lDAPWriteRoleRequest, ldapMountPath);
        }

        /// <summary>
        /// Test LDAPWriteStaticRole
        /// </summary>
        [Fact]
        public void LDAPWriteStaticRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //LDAPWriteStaticRoleRequest lDAPWriteStaticRoleRequest = null;
            //string ldapMountPath = null;
            //instance.LDAPWriteStaticRole(name, lDAPWriteStaticRoleRequest, ldapMountPath);
        }

        /// <summary>
        /// Test MongoDBAtlasDeleteRole
        /// </summary>
        [Fact]
        public void MongoDBAtlasDeleteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mongodbatlasMountPath = null;
            //instance.MongoDBAtlasDeleteRole(name, mongodbatlasMountPath);
        }

        /// <summary>
        /// Test MongoDBAtlasListRoles
        /// </summary>
        [Fact]
        public void MongoDBAtlasListRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string mongodbatlasMountPath = null;
            //instance.MongoDBAtlasListRoles(list, mongodbatlasMountPath);
        }

        /// <summary>
        /// Test MongoDBAtlasReadConfig
        /// </summary>
        [Fact]
        public void MongoDBAtlasReadConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mongodbatlasMountPath = null;
            //instance.MongoDBAtlasReadConfig(mongodbatlasMountPath);
        }

        /// <summary>
        /// Test MongoDBAtlasReadCredentials
        /// </summary>
        [Fact]
        public void MongoDBAtlasReadCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mongodbatlasMountPath = null;
            //instance.MongoDBAtlasReadCredentials(name, mongodbatlasMountPath);
        }

        /// <summary>
        /// Test MongoDBAtlasReadRole
        /// </summary>
        [Fact]
        public void MongoDBAtlasReadRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mongodbatlasMountPath = null;
            //instance.MongoDBAtlasReadRole(name, mongodbatlasMountPath);
        }

        /// <summary>
        /// Test MongoDBAtlasWriteConfig
        /// </summary>
        [Fact]
        public void MongoDBAtlasWriteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MongoDBAtlasWriteConfigRequest mongoDBAtlasWriteConfigRequest = null;
            //string mongodbatlasMountPath = null;
            //instance.MongoDBAtlasWriteConfig(mongoDBAtlasWriteConfigRequest, mongodbatlasMountPath);
        }

        /// <summary>
        /// Test MongoDBAtlasWriteCredentials
        /// </summary>
        [Fact]
        public void MongoDBAtlasWriteCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string mongodbatlasMountPath = null;
            //instance.MongoDBAtlasWriteCredentials(name, mongodbatlasMountPath);
        }

        /// <summary>
        /// Test MongoDBAtlasWriteRole
        /// </summary>
        [Fact]
        public void MongoDBAtlasWriteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //MongoDBAtlasWriteRoleRequest mongoDBAtlasWriteRoleRequest = null;
            //string mongodbatlasMountPath = null;
            //instance.MongoDBAtlasWriteRole(name, mongoDBAtlasWriteRoleRequest, mongodbatlasMountPath);
        }

        /// <summary>
        /// Test NomadDeleteAccessConfig
        /// </summary>
        [Fact]
        public void NomadDeleteAccessConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string nomadMountPath = null;
            //instance.NomadDeleteAccessConfig(nomadMountPath);
        }

        /// <summary>
        /// Test NomadDeleteLeaseConfig
        /// </summary>
        [Fact]
        public void NomadDeleteLeaseConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string nomadMountPath = null;
            //instance.NomadDeleteLeaseConfig(nomadMountPath);
        }

        /// <summary>
        /// Test NomadDeleteRole
        /// </summary>
        [Fact]
        public void NomadDeleteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string nomadMountPath = null;
            //instance.NomadDeleteRole(name, nomadMountPath);
        }

        /// <summary>
        /// Test NomadListRoles
        /// </summary>
        [Fact]
        public void NomadListRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string nomadMountPath = null;
            //instance.NomadListRoles(list, nomadMountPath);
        }

        /// <summary>
        /// Test NomadReadAccessConfig
        /// </summary>
        [Fact]
        public void NomadReadAccessConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string nomadMountPath = null;
            //instance.NomadReadAccessConfig(nomadMountPath);
        }

        /// <summary>
        /// Test NomadReadCredentials
        /// </summary>
        [Fact]
        public void NomadReadCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string nomadMountPath = null;
            //instance.NomadReadCredentials(name, nomadMountPath);
        }

        /// <summary>
        /// Test NomadReadLeaseConfig
        /// </summary>
        [Fact]
        public void NomadReadLeaseConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string nomadMountPath = null;
            //instance.NomadReadLeaseConfig(nomadMountPath);
        }

        /// <summary>
        /// Test NomadReadRole
        /// </summary>
        [Fact]
        public void NomadReadRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string nomadMountPath = null;
            //instance.NomadReadRole(name, nomadMountPath);
        }

        /// <summary>
        /// Test NomadWriteAccessConfig
        /// </summary>
        [Fact]
        public void NomadWriteAccessConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NomadWriteAccessConfigRequest nomadWriteAccessConfigRequest = null;
            //string nomadMountPath = null;
            //instance.NomadWriteAccessConfig(nomadWriteAccessConfigRequest, nomadMountPath);
        }

        /// <summary>
        /// Test NomadWriteLeaseConfig
        /// </summary>
        [Fact]
        public void NomadWriteLeaseConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NomadWriteLeaseConfigRequest nomadWriteLeaseConfigRequest = null;
            //string nomadMountPath = null;
            //instance.NomadWriteLeaseConfig(nomadWriteLeaseConfigRequest, nomadMountPath);
        }

        /// <summary>
        /// Test NomadWriteRole
        /// </summary>
        [Fact]
        public void NomadWriteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //NomadWriteRoleRequest nomadWriteRoleRequest = null;
            //string nomadMountPath = null;
            //instance.NomadWriteRole(name, nomadWriteRoleRequest, nomadMountPath);
        }

        /// <summary>
        /// Test OpenLDAPCheckInLibrary
        /// </summary>
        [Fact]
        public void OpenLDAPCheckInLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //OpenLDAPCheckInLibraryRequest openLDAPCheckInLibraryRequest = null;
            //string openldapMountPath = null;
            //instance.OpenLDAPCheckInLibrary(name, openLDAPCheckInLibraryRequest, openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPCheckInManageLibrary
        /// </summary>
        [Fact]
        public void OpenLDAPCheckInManageLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //OpenLDAPCheckInManageLibraryRequest openLDAPCheckInManageLibraryRequest = null;
            //string openldapMountPath = null;
            //instance.OpenLDAPCheckInManageLibrary(name, openLDAPCheckInManageLibraryRequest, openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPCheckOutLibrary
        /// </summary>
        [Fact]
        public void OpenLDAPCheckOutLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //OpenLDAPCheckOutLibraryRequest openLDAPCheckOutLibraryRequest = null;
            //string openldapMountPath = null;
            //instance.OpenLDAPCheckOutLibrary(name, openLDAPCheckOutLibraryRequest, openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPDeleteConfig
        /// </summary>
        [Fact]
        public void OpenLDAPDeleteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string openldapMountPath = null;
            //instance.OpenLDAPDeleteConfig(openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPDeleteLibrary
        /// </summary>
        [Fact]
        public void OpenLDAPDeleteLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string openldapMountPath = null;
            //instance.OpenLDAPDeleteLibrary(name, openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPDeleteRole
        /// </summary>
        [Fact]
        public void OpenLDAPDeleteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string openldapMountPath = null;
            //instance.OpenLDAPDeleteRole(name, openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPDeleteStaticRole
        /// </summary>
        [Fact]
        public void OpenLDAPDeleteStaticRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string openldapMountPath = null;
            //instance.OpenLDAPDeleteStaticRole(name, openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPListLibraries
        /// </summary>
        [Fact]
        public void OpenLDAPListLibrariesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string openldapMountPath = null;
            //instance.OpenLDAPListLibraries(list, openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPListRoles
        /// </summary>
        [Fact]
        public void OpenLDAPListRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string openldapMountPath = null;
            //instance.OpenLDAPListRoles(list, openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPListStaticRoles
        /// </summary>
        [Fact]
        public void OpenLDAPListStaticRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string openldapMountPath = null;
            //instance.OpenLDAPListStaticRoles(list, openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPReadConfig
        /// </summary>
        [Fact]
        public void OpenLDAPReadConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string openldapMountPath = null;
            //instance.OpenLDAPReadConfig(openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPReadCredentials
        /// </summary>
        [Fact]
        public void OpenLDAPReadCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string openldapMountPath = null;
            //instance.OpenLDAPReadCredentials(name, openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPReadLibrary
        /// </summary>
        [Fact]
        public void OpenLDAPReadLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string openldapMountPath = null;
            //instance.OpenLDAPReadLibrary(name, openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPReadLibraryStatus
        /// </summary>
        [Fact]
        public void OpenLDAPReadLibraryStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string openldapMountPath = null;
            //instance.OpenLDAPReadLibraryStatus(name, openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPReadRole
        /// </summary>
        [Fact]
        public void OpenLDAPReadRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string openldapMountPath = null;
            //instance.OpenLDAPReadRole(name, openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPReadStaticCredentials
        /// </summary>
        [Fact]
        public void OpenLDAPReadStaticCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string openldapMountPath = null;
            //instance.OpenLDAPReadStaticCredentials(name, openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPReadStaticRole
        /// </summary>
        [Fact]
        public void OpenLDAPReadStaticRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string openldapMountPath = null;
            //instance.OpenLDAPReadStaticRole(name, openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPRotateRole
        /// </summary>
        [Fact]
        public void OpenLDAPRotateRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string openldapMountPath = null;
            //instance.OpenLDAPRotateRole(name, openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPRotateRoot
        /// </summary>
        [Fact]
        public void OpenLDAPRotateRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string openldapMountPath = null;
            //instance.OpenLDAPRotateRoot(openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPWriteConfig
        /// </summary>
        [Fact]
        public void OpenLDAPWriteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OpenLDAPWriteConfigRequest openLDAPWriteConfigRequest = null;
            //string openldapMountPath = null;
            //instance.OpenLDAPWriteConfig(openLDAPWriteConfigRequest, openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPWriteLibrary
        /// </summary>
        [Fact]
        public void OpenLDAPWriteLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //OpenLDAPWriteLibraryRequest openLDAPWriteLibraryRequest = null;
            //string openldapMountPath = null;
            //instance.OpenLDAPWriteLibrary(name, openLDAPWriteLibraryRequest, openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPWriteRole
        /// </summary>
        [Fact]
        public void OpenLDAPWriteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //OpenLDAPWriteRoleRequest openLDAPWriteRoleRequest = null;
            //string openldapMountPath = null;
            //instance.OpenLDAPWriteRole(name, openLDAPWriteRoleRequest, openldapMountPath);
        }

        /// <summary>
        /// Test OpenLDAPWriteStaticRole
        /// </summary>
        [Fact]
        public void OpenLDAPWriteStaticRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //OpenLDAPWriteStaticRoleRequest openLDAPWriteStaticRoleRequest = null;
            //string openldapMountPath = null;
            //instance.OpenLDAPWriteStaticRole(name, openLDAPWriteStaticRoleRequest, openldapMountPath);
        }

        /// <summary>
        /// Test PKIBundleWrite
        /// </summary>
        [Fact]
        public void PKIBundleWriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKIBundleWriteRequest pKIBundleWriteRequest = null;
            //string pkiMountPath = null;
            //instance.PKIBundleWrite(pKIBundleWriteRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIDeleteKey
        /// </summary>
        [Fact]
        public void PKIDeleteKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string keyRef = null;
            //string pkiMountPath = null;
            //instance.PKIDeleteKey(keyRef, pkiMountPath);
        }

        /// <summary>
        /// Test PKIDeleteRole
        /// </summary>
        [Fact]
        public void PKIDeleteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string pkiMountPath = null;
            //instance.PKIDeleteRole(name, pkiMountPath);
        }

        /// <summary>
        /// Test PKIDeleteRoot
        /// </summary>
        [Fact]
        public void PKIDeleteRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PKIDeleteRoot(pkiMountPath);
        }

        /// <summary>
        /// Test PKIGenerateRoot
        /// </summary>
        [Fact]
        public void PKIGenerateRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string exported = null;
            //PKIGenerateRootRequest pKIGenerateRootRequest = null;
            //string pkiMountPath = null;
            //instance.PKIGenerateRoot(exported, pKIGenerateRootRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIImportKeys
        /// </summary>
        [Fact]
        public void PKIImportKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKIImportKeysRequest pKIImportKeysRequest = null;
            //string pkiMountPath = null;
            //instance.PKIImportKeys(pKIImportKeysRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIIssuerIssueRole
        /// </summary>
        [Fact]
        public void PKIIssuerIssueRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //string role = null;
            //PKIIssuerIssueRoleRequest pKIIssuerIssueRoleRequest = null;
            //string pkiMountPath = null;
            //instance.PKIIssuerIssueRole(issuerRef, role, pKIIssuerIssueRoleRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIIssuerResignCRLs
        /// </summary>
        [Fact]
        public void PKIIssuerResignCRLsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //PKIIssuerResignCRLsRequest pKIIssuerResignCRLsRequest = null;
            //string pkiMountPath = null;
            //instance.PKIIssuerResignCRLs(issuerRef, pKIIssuerResignCRLsRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIIssuerRevoke
        /// </summary>
        [Fact]
        public void PKIIssuerRevokeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //string pkiMountPath = null;
            //instance.PKIIssuerRevoke(issuerRef, pkiMountPath);
        }

        /// <summary>
        /// Test PKIIssuerSignIntermediate
        /// </summary>
        [Fact]
        public void PKIIssuerSignIntermediateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //PKIIssuerSignIntermediateRequest pKIIssuerSignIntermediateRequest = null;
            //string pkiMountPath = null;
            //instance.PKIIssuerSignIntermediate(issuerRef, pKIIssuerSignIntermediateRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIIssuerSignRevocationList
        /// </summary>
        [Fact]
        public void PKIIssuerSignRevocationListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //PKIIssuerSignRevocationListRequest pKIIssuerSignRevocationListRequest = null;
            //string pkiMountPath = null;
            //instance.PKIIssuerSignRevocationList(issuerRef, pKIIssuerSignRevocationListRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIIssuerSignRole
        /// </summary>
        [Fact]
        public void PKIIssuerSignRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //string role = null;
            //PKIIssuerSignRoleRequest pKIIssuerSignRoleRequest = null;
            //string pkiMountPath = null;
            //instance.PKIIssuerSignRole(issuerRef, role, pKIIssuerSignRoleRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIIssuerSignSelfIssued
        /// </summary>
        [Fact]
        public void PKIIssuerSignSelfIssuedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //PKIIssuerSignSelfIssuedRequest pKIIssuerSignSelfIssuedRequest = null;
            //string pkiMountPath = null;
            //instance.PKIIssuerSignSelfIssued(issuerRef, pKIIssuerSignSelfIssuedRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIIssuerSignVerbatim
        /// </summary>
        [Fact]
        public void PKIIssuerSignVerbatimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //PKIIssuerSignVerbatimRequest pKIIssuerSignVerbatimRequest = null;
            //string pkiMountPath = null;
            //instance.PKIIssuerSignVerbatim(issuerRef, pKIIssuerSignVerbatimRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIIssuerSignVerbatimRole
        /// </summary>
        [Fact]
        public void PKIIssuerSignVerbatimRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //string role = null;
            //PKIIssuerSignVerbatimRoleRequest pKIIssuerSignVerbatimRoleRequest = null;
            //string pkiMountPath = null;
            //instance.PKIIssuerSignVerbatimRole(issuerRef, role, pKIIssuerSignVerbatimRoleRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIIssuersGenerateIntermediate
        /// </summary>
        [Fact]
        public void PKIIssuersGenerateIntermediateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string exported = null;
            //PKIIssuersGenerateIntermediateRequest pKIIssuersGenerateIntermediateRequest = null;
            //string pkiMountPath = null;
            //instance.PKIIssuersGenerateIntermediate(exported, pKIIssuersGenerateIntermediateRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIIssuersGenerateRoot
        /// </summary>
        [Fact]
        public void PKIIssuersGenerateRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string exported = null;
            //PKIIssuersGenerateRootRequest pKIIssuersGenerateRootRequest = null;
            //string pkiMountPath = null;
            //instance.PKIIssuersGenerateRoot(exported, pKIIssuersGenerateRootRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIIssuersList
        /// </summary>
        [Fact]
        public void PKIIssuersListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string pkiMountPath = null;
            //instance.PKIIssuersList(list, pkiMountPath);
        }

        /// <summary>
        /// Test PKIListCerts
        /// </summary>
        [Fact]
        public void PKIListCertsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string pkiMountPath = null;
            //instance.PKIListCerts(list, pkiMountPath);
        }

        /// <summary>
        /// Test PKIListCertsRevoked
        /// </summary>
        [Fact]
        public void PKIListCertsRevokedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string pkiMountPath = null;
            //instance.PKIListCertsRevoked(list, pkiMountPath);
        }

        /// <summary>
        /// Test PKIListKeys
        /// </summary>
        [Fact]
        public void PKIListKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string pkiMountPath = null;
            //instance.PKIListKeys(list, pkiMountPath);
        }

        /// <summary>
        /// Test PKIListRoles
        /// </summary>
        [Fact]
        public void PKIListRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string pkiMountPath = null;
            //instance.PKIListRoles(list, pkiMountPath);
        }

        /// <summary>
        /// Test PKIReadAutoTidyConfig
        /// </summary>
        [Fact]
        public void PKIReadAutoTidyConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PKIReadAutoTidyConfig(pkiMountPath);
        }

        /// <summary>
        /// Test PKIReadCA
        /// </summary>
        [Fact]
        public void PKIReadCATest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PKIReadCA(pkiMountPath);
        }

        /// <summary>
        /// Test PKIReadCAChain
        /// </summary>
        [Fact]
        public void PKIReadCAChainTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PKIReadCAChain(pkiMountPath);
        }

        /// <summary>
        /// Test PKIReadCAPem
        /// </summary>
        [Fact]
        public void PKIReadCAPemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PKIReadCAPem(pkiMountPath);
        }

        /// <summary>
        /// Test PKIReadCRL
        /// </summary>
        [Fact]
        public void PKIReadCRLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PKIReadCRL(pkiMountPath);
        }

        /// <summary>
        /// Test PKIReadCRLConfig
        /// </summary>
        [Fact]
        public void PKIReadCRLConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PKIReadCRLConfig(pkiMountPath);
        }

        /// <summary>
        /// Test PKIReadCRLRotate
        /// </summary>
        [Fact]
        public void PKIReadCRLRotateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PKIReadCRLRotate(pkiMountPath);
        }

        /// <summary>
        /// Test PKIReadCRLRotateDelta
        /// </summary>
        [Fact]
        public void PKIReadCRLRotateDeltaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PKIReadCRLRotateDelta(pkiMountPath);
        }

        /// <summary>
        /// Test PKIReadCert
        /// </summary>
        [Fact]
        public void PKIReadCertTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serial = null;
            //string pkiMountPath = null;
            //instance.PKIReadCert(serial, pkiMountPath);
        }

        /// <summary>
        /// Test PKIReadCertCAChain
        /// </summary>
        [Fact]
        public void PKIReadCertCAChainTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PKIReadCertCAChain(pkiMountPath);
        }

        /// <summary>
        /// Test PKIReadCertRaw
        /// </summary>
        [Fact]
        public void PKIReadCertRawTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serial = null;
            //string pkiMountPath = null;
            //instance.PKIReadCertRaw(serial, pkiMountPath);
        }

        /// <summary>
        /// Test PKIReadCertRawPem
        /// </summary>
        [Fact]
        public void PKIReadCertRawPemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string serial = null;
            //string pkiMountPath = null;
            //instance.PKIReadCertRawPem(serial, pkiMountPath);
        }

        /// <summary>
        /// Test PKIReadClusterConfig
        /// </summary>
        [Fact]
        public void PKIReadClusterConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PKIReadClusterConfig(pkiMountPath);
        }

        /// <summary>
        /// Test PKIReadDeltaCRL
        /// </summary>
        [Fact]
        public void PKIReadDeltaCRLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PKIReadDeltaCRL(pkiMountPath);
        }

        /// <summary>
        /// Test PKIReadIssuersConfig
        /// </summary>
        [Fact]
        public void PKIReadIssuersConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PKIReadIssuersConfig(pkiMountPath);
        }

        /// <summary>
        /// Test PKIReadKey
        /// </summary>
        [Fact]
        public void PKIReadKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string keyRef = null;
            //string pkiMountPath = null;
            //instance.PKIReadKey(keyRef, pkiMountPath);
        }

        /// <summary>
        /// Test PKIReadKeysConfig
        /// </summary>
        [Fact]
        public void PKIReadKeysConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PKIReadKeysConfig(pkiMountPath);
        }

        /// <summary>
        /// Test PKIReadOCSPReq
        /// </summary>
        [Fact]
        public void PKIReadOCSPReqTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string req = null;
            //string pkiMountPath = null;
            //instance.PKIReadOCSPReq(req, pkiMountPath);
        }

        /// <summary>
        /// Test PKIReadRole
        /// </summary>
        [Fact]
        public void PKIReadRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string pkiMountPath = null;
            //instance.PKIReadRole(name, pkiMountPath);
        }

        /// <summary>
        /// Test PKIReadURLConfig
        /// </summary>
        [Fact]
        public void PKIReadURLConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PKIReadURLConfig(pkiMountPath);
        }

        /// <summary>
        /// Test PKIReplaceRoot
        /// </summary>
        [Fact]
        public void PKIReplaceRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKIReplaceRootRequest pKIReplaceRootRequest = null;
            //string pkiMountPath = null;
            //instance.PKIReplaceRoot(pKIReplaceRootRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIRevoke
        /// </summary>
        [Fact]
        public void PKIRevokeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKIRevokeRequest pKIRevokeRequest = null;
            //string pkiMountPath = null;
            //instance.PKIRevoke(pKIRevokeRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIRevokeWithKey
        /// </summary>
        [Fact]
        public void PKIRevokeWithKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKIRevokeWithKeyRequest pKIRevokeWithKeyRequest = null;
            //string pkiMountPath = null;
            //instance.PKIRevokeWithKey(pKIRevokeWithKeyRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIRootSignIntermediate
        /// </summary>
        [Fact]
        public void PKIRootSignIntermediateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKIRootSignIntermediateRequest pKIRootSignIntermediateRequest = null;
            //string pkiMountPath = null;
            //instance.PKIRootSignIntermediate(pKIRootSignIntermediateRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIRootSignSelfIssued
        /// </summary>
        [Fact]
        public void PKIRootSignSelfIssuedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKIRootSignSelfIssuedRequest pKIRootSignSelfIssuedRequest = null;
            //string pkiMountPath = null;
            //instance.PKIRootSignSelfIssued(pKIRootSignSelfIssuedRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIRotateRoot
        /// </summary>
        [Fact]
        public void PKIRotateRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string exported = null;
            //PKIRotateRootRequest pKIRotateRootRequest = null;
            //string pkiMountPath = null;
            //instance.PKIRotateRoot(exported, pKIRotateRootRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKISignRole
        /// </summary>
        [Fact]
        public void PKISignRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //PKISignRoleRequest pKISignRoleRequest = null;
            //string pkiMountPath = null;
            //instance.PKISignRole(role, pKISignRoleRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKISignVerbatim
        /// </summary>
        [Fact]
        public void PKISignVerbatimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKISignVerbatimRequest pKISignVerbatimRequest = null;
            //string pkiMountPath = null;
            //instance.PKISignVerbatim(pKISignVerbatimRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKISignVerbatimRole
        /// </summary>
        [Fact]
        public void PKISignVerbatimRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //PKISignVerbatimRoleRequest pKISignVerbatimRoleRequest = null;
            //string pkiMountPath = null;
            //instance.PKISignVerbatimRole(role, pKISignVerbatimRoleRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKITidy
        /// </summary>
        [Fact]
        public void PKITidyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKITidyRequest pKITidyRequest = null;
            //string pkiMountPath = null;
            //instance.PKITidy(pKITidyRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKITidyCancel
        /// </summary>
        [Fact]
        public void PKITidyCancelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PKITidyCancel(pkiMountPath);
        }

        /// <summary>
        /// Test PKITidyStatus
        /// </summary>
        [Fact]
        public void PKITidyStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PKITidyStatus(pkiMountPath);
        }

        /// <summary>
        /// Test PKIWriteAutoTidyConfig
        /// </summary>
        [Fact]
        public void PKIWriteAutoTidyConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKIWriteAutoTidyConfigRequest pKIWriteAutoTidyConfigRequest = null;
            //string pkiMountPath = null;
            //instance.PKIWriteAutoTidyConfig(pKIWriteAutoTidyConfigRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIWriteCAConfig
        /// </summary>
        [Fact]
        public void PKIWriteCAConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKIWriteCAConfigRequest pKIWriteCAConfigRequest = null;
            //string pkiMountPath = null;
            //instance.PKIWriteCAConfig(pKIWriteCAConfigRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIWriteCRLConfig
        /// </summary>
        [Fact]
        public void PKIWriteCRLConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKIWriteCRLConfigRequest pKIWriteCRLConfigRequest = null;
            //string pkiMountPath = null;
            //instance.PKIWriteCRLConfig(pKIWriteCRLConfigRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIWriteCerts
        /// </summary>
        [Fact]
        public void PKIWriteCertsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKIWriteCertsRequest pKIWriteCertsRequest = null;
            //string pkiMountPath = null;
            //instance.PKIWriteCerts(pKIWriteCertsRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIWriteClusterConfig
        /// </summary>
        [Fact]
        public void PKIWriteClusterConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKIWriteClusterConfigRequest pKIWriteClusterConfigRequest = null;
            //string pkiMountPath = null;
            //instance.PKIWriteClusterConfig(pKIWriteClusterConfigRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIWriteIntermediateCrossSign
        /// </summary>
        [Fact]
        public void PKIWriteIntermediateCrossSignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKIWriteIntermediateCrossSignRequest pKIWriteIntermediateCrossSignRequest = null;
            //string pkiMountPath = null;
            //instance.PKIWriteIntermediateCrossSign(pKIWriteIntermediateCrossSignRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIWriteIntermediateGenerate
        /// </summary>
        [Fact]
        public void PKIWriteIntermediateGenerateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string exported = null;
            //PKIWriteIntermediateGenerateRequest pKIWriteIntermediateGenerateRequest = null;
            //string pkiMountPath = null;
            //instance.PKIWriteIntermediateGenerate(exported, pKIWriteIntermediateGenerateRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIWriteIntermediateSetSigned
        /// </summary>
        [Fact]
        public void PKIWriteIntermediateSetSignedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKIWriteIntermediateSetSignedRequest pKIWriteIntermediateSetSignedRequest = null;
            //string pkiMountPath = null;
            //instance.PKIWriteIntermediateSetSigned(pKIWriteIntermediateSetSignedRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIWriteInternalExported
        /// </summary>
        [Fact]
        public void PKIWriteInternalExportedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKIWriteInternalExportedRequest pKIWriteInternalExportedRequest = null;
            //string pkiMountPath = null;
            //instance.PKIWriteInternalExported(pKIWriteInternalExportedRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIWriteIssueRole
        /// </summary>
        [Fact]
        public void PKIWriteIssueRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //PKIWriteIssueRoleRequest pKIWriteIssueRoleRequest = null;
            //string pkiMountPath = null;
            //instance.PKIWriteIssueRole(role, pKIWriteIssueRoleRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIWriteIssuersConfig
        /// </summary>
        [Fact]
        public void PKIWriteIssuersConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKIWriteIssuersConfigRequest pKIWriteIssuersConfigRequest = null;
            //string pkiMountPath = null;
            //instance.PKIWriteIssuersConfig(pKIWriteIssuersConfigRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIWriteJSON
        /// </summary>
        [Fact]
        public void PKIWriteJSONTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKIWriteJSONRequest pKIWriteJSONRequest = null;
            //string pkiMountPath = null;
            //instance.PKIWriteJSON(pKIWriteJSONRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIWriteKMS
        /// </summary>
        [Fact]
        public void PKIWriteKMSTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKIWriteKMSRequest pKIWriteKMSRequest = null;
            //string pkiMountPath = null;
            //instance.PKIWriteKMS(pKIWriteKMSRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIWriteKey
        /// </summary>
        [Fact]
        public void PKIWriteKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string keyRef = null;
            //PKIWriteKeyRequest pKIWriteKeyRequest = null;
            //string pkiMountPath = null;
            //instance.PKIWriteKey(keyRef, pKIWriteKeyRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIWriteKeysConfig
        /// </summary>
        [Fact]
        public void PKIWriteKeysConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKIWriteKeysConfigRequest pKIWriteKeysConfigRequest = null;
            //string pkiMountPath = null;
            //instance.PKIWriteKeysConfig(pKIWriteKeysConfigRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIWriteOCSP
        /// </summary>
        [Fact]
        public void PKIWriteOCSPTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PKIWriteOCSP(pkiMountPath);
        }

        /// <summary>
        /// Test PKIWriteRole
        /// </summary>
        [Fact]
        public void PKIWriteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //PKIWriteRoleRequest pKIWriteRoleRequest = null;
            //string pkiMountPath = null;
            //instance.PKIWriteRole(name, pKIWriteRoleRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PKIWriteURLConfig
        /// </summary>
        [Fact]
        public void PKIWriteURLConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PKIWriteURLConfigRequest pKIWriteURLConfigRequest = null;
            //string pkiMountPath = null;
            //instance.PKIWriteURLConfig(pKIWriteURLConfigRequest, pkiMountPath);
        }

        /// <summary>
        /// Test PkiDeleteIssuerRefDerPem
        /// </summary>
        [Fact]
        public void PkiDeleteIssuerRefDerPemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //string pkiMountPath = null;
            //instance.PkiDeleteIssuerRefDerPem(issuerRef, pkiMountPath);
        }

        /// <summary>
        /// Test PkiDeleteJson
        /// </summary>
        [Fact]
        public void PkiDeleteJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PkiDeleteJson(pkiMountPath);
        }

        /// <summary>
        /// Test PkiReadDelta
        /// </summary>
        [Fact]
        public void PkiReadDeltaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PkiReadDelta(pkiMountPath);
        }

        /// <summary>
        /// Test PkiReadDeltaPem
        /// </summary>
        [Fact]
        public void PkiReadDeltaPemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PkiReadDeltaPem(pkiMountPath);
        }

        /// <summary>
        /// Test PkiReadDer
        /// </summary>
        [Fact]
        public void PkiReadDerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PkiReadDer(pkiMountPath);
        }

        /// <summary>
        /// Test PkiReadIssuerRefCrlPemDerDeltaPem
        /// </summary>
        [Fact]
        public void PkiReadIssuerRefCrlPemDerDeltaPemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //string pkiMountPath = null;
            //instance.PkiReadIssuerRefCrlPemDerDeltaPem(issuerRef, pkiMountPath);
        }

        /// <summary>
        /// Test PkiReadIssuerRefDerPem
        /// </summary>
        [Fact]
        public void PkiReadIssuerRefDerPemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //string pkiMountPath = null;
            //instance.PkiReadIssuerRefDerPem(issuerRef, pkiMountPath);
        }

        /// <summary>
        /// Test PkiReadJson
        /// </summary>
        [Fact]
        public void PkiReadJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PkiReadJson(pkiMountPath);
        }

        /// <summary>
        /// Test PkiReadPem
        /// </summary>
        [Fact]
        public void PkiReadPemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pkiMountPath = null;
            //instance.PkiReadPem(pkiMountPath);
        }

        /// <summary>
        /// Test PkiWriteIssuerRefDerPem
        /// </summary>
        [Fact]
        public void PkiWriteIssuerRefDerPemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string issuerRef = null;
            //PkiWriteIssuerRefDerPemRequest pkiWriteIssuerRefDerPemRequest = null;
            //string pkiMountPath = null;
            //instance.PkiWriteIssuerRefDerPem(issuerRef, pkiWriteIssuerRefDerPemRequest, pkiMountPath);
        }

        /// <summary>
        /// Test RabbitMQDeleteRole
        /// </summary>
        [Fact]
        public void RabbitMQDeleteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string rabbitmqMountPath = null;
            //instance.RabbitMQDeleteRole(name, rabbitmqMountPath);
        }

        /// <summary>
        /// Test RabbitMQListRoles
        /// </summary>
        [Fact]
        public void RabbitMQListRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string rabbitmqMountPath = null;
            //instance.RabbitMQListRoles(list, rabbitmqMountPath);
        }

        /// <summary>
        /// Test RabbitMQReadCredentials
        /// </summary>
        [Fact]
        public void RabbitMQReadCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string rabbitmqMountPath = null;
            //instance.RabbitMQReadCredentials(name, rabbitmqMountPath);
        }

        /// <summary>
        /// Test RabbitMQReadLeaseConfig
        /// </summary>
        [Fact]
        public void RabbitMQReadLeaseConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string rabbitmqMountPath = null;
            //instance.RabbitMQReadLeaseConfig(rabbitmqMountPath);
        }

        /// <summary>
        /// Test RabbitMQReadRole
        /// </summary>
        [Fact]
        public void RabbitMQReadRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string rabbitmqMountPath = null;
            //instance.RabbitMQReadRole(name, rabbitmqMountPath);
        }

        /// <summary>
        /// Test RabbitMQWriteConnectionConfig
        /// </summary>
        [Fact]
        public void RabbitMQWriteConnectionConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RabbitMQWriteConnectionConfigRequest rabbitMQWriteConnectionConfigRequest = null;
            //string rabbitmqMountPath = null;
            //instance.RabbitMQWriteConnectionConfig(rabbitMQWriteConnectionConfigRequest, rabbitmqMountPath);
        }

        /// <summary>
        /// Test RabbitMQWriteLeaseConfig
        /// </summary>
        [Fact]
        public void RabbitMQWriteLeaseConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RabbitMQWriteLeaseConfigRequest rabbitMQWriteLeaseConfigRequest = null;
            //string rabbitmqMountPath = null;
            //instance.RabbitMQWriteLeaseConfig(rabbitMQWriteLeaseConfigRequest, rabbitmqMountPath);
        }

        /// <summary>
        /// Test RabbitMQWriteRole
        /// </summary>
        [Fact]
        public void RabbitMQWriteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //RabbitMQWriteRoleRequest rabbitMQWriteRoleRequest = null;
            //string rabbitmqMountPath = null;
            //instance.RabbitMQWriteRole(name, rabbitMQWriteRoleRequest, rabbitmqMountPath);
        }

        /// <summary>
        /// Test SSHDeleteCAConfig
        /// </summary>
        [Fact]
        public void SSHDeleteCAConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sshMountPath = null;
            //instance.SSHDeleteCAConfig(sshMountPath);
        }

        /// <summary>
        /// Test SSHDeleteKeys
        /// </summary>
        [Fact]
        public void SSHDeleteKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string keyName = null;
            //string sshMountPath = null;
            //instance.SSHDeleteKeys(keyName, sshMountPath);
        }

        /// <summary>
        /// Test SSHDeleteRole
        /// </summary>
        [Fact]
        public void SSHDeleteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //string sshMountPath = null;
            //instance.SSHDeleteRole(role, sshMountPath);
        }

        /// <summary>
        /// Test SSHDeleteZeroAddressConfig
        /// </summary>
        [Fact]
        public void SSHDeleteZeroAddressConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sshMountPath = null;
            //instance.SSHDeleteZeroAddressConfig(sshMountPath);
        }

        /// <summary>
        /// Test SSHListRoles
        /// </summary>
        [Fact]
        public void SSHListRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string sshMountPath = null;
            //instance.SSHListRoles(list, sshMountPath);
        }

        /// <summary>
        /// Test SSHLookup
        /// </summary>
        [Fact]
        public void SSHLookupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SSHLookupRequest sSHLookupRequest = null;
            //string sshMountPath = null;
            //instance.SSHLookup(sSHLookupRequest, sshMountPath);
        }

        /// <summary>
        /// Test SSHReadCAConfig
        /// </summary>
        [Fact]
        public void SSHReadCAConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sshMountPath = null;
            //instance.SSHReadCAConfig(sshMountPath);
        }

        /// <summary>
        /// Test SSHReadPublicKey
        /// </summary>
        [Fact]
        public void SSHReadPublicKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sshMountPath = null;
            //instance.SSHReadPublicKey(sshMountPath);
        }

        /// <summary>
        /// Test SSHReadRole
        /// </summary>
        [Fact]
        public void SSHReadRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //string sshMountPath = null;
            //instance.SSHReadRole(role, sshMountPath);
        }

        /// <summary>
        /// Test SSHReadZeroAddressConfig
        /// </summary>
        [Fact]
        public void SSHReadZeroAddressConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sshMountPath = null;
            //instance.SSHReadZeroAddressConfig(sshMountPath);
        }

        /// <summary>
        /// Test SSHSign
        /// </summary>
        [Fact]
        public void SSHSignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //SSHSignRequest sSHSignRequest = null;
            //string sshMountPath = null;
            //instance.SSHSign(role, sSHSignRequest, sshMountPath);
        }

        /// <summary>
        /// Test SSHVerify
        /// </summary>
        [Fact]
        public void SSHVerifyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SSHVerifyRequest sSHVerifyRequest = null;
            //string sshMountPath = null;
            //instance.SSHVerify(sSHVerifyRequest, sshMountPath);
        }

        /// <summary>
        /// Test SSHWriteCAConfig
        /// </summary>
        [Fact]
        public void SSHWriteCAConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SSHWriteCAConfigRequest sSHWriteCAConfigRequest = null;
            //string sshMountPath = null;
            //instance.SSHWriteCAConfig(sSHWriteCAConfigRequest, sshMountPath);
        }

        /// <summary>
        /// Test SSHWriteCredentials
        /// </summary>
        [Fact]
        public void SSHWriteCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //SSHWriteCredentialsRequest sSHWriteCredentialsRequest = null;
            //string sshMountPath = null;
            //instance.SSHWriteCredentials(role, sSHWriteCredentialsRequest, sshMountPath);
        }

        /// <summary>
        /// Test SSHWriteIssue
        /// </summary>
        [Fact]
        public void SSHWriteIssueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //SSHWriteIssueRequest sSHWriteIssueRequest = null;
            //string sshMountPath = null;
            //instance.SSHWriteIssue(role, sSHWriteIssueRequest, sshMountPath);
        }

        /// <summary>
        /// Test SSHWriteKeys
        /// </summary>
        [Fact]
        public void SSHWriteKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string keyName = null;
            //SSHWriteKeysRequest sSHWriteKeysRequest = null;
            //string sshMountPath = null;
            //instance.SSHWriteKeys(keyName, sSHWriteKeysRequest, sshMountPath);
        }

        /// <summary>
        /// Test SSHWriteRole
        /// </summary>
        [Fact]
        public void SSHWriteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //SSHWriteRoleRequest sSHWriteRoleRequest = null;
            //string sshMountPath = null;
            //instance.SSHWriteRole(role, sSHWriteRoleRequest, sshMountPath);
        }

        /// <summary>
        /// Test SSHWriteZeroAddressConfig
        /// </summary>
        [Fact]
        public void SSHWriteZeroAddressConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SSHWriteZeroAddressConfigRequest sSHWriteZeroAddressConfigRequest = null;
            //string sshMountPath = null;
            //instance.SSHWriteZeroAddressConfig(sSHWriteZeroAddressConfigRequest, sshMountPath);
        }

        /// <summary>
        /// Test TOTPDeleteKey
        /// </summary>
        [Fact]
        public void TOTPDeleteKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string totpMountPath = null;
            //instance.TOTPDeleteKey(name, totpMountPath);
        }

        /// <summary>
        /// Test TOTPListKeys
        /// </summary>
        [Fact]
        public void TOTPListKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string totpMountPath = null;
            //instance.TOTPListKeys(list, totpMountPath);
        }

        /// <summary>
        /// Test TOTPReadCode
        /// </summary>
        [Fact]
        public void TOTPReadCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string totpMountPath = null;
            //instance.TOTPReadCode(name, totpMountPath);
        }

        /// <summary>
        /// Test TOTPReadKey
        /// </summary>
        [Fact]
        public void TOTPReadKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string totpMountPath = null;
            //instance.TOTPReadKey(name, totpMountPath);
        }

        /// <summary>
        /// Test TOTPWriteCode
        /// </summary>
        [Fact]
        public void TOTPWriteCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //TOTPWriteCodeRequest tOTPWriteCodeRequest = null;
            //string totpMountPath = null;
            //instance.TOTPWriteCode(name, tOTPWriteCodeRequest, totpMountPath);
        }

        /// <summary>
        /// Test TOTPWriteKey
        /// </summary>
        [Fact]
        public void TOTPWriteKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //TOTPWriteKeyRequest tOTPWriteKeyRequest = null;
            //string totpMountPath = null;
            //instance.TOTPWriteKey(name, tOTPWriteKeyRequest, totpMountPath);
        }

        /// <summary>
        /// Test TerraformDeleteConfig
        /// </summary>
        [Fact]
        public void TerraformDeleteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string terraformMountPath = null;
            //instance.TerraformDeleteConfig(terraformMountPath);
        }

        /// <summary>
        /// Test TerraformDeleteRole
        /// </summary>
        [Fact]
        public void TerraformDeleteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string terraformMountPath = null;
            //instance.TerraformDeleteRole(name, terraformMountPath);
        }

        /// <summary>
        /// Test TerraformListRoles
        /// </summary>
        [Fact]
        public void TerraformListRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string terraformMountPath = null;
            //instance.TerraformListRoles(list, terraformMountPath);
        }

        /// <summary>
        /// Test TerraformReadConfig
        /// </summary>
        [Fact]
        public void TerraformReadConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string terraformMountPath = null;
            //instance.TerraformReadConfig(terraformMountPath);
        }

        /// <summary>
        /// Test TerraformReadCredentials
        /// </summary>
        [Fact]
        public void TerraformReadCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string terraformMountPath = null;
            //instance.TerraformReadCredentials(name, terraformMountPath);
        }

        /// <summary>
        /// Test TerraformReadRole
        /// </summary>
        [Fact]
        public void TerraformReadRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string terraformMountPath = null;
            //instance.TerraformReadRole(name, terraformMountPath);
        }

        /// <summary>
        /// Test TerraformRotateRole
        /// </summary>
        [Fact]
        public void TerraformRotateRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string terraformMountPath = null;
            //instance.TerraformRotateRole(name, terraformMountPath);
        }

        /// <summary>
        /// Test TerraformWriteConfig
        /// </summary>
        [Fact]
        public void TerraformWriteConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TerraformWriteConfigRequest terraformWriteConfigRequest = null;
            //string terraformMountPath = null;
            //instance.TerraformWriteConfig(terraformWriteConfigRequest, terraformMountPath);
        }

        /// <summary>
        /// Test TerraformWriteCredentials
        /// </summary>
        [Fact]
        public void TerraformWriteCredentialsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string terraformMountPath = null;
            //instance.TerraformWriteCredentials(name, terraformMountPath);
        }

        /// <summary>
        /// Test TerraformWriteRole
        /// </summary>
        [Fact]
        public void TerraformWriteRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //TerraformWriteRoleRequest terraformWriteRoleRequest = null;
            //string terraformMountPath = null;
            //instance.TerraformWriteRole(name, terraformWriteRoleRequest, terraformMountPath);
        }

        /// <summary>
        /// Test TransitBackup
        /// </summary>
        [Fact]
        public void TransitBackupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string transitMountPath = null;
            //instance.TransitBackup(name, transitMountPath);
        }

        /// <summary>
        /// Test TransitDecrypt
        /// </summary>
        [Fact]
        public void TransitDecryptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //TransitDecryptRequest transitDecryptRequest = null;
            //string transitMountPath = null;
            //instance.TransitDecrypt(name, transitDecryptRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitDeleteKey
        /// </summary>
        [Fact]
        public void TransitDeleteKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string transitMountPath = null;
            //instance.TransitDeleteKey(name, transitMountPath);
        }

        /// <summary>
        /// Test TransitEncrypt
        /// </summary>
        [Fact]
        public void TransitEncryptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //TransitEncryptRequest transitEncryptRequest = null;
            //string transitMountPath = null;
            //instance.TransitEncrypt(name, transitEncryptRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitExport
        /// </summary>
        [Fact]
        public void TransitExportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string type = null;
            //string transitMountPath = null;
            //instance.TransitExport(name, type, transitMountPath);
        }

        /// <summary>
        /// Test TransitExportVersion
        /// </summary>
        [Fact]
        public void TransitExportVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string type = null;
            //string version = null;
            //string transitMountPath = null;
            //instance.TransitExportVersion(name, type, version, transitMountPath);
        }

        /// <summary>
        /// Test TransitGenerateDataKey
        /// </summary>
        [Fact]
        public void TransitGenerateDataKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string plaintext = null;
            //TransitGenerateDataKeyRequest transitGenerateDataKeyRequest = null;
            //string transitMountPath = null;
            //instance.TransitGenerateDataKey(name, plaintext, transitGenerateDataKeyRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitGenerateHMAC
        /// </summary>
        [Fact]
        public void TransitGenerateHMACTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //TransitGenerateHMACRequest transitGenerateHMACRequest = null;
            //string transitMountPath = null;
            //instance.TransitGenerateHMAC(name, transitGenerateHMACRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitGenerateHMACWithAlgorithm
        /// </summary>
        [Fact]
        public void TransitGenerateHMACWithAlgorithmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string urlalgorithm = null;
            //TransitGenerateHMACWithAlgorithmRequest transitGenerateHMACWithAlgorithmRequest = null;
            //string transitMountPath = null;
            //instance.TransitGenerateHMACWithAlgorithm(name, urlalgorithm, transitGenerateHMACWithAlgorithmRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitGenerateRandom
        /// </summary>
        [Fact]
        public void TransitGenerateRandomTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransitGenerateRandomRequest transitGenerateRandomRequest = null;
            //string transitMountPath = null;
            //instance.TransitGenerateRandom(transitGenerateRandomRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitGenerateRandomSource
        /// </summary>
        [Fact]
        public void TransitGenerateRandomSourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;
            //TransitGenerateRandomSourceRequest transitGenerateRandomSourceRequest = null;
            //string transitMountPath = null;
            //instance.TransitGenerateRandomSource(source, transitGenerateRandomSourceRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitGenerateRandomSourceBytes
        /// </summary>
        [Fact]
        public void TransitGenerateRandomSourceBytesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;
            //string urlbytes = null;
            //TransitGenerateRandomSourceBytesRequest transitGenerateRandomSourceBytesRequest = null;
            //string transitMountPath = null;
            //instance.TransitGenerateRandomSourceBytes(source, urlbytes, transitGenerateRandomSourceBytesRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitHash
        /// </summary>
        [Fact]
        public void TransitHashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransitHashRequest transitHashRequest = null;
            //string transitMountPath = null;
            //instance.TransitHash(transitHashRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitHashWithAlgorithm
        /// </summary>
        [Fact]
        public void TransitHashWithAlgorithmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string urlalgorithm = null;
            //TransitHashWithAlgorithmRequest transitHashWithAlgorithmRequest = null;
            //string transitMountPath = null;
            //instance.TransitHashWithAlgorithm(urlalgorithm, transitHashWithAlgorithmRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitImportKey
        /// </summary>
        [Fact]
        public void TransitImportKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //TransitImportKeyRequest transitImportKeyRequest = null;
            //string transitMountPath = null;
            //instance.TransitImportKey(name, transitImportKeyRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitImportKeyVersion
        /// </summary>
        [Fact]
        public void TransitImportKeyVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //TransitImportKeyVersionRequest transitImportKeyVersionRequest = null;
            //string transitMountPath = null;
            //instance.TransitImportKeyVersion(name, transitImportKeyVersionRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitListKeys
        /// </summary>
        [Fact]
        public void TransitListKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //string transitMountPath = null;
            //instance.TransitListKeys(list, transitMountPath);
        }

        /// <summary>
        /// Test TransitReadCacheConfig
        /// </summary>
        [Fact]
        public void TransitReadCacheConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string transitMountPath = null;
            //instance.TransitReadCacheConfig(transitMountPath);
        }

        /// <summary>
        /// Test TransitReadConfigKeys
        /// </summary>
        [Fact]
        public void TransitReadConfigKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string transitMountPath = null;
            //instance.TransitReadConfigKeys(transitMountPath);
        }

        /// <summary>
        /// Test TransitReadKey
        /// </summary>
        [Fact]
        public void TransitReadKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string transitMountPath = null;
            //instance.TransitReadKey(name, transitMountPath);
        }

        /// <summary>
        /// Test TransitReadWrappingKey
        /// </summary>
        [Fact]
        public void TransitReadWrappingKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string transitMountPath = null;
            //instance.TransitReadWrappingKey(transitMountPath);
        }

        /// <summary>
        /// Test TransitRestore
        /// </summary>
        [Fact]
        public void TransitRestoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransitRestoreRequest transitRestoreRequest = null;
            //string transitMountPath = null;
            //instance.TransitRestore(transitRestoreRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitRestoreKey
        /// </summary>
        [Fact]
        public void TransitRestoreKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //TransitRestoreKeyRequest transitRestoreKeyRequest = null;
            //string transitMountPath = null;
            //instance.TransitRestoreKey(name, transitRestoreKeyRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitRewrap
        /// </summary>
        [Fact]
        public void TransitRewrapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //TransitRewrapRequest transitRewrapRequest = null;
            //string transitMountPath = null;
            //instance.TransitRewrap(name, transitRewrapRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitRotateKey
        /// </summary>
        [Fact]
        public void TransitRotateKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string transitMountPath = null;
            //instance.TransitRotateKey(name, transitMountPath);
        }

        /// <summary>
        /// Test TransitSign
        /// </summary>
        [Fact]
        public void TransitSignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //TransitSignRequest transitSignRequest = null;
            //string transitMountPath = null;
            //instance.TransitSign(name, transitSignRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitSignWithAlgorithm
        /// </summary>
        [Fact]
        public void TransitSignWithAlgorithmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string urlalgorithm = null;
            //TransitSignWithAlgorithmRequest transitSignWithAlgorithmRequest = null;
            //string transitMountPath = null;
            //instance.TransitSignWithAlgorithm(name, urlalgorithm, transitSignWithAlgorithmRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitTrimKey
        /// </summary>
        [Fact]
        public void TransitTrimKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //TransitTrimKeyRequest transitTrimKeyRequest = null;
            //string transitMountPath = null;
            //instance.TransitTrimKey(name, transitTrimKeyRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitVerify
        /// </summary>
        [Fact]
        public void TransitVerifyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //TransitVerifyRequest transitVerifyRequest = null;
            //string transitMountPath = null;
            //instance.TransitVerify(name, transitVerifyRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitVerifyWithAlgorithm
        /// </summary>
        [Fact]
        public void TransitVerifyWithAlgorithmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string urlalgorithm = null;
            //TransitVerifyWithAlgorithmRequest transitVerifyWithAlgorithmRequest = null;
            //string transitMountPath = null;
            //instance.TransitVerifyWithAlgorithm(name, urlalgorithm, transitVerifyWithAlgorithmRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitWriteCacheConfig
        /// </summary>
        [Fact]
        public void TransitWriteCacheConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransitWriteCacheConfigRequest transitWriteCacheConfigRequest = null;
            //string transitMountPath = null;
            //instance.TransitWriteCacheConfig(transitWriteCacheConfigRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitWriteConfigKeys
        /// </summary>
        [Fact]
        public void TransitWriteConfigKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransitWriteConfigKeysRequest transitWriteConfigKeysRequest = null;
            //string transitMountPath = null;
            //instance.TransitWriteConfigKeys(transitWriteConfigKeysRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitWriteKey
        /// </summary>
        [Fact]
        public void TransitWriteKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //TransitWriteKeyRequest transitWriteKeyRequest = null;
            //string transitMountPath = null;
            //instance.TransitWriteKey(name, transitWriteKeyRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitWriteKeyConfig
        /// </summary>
        [Fact]
        public void TransitWriteKeyConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //TransitWriteKeyConfigRequest transitWriteKeyConfigRequest = null;
            //string transitMountPath = null;
            //instance.TransitWriteKeyConfig(name, transitWriteKeyConfigRequest, transitMountPath);
        }

        /// <summary>
        /// Test TransitWriteRandomUrlbytes
        /// </summary>
        [Fact]
        public void TransitWriteRandomUrlbytesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string urlbytes = null;
            //TransitWriteRandomUrlbytesRequest transitWriteRandomUrlbytesRequest = null;
            //string transitMountPath = null;
            //instance.TransitWriteRandomUrlbytes(urlbytes, transitWriteRandomUrlbytesRequest, transitMountPath);
        }
    }
}
