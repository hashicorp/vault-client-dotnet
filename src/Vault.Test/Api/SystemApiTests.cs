// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
//
// Code generated with OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;

using Xunit;

using Vault.Client;
using Vault.Api;

// uncomment below to import models
//using Vault.Model;

namespace Vault.Test.Api
{
    /// <summary>
    ///  Class for testing System
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SystemTests : IDisposable
    {
        private Vault.Api.System instance;

        public SystemTests()
        {
            // instance = new Vault.Api.System();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of System
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' System
            //Assert.IsType<System>(instance);
        }

        /// <summary>
        /// Test CalculateAuditHash
        /// </summary>
        [Fact]
        public void CalculateAuditHashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;//CalculateAuditHashRequest calculateAuditHashRequest = null;
            //instance.CalculateAuditHash(path, calculateAuditHashRequest);
        }

        /// <summary>
        /// Test DeleteAuditDevice
        /// </summary>
        [Fact]
        public void DeleteAuditDeviceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //instance.DeleteAuditDevice(path);
        }

        /// <summary>
        /// Test DeleteAuthMethod
        /// </summary>
        [Fact]
        public void DeleteAuthMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //instance.DeleteAuthMethod(path);
        }

        /// <summary>
        /// Test DeleteConfigAuditingRequestHeader
        /// </summary>
        [Fact]
        public void DeleteConfigAuditingRequestHeaderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string header = null;
            //instance.DeleteConfigAuditingRequestHeader(header);
        }

        /// <summary>
        /// Test DeleteConfigCORS
        /// </summary>
        [Fact]
        public void DeleteConfigCORSTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.DeleteConfigCORS();
        }

        /// <summary>
        /// Test DeleteConfigUIHeader
        /// </summary>
        [Fact]
        public void DeleteConfigUIHeaderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string header = null;
            //instance.DeleteConfigUIHeader(header);
        }

        /// <summary>
        /// Test DeleteGenerateRoot
        /// </summary>
        [Fact]
        public void DeleteGenerateRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.DeleteGenerateRoot();
        }

        /// <summary>
        /// Test DeleteGenerateRootAttempt
        /// </summary>
        [Fact]
        public void DeleteGenerateRootAttemptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.DeleteGenerateRootAttempt();
        }

        /// <summary>
        /// Test DeleteLogger
        /// </summary>
        [Fact]
        public void DeleteLoggerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.DeleteLogger(name);
        }

        /// <summary>
        /// Test DeleteLoggers
        /// </summary>
        [Fact]
        public void DeleteLoggersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.DeleteLoggers();
        }

        /// <summary>
        /// Test DeleteMount
        /// </summary>
        [Fact]
        public void DeleteMountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //instance.DeleteMount(path);
        }

        /// <summary>
        /// Test DeletePluginsCatalogByTypeByName
        /// </summary>
        [Fact]
        public void DeletePluginsCatalogByTypeByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;//string type = null;
            //instance.DeletePluginsCatalogByTypeByName(name, type);
        }

        /// <summary>
        /// Test DeletePoliciesACL
        /// </summary>
        [Fact]
        public void DeletePoliciesACLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.DeletePoliciesACL(name);
        }

        /// <summary>
        /// Test DeletePoliciesPassword
        /// </summary>
        [Fact]
        public void DeletePoliciesPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.DeletePoliciesPassword(name);
        }

        /// <summary>
        /// Test DeletePolicy
        /// </summary>
        [Fact]
        public void DeletePolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.DeletePolicy(name);
        }

        /// <summary>
        /// Test DeleteQuotasRateLimit
        /// </summary>
        [Fact]
        public void DeleteQuotasRateLimitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.DeleteQuotasRateLimit(name);
        }

        /// <summary>
        /// Test DeleteRaw
        /// </summary>
        [Fact]
        public void DeleteRawTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.DeleteRaw();
        }

        /// <summary>
        /// Test DeleteRawPath
        /// </summary>
        [Fact]
        public void DeleteRawPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //instance.DeleteRawPath(path);
        }

        /// <summary>
        /// Test DeleteRekeyBackup
        /// </summary>
        [Fact]
        public void DeleteRekeyBackupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.DeleteRekeyBackup();
        }

        /// <summary>
        /// Test DeleteRekeyInit
        /// </summary>
        [Fact]
        public void DeleteRekeyInitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.DeleteRekeyInit();
        }

        /// <summary>
        /// Test DeleteRekeyRecoveryKeyBackup
        /// </summary>
        [Fact]
        public void DeleteRekeyRecoveryKeyBackupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.DeleteRekeyRecoveryKeyBackup();
        }

        /// <summary>
        /// Test DeleteRekeyVerify
        /// </summary>
        [Fact]
        public void DeleteRekeyVerifyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.DeleteRekeyVerify();
        }

        /// <summary>
        /// Test ListConfigUIHeaders
        /// </summary>
        [Fact]
        public void ListConfigUIHeadersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.ListConfigUIHeaders(list);
        }

        /// <summary>
        /// Test ListLeasesLookupPrefix
        /// </summary>
        [Fact]
        public void ListLeasesLookupPrefixTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string prefix = null;//string list = null;
            //instance.ListLeasesLookupPrefix(prefix, list);
        }

        /// <summary>
        /// Test ListPluginsCatalogByType
        /// </summary>
        [Fact]
        public void ListPluginsCatalogByTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;//string list = null;
            //instance.ListPluginsCatalogByType(type, list);
        }

        /// <summary>
        /// Test ListPoliciesACL
        /// </summary>
        [Fact]
        public void ListPoliciesACLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.ListPoliciesACL(list);
        }

        /// <summary>
        /// Test ListPoliciesPassword
        /// </summary>
        [Fact]
        public void ListPoliciesPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.ListPoliciesPassword(list);
        }

        /// <summary>
        /// Test ListQuotasRateLimits
        /// </summary>
        [Fact]
        public void ListQuotasRateLimitsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.ListQuotasRateLimits(list);
        }

        /// <summary>
        /// Test ListVersionHistory
        /// </summary>
        [Fact]
        public void ListVersionHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.ListVersionHistory(list);
        }

        /// <summary>
        /// Test MFAValidate
        /// </summary>
        [Fact]
        public void MFAValidateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MFAValidateRequest mFAValidateRequest = null;
            //instance.MFAValidate(mFAValidateRequest);
        }

        /// <summary>
        /// Test Monitor
        /// </summary>
        [Fact]
        public void MonitorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string logFormat = null;//string logLevel = null;
            //instance.Monitor(logFormat, logLevel);
        }

        /// <summary>
        /// Test PprofRead
        /// </summary>
        [Fact]
        public void PprofReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.PprofRead();
        }

        /// <summary>
        /// Test PprofReadAllocs
        /// </summary>
        [Fact]
        public void PprofReadAllocsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.PprofReadAllocs();
        }

        /// <summary>
        /// Test PprofReadBlock
        /// </summary>
        [Fact]
        public void PprofReadBlockTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.PprofReadBlock();
        }

        /// <summary>
        /// Test PprofReadCmdline
        /// </summary>
        [Fact]
        public void PprofReadCmdlineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.PprofReadCmdline();
        }

        /// <summary>
        /// Test PprofReadGoroutine
        /// </summary>
        [Fact]
        public void PprofReadGoroutineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.PprofReadGoroutine();
        }

        /// <summary>
        /// Test PprofReadHeap
        /// </summary>
        [Fact]
        public void PprofReadHeapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.PprofReadHeap();
        }

        /// <summary>
        /// Test PprofReadMutex
        /// </summary>
        [Fact]
        public void PprofReadMutexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.PprofReadMutex();
        }

        /// <summary>
        /// Test PprofReadProfile
        /// </summary>
        [Fact]
        public void PprofReadProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.PprofReadProfile();
        }

        /// <summary>
        /// Test PprofReadSymbol
        /// </summary>
        [Fact]
        public void PprofReadSymbolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.PprofReadSymbol();
        }

        /// <summary>
        /// Test PprofReadThreadcreate
        /// </summary>
        [Fact]
        public void PprofReadThreadcreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.PprofReadThreadcreate();
        }

        /// <summary>
        /// Test PprofReadTrace
        /// </summary>
        [Fact]
        public void PprofReadTraceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.PprofReadTrace();
        }

        /// <summary>
        /// Test ReadAuditDevices
        /// </summary>
        [Fact]
        public void ReadAuditDevicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadAuditDevices();
        }

        /// <summary>
        /// Test ReadAuthMethod
        /// </summary>
        [Fact]
        public void ReadAuthMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //instance.ReadAuthMethod(path);
        }

        /// <summary>
        /// Test ReadAuthMethodTune
        /// </summary>
        [Fact]
        public void ReadAuthMethodTuneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //instance.ReadAuthMethodTune(path);
        }

        /// <summary>
        /// Test ReadAuthMethods
        /// </summary>
        [Fact]
        public void ReadAuthMethodsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadAuthMethods();
        }

        /// <summary>
        /// Test ReadConfigAuditingRequestHeader
        /// </summary>
        [Fact]
        public void ReadConfigAuditingRequestHeaderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string header = null;
            //instance.ReadConfigAuditingRequestHeader(header);
        }

        /// <summary>
        /// Test ReadConfigAuditingRequestHeaders
        /// </summary>
        [Fact]
        public void ReadConfigAuditingRequestHeadersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadConfigAuditingRequestHeaders();
        }

        /// <summary>
        /// Test ReadConfigCORS
        /// </summary>
        [Fact]
        public void ReadConfigCORSTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadConfigCORS();
        }

        /// <summary>
        /// Test ReadConfigStateSanitized
        /// </summary>
        [Fact]
        public void ReadConfigStateSanitizedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadConfigStateSanitized();
        }

        /// <summary>
        /// Test ReadConfigUIHeader
        /// </summary>
        [Fact]
        public void ReadConfigUIHeaderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string header = null;
            //instance.ReadConfigUIHeader(header);
        }

        /// <summary>
        /// Test ReadGenerateRoot
        /// </summary>
        [Fact]
        public void ReadGenerateRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadGenerateRoot();
        }

        /// <summary>
        /// Test ReadGenerateRootAttempt
        /// </summary>
        [Fact]
        public void ReadGenerateRootAttemptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadGenerateRootAttempt();
        }

        /// <summary>
        /// Test ReadHAStatus
        /// </summary>
        [Fact]
        public void ReadHAStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadHAStatus();
        }

        /// <summary>
        /// Test ReadHealth
        /// </summary>
        [Fact]
        public void ReadHealthTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadHealth();
        }

        /// <summary>
        /// Test ReadHostInfo
        /// </summary>
        [Fact]
        public void ReadHostInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadHostInfo();
        }

        /// <summary>
        /// Test ReadInFlightRequests
        /// </summary>
        [Fact]
        public void ReadInFlightRequestsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadInFlightRequests();
        }

        /// <summary>
        /// Test ReadInit
        /// </summary>
        [Fact]
        public void ReadInitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadInit();
        }

        /// <summary>
        /// Test ReadInternalCountersActivity
        /// </summary>
        [Fact]
        public void ReadInternalCountersActivityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadInternalCountersActivity();
        }

        /// <summary>
        /// Test ReadInternalCountersActivityExport
        /// </summary>
        [Fact]
        public void ReadInternalCountersActivityExportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadInternalCountersActivityExport();
        }

        /// <summary>
        /// Test ReadInternalCountersActivityMonthly
        /// </summary>
        [Fact]
        public void ReadInternalCountersActivityMonthlyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadInternalCountersActivityMonthly();
        }

        /// <summary>
        /// Test ReadInternalCountersConfig
        /// </summary>
        [Fact]
        public void ReadInternalCountersConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadInternalCountersConfig();
        }

        /// <summary>
        /// Test ReadInternalCountersEntities
        /// </summary>
        [Fact]
        public void ReadInternalCountersEntitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadInternalCountersEntities();
        }

        /// <summary>
        /// Test ReadInternalCountersRequests
        /// </summary>
        [Fact]
        public void ReadInternalCountersRequestsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadInternalCountersRequests();
        }

        /// <summary>
        /// Test ReadInternalCountersTokens
        /// </summary>
        [Fact]
        public void ReadInternalCountersTokensTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadInternalCountersTokens();
        }

        /// <summary>
        /// Test ReadInternalInspectRouter
        /// </summary>
        [Fact]
        public void ReadInternalInspectRouterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tag = null;
            //instance.ReadInternalInspectRouter(tag);
        }

        /// <summary>
        /// Test ReadInternalSpecsOpenAPI
        /// </summary>
        [Fact]
        public void ReadInternalSpecsOpenAPITest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadInternalSpecsOpenAPI();
        }

        /// <summary>
        /// Test ReadInternalUIFeatureFlags
        /// </summary>
        [Fact]
        public void ReadInternalUIFeatureFlagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadInternalUIFeatureFlags();
        }

        /// <summary>
        /// Test ReadInternalUIMount
        /// </summary>
        [Fact]
        public void ReadInternalUIMountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //instance.ReadInternalUIMount(path);
        }

        /// <summary>
        /// Test ReadInternalUIMounts
        /// </summary>
        [Fact]
        public void ReadInternalUIMountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadInternalUIMounts();
        }

        /// <summary>
        /// Test ReadInternalUINamespaces
        /// </summary>
        [Fact]
        public void ReadInternalUINamespacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadInternalUINamespaces();
        }

        /// <summary>
        /// Test ReadInternalUIResultantACL
        /// </summary>
        [Fact]
        public void ReadInternalUIResultantACLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadInternalUIResultantACL();
        }

        /// <summary>
        /// Test ReadKeyStatus
        /// </summary>
        [Fact]
        public void ReadKeyStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadKeyStatus();
        }

        /// <summary>
        /// Test ReadLeader
        /// </summary>
        [Fact]
        public void ReadLeaderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadLeader();
        }

        /// <summary>
        /// Test ReadLeases
        /// </summary>
        [Fact]
        public void ReadLeasesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadLeases();
        }

        /// <summary>
        /// Test ReadLeasesCount
        /// </summary>
        [Fact]
        public void ReadLeasesCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadLeasesCount();
        }

        /// <summary>
        /// Test ReadLogger
        /// </summary>
        [Fact]
        public void ReadLoggerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.ReadLogger(name);
        }

        /// <summary>
        /// Test ReadLoggers
        /// </summary>
        [Fact]
        public void ReadLoggersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadLoggers();
        }

        /// <summary>
        /// Test ReadMetrics
        /// </summary>
        [Fact]
        public void ReadMetricsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string format = null;
            //instance.ReadMetrics(format);
        }

        /// <summary>
        /// Test ReadMount
        /// </summary>
        [Fact]
        public void ReadMountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //instance.ReadMount(path);
        }

        /// <summary>
        /// Test ReadMounts
        /// </summary>
        [Fact]
        public void ReadMountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadMounts();
        }

        /// <summary>
        /// Test ReadMountsConfig
        /// </summary>
        [Fact]
        public void ReadMountsConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //instance.ReadMountsConfig(path);
        }

        /// <summary>
        /// Test ReadPluginsCatalog
        /// </summary>
        [Fact]
        public void ReadPluginsCatalogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadPluginsCatalog();
        }

        /// <summary>
        /// Test ReadPluginsCatalogByTypeByName
        /// </summary>
        [Fact]
        public void ReadPluginsCatalogByTypeByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;//string type = null;
            //instance.ReadPluginsCatalogByTypeByName(name, type);
        }

        /// <summary>
        /// Test ReadPolicies
        /// </summary>
        [Fact]
        public void ReadPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.ReadPolicies(list);
        }

        /// <summary>
        /// Test ReadPoliciesACL
        /// </summary>
        [Fact]
        public void ReadPoliciesACLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.ReadPoliciesACL(name);
        }

        /// <summary>
        /// Test ReadPoliciesPassword
        /// </summary>
        [Fact]
        public void ReadPoliciesPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.ReadPoliciesPassword(name);
        }

        /// <summary>
        /// Test ReadPoliciesPasswordGenerate
        /// </summary>
        [Fact]
        public void ReadPoliciesPasswordGenerateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.ReadPoliciesPasswordGenerate(name);
        }

        /// <summary>
        /// Test ReadPolicy
        /// </summary>
        [Fact]
        public void ReadPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.ReadPolicy(name);
        }

        /// <summary>
        /// Test ReadQuotasConfig
        /// </summary>
        [Fact]
        public void ReadQuotasConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadQuotasConfig();
        }

        /// <summary>
        /// Test ReadQuotasRateLimit
        /// </summary>
        [Fact]
        public void ReadQuotasRateLimitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.ReadQuotasRateLimit(name);
        }

        /// <summary>
        /// Test ReadRaw
        /// </summary>
        [Fact]
        public void ReadRawTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.ReadRaw(list);
        }

        /// <summary>
        /// Test ReadRawPath
        /// </summary>
        [Fact]
        public void ReadRawPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;//string list = null;
            //instance.ReadRawPath(path, list);
        }

        /// <summary>
        /// Test ReadRekeyBackup
        /// </summary>
        [Fact]
        public void ReadRekeyBackupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadRekeyBackup();
        }

        /// <summary>
        /// Test ReadRekeyInit
        /// </summary>
        [Fact]
        public void ReadRekeyInitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadRekeyInit();
        }

        /// <summary>
        /// Test ReadRekeyRecoveryKeyBackup
        /// </summary>
        [Fact]
        public void ReadRekeyRecoveryKeyBackupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadRekeyRecoveryKeyBackup();
        }

        /// <summary>
        /// Test ReadRekeyVerify
        /// </summary>
        [Fact]
        public void ReadRekeyVerifyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadRekeyVerify();
        }

        /// <summary>
        /// Test ReadRemountStatus
        /// </summary>
        [Fact]
        public void ReadRemountStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string migrationId = null;
            //instance.ReadRemountStatus(migrationId);
        }

        /// <summary>
        /// Test ReadReplicationStatus
        /// </summary>
        [Fact]
        public void ReadReplicationStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadReplicationStatus();
        }

        /// <summary>
        /// Test ReadRotateConfig
        /// </summary>
        [Fact]
        public void ReadRotateConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadRotateConfig();
        }

        /// <summary>
        /// Test ReadSealStatus
        /// </summary>
        [Fact]
        public void ReadSealStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.ReadSealStatus();
        }

        /// <summary>
        /// Test Remount
        /// </summary>
        [Fact]
        public void RemountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RemountRequest remountRequest = null;
            //instance.Remount(remountRequest);
        }

        /// <summary>
        /// Test Renew
        /// </summary>
        [Fact]
        public void RenewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RenewRequest renewRequest = null;
            //instance.Renew(renewRequest);
        }

        /// <summary>
        /// Test RenewFor
        /// </summary>
        [Fact]
        public void RenewForTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string urlLeaseId = null;//RenewForRequest renewForRequest = null;
            //instance.RenewFor(urlLeaseId, renewForRequest);
        }

        /// <summary>
        /// Test Revoke
        /// </summary>
        [Fact]
        public void RevokeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RevokeRequest revokeRequest = null;
            //instance.Revoke(revokeRequest);
        }

        /// <summary>
        /// Test RevokeForce
        /// </summary>
        [Fact]
        public void RevokeForceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string prefix = null;
            //instance.RevokeForce(prefix);
        }

        /// <summary>
        /// Test RevokeLease
        /// </summary>
        [Fact]
        public void RevokeLeaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string urlLeaseId = null;//RevokeLeaseRequest revokeLeaseRequest = null;
            //instance.RevokeLease(urlLeaseId, revokeLeaseRequest);
        }

        /// <summary>
        /// Test RevokePrefix
        /// </summary>
        [Fact]
        public void RevokePrefixTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string prefix = null;//RevokePrefixRequest revokePrefixRequest = null;
            //instance.RevokePrefix(prefix, revokePrefixRequest);
        }

        /// <summary>
        /// Test Rotate
        /// </summary>
        [Fact]
        public void RotateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.Rotate();
        }

        /// <summary>
        /// Test Seal
        /// </summary>
        [Fact]
        public void SealTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.Seal();
        }

        /// <summary>
        /// Test StepDownLeader
        /// </summary>
        [Fact]
        public void StepDownLeaderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.StepDownLeader();
        }

        /// <summary>
        /// Test SysDeletePluginsCatalogName
        /// </summary>
        [Fact]
        public void SysDeletePluginsCatalogNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.SysDeletePluginsCatalogName(name);
        }

        /// <summary>
        /// Test SysListLeasesLookup
        /// </summary>
        [Fact]
        public void SysListLeasesLookupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string list = null;
            //instance.SysListLeasesLookup(list);
        }

        /// <summary>
        /// Test SysReadPluginsCatalogName
        /// </summary>
        [Fact]
        public void SysReadPluginsCatalogNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.SysReadPluginsCatalogName(name);
        }

        /// <summary>
        /// Test SysWriteLockedusersMountAccessorUnlockAliasIdentifier
        /// </summary>
        [Fact]
        public void SysWriteLockedusersMountAccessorUnlockAliasIdentifierTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string aliasIdentifier = null;//string mountAccessor = null;
            //instance.SysWriteLockedusersMountAccessorUnlockAliasIdentifier(aliasIdentifier, mountAccessor);
        }

        /// <summary>
        /// Test SysWritePluginsCatalogName
        /// </summary>
        [Fact]
        public void SysWritePluginsCatalogNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;//SysWritePluginsCatalogNameRequest sysWritePluginsCatalogNameRequest = null;
            //instance.SysWritePluginsCatalogName(name, sysWritePluginsCatalogNameRequest);
        }

        /// <summary>
        /// Test SysWriteToolsRandomUrlbytes
        /// </summary>
        [Fact]
        public void SysWriteToolsRandomUrlbytesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string urlbytes = null;//SysWriteToolsRandomUrlbytesRequest sysWriteToolsRandomUrlbytesRequest = null;
            //instance.SysWriteToolsRandomUrlbytes(urlbytes, sysWriteToolsRandomUrlbytesRequest);
        }

        /// <summary>
        /// Test ToolsGenerateRandom
        /// </summary>
        [Fact]
        public void ToolsGenerateRandomTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ToolsGenerateRandomRequest toolsGenerateRandomRequest = null;
            //instance.ToolsGenerateRandom(toolsGenerateRandomRequest);
        }

        /// <summary>
        /// Test ToolsGenerateRandomSource
        /// </summary>
        [Fact]
        public void ToolsGenerateRandomSourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;//ToolsGenerateRandomSourceRequest toolsGenerateRandomSourceRequest = null;
            //instance.ToolsGenerateRandomSource(source, toolsGenerateRandomSourceRequest);
        }

        /// <summary>
        /// Test ToolsGenerateRandomSourceBytes
        /// </summary>
        [Fact]
        public void ToolsGenerateRandomSourceBytesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;//string urlbytes = null;//ToolsGenerateRandomSourceBytesRequest toolsGenerateRandomSourceBytesRequest = null;
            //instance.ToolsGenerateRandomSourceBytes(source, urlbytes, toolsGenerateRandomSourceBytesRequest);
        }

        /// <summary>
        /// Test ToolsHash
        /// </summary>
        [Fact]
        public void ToolsHashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ToolsHashRequest toolsHashRequest = null;
            //instance.ToolsHash(toolsHashRequest);
        }

        /// <summary>
        /// Test ToolsHashWith
        /// </summary>
        [Fact]
        public void ToolsHashWithTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string urlalgorithm = null;//ToolsHashWithRequest toolsHashWithRequest = null;
            //instance.ToolsHashWith(urlalgorithm, toolsHashWithRequest);
        }

        /// <summary>
        /// Test Unseal
        /// </summary>
        [Fact]
        public void UnsealTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UnsealRequest unsealRequest = null;
            //instance.Unseal(unsealRequest);
        }

        /// <summary>
        /// Test WrappingReadLookup
        /// </summary>
        [Fact]
        public void WrappingReadLookupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.WrappingReadLookup();
        }

        /// <summary>
        /// Test WrappingRewrap
        /// </summary>
        [Fact]
        public void WrappingRewrapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WrappingRewrapRequest wrappingRewrapRequest = null;
            //instance.WrappingRewrap(wrappingRewrapRequest);
        }

        /// <summary>
        /// Test WrappingUnwrap
        /// </summary>
        [Fact]
        public void WrappingUnwrapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WrappingUnwrapRequest wrappingUnwrapRequest = null;
            //instance.WrappingUnwrap(wrappingUnwrapRequest);
        }

        /// <summary>
        /// Test WrappingWrap
        /// </summary>
        [Fact]
        public void WrappingWrapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.WrappingWrap();
        }

        /// <summary>
        /// Test WrappingWriteLookup
        /// </summary>
        [Fact]
        public void WrappingWriteLookupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WrappingWriteLookupRequest wrappingWriteLookupRequest = null;
            //instance.WrappingWriteLookup(wrappingWriteLookupRequest);
        }

        /// <summary>
        /// Test WriteAuditDevice
        /// </summary>
        [Fact]
        public void WriteAuditDeviceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;//WriteAuditDeviceRequest writeAuditDeviceRequest = null;
            //instance.WriteAuditDevice(path, writeAuditDeviceRequest);
        }

        /// <summary>
        /// Test WriteAuthMethod
        /// </summary>
        [Fact]
        public void WriteAuthMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;//WriteAuthMethodRequest writeAuthMethodRequest = null;
            //instance.WriteAuthMethod(path, writeAuthMethodRequest);
        }

        /// <summary>
        /// Test WriteAuthMethodTune
        /// </summary>
        [Fact]
        public void WriteAuthMethodTuneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;//WriteAuthMethodTuneRequest writeAuthMethodTuneRequest = null;
            //instance.WriteAuthMethodTune(path, writeAuthMethodTuneRequest);
        }

        /// <summary>
        /// Test WriteCapabilities
        /// </summary>
        [Fact]
        public void WriteCapabilitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WriteCapabilitiesRequest writeCapabilitiesRequest = null;
            //instance.WriteCapabilities(writeCapabilitiesRequest);
        }

        /// <summary>
        /// Test WriteCapabilitiesAccessor
        /// </summary>
        [Fact]
        public void WriteCapabilitiesAccessorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WriteCapabilitiesAccessorRequest writeCapabilitiesAccessorRequest = null;
            //instance.WriteCapabilitiesAccessor(writeCapabilitiesAccessorRequest);
        }

        /// <summary>
        /// Test WriteCapabilitiesSelf
        /// </summary>
        [Fact]
        public void WriteCapabilitiesSelfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WriteCapabilitiesSelfRequest writeCapabilitiesSelfRequest = null;
            //instance.WriteCapabilitiesSelf(writeCapabilitiesSelfRequest);
        }

        /// <summary>
        /// Test WriteConfigAuditingRequestHeader
        /// </summary>
        [Fact]
        public void WriteConfigAuditingRequestHeaderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string header = null;//WriteConfigAuditingRequestHeaderRequest writeConfigAuditingRequestHeaderRequest = null;
            //instance.WriteConfigAuditingRequestHeader(header, writeConfigAuditingRequestHeaderRequest);
        }

        /// <summary>
        /// Test WriteConfigCORS
        /// </summary>
        [Fact]
        public void WriteConfigCORSTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WriteConfigCORSRequest writeConfigCORSRequest = null;
            //instance.WriteConfigCORS(writeConfigCORSRequest);
        }

        /// <summary>
        /// Test WriteConfigReloadSubsystem
        /// </summary>
        [Fact]
        public void WriteConfigReloadSubsystemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subsystem = null;
            //instance.WriteConfigReloadSubsystem(subsystem);
        }

        /// <summary>
        /// Test WriteConfigUIHeader
        /// </summary>
        [Fact]
        public void WriteConfigUIHeaderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string header = null;//WriteConfigUIHeaderRequest writeConfigUIHeaderRequest = null;
            //instance.WriteConfigUIHeader(header, writeConfigUIHeaderRequest);
        }

        /// <summary>
        /// Test WriteGenerateRoot
        /// </summary>
        [Fact]
        public void WriteGenerateRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WriteGenerateRootRequest writeGenerateRootRequest = null;
            //instance.WriteGenerateRoot(writeGenerateRootRequest);
        }

        /// <summary>
        /// Test WriteGenerateRootAttempt
        /// </summary>
        [Fact]
        public void WriteGenerateRootAttemptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WriteGenerateRootAttemptRequest writeGenerateRootAttemptRequest = null;
            //instance.WriteGenerateRootAttempt(writeGenerateRootAttemptRequest);
        }

        /// <summary>
        /// Test WriteGenerateRootUpdate
        /// </summary>
        [Fact]
        public void WriteGenerateRootUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WriteGenerateRootUpdateRequest writeGenerateRootUpdateRequest = null;
            //instance.WriteGenerateRootUpdate(writeGenerateRootUpdateRequest);
        }

        /// <summary>
        /// Test WriteInit
        /// </summary>
        [Fact]
        public void WriteInitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WriteInitRequest writeInitRequest = null;
            //instance.WriteInit(writeInitRequest);
        }

        /// <summary>
        /// Test WriteInternalCountersConfig
        /// </summary>
        [Fact]
        public void WriteInternalCountersConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WriteInternalCountersConfigRequest writeInternalCountersConfigRequest = null;
            //instance.WriteInternalCountersConfig(writeInternalCountersConfigRequest);
        }

        /// <summary>
        /// Test WriteLeasesLookup
        /// </summary>
        [Fact]
        public void WriteLeasesLookupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WriteLeasesLookupRequest writeLeasesLookupRequest = null;
            //instance.WriteLeasesLookup(writeLeasesLookupRequest);
        }

        /// <summary>
        /// Test WriteLeasesRenew
        /// </summary>
        [Fact]
        public void WriteLeasesRenewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WriteLeasesRenewRequest writeLeasesRenewRequest = null;
            //instance.WriteLeasesRenew(writeLeasesRenewRequest);
        }

        /// <summary>
        /// Test WriteLeasesRenew2
        /// </summary>
        [Fact]
        public void WriteLeasesRenew2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string urlLeaseId = null;//WriteLeasesRenew2Request writeLeasesRenew2Request = null;
            //instance.WriteLeasesRenew2(urlLeaseId, writeLeasesRenew2Request);
        }

        /// <summary>
        /// Test WriteLeasesRevoke
        /// </summary>
        [Fact]
        public void WriteLeasesRevokeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WriteLeasesRevokeRequest writeLeasesRevokeRequest = null;
            //instance.WriteLeasesRevoke(writeLeasesRevokeRequest);
        }

        /// <summary>
        /// Test WriteLeasesRevoke2
        /// </summary>
        [Fact]
        public void WriteLeasesRevoke2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string urlLeaseId = null;//WriteLeasesRevoke2Request writeLeasesRevoke2Request = null;
            //instance.WriteLeasesRevoke2(urlLeaseId, writeLeasesRevoke2Request);
        }

        /// <summary>
        /// Test WriteLeasesRevokeForce
        /// </summary>
        [Fact]
        public void WriteLeasesRevokeForceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string prefix = null;
            //instance.WriteLeasesRevokeForce(prefix);
        }

        /// <summary>
        /// Test WriteLeasesRevokePrefix
        /// </summary>
        [Fact]
        public void WriteLeasesRevokePrefixTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string prefix = null;//WriteLeasesRevokePrefixRequest writeLeasesRevokePrefixRequest = null;
            //instance.WriteLeasesRevokePrefix(prefix, writeLeasesRevokePrefixRequest);
        }

        /// <summary>
        /// Test WriteLeasesTidy
        /// </summary>
        [Fact]
        public void WriteLeasesTidyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            //instance.WriteLeasesTidy();
        }

        /// <summary>
        /// Test WriteLogger
        /// </summary>
        [Fact]
        public void WriteLoggerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;//WriteLoggerRequest writeLoggerRequest = null;
            //instance.WriteLogger(name, writeLoggerRequest);
        }

        /// <summary>
        /// Test WriteLoggers
        /// </summary>
        [Fact]
        public void WriteLoggersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WriteLoggersRequest writeLoggersRequest = null;
            //instance.WriteLoggers(writeLoggersRequest);
        }

        /// <summary>
        /// Test WriteMount
        /// </summary>
        [Fact]
        public void WriteMountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;//WriteMountRequest writeMountRequest = null;
            //instance.WriteMount(path, writeMountRequest);
        }

        /// <summary>
        /// Test WriteMountsConfig
        /// </summary>
        [Fact]
        public void WriteMountsConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;//WriteMountsConfigRequest writeMountsConfigRequest = null;
            //instance.WriteMountsConfig(path, writeMountsConfigRequest);
        }

        /// <summary>
        /// Test WritePluginsCatalogByTypeByName
        /// </summary>
        [Fact]
        public void WritePluginsCatalogByTypeByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;//string type = null;//WritePluginsCatalogByTypeByNameRequest writePluginsCatalogByTypeByNameRequest = null;
            //instance.WritePluginsCatalogByTypeByName(name, type, writePluginsCatalogByTypeByNameRequest);
        }

        /// <summary>
        /// Test WritePluginsReloadBackend
        /// </summary>
        [Fact]
        public void WritePluginsReloadBackendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WritePluginsReloadBackendRequest writePluginsReloadBackendRequest = null;
            //instance.WritePluginsReloadBackend(writePluginsReloadBackendRequest);
        }

        /// <summary>
        /// Test WritePoliciesACL
        /// </summary>
        [Fact]
        public void WritePoliciesACLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;//WritePoliciesACLRequest writePoliciesACLRequest = null;
            //instance.WritePoliciesACL(name, writePoliciesACLRequest);
        }

        /// <summary>
        /// Test WritePoliciesPassword
        /// </summary>
        [Fact]
        public void WritePoliciesPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;//WritePoliciesPasswordRequest writePoliciesPasswordRequest = null;
            //instance.WritePoliciesPassword(name, writePoliciesPasswordRequest);
        }

        /// <summary>
        /// Test WritePolicy
        /// </summary>
        [Fact]
        public void WritePolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;//WritePolicyRequest writePolicyRequest = null;
            //instance.WritePolicy(name, writePolicyRequest);
        }

        /// <summary>
        /// Test WriteQuotasConfig
        /// </summary>
        [Fact]
        public void WriteQuotasConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WriteQuotasConfigRequest writeQuotasConfigRequest = null;
            //instance.WriteQuotasConfig(writeQuotasConfigRequest);
        }

        /// <summary>
        /// Test WriteQuotasRateLimit
        /// </summary>
        [Fact]
        public void WriteQuotasRateLimitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;//WriteQuotasRateLimitRequest writeQuotasRateLimitRequest = null;
            //instance.WriteQuotasRateLimit(name, writeQuotasRateLimitRequest);
        }

        /// <summary>
        /// Test WriteRaw
        /// </summary>
        [Fact]
        public void WriteRawTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WriteRawRequest writeRawRequest = null;
            //instance.WriteRaw(writeRawRequest);
        }

        /// <summary>
        /// Test WriteRawPath
        /// </summary>
        [Fact]
        public void WriteRawPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;//WriteRawPathRequest writeRawPathRequest = null;
            //instance.WriteRawPath(path, writeRawPathRequest);
        }

        /// <summary>
        /// Test WriteRekeyInit
        /// </summary>
        [Fact]
        public void WriteRekeyInitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WriteRekeyInitRequest writeRekeyInitRequest = null;
            //instance.WriteRekeyInit(writeRekeyInitRequest);
        }

        /// <summary>
        /// Test WriteRekeyUpdate
        /// </summary>
        [Fact]
        public void WriteRekeyUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WriteRekeyUpdateRequest writeRekeyUpdateRequest = null;
            //instance.WriteRekeyUpdate(writeRekeyUpdateRequest);
        }

        /// <summary>
        /// Test WriteRekeyVerify
        /// </summary>
        [Fact]
        public void WriteRekeyVerifyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WriteRekeyVerifyRequest writeRekeyVerifyRequest = null;
            //instance.WriteRekeyVerify(writeRekeyVerifyRequest);
        }

        /// <summary>
        /// Test WriteRotateConfig
        /// </summary>
        [Fact]
        public void WriteRotateConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WriteRotateConfigRequest writeRotateConfigRequest = null;
            //instance.WriteRotateConfig(writeRotateConfigRequest);
        }

    }
}
