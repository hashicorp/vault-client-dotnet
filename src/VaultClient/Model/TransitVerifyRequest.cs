/*
 * HashiCorp Vault API
 *
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = VaultClient.Client.FileParameter;
using OpenAPIDateConverter = VaultClient.Client.OpenAPIDateConverter;

namespace VaultClient.Model
{
    /// <summary>
    /// TransitVerifyRequest
    /// </summary>
    [DataContract(Name = "TransitVerifyRequest")]
    public partial class TransitVerifyRequest : IEquatable<TransitVerifyRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransitVerifyRequest" /> class.
        /// </summary>
        /// <param name="algorithm">Deprecated: use \&quot;hash_algorithm\&quot; instead. (default to &quot;sha2-256&quot;).</param>
        /// <param name="context">Base64 encoded context for key derivation. Required if key derivation is enabled; currently only available with ed25519 keys..</param>
        /// <param name="hashAlgorithm">Hash algorithm to use (POST body parameter). Valid values are: * sha1 * sha2-224 * sha2-256 * sha2-384 * sha2-512 * sha3-224 * sha3-256 * sha3-384 * sha3-512 Defaults to \&quot;sha2-256\&quot;. Not valid for all key types. (default to &quot;sha2-256&quot;).</param>
        /// <param name="hmac">The HMAC, including vault header/key version.</param>
        /// <param name="input">The base64-encoded input data to verify.</param>
        /// <param name="marshalingAlgorithm">The method by which to unmarshal the signature when verifying. The default is &#39;asn1&#39; which is used by openssl and X.509; can also be set to &#39;jws&#39; which is used for JWT signatures in which case the signature is also expected to be url-safe base64 encoding instead of standard base64 encoding. Currently only valid for ECDSA P-256 key types\&quot;. (default to &quot;asn1&quot;).</param>
        /// <param name="prehashed">Set to &#39;true&#39; when the input is already hashed. If the key type is &#39;rsa-2048&#39;, &#39;rsa-3072&#39; or &#39;rsa-4096&#39;, then the algorithm used to hash the input should be indicated by the &#39;algorithm&#39; parameter..</param>
        /// <param name="signature">The signature, including vault header/key version.</param>
        /// <param name="signatureAlgorithm">The signature algorithm to use for signature verification. Currently only applies to RSA key types. Options are &#39;pss&#39; or &#39;pkcs1v15&#39;. Defaults to &#39;pss&#39;.</param>
        /// <param name="urlalgorithm">Hash algorithm to use (POST URL parameter).</param>
        public TransitVerifyRequest(string algorithm = "sha2-256", string context = default(string), string hashAlgorithm = "sha2-256", string hmac = default(string), string input = default(string), string marshalingAlgorithm = "asn1", bool prehashed = default(bool), string signature = default(string), string signatureAlgorithm = default(string), string urlalgorithm = default(string))
        {
            // use default value if no "algorithm" provided
            this.Algorithm = algorithm ?? "sha2-256";
            this.Context = context;
            // use default value if no "hashAlgorithm" provided
            this.HashAlgorithm = hashAlgorithm ?? "sha2-256";
            this.Hmac = hmac;
            this.Input = input;
            // use default value if no "marshalingAlgorithm" provided
            this.MarshalingAlgorithm = marshalingAlgorithm ?? "asn1";
            this.Prehashed = prehashed;
            this.Signature = signature;
            this.SignatureAlgorithm = signatureAlgorithm;
            this.Urlalgorithm = urlalgorithm;
        }

        /// <summary>
        /// Deprecated: use \&quot;hash_algorithm\&quot; instead.
        /// </summary>
        /// <value>Deprecated: use \&quot;hash_algorithm\&quot; instead.</value>
        [DataMember(Name = "algorithm", EmitDefaultValue = false)]
        public string Algorithm { get; set; }

        /// <summary>
        /// Base64 encoded context for key derivation. Required if key derivation is enabled; currently only available with ed25519 keys.
        /// </summary>
        /// <value>Base64 encoded context for key derivation. Required if key derivation is enabled; currently only available with ed25519 keys.</value>
        [DataMember(Name = "context", EmitDefaultValue = false)]
        public string Context { get; set; }

        /// <summary>
        /// Hash algorithm to use (POST body parameter). Valid values are: * sha1 * sha2-224 * sha2-256 * sha2-384 * sha2-512 * sha3-224 * sha3-256 * sha3-384 * sha3-512 Defaults to \&quot;sha2-256\&quot;. Not valid for all key types.
        /// </summary>
        /// <value>Hash algorithm to use (POST body parameter). Valid values are: * sha1 * sha2-224 * sha2-256 * sha2-384 * sha2-512 * sha3-224 * sha3-256 * sha3-384 * sha3-512 Defaults to \&quot;sha2-256\&quot;. Not valid for all key types.</value>
        [DataMember(Name = "hash_algorithm", EmitDefaultValue = false)]
        public string HashAlgorithm { get; set; }

        /// <summary>
        /// The HMAC, including vault header/key version
        /// </summary>
        /// <value>The HMAC, including vault header/key version</value>
        [DataMember(Name = "hmac", EmitDefaultValue = false)]
        public string Hmac { get; set; }

        /// <summary>
        /// The base64-encoded input data to verify
        /// </summary>
        /// <value>The base64-encoded input data to verify</value>
        [DataMember(Name = "input", EmitDefaultValue = false)]
        public string Input { get; set; }

        /// <summary>
        /// The method by which to unmarshal the signature when verifying. The default is &#39;asn1&#39; which is used by openssl and X.509; can also be set to &#39;jws&#39; which is used for JWT signatures in which case the signature is also expected to be url-safe base64 encoding instead of standard base64 encoding. Currently only valid for ECDSA P-256 key types\&quot;.
        /// </summary>
        /// <value>The method by which to unmarshal the signature when verifying. The default is &#39;asn1&#39; which is used by openssl and X.509; can also be set to &#39;jws&#39; which is used for JWT signatures in which case the signature is also expected to be url-safe base64 encoding instead of standard base64 encoding. Currently only valid for ECDSA P-256 key types\&quot;.</value>
        [DataMember(Name = "marshaling_algorithm", EmitDefaultValue = false)]
        public string MarshalingAlgorithm { get; set; }

        /// <summary>
        /// Set to &#39;true&#39; when the input is already hashed. If the key type is &#39;rsa-2048&#39;, &#39;rsa-3072&#39; or &#39;rsa-4096&#39;, then the algorithm used to hash the input should be indicated by the &#39;algorithm&#39; parameter.
        /// </summary>
        /// <value>Set to &#39;true&#39; when the input is already hashed. If the key type is &#39;rsa-2048&#39;, &#39;rsa-3072&#39; or &#39;rsa-4096&#39;, then the algorithm used to hash the input should be indicated by the &#39;algorithm&#39; parameter.</value>
        [DataMember(Name = "prehashed", EmitDefaultValue = true)]
        public bool Prehashed { get; set; }

        /// <summary>
        /// The signature, including vault header/key version
        /// </summary>
        /// <value>The signature, including vault header/key version</value>
        [DataMember(Name = "signature", EmitDefaultValue = false)]
        public string Signature { get; set; }

        /// <summary>
        /// The signature algorithm to use for signature verification. Currently only applies to RSA key types. Options are &#39;pss&#39; or &#39;pkcs1v15&#39;. Defaults to &#39;pss&#39;
        /// </summary>
        /// <value>The signature algorithm to use for signature verification. Currently only applies to RSA key types. Options are &#39;pss&#39; or &#39;pkcs1v15&#39;. Defaults to &#39;pss&#39;</value>
        [DataMember(Name = "signature_algorithm", EmitDefaultValue = false)]
        public string SignatureAlgorithm { get; set; }

        /// <summary>
        /// Hash algorithm to use (POST URL parameter)
        /// </summary>
        /// <value>Hash algorithm to use (POST URL parameter)</value>
        [DataMember(Name = "urlalgorithm", EmitDefaultValue = false)]
        public string Urlalgorithm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransitVerifyRequest {\n");
            sb.Append("  Algorithm: ").Append(Algorithm).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  HashAlgorithm: ").Append(HashAlgorithm).Append("\n");
            sb.Append("  Hmac: ").Append(Hmac).Append("\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  MarshalingAlgorithm: ").Append(MarshalingAlgorithm).Append("\n");
            sb.Append("  Prehashed: ").Append(Prehashed).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  SignatureAlgorithm: ").Append(SignatureAlgorithm).Append("\n");
            sb.Append("  Urlalgorithm: ").Append(Urlalgorithm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransitVerifyRequest);
        }

        /// <summary>
        /// Returns true if TransitVerifyRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TransitVerifyRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransitVerifyRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Algorithm == input.Algorithm ||
                    (this.Algorithm != null &&
                    this.Algorithm.Equals(input.Algorithm))
                ) && 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                ) && 
                (
                    this.HashAlgorithm == input.HashAlgorithm ||
                    (this.HashAlgorithm != null &&
                    this.HashAlgorithm.Equals(input.HashAlgorithm))
                ) && 
                (
                    this.Hmac == input.Hmac ||
                    (this.Hmac != null &&
                    this.Hmac.Equals(input.Hmac))
                ) && 
                (
                    this.Input == input.Input ||
                    (this.Input != null &&
                    this.Input.Equals(input.Input))
                ) && 
                (
                    this.MarshalingAlgorithm == input.MarshalingAlgorithm ||
                    (this.MarshalingAlgorithm != null &&
                    this.MarshalingAlgorithm.Equals(input.MarshalingAlgorithm))
                ) && 
                (
                    this.Prehashed == input.Prehashed ||
                    this.Prehashed.Equals(input.Prehashed)
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                ) && 
                (
                    this.SignatureAlgorithm == input.SignatureAlgorithm ||
                    (this.SignatureAlgorithm != null &&
                    this.SignatureAlgorithm.Equals(input.SignatureAlgorithm))
                ) && 
                (
                    this.Urlalgorithm == input.Urlalgorithm ||
                    (this.Urlalgorithm != null &&
                    this.Urlalgorithm.Equals(input.Urlalgorithm))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Algorithm != null)
                {
                    hashCode = (hashCode * 59) + this.Algorithm.GetHashCode();
                }
                if (this.Context != null)
                {
                    hashCode = (hashCode * 59) + this.Context.GetHashCode();
                }
                if (this.HashAlgorithm != null)
                {
                    hashCode = (hashCode * 59) + this.HashAlgorithm.GetHashCode();
                }
                if (this.Hmac != null)
                {
                    hashCode = (hashCode * 59) + this.Hmac.GetHashCode();
                }
                if (this.Input != null)
                {
                    hashCode = (hashCode * 59) + this.Input.GetHashCode();
                }
                if (this.MarshalingAlgorithm != null)
                {
                    hashCode = (hashCode * 59) + this.MarshalingAlgorithm.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Prehashed.GetHashCode();
                if (this.Signature != null)
                {
                    hashCode = (hashCode * 59) + this.Signature.GetHashCode();
                }
                if (this.SignatureAlgorithm != null)
                {
                    hashCode = (hashCode * 59) + this.SignatureAlgorithm.GetHashCode();
                }
                if (this.Urlalgorithm != null)
                {
                    hashCode = (hashCode * 59) + this.Urlalgorithm.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
