/*
 * HashiCorp Vault API
 *
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.12.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using System.Threading;
using System.Threading.Tasks;
using VaultClient.Client;
using VaultClient.Model;

namespace VaultClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecretsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Configure the AD server to connect to, along with password options.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAdConfig();

        /// <summary>
        /// Configure the AD server to connect to, along with password options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAdConfigWithHttpInfo();
        /// <summary>
        /// Delete a library set.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <returns></returns>
        void DeleteAdLibraryName(string name);

        /// <summary>
        /// Delete a library set.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAdLibraryNameWithHttpInfo(string name);
        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void DeleteAdRolesName(string name);

        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAdRolesNameWithHttpInfo(string name);
        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAlicloudConfig();

        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAlicloudConfigWithHttpInfo();
        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <returns></returns>
        void DeleteAlicloudRoleName(string name);

        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAlicloudRoleNameWithHttpInfo(string name);
        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <returns></returns>
        void DeleteAwsRolesName(string name);

        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAwsRolesNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAzureConfig();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAzureConfigWithHttpInfo();
        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        void DeleteAzureRolesName(string name);

        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAzureRolesNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        void DeleteConsulRolesName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteConsulRolesNameWithHttpInfo(string name);
        /// <summary>
        /// Deletes the secret at the specified location.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <returns></returns>
        void DeleteCubbyholePath(string path);

        /// <summary>
        /// Deletes the secret at the specified location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCubbyholePathWithHttpInfo(string path);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <returns></returns>
        void DeleteGcpRolesetName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGcpRolesetNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <returns></returns>
        void DeleteGcpStaticAccountName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGcpStaticAccountNameWithHttpInfo(string name);
        /// <summary>
        /// Configure the GCP KMS secrets engine
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteGcpkmsConfig();

        /// <summary>
        /// Configure the GCP KMS secrets engine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGcpkmsConfigWithHttpInfo();
        /// <summary>
        /// Deregister an existing key in Vault
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to deregister in Vault. If the key exists in Google Cloud KMS, it will be left untouched.</param>
        /// <returns></returns>
        void DeleteGcpkmsKeysDeregisterKey(string key);

        /// <summary>
        /// Deregister an existing key in Vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to deregister in Vault. If the key exists in Google Cloud KMS, it will be left untouched.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGcpkmsKeysDeregisterKeyWithHttpInfo(string key);
        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <returns></returns>
        void DeleteGcpkmsKeysKey(string key);

        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGcpkmsKeysKeyWithHttpInfo(string key);
        /// <summary>
        /// Delete old crypto key versions from Google Cloud KMS
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <returns></returns>
        void DeleteGcpkmsKeysTrimKey(string key);

        /// <summary>
        /// Delete old crypto key versions from Google Cloud KMS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGcpkmsKeysTrimKeyWithHttpInfo(string key);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteKubernetesConfig();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteKubernetesConfigWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void DeleteKubernetesRolesName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteKubernetesRolesNameWithHttpInfo(string name);
        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns></returns>
        void DeleteKvPath(string path);

        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteKvPathWithHttpInfo(string path);
        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <returns></returns>
        void DeleteMongodbatlasRolesName(string name);

        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMongodbatlasRolesNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteNomadConfigAccess();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNomadConfigAccessWithHttpInfo();
        /// <summary>
        /// Configure the lease parameters for generated tokens
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteNomadConfigLease();

        /// <summary>
        /// Configure the lease parameters for generated tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNomadConfigLeaseWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void DeleteNomadRoleName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNomadRoleNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteOpenldapConfig();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOpenldapConfigWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <returns></returns>
        void DeleteOpenldapRoleName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOpenldapRoleNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void DeleteOpenldapStaticRoleName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOpenldapStaticRoleNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <returns></returns>
        void DeletePkiIssuerRefDerPem(string issuerRef);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePkiIssuerRefDerPemWithHttpInfo(string issuerRef);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeletePkiJson();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePkiJsonWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <returns></returns>
        void DeletePkiKeyKeyRef(string keyRef);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePkiKeyKeyRefWithHttpInfo(string keyRef);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void DeletePkiRolesName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePkiRolesNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeletePkiRoot();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePkiRootWithHttpInfo();
        /// <summary>
        /// Manage the roles that can be created with this backend.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        void DeleteRabbitmqRolesName(string name);

        /// <summary>
        /// Manage the roles that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRabbitmqRolesNameWithHttpInfo(string name);
        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns></returns>
        void DeleteSecretDataPath(string path);

        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSecretDataPathWithHttpInfo(string path);
        /// <summary>
        /// Configures settings for the KV store
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns></returns>
        void DeleteSecretMetadataPath(string path);

        /// <summary>
        /// Configures settings for the KV store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSecretMetadataPathWithHttpInfo(string path);
        /// <summary>
        /// Set the SSH private key used for signing certificates.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteSshConfigCa();

        /// <summary>
        /// Set the SSH private key used for signing certificates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSshConfigCaWithHttpInfo();
        /// <summary>
        /// Assign zero address as default CIDR block for select roles.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteSshConfigZeroaddress();

        /// <summary>
        /// Assign zero address as default CIDR block for select roles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSshConfigZeroaddressWithHttpInfo();
        /// <summary>
        /// Register a shared private key with Vault.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">[Required] Name of the key</param>
        /// <returns></returns>
        void DeleteSshKeysKeyName(string keyName);

        /// <summary>
        /// Register a shared private key with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">[Required] Name of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSshKeysKeyNameWithHttpInfo(string keyName);
        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <returns></returns>
        void DeleteSshRolesRole(string role);

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSshRolesRoleWithHttpInfo(string role);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteTerraformConfig();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTerraformConfigWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void DeleteTerraformRoleName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTerraformRoleNameWithHttpInfo(string name);
        /// <summary>
        /// Manage the keys that can be created with this backend.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <returns></returns>
        void DeleteTotpKeysName(string name);

        /// <summary>
        /// Manage the keys that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTotpKeysNameWithHttpInfo(string name);
        /// <summary>
        /// Managed named encryption keys
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns></returns>
        void DeleteTransitKeysName(string name);

        /// <summary>
        /// Managed named encryption keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTransitKeysNameWithHttpInfo(string name);
        /// <summary>
        /// Configure the AD server to connect to, along with password options.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAdConfig();

        /// <summary>
        /// Configure the AD server to connect to, along with password options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAdConfigWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void GetAdCredsName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAdCredsNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAdLibrary(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAdLibraryWithHttpInfo(string list);
        /// <summary>
        /// Read a library set.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <returns></returns>
        void GetAdLibraryName(string name);

        /// <summary>
        /// Read a library set.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAdLibraryNameWithHttpInfo(string name);
        /// <summary>
        /// Check the status of the service accounts in a library set.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <returns></returns>
        void GetAdLibraryNameStatus(string name);

        /// <summary>
        /// Check the status of the service accounts in a library set.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAdLibraryNameStatusWithHttpInfo(string name);
        /// <summary>
        /// List the name of each role currently stored.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAdRoles(string list);

        /// <summary>
        /// List the name of each role currently stored.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAdRolesWithHttpInfo(string list);
        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void GetAdRolesName(string name);

        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAdRolesNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAdRotateRoot();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAdRotateRootWithHttpInfo();
        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAlicloudConfig();

        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAlicloudConfigWithHttpInfo();
        /// <summary>
        /// Generate an API key or STS credential using the given role&#39;s configuration.&#39;
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <returns></returns>
        void GetAlicloudCredsName(string name);

        /// <summary>
        /// Generate an API key or STS credential using the given role&#39;s configuration.&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAlicloudCredsNameWithHttpInfo(string name);
        /// <summary>
        /// List the existing roles in this backend.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAlicloudRole(string list);

        /// <summary>
        /// List the existing roles in this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAlicloudRoleWithHttpInfo(string list);
        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <returns></returns>
        void GetAlicloudRoleName(string name);

        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAlicloudRoleNameWithHttpInfo(string name);
        /// <summary>
        /// Configure the default lease information for generated credentials.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAwsConfigLease();

        /// <summary>
        /// Configure the default lease information for generated credentials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAwsConfigLeaseWithHttpInfo();
        /// <summary>
        /// Configure the root credentials that are used to manage IAM.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAwsConfigRoot();

        /// <summary>
        /// Configure the root credentials that are used to manage IAM.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAwsConfigRootWithHttpInfo();
        /// <summary>
        /// Generate AWS credentials from a specific Vault role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAwsCreds();

        /// <summary>
        /// Generate AWS credentials from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAwsCredsWithHttpInfo();
        /// <summary>
        /// List the existing roles in this backend
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAwsRoles(string list);

        /// <summary>
        /// List the existing roles in this backend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAwsRolesWithHttpInfo(string list);
        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <returns></returns>
        void GetAwsRolesName(string name);

        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAwsRolesNameWithHttpInfo(string name);
        /// <summary>
        /// Generate AWS credentials from a specific Vault role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void GetAwsStsName(string name);

        /// <summary>
        /// Generate AWS credentials from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAwsStsNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAzureConfig();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAzureConfigWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the Vault role</param>
        /// <returns></returns>
        void GetAzureCredsRole(string role);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the Vault role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAzureCredsRoleWithHttpInfo(string role);
        /// <summary>
        /// List existing roles.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAzureRoles(string list);

        /// <summary>
        /// List existing roles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAzureRolesWithHttpInfo(string list);
        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        void GetAzureRolesName(string name);

        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAzureRolesNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetConsulConfigAccess();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetConsulConfigAccessWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <returns></returns>
        void GetConsulCredsRole(string role);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetConsulCredsRoleWithHttpInfo(string role);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetConsulRoles(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetConsulRolesWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        void GetConsulRolesName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetConsulRolesNameWithHttpInfo(string name);
        /// <summary>
        /// Retrieve the secret at the specified location.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns></returns>
        void GetCubbyholePath(string path, string list = default(string));

        /// <summary>
        /// Retrieve the secret at the specified location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetCubbyholePathWithHttpInfo(string path, string list = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetGcpConfig();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGcpConfigWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns></returns>
        void GetGcpKeyRoleset(string roleset);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGcpKeyRolesetWithHttpInfo(string roleset);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <returns></returns>
        void GetGcpRolesetName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGcpRolesetNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns></returns>
        void GetGcpRolesetRolesetKey(string roleset);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGcpRolesetRolesetKeyWithHttpInfo(string roleset);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns></returns>
        void GetGcpRolesetRolesetToken(string roleset);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGcpRolesetRolesetTokenWithHttpInfo(string roleset);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetGcpRolesets(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGcpRolesetsWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <returns></returns>
        void GetGcpStaticAccountName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGcpStaticAccountNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <returns></returns>
        void GetGcpStaticAccountNameKey(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGcpStaticAccountNameKeyWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <returns></returns>
        void GetGcpStaticAccountNameToken(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGcpStaticAccountNameTokenWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetGcpStaticAccounts(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGcpStaticAccountsWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns></returns>
        void GetGcpTokenRoleset(string roleset);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGcpTokenRolesetWithHttpInfo(string roleset);
        /// <summary>
        /// Configure the GCP KMS secrets engine
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetGcpkmsConfig();

        /// <summary>
        /// Configure the GCP KMS secrets engine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGcpkmsConfigWithHttpInfo();
        /// <summary>
        /// List named keys
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetGcpkmsKeys(string list);

        /// <summary>
        /// List named keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGcpkmsKeysWithHttpInfo(string list);
        /// <summary>
        /// Configure the key in Vault
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <returns></returns>
        void GetGcpkmsKeysConfigKey(string key);

        /// <summary>
        /// Configure the key in Vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGcpkmsKeysConfigKeyWithHttpInfo(string key);
        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <returns></returns>
        void GetGcpkmsKeysKey(string key);

        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGcpkmsKeysKeyWithHttpInfo(string key);
        /// <summary>
        /// Retrieve the public key associated with the named key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key for which to get the public key. This key must already exist in Vault and Google Cloud KMS.</param>
        /// <returns></returns>
        void GetGcpkmsPubkeyKey(string key);

        /// <summary>
        /// Retrieve the public key associated with the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key for which to get the public key. This key must already exist in Vault and Google Cloud KMS.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetGcpkmsPubkeyKeyWithHttpInfo(string key);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetKubernetesConfig();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetKubernetesConfigWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetKubernetesRoles(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetKubernetesRolesWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void GetKubernetesRolesName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetKubernetesRolesNameWithHttpInfo(string name);
        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns></returns>
        void GetKvPath(string path, string list = default(string));

        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetKvPathWithHttpInfo(string path, string list = default(string));
        /// <summary>
        /// Configure the  credentials that are used to manage Database Users.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetMongodbatlasConfig();

        /// <summary>
        /// Configure the  credentials that are used to manage Database Users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetMongodbatlasConfigWithHttpInfo();
        /// <summary>
        /// Generate MongoDB Atlas Programmatic API from a specific Vault role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void GetMongodbatlasCredsName(string name);

        /// <summary>
        /// Generate MongoDB Atlas Programmatic API from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetMongodbatlasCredsNameWithHttpInfo(string name);
        /// <summary>
        /// List the existing roles in this backend
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetMongodbatlasRoles(string list);

        /// <summary>
        /// List the existing roles in this backend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetMongodbatlasRolesWithHttpInfo(string list);
        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <returns></returns>
        void GetMongodbatlasRolesName(string name);

        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetMongodbatlasRolesNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetNomadConfigAccess();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetNomadConfigAccessWithHttpInfo();
        /// <summary>
        /// Configure the lease parameters for generated tokens
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetNomadConfigLease();

        /// <summary>
        /// Configure the lease parameters for generated tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetNomadConfigLeaseWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void GetNomadCredsName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetNomadCredsNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetNomadRole(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetNomadRoleWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void GetNomadRoleName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetNomadRoleNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetOpenldapConfig();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetOpenldapConfigWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the dynamic role.</param>
        /// <returns></returns>
        void GetOpenldapCredsName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the dynamic role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetOpenldapCredsNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetOpenldapRole(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetOpenldapRoleWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <returns></returns>
        void GetOpenldapRoleName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetOpenldapRoleNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role.</param>
        /// <returns></returns>
        void GetOpenldapStaticCredName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetOpenldapStaticCredNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetOpenldapStaticRole(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetOpenldapStaticRoleWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void GetOpenldapStaticRoleName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetOpenldapStaticRoleNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetPkiCa();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiCaWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetPkiCaChain();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiCaChainWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetPkiCaPem();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiCaPemWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetPkiCertCaChain();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiCertCaChainWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetPkiCertCrl();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiCertCrlWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <returns></returns>
        void GetPkiCertSerial(string serial);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiCertSerialWithHttpInfo(string serial);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <returns></returns>
        void GetPkiCertSerialRaw(string serial);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiCertSerialRawWithHttpInfo(string serial);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <returns></returns>
        void GetPkiCertSerialRawPem(string serial);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiCertSerialRawPemWithHttpInfo(string serial);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetPkiCerts(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiCertsWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetPkiConfigCrl();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiConfigCrlWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetPkiConfigIssuers();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiConfigIssuersWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetPkiConfigKeys();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiConfigKeysWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetPkiConfigUrls();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiConfigUrlsWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetPkiCrl();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiCrlWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetPkiCrlPem();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiCrlPemWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetPkiCrlRotate();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiCrlRotateWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetPkiDer();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiDerWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <returns></returns>
        void GetPkiIssuerRefCrlPem(string issuerRef);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiIssuerRefCrlPemWithHttpInfo(string issuerRef);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <returns></returns>
        void GetPkiIssuerRefDerPem(string issuerRef);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiIssuerRefDerPemWithHttpInfo(string issuerRef);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetPkiIssuers(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiIssuersWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetPkiJson();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiJsonWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <returns></returns>
        void GetPkiKeyKeyRef(string keyRef);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiKeyKeyRefWithHttpInfo(string keyRef);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetPkiKeys(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiKeysWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetPkiRoles(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiRolesWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void GetPkiRolesName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiRolesNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetPkiTidyStatus();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPkiTidyStatusWithHttpInfo();
        /// <summary>
        /// Configure the lease parameters for generated credentials
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetRabbitmqConfigLease();

        /// <summary>
        /// Configure the lease parameters for generated credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetRabbitmqConfigLeaseWithHttpInfo();
        /// <summary>
        /// Request RabbitMQ credentials for a certain role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        void GetRabbitmqCredsName(string name);

        /// <summary>
        /// Request RabbitMQ credentials for a certain role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetRabbitmqCredsNameWithHttpInfo(string name);
        /// <summary>
        /// Manage the roles that can be created with this backend.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetRabbitmqRoles(string list);

        /// <summary>
        /// Manage the roles that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetRabbitmqRolesWithHttpInfo(string list);
        /// <summary>
        /// Manage the roles that can be created with this backend.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        void GetRabbitmqRolesName(string name);

        /// <summary>
        /// Manage the roles that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetRabbitmqRolesNameWithHttpInfo(string name);
        /// <summary>
        /// Read the backend level settings.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetSecretConfig();

        /// <summary>
        /// Read the backend level settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSecretConfigWithHttpInfo();
        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns></returns>
        void GetSecretDataPath(string path);

        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSecretDataPathWithHttpInfo(string path);
        /// <summary>
        /// Configures settings for the KV store
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns></returns>
        void GetSecretMetadataPath(string path, string list = default(string));

        /// <summary>
        /// Configures settings for the KV store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSecretMetadataPathWithHttpInfo(string path, string list = default(string));
        /// <summary>
        /// Read the structure of a secret entry from the Key-Value store with the values removed.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns></returns>
        void GetSecretSubkeysPath(string path);

        /// <summary>
        /// Read the structure of a secret entry from the Key-Value store with the values removed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSecretSubkeysPathWithHttpInfo(string path);
        /// <summary>
        /// Set the SSH private key used for signing certificates.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetSshConfigCa();

        /// <summary>
        /// Set the SSH private key used for signing certificates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSshConfigCaWithHttpInfo();
        /// <summary>
        /// Assign zero address as default CIDR block for select roles.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetSshConfigZeroaddress();

        /// <summary>
        /// Assign zero address as default CIDR block for select roles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSshConfigZeroaddressWithHttpInfo();
        /// <summary>
        /// Retrieve the public key.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetSshPublicKey();

        /// <summary>
        /// Retrieve the public key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSshPublicKeyWithHttpInfo();
        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetSshRoles(string list);

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSshRolesWithHttpInfo(string list);
        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <returns></returns>
        void GetSshRolesRole(string role);

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSshRolesRoleWithHttpInfo(string role);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetTerraformConfig();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetTerraformConfigWithHttpInfo();
        /// <summary>
        /// Generate a Terraform Cloud or Enterprise API token from a specific Vault role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void GetTerraformCredsName(string name);

        /// <summary>
        /// Generate a Terraform Cloud or Enterprise API token from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetTerraformCredsNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetTerraformRole(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetTerraformRoleWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void GetTerraformRoleName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetTerraformRoleNameWithHttpInfo(string name);
        /// <summary>
        /// Request time-based one-time use password or validate a password for a certain key .
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <returns></returns>
        void GetTotpCodeName(string name);

        /// <summary>
        /// Request time-based one-time use password or validate a password for a certain key .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetTotpCodeNameWithHttpInfo(string name);
        /// <summary>
        /// Manage the keys that can be created with this backend.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetTotpKeys(string list);

        /// <summary>
        /// Manage the keys that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetTotpKeysWithHttpInfo(string list);
        /// <summary>
        /// Manage the keys that can be created with this backend.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <returns></returns>
        void GetTotpKeysName(string name);

        /// <summary>
        /// Manage the keys that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetTotpKeysNameWithHttpInfo(string name);
        /// <summary>
        /// Backup the named key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns></returns>
        void GetTransitBackupName(string name);

        /// <summary>
        /// Backup the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetTransitBackupNameWithHttpInfo(string name);
        /// <summary>
        /// Returns the size of the active cache
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetTransitCacheConfig();

        /// <summary>
        /// Returns the size of the active cache
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetTransitCacheConfigWithHttpInfo();
        /// <summary>
        /// Export named encryption or signing key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="type">Type of key to export (encryption-key, signing-key, hmac-key)</param>
        /// <returns></returns>
        void GetTransitExportTypeName(string name, string type);

        /// <summary>
        /// Export named encryption or signing key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="type">Type of key to export (encryption-key, signing-key, hmac-key)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetTransitExportTypeNameWithHttpInfo(string name, string type);
        /// <summary>
        /// Export named encryption or signing key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="type">Type of key to export (encryption-key, signing-key, hmac-key)</param>
        /// <param name="version">Version of the key</param>
        /// <returns></returns>
        void GetTransitExportTypeNameVersion(string name, string type, string version);

        /// <summary>
        /// Export named encryption or signing key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="type">Type of key to export (encryption-key, signing-key, hmac-key)</param>
        /// <param name="version">Version of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetTransitExportTypeNameVersionWithHttpInfo(string name, string type, string version);
        /// <summary>
        /// Managed named encryption keys
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetTransitKeys(string list);

        /// <summary>
        /// Managed named encryption keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetTransitKeysWithHttpInfo(string list);
        /// <summary>
        /// Managed named encryption keys
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns></returns>
        void GetTransitKeysName(string name);

        /// <summary>
        /// Managed named encryption keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetTransitKeysNameWithHttpInfo(string name);
        /// <summary>
        /// Returns the public key to use for wrapping imported keys
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetTransitWrappingKey();

        /// <summary>
        /// Returns the public key to use for wrapping imported keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetTransitWrappingKeyWithHttpInfo();
        /// <summary>
        /// Configure the AD server to connect to, along with password options.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostAdConfig(AdConfigRequest adConfigRequest = default(AdConfigRequest));

        /// <summary>
        /// Configure the AD server to connect to, along with password options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAdConfigWithHttpInfo(AdConfigRequest adConfigRequest = default(AdConfigRequest));
        /// <summary>
        /// Check service accounts in to the library.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryManageCheckInRequest"> (optional)</param>
        /// <returns></returns>
        void PostAdLibraryManageNameCheckIn(string name, AdLibraryManageCheckInRequest adLibraryManageCheckInRequest = default(AdLibraryManageCheckInRequest));

        /// <summary>
        /// Check service accounts in to the library.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryManageCheckInRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAdLibraryManageNameCheckInWithHttpInfo(string name, AdLibraryManageCheckInRequest adLibraryManageCheckInRequest = default(AdLibraryManageCheckInRequest));
        /// <summary>
        /// Update a library set.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryRequest"> (optional)</param>
        /// <returns></returns>
        void PostAdLibraryName(string name, AdLibraryRequest adLibraryRequest = default(AdLibraryRequest));

        /// <summary>
        /// Update a library set.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAdLibraryNameWithHttpInfo(string name, AdLibraryRequest adLibraryRequest = default(AdLibraryRequest));
        /// <summary>
        /// Check service accounts in to the library.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryCheckInRequest"> (optional)</param>
        /// <returns></returns>
        void PostAdLibraryNameCheckIn(string name, AdLibraryCheckInRequest adLibraryCheckInRequest = default(AdLibraryCheckInRequest));

        /// <summary>
        /// Check service accounts in to the library.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryCheckInRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAdLibraryNameCheckInWithHttpInfo(string name, AdLibraryCheckInRequest adLibraryCheckInRequest = default(AdLibraryCheckInRequest));
        /// <summary>
        /// Check a service account out from the library.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set</param>
        /// <param name="adLibraryCheckOutRequest"> (optional)</param>
        /// <returns></returns>
        void PostAdLibraryNameCheckOut(string name, AdLibraryCheckOutRequest adLibraryCheckOutRequest = default(AdLibraryCheckOutRequest));

        /// <summary>
        /// Check a service account out from the library.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set</param>
        /// <param name="adLibraryCheckOutRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAdLibraryNameCheckOutWithHttpInfo(string name, AdLibraryCheckOutRequest adLibraryCheckOutRequest = default(AdLibraryCheckOutRequest));
        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="adRolesRequest"> (optional)</param>
        /// <returns></returns>
        void PostAdRolesName(string name, AdRolesRequest adRolesRequest = default(AdRolesRequest));

        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="adRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAdRolesNameWithHttpInfo(string name, AdRolesRequest adRolesRequest = default(AdRolesRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role</param>
        /// <returns></returns>
        void PostAdRotateRoleName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAdRotateRoleNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void PostAdRotateRoot();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAdRotateRootWithHttpInfo();
        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alicloudConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostAlicloudConfig(AlicloudConfigRequest alicloudConfigRequest = default(AlicloudConfigRequest));

        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alicloudConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAlicloudConfigWithHttpInfo(AlicloudConfigRequest alicloudConfigRequest = default(AlicloudConfigRequest));
        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <param name="alicloudRoleRequest"> (optional)</param>
        /// <returns></returns>
        void PostAlicloudRoleName(string name, AlicloudRoleRequest alicloudRoleRequest = default(AlicloudRoleRequest));

        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <param name="alicloudRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAlicloudRoleNameWithHttpInfo(string name, AlicloudRoleRequest alicloudRoleRequest = default(AlicloudRoleRequest));
        /// <summary>
        /// Configure the default lease information for generated credentials.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigLeaseRequest"> (optional)</param>
        /// <returns></returns>
        void PostAwsConfigLease(AwsConfigLeaseRequest awsConfigLeaseRequest = default(AwsConfigLeaseRequest));

        /// <summary>
        /// Configure the default lease information for generated credentials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigLeaseRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAwsConfigLeaseWithHttpInfo(AwsConfigLeaseRequest awsConfigLeaseRequest = default(AwsConfigLeaseRequest));
        /// <summary>
        /// Configure the root credentials that are used to manage IAM.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigRootRequest"> (optional)</param>
        /// <returns></returns>
        void PostAwsConfigRoot(AwsConfigRootRequest awsConfigRootRequest = default(AwsConfigRootRequest));

        /// <summary>
        /// Configure the root credentials that are used to manage IAM.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigRootRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAwsConfigRootWithHttpInfo(AwsConfigRootRequest awsConfigRootRequest = default(AwsConfigRootRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void PostAwsConfigRotateRoot();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAwsConfigRotateRootWithHttpInfo();
        /// <summary>
        /// Generate AWS credentials from a specific Vault role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsCredsRequest"> (optional)</param>
        /// <returns></returns>
        void PostAwsCreds(AwsCredsRequest awsCredsRequest = default(AwsCredsRequest));

        /// <summary>
        /// Generate AWS credentials from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsCredsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAwsCredsWithHttpInfo(AwsCredsRequest awsCredsRequest = default(AwsCredsRequest));
        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="awsRolesRequest"> (optional)</param>
        /// <returns></returns>
        void PostAwsRolesName(string name, AwsRolesRequest awsRolesRequest = default(AwsRolesRequest));

        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="awsRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAwsRolesNameWithHttpInfo(string name, AwsRolesRequest awsRolesRequest = default(AwsRolesRequest));
        /// <summary>
        /// Generate AWS credentials from a specific Vault role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="awsStsRequest"> (optional)</param>
        /// <returns></returns>
        void PostAwsStsName(string name, AwsStsRequest awsStsRequest = default(AwsStsRequest));

        /// <summary>
        /// Generate AWS credentials from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="awsStsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAwsStsNameWithHttpInfo(string name, AwsStsRequest awsStsRequest = default(AwsStsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostAzureConfig(AzureConfigRequest azureConfigRequest = default(AzureConfigRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAzureConfigWithHttpInfo(AzureConfigRequest azureConfigRequest = default(AzureConfigRequest));
        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="azureRolesRequest"> (optional)</param>
        /// <returns></returns>
        void PostAzureRolesName(string name, AzureRolesRequest azureRolesRequest = default(AzureRolesRequest));

        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="azureRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAzureRolesNameWithHttpInfo(string name, AzureRolesRequest azureRolesRequest = default(AzureRolesRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void PostAzureRotateRoot();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAzureRotateRootWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consulConfigAccessRequest"> (optional)</param>
        /// <returns></returns>
        void PostConsulConfigAccess(ConsulConfigAccessRequest consulConfigAccessRequest = default(ConsulConfigAccessRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consulConfigAccessRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostConsulConfigAccessWithHttpInfo(ConsulConfigAccessRequest consulConfigAccessRequest = default(ConsulConfigAccessRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="consulRolesRequest"> (optional)</param>
        /// <returns></returns>
        void PostConsulRolesName(string name, ConsulRolesRequest consulRolesRequest = default(ConsulRolesRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="consulRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostConsulRolesNameWithHttpInfo(string name, ConsulRolesRequest consulRolesRequest = default(ConsulRolesRequest));
        /// <summary>
        /// Store a secret at the specified location.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <returns></returns>
        void PostCubbyholePath(string path);

        /// <summary>
        /// Store a secret at the specified location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostCubbyholePathWithHttpInfo(string path);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostGcpConfig(GcpConfigRequest gcpConfigRequest = default(GcpConfigRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpConfigWithHttpInfo(GcpConfigRequest gcpConfigRequest = default(GcpConfigRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void PostGcpConfigRotateRoot();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpConfigRotateRootWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="gcpKeyRequest"> (optional)</param>
        /// <returns></returns>
        void PostGcpKeyRoleset(string roleset, GcpKeyRequest gcpKeyRequest = default(GcpKeyRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="gcpKeyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpKeyRolesetWithHttpInfo(string roleset, GcpKeyRequest gcpKeyRequest = default(GcpKeyRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <param name="gcpRolesetRequest"> (optional)</param>
        /// <returns></returns>
        void PostGcpRolesetName(string name, GcpRolesetRequest gcpRolesetRequest = default(GcpRolesetRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <param name="gcpRolesetRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpRolesetNameWithHttpInfo(string name, GcpRolesetRequest gcpRolesetRequest = default(GcpRolesetRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        void PostGcpRolesetNameRotate(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpRolesetNameRotateWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        void PostGcpRolesetNameRotateKey(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpRolesetNameRotateKeyWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="gcpRolesetKeyRequest"> (optional)</param>
        /// <returns></returns>
        void PostGcpRolesetRolesetKey(string roleset, GcpRolesetKeyRequest gcpRolesetKeyRequest = default(GcpRolesetKeyRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="gcpRolesetKeyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpRolesetRolesetKeyWithHttpInfo(string roleset, GcpRolesetKeyRequest gcpRolesetKeyRequest = default(GcpRolesetKeyRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns></returns>
        void PostGcpRolesetRolesetToken(string roleset);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpRolesetRolesetTokenWithHttpInfo(string roleset);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <param name="gcpStaticAccountRequest"> (optional)</param>
        /// <returns></returns>
        void PostGcpStaticAccountName(string name, GcpStaticAccountRequest gcpStaticAccountRequest = default(GcpStaticAccountRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <param name="gcpStaticAccountRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpStaticAccountNameWithHttpInfo(string name, GcpStaticAccountRequest gcpStaticAccountRequest = default(GcpStaticAccountRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <param name="gcpStaticAccountKeyRequest"> (optional)</param>
        /// <returns></returns>
        void PostGcpStaticAccountNameKey(string name, GcpStaticAccountKeyRequest gcpStaticAccountKeyRequest = default(GcpStaticAccountKeyRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <param name="gcpStaticAccountKeyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpStaticAccountNameKeyWithHttpInfo(string name, GcpStaticAccountKeyRequest gcpStaticAccountKeyRequest = default(GcpStaticAccountKeyRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the account.</param>
        /// <returns></returns>
        void PostGcpStaticAccountNameRotateKey(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the account.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpStaticAccountNameRotateKeyWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <returns></returns>
        void PostGcpStaticAccountNameToken(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpStaticAccountNameTokenWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns></returns>
        void PostGcpTokenRoleset(string roleset);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpTokenRolesetWithHttpInfo(string roleset);
        /// <summary>
        /// Configure the GCP KMS secrets engine
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpkmsConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostGcpkmsConfig(GcpkmsConfigRequest gcpkmsConfigRequest = default(GcpkmsConfigRequest));

        /// <summary>
        /// Configure the GCP KMS secrets engine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpkmsConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpkmsConfigWithHttpInfo(GcpkmsConfigRequest gcpkmsConfigRequest = default(GcpkmsConfigRequest));
        /// <summary>
        /// Decrypt a ciphertext value using a named key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for decryption. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsDecryptRequest"> (optional)</param>
        /// <returns></returns>
        void PostGcpkmsDecryptKey(string key, GcpkmsDecryptRequest gcpkmsDecryptRequest = default(GcpkmsDecryptRequest));

        /// <summary>
        /// Decrypt a ciphertext value using a named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for decryption. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsDecryptRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpkmsDecryptKeyWithHttpInfo(string key, GcpkmsDecryptRequest gcpkmsDecryptRequest = default(GcpkmsDecryptRequest));
        /// <summary>
        /// Encrypt a plaintext value using a named key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for encryption. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsEncryptRequest"> (optional)</param>
        /// <returns></returns>
        void PostGcpkmsEncryptKey(string key, GcpkmsEncryptRequest gcpkmsEncryptRequest = default(GcpkmsEncryptRequest));

        /// <summary>
        /// Encrypt a plaintext value using a named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for encryption. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsEncryptRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpkmsEncryptKeyWithHttpInfo(string key, GcpkmsEncryptRequest gcpkmsEncryptRequest = default(GcpkmsEncryptRequest));
        /// <summary>
        /// Configure the key in Vault
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="gcpkmsKeysConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostGcpkmsKeysConfigKey(string key, GcpkmsKeysConfigRequest gcpkmsKeysConfigRequest = default(GcpkmsKeysConfigRequest));

        /// <summary>
        /// Configure the key in Vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="gcpkmsKeysConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpkmsKeysConfigKeyWithHttpInfo(string key, GcpkmsKeysConfigRequest gcpkmsKeysConfigRequest = default(GcpkmsKeysConfigRequest));
        /// <summary>
        /// Deregister an existing key in Vault
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to deregister in Vault. If the key exists in Google Cloud KMS, it will be left untouched.</param>
        /// <returns></returns>
        void PostGcpkmsKeysDeregisterKey(string key);

        /// <summary>
        /// Deregister an existing key in Vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to deregister in Vault. If the key exists in Google Cloud KMS, it will be left untouched.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpkmsKeysDeregisterKeyWithHttpInfo(string key);
        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="gcpkmsKeysRequest"> (optional)</param>
        /// <returns></returns>
        void PostGcpkmsKeysKey(string key, GcpkmsKeysRequest gcpkmsKeysRequest = default(GcpkmsKeysRequest));

        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="gcpkmsKeysRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpkmsKeysKeyWithHttpInfo(string key, GcpkmsKeysRequest gcpkmsKeysRequest = default(GcpkmsKeysRequest));
        /// <summary>
        /// Register an existing crypto key in Google Cloud KMS
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to register in Vault. This will be the named used to refer to the underlying crypto key when encrypting or decrypting data.</param>
        /// <param name="gcpkmsKeysRegisterRequest"> (optional)</param>
        /// <returns></returns>
        void PostGcpkmsKeysRegisterKey(string key, GcpkmsKeysRegisterRequest gcpkmsKeysRegisterRequest = default(GcpkmsKeysRegisterRequest));

        /// <summary>
        /// Register an existing crypto key in Google Cloud KMS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to register in Vault. This will be the named used to refer to the underlying crypto key when encrypting or decrypting data.</param>
        /// <param name="gcpkmsKeysRegisterRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpkmsKeysRegisterKeyWithHttpInfo(string key, GcpkmsKeysRegisterRequest gcpkmsKeysRegisterRequest = default(GcpkmsKeysRegisterRequest));
        /// <summary>
        /// Rotate a crypto key to a new primary version
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to rotate. This key must already be registered with Vault and point to a valid Google Cloud KMS crypto key.</param>
        /// <returns></returns>
        void PostGcpkmsKeysRotateKey(string key);

        /// <summary>
        /// Rotate a crypto key to a new primary version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to rotate. This key must already be registered with Vault and point to a valid Google Cloud KMS crypto key.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpkmsKeysRotateKeyWithHttpInfo(string key);
        /// <summary>
        /// Delete old crypto key versions from Google Cloud KMS
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <returns></returns>
        void PostGcpkmsKeysTrimKey(string key);

        /// <summary>
        /// Delete old crypto key versions from Google Cloud KMS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpkmsKeysTrimKeyWithHttpInfo(string key);
        /// <summary>
        /// Re-encrypt existing ciphertext data to a new version
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to use for encryption. This key must already exist in Vault and Google Cloud KMS.</param>
        /// <param name="gcpkmsReencryptRequest"> (optional)</param>
        /// <returns></returns>
        void PostGcpkmsReencryptKey(string key, GcpkmsReencryptRequest gcpkmsReencryptRequest = default(GcpkmsReencryptRequest));

        /// <summary>
        /// Re-encrypt existing ciphertext data to a new version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to use for encryption. This key must already exist in Vault and Google Cloud KMS.</param>
        /// <param name="gcpkmsReencryptRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpkmsReencryptKeyWithHttpInfo(string key, GcpkmsReencryptRequest gcpkmsReencryptRequest = default(GcpkmsReencryptRequest));
        /// <summary>
        /// Signs a message or digest using a named key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for signing. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsSignRequest"> (optional)</param>
        /// <returns></returns>
        void PostGcpkmsSignKey(string key, GcpkmsSignRequest gcpkmsSignRequest = default(GcpkmsSignRequest));

        /// <summary>
        /// Signs a message or digest using a named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for signing. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsSignRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpkmsSignKeyWithHttpInfo(string key, GcpkmsSignRequest gcpkmsSignRequest = default(GcpkmsSignRequest));
        /// <summary>
        /// Verify a signature using a named key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for verification. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsVerifyRequest"> (optional)</param>
        /// <returns></returns>
        void PostGcpkmsVerifyKey(string key, GcpkmsVerifyRequest gcpkmsVerifyRequest = default(GcpkmsVerifyRequest));

        /// <summary>
        /// Verify a signature using a named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for verification. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsVerifyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostGcpkmsVerifyKeyWithHttpInfo(string key, GcpkmsVerifyRequest gcpkmsVerifyRequest = default(GcpkmsVerifyRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostKubernetesConfig(KubernetesConfigRequest kubernetesConfigRequest = default(KubernetesConfigRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostKubernetesConfigWithHttpInfo(KubernetesConfigRequest kubernetesConfigRequest = default(KubernetesConfigRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Vault role</param>
        /// <param name="kubernetesCredsRequest"> (optional)</param>
        /// <returns></returns>
        void PostKubernetesCredsName(string name, KubernetesCredsRequest kubernetesCredsRequest = default(KubernetesCredsRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Vault role</param>
        /// <param name="kubernetesCredsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostKubernetesCredsNameWithHttpInfo(string name, KubernetesCredsRequest kubernetesCredsRequest = default(KubernetesCredsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="kubernetesRolesRequest"> (optional)</param>
        /// <returns></returns>
        void PostKubernetesRolesName(string name, KubernetesRolesRequest kubernetesRolesRequest = default(KubernetesRolesRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="kubernetesRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostKubernetesRolesNameWithHttpInfo(string name, KubernetesRolesRequest kubernetesRolesRequest = default(KubernetesRolesRequest));
        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns></returns>
        void PostKvPath(string path);

        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostKvPathWithHttpInfo(string path);
        /// <summary>
        /// Configure the  credentials that are used to manage Database Users.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mongodbatlasConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostMongodbatlasConfig(MongodbatlasConfigRequest mongodbatlasConfigRequest = default(MongodbatlasConfigRequest));

        /// <summary>
        /// Configure the  credentials that are used to manage Database Users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mongodbatlasConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostMongodbatlasConfigWithHttpInfo(MongodbatlasConfigRequest mongodbatlasConfigRequest = default(MongodbatlasConfigRequest));
        /// <summary>
        /// Generate MongoDB Atlas Programmatic API from a specific Vault role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void PostMongodbatlasCredsName(string name);

        /// <summary>
        /// Generate MongoDB Atlas Programmatic API from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostMongodbatlasCredsNameWithHttpInfo(string name);
        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <param name="mongodbatlasRolesRequest"> (optional)</param>
        /// <returns></returns>
        void PostMongodbatlasRolesName(string name, MongodbatlasRolesRequest mongodbatlasRolesRequest = default(MongodbatlasRolesRequest));

        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <param name="mongodbatlasRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostMongodbatlasRolesNameWithHttpInfo(string name, MongodbatlasRolesRequest mongodbatlasRolesRequest = default(MongodbatlasRolesRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nomadConfigAccessRequest"> (optional)</param>
        /// <returns></returns>
        void PostNomadConfigAccess(NomadConfigAccessRequest nomadConfigAccessRequest = default(NomadConfigAccessRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nomadConfigAccessRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostNomadConfigAccessWithHttpInfo(NomadConfigAccessRequest nomadConfigAccessRequest = default(NomadConfigAccessRequest));
        /// <summary>
        /// Configure the lease parameters for generated tokens
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nomadConfigLeaseRequest"> (optional)</param>
        /// <returns></returns>
        void PostNomadConfigLease(NomadConfigLeaseRequest nomadConfigLeaseRequest = default(NomadConfigLeaseRequest));

        /// <summary>
        /// Configure the lease parameters for generated tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nomadConfigLeaseRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostNomadConfigLeaseWithHttpInfo(NomadConfigLeaseRequest nomadConfigLeaseRequest = default(NomadConfigLeaseRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="nomadRoleRequest"> (optional)</param>
        /// <returns></returns>
        void PostNomadRoleName(string name, NomadRoleRequest nomadRoleRequest = default(NomadRoleRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="nomadRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostNomadRoleNameWithHttpInfo(string name, NomadRoleRequest nomadRoleRequest = default(NomadRoleRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openldapConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostOpenldapConfig(OpenldapConfigRequest openldapConfigRequest = default(OpenldapConfigRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openldapConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostOpenldapConfigWithHttpInfo(OpenldapConfigRequest openldapConfigRequest = default(OpenldapConfigRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <param name="openldapRoleRequest"> (optional)</param>
        /// <returns></returns>
        void PostOpenldapRoleName(string name, OpenldapRoleRequest openldapRoleRequest = default(OpenldapRoleRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <param name="openldapRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostOpenldapRoleNameWithHttpInfo(string name, OpenldapRoleRequest openldapRoleRequest = default(OpenldapRoleRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role</param>
        /// <returns></returns>
        void PostOpenldapRotateRoleName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostOpenldapRotateRoleNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void PostOpenldapRotateRoot();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostOpenldapRotateRootWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="openldapStaticRoleRequest"> (optional)</param>
        /// <returns></returns>
        void PostOpenldapStaticRoleName(string name, OpenldapStaticRoleRequest openldapStaticRoleRequest = default(OpenldapStaticRoleRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="openldapStaticRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostOpenldapStaticRoleNameWithHttpInfo(string name, OpenldapStaticRoleRequest openldapStaticRoleRequest = default(OpenldapStaticRoleRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiBundleRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiBundle(PkiBundleRequest pkiBundleRequest = default(PkiBundleRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiBundleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiBundleWithHttpInfo(PkiBundleRequest pkiBundleRequest = default(PkiBundleRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiCertRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiCert(PkiCertRequest pkiCertRequest = default(PkiCertRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiCertRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiCertWithHttpInfo(PkiCertRequest pkiCertRequest = default(PkiCertRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigCaRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiConfigCa(PkiConfigCaRequest pkiConfigCaRequest = default(PkiConfigCaRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigCaRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiConfigCaWithHttpInfo(PkiConfigCaRequest pkiConfigCaRequest = default(PkiConfigCaRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigCrlRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiConfigCrl(PkiConfigCrlRequest pkiConfigCrlRequest = default(PkiConfigCrlRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigCrlRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiConfigCrlWithHttpInfo(PkiConfigCrlRequest pkiConfigCrlRequest = default(PkiConfigCrlRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigIssuersRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiConfigIssuers(PkiConfigIssuersRequest pkiConfigIssuersRequest = default(PkiConfigIssuersRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigIssuersRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiConfigIssuersWithHttpInfo(PkiConfigIssuersRequest pkiConfigIssuersRequest = default(PkiConfigIssuersRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigKeysRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiConfigKeys(PkiConfigKeysRequest pkiConfigKeysRequest = default(PkiConfigKeysRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigKeysRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiConfigKeysWithHttpInfo(PkiConfigKeysRequest pkiConfigKeysRequest = default(PkiConfigKeysRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigUrlsRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiConfigUrls(PkiConfigUrlsRequest pkiConfigUrlsRequest = default(PkiConfigUrlsRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigUrlsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiConfigUrlsWithHttpInfo(PkiConfigUrlsRequest pkiConfigUrlsRequest = default(PkiConfigUrlsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiIntermediateCrossSignRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiIntermediateCrossSign(PkiIntermediateCrossSignRequest pkiIntermediateCrossSignRequest = default(PkiIntermediateCrossSignRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiIntermediateCrossSignRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiIntermediateCrossSignWithHttpInfo(PkiIntermediateCrossSignRequest pkiIntermediateCrossSignRequest = default(PkiIntermediateCrossSignRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIntermediateGenerateRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiIntermediateGenerateExported(string exported, PkiIntermediateGenerateRequest pkiIntermediateGenerateRequest = default(PkiIntermediateGenerateRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIntermediateGenerateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiIntermediateGenerateExportedWithHttpInfo(string exported, PkiIntermediateGenerateRequest pkiIntermediateGenerateRequest = default(PkiIntermediateGenerateRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiIntermediateSetSignedRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiIntermediateSetSigned(PkiIntermediateSetSignedRequest pkiIntermediateSetSignedRequest = default(PkiIntermediateSetSignedRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiIntermediateSetSignedRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiIntermediateSetSignedWithHttpInfo(PkiIntermediateSetSignedRequest pkiIntermediateSetSignedRequest = default(PkiIntermediateSetSignedRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiInternalExportedRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiInternalExported(PkiInternalExportedRequest pkiInternalExportedRequest = default(PkiInternalExportedRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiInternalExportedRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiInternalExportedWithHttpInfo(PkiInternalExportedRequest pkiInternalExportedRequest = default(PkiInternalExportedRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssueRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiIssueRole(string role, PkiIssueRequest pkiIssueRequest = default(PkiIssueRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssueRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiIssueRoleWithHttpInfo(string role, PkiIssueRequest pkiIssueRequest = default(PkiIssueRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerIssueRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiIssuerIssuerRefIssueRole(string issuerRef, string role, PkiIssuerIssueRequest pkiIssuerIssueRequest = default(PkiIssuerIssueRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerIssueRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiIssuerIssuerRefIssueRoleWithHttpInfo(string issuerRef, string role, PkiIssuerIssueRequest pkiIssuerIssueRequest = default(PkiIssuerIssueRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignIntermediateRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiIssuerIssuerRefSignIntermediate(string issuerRef, PkiIssuerSignIntermediateRequest pkiIssuerSignIntermediateRequest = default(PkiIssuerSignIntermediateRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignIntermediateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiIssuerIssuerRefSignIntermediateWithHttpInfo(string issuerRef, PkiIssuerSignIntermediateRequest pkiIssuerSignIntermediateRequest = default(PkiIssuerSignIntermediateRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerSignRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiIssuerIssuerRefSignRole(string issuerRef, string role, PkiIssuerSignRequest pkiIssuerSignRequest = default(PkiIssuerSignRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerSignRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiIssuerIssuerRefSignRoleWithHttpInfo(string issuerRef, string role, PkiIssuerSignRequest pkiIssuerSignRequest = default(PkiIssuerSignRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignSelfIssuedRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiIssuerIssuerRefSignSelfIssued(string issuerRef, PkiIssuerSignSelfIssuedRequest pkiIssuerSignSelfIssuedRequest = default(PkiIssuerSignSelfIssuedRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignSelfIssuedRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiIssuerIssuerRefSignSelfIssuedWithHttpInfo(string issuerRef, PkiIssuerSignSelfIssuedRequest pkiIssuerSignSelfIssuedRequest = default(PkiIssuerSignSelfIssuedRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignVerbatimRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiIssuerIssuerRefSignVerbatim(string issuerRef, PkiIssuerSignVerbatimRequest pkiIssuerSignVerbatimRequest = default(PkiIssuerSignVerbatimRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignVerbatimRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiIssuerIssuerRefSignVerbatimWithHttpInfo(string issuerRef, PkiIssuerSignVerbatimRequest pkiIssuerSignVerbatimRequest = default(PkiIssuerSignVerbatimRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerSignVerbatimRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiIssuerIssuerRefSignVerbatimRole(string issuerRef, string role, PkiIssuerSignVerbatimRequest pkiIssuerSignVerbatimRequest = default(PkiIssuerSignVerbatimRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerSignVerbatimRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiIssuerIssuerRefSignVerbatimRoleWithHttpInfo(string issuerRef, string role, PkiIssuerSignVerbatimRequest pkiIssuerSignVerbatimRequest = default(PkiIssuerSignVerbatimRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiDerPemRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiIssuerRefDerPem(string issuerRef, PkiDerPemRequest pkiDerPemRequest = default(PkiDerPemRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiDerPemRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiIssuerRefDerPemWithHttpInfo(string issuerRef, PkiDerPemRequest pkiDerPemRequest = default(PkiDerPemRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIssuersGenerateIntermediateRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiIssuersGenerateIntermediateExported(string exported, PkiIssuersGenerateIntermediateRequest pkiIssuersGenerateIntermediateRequest = default(PkiIssuersGenerateIntermediateRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIssuersGenerateIntermediateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiIssuersGenerateIntermediateExportedWithHttpInfo(string exported, PkiIssuersGenerateIntermediateRequest pkiIssuersGenerateIntermediateRequest = default(PkiIssuersGenerateIntermediateRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIssuersGenerateRootRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiIssuersGenerateRootExported(string exported, PkiIssuersGenerateRootRequest pkiIssuersGenerateRootRequest = default(PkiIssuersGenerateRootRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIssuersGenerateRootRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiIssuersGenerateRootExportedWithHttpInfo(string exported, PkiIssuersGenerateRootRequest pkiIssuersGenerateRootRequest = default(PkiIssuersGenerateRootRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiJsonRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiJson(PkiJsonRequest pkiJsonRequest = default(PkiJsonRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiJsonRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiJsonWithHttpInfo(PkiJsonRequest pkiJsonRequest = default(PkiJsonRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <param name="pkiKeyRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiKeyKeyRef(string keyRef, PkiKeyRequest pkiKeyRequest = default(PkiKeyRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <param name="pkiKeyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiKeyKeyRefWithHttpInfo(string keyRef, PkiKeyRequest pkiKeyRequest = default(PkiKeyRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiKeysImportRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiKeysImport(PkiKeysImportRequest pkiKeysImportRequest = default(PkiKeysImportRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiKeysImportRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiKeysImportWithHttpInfo(PkiKeysImportRequest pkiKeysImportRequest = default(PkiKeysImportRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiKmsRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiKms(PkiKmsRequest pkiKmsRequest = default(PkiKmsRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiKmsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiKmsWithHttpInfo(PkiKmsRequest pkiKmsRequest = default(PkiKmsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRevokeRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiRevoke(PkiRevokeRequest pkiRevokeRequest = default(PkiRevokeRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRevokeRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiRevokeWithHttpInfo(PkiRevokeRequest pkiRevokeRequest = default(PkiRevokeRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="pkiRolesRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiRolesName(string name, PkiRolesRequest pkiRolesRequest = default(PkiRolesRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="pkiRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiRolesNameWithHttpInfo(string name, PkiRolesRequest pkiRolesRequest = default(PkiRolesRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiRootGenerateRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiRootGenerateExported(string exported, PkiRootGenerateRequest pkiRootGenerateRequest = default(PkiRootGenerateRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiRootGenerateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiRootGenerateExportedWithHttpInfo(string exported, PkiRootGenerateRequest pkiRootGenerateRequest = default(PkiRootGenerateRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootReplaceRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiRootReplace(PkiRootReplaceRequest pkiRootReplaceRequest = default(PkiRootReplaceRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootReplaceRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiRootReplaceWithHttpInfo(PkiRootReplaceRequest pkiRootReplaceRequest = default(PkiRootReplaceRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiRootRotateRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiRootRotateExported(string exported, PkiRootRotateRequest pkiRootRotateRequest = default(PkiRootRotateRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiRootRotateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiRootRotateExportedWithHttpInfo(string exported, PkiRootRotateRequest pkiRootRotateRequest = default(PkiRootRotateRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootSignIntermediateRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiRootSignIntermediate(PkiRootSignIntermediateRequest pkiRootSignIntermediateRequest = default(PkiRootSignIntermediateRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootSignIntermediateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiRootSignIntermediateWithHttpInfo(PkiRootSignIntermediateRequest pkiRootSignIntermediateRequest = default(PkiRootSignIntermediateRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootSignSelfIssuedRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiRootSignSelfIssued(PkiRootSignSelfIssuedRequest pkiRootSignSelfIssuedRequest = default(PkiRootSignSelfIssuedRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootSignSelfIssuedRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiRootSignSelfIssuedWithHttpInfo(PkiRootSignSelfIssuedRequest pkiRootSignSelfIssuedRequest = default(PkiRootSignSelfIssuedRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiSignRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiSignRole(string role, PkiSignRequest pkiSignRequest = default(PkiSignRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiSignRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiSignRoleWithHttpInfo(string role, PkiSignRequest pkiSignRequest = default(PkiSignRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignVerbatimRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiSignVerbatim(PkiSignVerbatimRequest pkiSignVerbatimRequest = default(PkiSignVerbatimRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignVerbatimRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiSignVerbatimWithHttpInfo(PkiSignVerbatimRequest pkiSignVerbatimRequest = default(PkiSignVerbatimRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiSignVerbatimRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiSignVerbatimRole(string role, PkiSignVerbatimRequest pkiSignVerbatimRequest = default(PkiSignVerbatimRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiSignVerbatimRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiSignVerbatimRoleWithHttpInfo(string role, PkiSignVerbatimRequest pkiSignVerbatimRequest = default(PkiSignVerbatimRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTidyRequest"> (optional)</param>
        /// <returns></returns>
        void PostPkiTidy(PkiTidyRequest pkiTidyRequest = default(PkiTidyRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTidyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPkiTidyWithHttpInfo(PkiTidyRequest pkiTidyRequest = default(PkiTidyRequest));
        /// <summary>
        /// Configure the connection URI, username, and password to talk to RabbitMQ management HTTP API.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rabbitmqConfigConnectionRequest"> (optional)</param>
        /// <returns></returns>
        void PostRabbitmqConfigConnection(RabbitmqConfigConnectionRequest rabbitmqConfigConnectionRequest = default(RabbitmqConfigConnectionRequest));

        /// <summary>
        /// Configure the connection URI, username, and password to talk to RabbitMQ management HTTP API.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rabbitmqConfigConnectionRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostRabbitmqConfigConnectionWithHttpInfo(RabbitmqConfigConnectionRequest rabbitmqConfigConnectionRequest = default(RabbitmqConfigConnectionRequest));
        /// <summary>
        /// Configure the lease parameters for generated credentials
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rabbitmqConfigLeaseRequest"> (optional)</param>
        /// <returns></returns>
        void PostRabbitmqConfigLease(RabbitmqConfigLeaseRequest rabbitmqConfigLeaseRequest = default(RabbitmqConfigLeaseRequest));

        /// <summary>
        /// Configure the lease parameters for generated credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rabbitmqConfigLeaseRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostRabbitmqConfigLeaseWithHttpInfo(RabbitmqConfigLeaseRequest rabbitmqConfigLeaseRequest = default(RabbitmqConfigLeaseRequest));
        /// <summary>
        /// Manage the roles that can be created with this backend.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="rabbitmqRolesRequest"> (optional)</param>
        /// <returns></returns>
        void PostRabbitmqRolesName(string name, RabbitmqRolesRequest rabbitmqRolesRequest = default(RabbitmqRolesRequest));

        /// <summary>
        /// Manage the roles that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="rabbitmqRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostRabbitmqRolesNameWithHttpInfo(string name, RabbitmqRolesRequest rabbitmqRolesRequest = default(RabbitmqRolesRequest));
        /// <summary>
        /// Configure backend level settings that are applied to every key in the key-value store.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kvConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostSecretConfig(KvConfigRequest kvConfigRequest = default(KvConfigRequest));

        /// <summary>
        /// Configure backend level settings that are applied to every key in the key-value store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kvConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostSecretConfigWithHttpInfo(KvConfigRequest kvConfigRequest = default(KvConfigRequest));
        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDataRequest"> (optional)</param>
        /// <returns></returns>
        void PostSecretDataPath(string path, KvDataRequest kvDataRequest = default(KvDataRequest));

        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDataRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostSecretDataPathWithHttpInfo(string path, KvDataRequest kvDataRequest = default(KvDataRequest));
        /// <summary>
        /// Marks one or more versions as deleted in the KV store.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDeleteRequest"> (optional)</param>
        /// <returns></returns>
        void PostSecretDeletePath(string path, KvDeleteRequest kvDeleteRequest = default(KvDeleteRequest));

        /// <summary>
        /// Marks one or more versions as deleted in the KV store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDeleteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostSecretDeletePathWithHttpInfo(string path, KvDeleteRequest kvDeleteRequest = default(KvDeleteRequest));
        /// <summary>
        /// Permanently removes one or more versions in the KV store
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDestroyRequest"> (optional)</param>
        /// <returns></returns>
        void PostSecretDestroyPath(string path, KvDestroyRequest kvDestroyRequest = default(KvDestroyRequest));

        /// <summary>
        /// Permanently removes one or more versions in the KV store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDestroyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostSecretDestroyPathWithHttpInfo(string path, KvDestroyRequest kvDestroyRequest = default(KvDestroyRequest));
        /// <summary>
        /// Configures settings for the KV store
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvMetadataRequest"> (optional)</param>
        /// <returns></returns>
        void PostSecretMetadataPath(string path, KvMetadataRequest kvMetadataRequest = default(KvMetadataRequest));

        /// <summary>
        /// Configures settings for the KV store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvMetadataRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostSecretMetadataPathWithHttpInfo(string path, KvMetadataRequest kvMetadataRequest = default(KvMetadataRequest));
        /// <summary>
        /// Undeletes one or more versions from the KV store.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvUndeleteRequest"> (optional)</param>
        /// <returns></returns>
        void PostSecretUndeletePath(string path, KvUndeleteRequest kvUndeleteRequest = default(KvUndeleteRequest));

        /// <summary>
        /// Undeletes one or more versions from the KV store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvUndeleteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostSecretUndeletePathWithHttpInfo(string path, KvUndeleteRequest kvUndeleteRequest = default(KvUndeleteRequest));
        /// <summary>
        /// Set the SSH private key used for signing certificates.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshConfigCaRequest"> (optional)</param>
        /// <returns></returns>
        void PostSshConfigCa(SshConfigCaRequest sshConfigCaRequest = default(SshConfigCaRequest));

        /// <summary>
        /// Set the SSH private key used for signing certificates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshConfigCaRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostSshConfigCaWithHttpInfo(SshConfigCaRequest sshConfigCaRequest = default(SshConfigCaRequest));
        /// <summary>
        /// Assign zero address as default CIDR block for select roles.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshConfigZeroaddressRequest"> (optional)</param>
        /// <returns></returns>
        void PostSshConfigZeroaddress(SshConfigZeroaddressRequest sshConfigZeroaddressRequest = default(SshConfigZeroaddressRequest));

        /// <summary>
        /// Assign zero address as default CIDR block for select roles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshConfigZeroaddressRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostSshConfigZeroaddressWithHttpInfo(SshConfigZeroaddressRequest sshConfigZeroaddressRequest = default(SshConfigZeroaddressRequest));
        /// <summary>
        /// Creates a credential for establishing SSH connection with the remote host.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required] Name of the role</param>
        /// <param name="sshCredsRequest"> (optional)</param>
        /// <returns></returns>
        void PostSshCredsRole(string role, SshCredsRequest sshCredsRequest = default(SshCredsRequest));

        /// <summary>
        /// Creates a credential for establishing SSH connection with the remote host.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required] Name of the role</param>
        /// <param name="sshCredsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostSshCredsRoleWithHttpInfo(string role, SshCredsRequest sshCredsRequest = default(SshCredsRequest));
        /// <summary>
        /// Register a shared private key with Vault.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">[Required] Name of the key</param>
        /// <param name="sshKeysRequest"> (optional)</param>
        /// <returns></returns>
        void PostSshKeysKeyName(string keyName, SshKeysRequest sshKeysRequest = default(SshKeysRequest));

        /// <summary>
        /// Register a shared private key with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">[Required] Name of the key</param>
        /// <param name="sshKeysRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostSshKeysKeyNameWithHttpInfo(string keyName, SshKeysRequest sshKeysRequest = default(SshKeysRequest));
        /// <summary>
        /// List all the roles associated with the given IP address.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshLookupRequest"> (optional)</param>
        /// <returns></returns>
        void PostSshLookup(SshLookupRequest sshLookupRequest = default(SshLookupRequest));

        /// <summary>
        /// List all the roles associated with the given IP address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshLookupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostSshLookupWithHttpInfo(SshLookupRequest sshLookupRequest = default(SshLookupRequest));
        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <param name="sshRolesRequest"> (optional)</param>
        /// <returns></returns>
        void PostSshRolesRole(string role, SshRolesRequest sshRolesRequest = default(SshRolesRequest));

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <param name="sshRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostSshRolesRoleWithHttpInfo(string role, SshRolesRequest sshRolesRequest = default(SshRolesRequest));
        /// <summary>
        /// Request signing an SSH key using a certain role with the provided details.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request.</param>
        /// <param name="sshSignRequest"> (optional)</param>
        /// <returns></returns>
        void PostSshSignRole(string role, SshSignRequest sshSignRequest = default(SshSignRequest));

        /// <summary>
        /// Request signing an SSH key using a certain role with the provided details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request.</param>
        /// <param name="sshSignRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostSshSignRoleWithHttpInfo(string role, SshSignRequest sshSignRequest = default(SshSignRequest));
        /// <summary>
        /// Validate the OTP provided by Vault SSH Agent.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshVerifyRequest"> (optional)</param>
        /// <returns></returns>
        void PostSshVerify(SshVerifyRequest sshVerifyRequest = default(SshVerifyRequest));

        /// <summary>
        /// Validate the OTP provided by Vault SSH Agent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshVerifyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostSshVerifyWithHttpInfo(SshVerifyRequest sshVerifyRequest = default(SshVerifyRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terraformConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostTerraformConfig(TerraformConfigRequest terraformConfigRequest = default(TerraformConfigRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terraformConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTerraformConfigWithHttpInfo(TerraformConfigRequest terraformConfigRequest = default(TerraformConfigRequest));
        /// <summary>
        /// Generate a Terraform Cloud or Enterprise API token from a specific Vault role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void PostTerraformCredsName(string name);

        /// <summary>
        /// Generate a Terraform Cloud or Enterprise API token from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTerraformCredsNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="terraformRoleRequest"> (optional)</param>
        /// <returns></returns>
        void PostTerraformRoleName(string name, TerraformRoleRequest terraformRoleRequest = default(TerraformRoleRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="terraformRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTerraformRoleNameWithHttpInfo(string name, TerraformRoleRequest terraformRoleRequest = default(TerraformRoleRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the team or organization role</param>
        /// <returns></returns>
        void PostTerraformRotateRoleName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the team or organization role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTerraformRotateRoleNameWithHttpInfo(string name);
        /// <summary>
        /// Request time-based one-time use password or validate a password for a certain key .
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="totpCodeRequest"> (optional)</param>
        /// <returns></returns>
        void PostTotpCodeName(string name, TotpCodeRequest totpCodeRequest = default(TotpCodeRequest));

        /// <summary>
        /// Request time-based one-time use password or validate a password for a certain key .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="totpCodeRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTotpCodeNameWithHttpInfo(string name, TotpCodeRequest totpCodeRequest = default(TotpCodeRequest));
        /// <summary>
        /// Manage the keys that can be created with this backend.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="totpKeysRequest"> (optional)</param>
        /// <returns></returns>
        void PostTotpKeysName(string name, TotpKeysRequest totpKeysRequest = default(TotpKeysRequest));

        /// <summary>
        /// Manage the keys that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="totpKeysRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTotpKeysNameWithHttpInfo(string name, TotpKeysRequest totpKeysRequest = default(TotpKeysRequest));
        /// <summary>
        /// Configures a new cache of the specified size
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitCacheConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitCacheConfig(TransitCacheConfigRequest transitCacheConfigRequest = default(TransitCacheConfigRequest));

        /// <summary>
        /// Configures a new cache of the specified size
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitCacheConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitCacheConfigWithHttpInfo(TransitCacheConfigRequest transitCacheConfigRequest = default(TransitCacheConfigRequest));
        /// <summary>
        /// Generate a data key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The backend key used for encrypting the data key</param>
        /// <param name="plaintext">\&quot;plaintext\&quot; will return the key in both plaintext and ciphertext; \&quot;wrapped\&quot; will return the ciphertext only.</param>
        /// <param name="transitDatakeyRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitDatakeyPlaintextName(string name, string plaintext, TransitDatakeyRequest transitDatakeyRequest = default(TransitDatakeyRequest));

        /// <summary>
        /// Generate a data key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The backend key used for encrypting the data key</param>
        /// <param name="plaintext">\&quot;plaintext\&quot; will return the key in both plaintext and ciphertext; \&quot;wrapped\&quot; will return the ciphertext only.</param>
        /// <param name="transitDatakeyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitDatakeyPlaintextNameWithHttpInfo(string name, string plaintext, TransitDatakeyRequest transitDatakeyRequest = default(TransitDatakeyRequest));
        /// <summary>
        /// Decrypt a ciphertext value using a named key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="transitDecryptRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitDecryptName(string name, TransitDecryptRequest transitDecryptRequest = default(TransitDecryptRequest));

        /// <summary>
        /// Decrypt a ciphertext value using a named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="transitDecryptRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitDecryptNameWithHttpInfo(string name, TransitDecryptRequest transitDecryptRequest = default(TransitDecryptRequest));
        /// <summary>
        /// Encrypt a plaintext value or a batch of plaintext blocks using a named key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="transitEncryptRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitEncryptName(string name, TransitEncryptRequest transitEncryptRequest = default(TransitEncryptRequest));

        /// <summary>
        /// Encrypt a plaintext value or a batch of plaintext blocks using a named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="transitEncryptRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitEncryptNameWithHttpInfo(string name, TransitEncryptRequest transitEncryptRequest = default(TransitEncryptRequest));
        /// <summary>
        /// Generate a hash sum for input data
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitHashRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitHash(TransitHashRequest transitHashRequest = default(TransitHashRequest));

        /// <summary>
        /// Generate a hash sum for input data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitHashRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitHashWithHttpInfo(TransitHashRequest transitHashRequest = default(TransitHashRequest));
        /// <summary>
        /// Generate a hash sum for input data
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlalgorithm">Algorithm to use (POST URL parameter)</param>
        /// <param name="transitHashRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitHashUrlalgorithm(string urlalgorithm, TransitHashRequest transitHashRequest = default(TransitHashRequest));

        /// <summary>
        /// Generate a hash sum for input data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlalgorithm">Algorithm to use (POST URL parameter)</param>
        /// <param name="transitHashRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitHashUrlalgorithmWithHttpInfo(string urlalgorithm, TransitHashRequest transitHashRequest = default(TransitHashRequest));
        /// <summary>
        /// Generate an HMAC for input data using the named key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use for the HMAC function</param>
        /// <param name="transitHmacRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitHmacName(string name, TransitHmacRequest transitHmacRequest = default(TransitHmacRequest));

        /// <summary>
        /// Generate an HMAC for input data using the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use for the HMAC function</param>
        /// <param name="transitHmacRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitHmacNameWithHttpInfo(string name, TransitHmacRequest transitHmacRequest = default(TransitHmacRequest));
        /// <summary>
        /// Generate an HMAC for input data using the named key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use for the HMAC function</param>
        /// <param name="urlalgorithm">Algorithm to use (POST URL parameter)</param>
        /// <param name="transitHmacRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitHmacNameUrlalgorithm(string name, string urlalgorithm, TransitHmacRequest transitHmacRequest = default(TransitHmacRequest));

        /// <summary>
        /// Generate an HMAC for input data using the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use for the HMAC function</param>
        /// <param name="urlalgorithm">Algorithm to use (POST URL parameter)</param>
        /// <param name="transitHmacRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitHmacNameUrlalgorithmWithHttpInfo(string name, string urlalgorithm, TransitHmacRequest transitHmacRequest = default(TransitHmacRequest));
        /// <summary>
        /// Managed named encryption keys
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitKeysName(string name, TransitKeysRequest transitKeysRequest = default(TransitKeysRequest));

        /// <summary>
        /// Managed named encryption keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitKeysNameWithHttpInfo(string name, TransitKeysRequest transitKeysRequest = default(TransitKeysRequest));
        /// <summary>
        /// Configure a named encryption key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitKeysNameConfig(string name, TransitKeysConfigRequest transitKeysConfigRequest = default(TransitKeysConfigRequest));

        /// <summary>
        /// Configure a named encryption key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitKeysNameConfigWithHttpInfo(string name, TransitKeysConfigRequest transitKeysConfigRequest = default(TransitKeysConfigRequest));
        /// <summary>
        /// Imports an externally-generated key into a new transit key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the key</param>
        /// <param name="transitKeysImportRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitKeysNameImport(string name, TransitKeysImportRequest transitKeysImportRequest = default(TransitKeysImportRequest));

        /// <summary>
        /// Imports an externally-generated key into a new transit key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the key</param>
        /// <param name="transitKeysImportRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitKeysNameImportWithHttpInfo(string name, TransitKeysImportRequest transitKeysImportRequest = default(TransitKeysImportRequest));
        /// <summary>
        /// Imports an externally-generated key into an existing imported key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the key</param>
        /// <param name="transitKeysImportVersionRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitKeysNameImportVersion(string name, TransitKeysImportVersionRequest transitKeysImportVersionRequest = default(TransitKeysImportVersionRequest));

        /// <summary>
        /// Imports an externally-generated key into an existing imported key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the key</param>
        /// <param name="transitKeysImportVersionRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitKeysNameImportVersionWithHttpInfo(string name, TransitKeysImportVersionRequest transitKeysImportVersionRequest = default(TransitKeysImportVersionRequest));
        /// <summary>
        /// Rotate named encryption key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns></returns>
        void PostTransitKeysNameRotate(string name);

        /// <summary>
        /// Rotate named encryption key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitKeysNameRotateWithHttpInfo(string name);
        /// <summary>
        /// Trim key versions of a named key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysTrimRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitKeysNameTrim(string name, TransitKeysTrimRequest transitKeysTrimRequest = default(TransitKeysTrimRequest));

        /// <summary>
        /// Trim key versions of a named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysTrimRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitKeysNameTrimWithHttpInfo(string name, TransitKeysTrimRequest transitKeysTrimRequest = default(TransitKeysTrimRequest));
        /// <summary>
        /// Generate random bytes
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitRandom(TransitRandomRequest transitRandomRequest = default(TransitRandomRequest));

        /// <summary>
        /// Generate random bytes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitRandomWithHttpInfo(TransitRandomRequest transitRandomRequest = default(TransitRandomRequest));
        /// <summary>
        /// Generate random bytes
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Which system to source random data from, ether \&quot;platform\&quot;, \&quot;seal\&quot;, or \&quot;all\&quot;.</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitRandomSource(string source, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest));

        /// <summary>
        /// Generate random bytes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Which system to source random data from, ether \&quot;platform\&quot;, \&quot;seal\&quot;, or \&quot;all\&quot;.</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitRandomSourceWithHttpInfo(string source, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest));
        /// <summary>
        /// Generate random bytes
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Which system to source random data from, ether \&quot;platform\&quot;, \&quot;seal\&quot;, or \&quot;all\&quot;.</param>
        /// <param name="urlbytes">The number of bytes to generate (POST URL parameter)</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitRandomSourceUrlbytes(string source, string urlbytes, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest));

        /// <summary>
        /// Generate random bytes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Which system to source random data from, ether \&quot;platform\&quot;, \&quot;seal\&quot;, or \&quot;all\&quot;.</param>
        /// <param name="urlbytes">The number of bytes to generate (POST URL parameter)</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitRandomSourceUrlbytesWithHttpInfo(string source, string urlbytes, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest));
        /// <summary>
        /// Generate random bytes
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlbytes">The number of bytes to generate (POST URL parameter)</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitRandomUrlbytes(string urlbytes, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest));

        /// <summary>
        /// Generate random bytes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlbytes">The number of bytes to generate (POST URL parameter)</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitRandomUrlbytesWithHttpInfo(string urlbytes, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest));
        /// <summary>
        /// Restore the named key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitRestoreRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitRestore(TransitRestoreRequest transitRestoreRequest = default(TransitRestoreRequest));

        /// <summary>
        /// Restore the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitRestoreRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitRestoreWithHttpInfo(TransitRestoreRequest transitRestoreRequest = default(TransitRestoreRequest));
        /// <summary>
        /// Restore the named key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">If set, this will be the name of the restored key.</param>
        /// <param name="transitRestoreRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitRestoreName(string name, TransitRestoreRequest transitRestoreRequest = default(TransitRestoreRequest));

        /// <summary>
        /// Restore the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">If set, this will be the name of the restored key.</param>
        /// <param name="transitRestoreRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitRestoreNameWithHttpInfo(string name, TransitRestoreRequest transitRestoreRequest = default(TransitRestoreRequest));
        /// <summary>
        /// Rewrap ciphertext
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitRewrapRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitRewrapName(string name, TransitRewrapRequest transitRewrapRequest = default(TransitRewrapRequest));

        /// <summary>
        /// Rewrap ciphertext
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitRewrapRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitRewrapNameWithHttpInfo(string name, TransitRewrapRequest transitRewrapRequest = default(TransitRewrapRequest));
        /// <summary>
        /// Generate a signature for input data using the named key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="transitSignRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitSignName(string name, TransitSignRequest transitSignRequest = default(TransitSignRequest));

        /// <summary>
        /// Generate a signature for input data using the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="transitSignRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitSignNameWithHttpInfo(string name, TransitSignRequest transitSignRequest = default(TransitSignRequest));
        /// <summary>
        /// Generate a signature for input data using the named key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="urlalgorithm">Hash algorithm to use (POST URL parameter)</param>
        /// <param name="transitSignRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitSignNameUrlalgorithm(string name, string urlalgorithm, TransitSignRequest transitSignRequest = default(TransitSignRequest));

        /// <summary>
        /// Generate a signature for input data using the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="urlalgorithm">Hash algorithm to use (POST URL parameter)</param>
        /// <param name="transitSignRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitSignNameUrlalgorithmWithHttpInfo(string name, string urlalgorithm, TransitSignRequest transitSignRequest = default(TransitSignRequest));
        /// <summary>
        /// Verify a signature or HMAC for input data created using the named key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="transitVerifyRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitVerifyName(string name, TransitVerifyRequest transitVerifyRequest = default(TransitVerifyRequest));

        /// <summary>
        /// Verify a signature or HMAC for input data created using the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="transitVerifyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitVerifyNameWithHttpInfo(string name, TransitVerifyRequest transitVerifyRequest = default(TransitVerifyRequest));
        /// <summary>
        /// Verify a signature or HMAC for input data created using the named key
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="urlalgorithm">Hash algorithm to use (POST URL parameter)</param>
        /// <param name="transitVerifyRequest"> (optional)</param>
        /// <returns></returns>
        void PostTransitVerifyNameUrlalgorithm(string name, string urlalgorithm, TransitVerifyRequest transitVerifyRequest = default(TransitVerifyRequest));

        /// <summary>
        /// Verify a signature or HMAC for input data created using the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="urlalgorithm">Hash algorithm to use (POST URL parameter)</param>
        /// <param name="transitVerifyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostTransitVerifyNameUrlalgorithmWithHttpInfo(string name, string urlalgorithm, TransitVerifyRequest transitVerifyRequest = default(TransitVerifyRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecretsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Configure the AD server to connect to, along with password options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteAdConfigAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the AD server to connect to, along with password options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteAdConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a library set.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteAdLibraryNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a library set.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteAdLibraryNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteAdRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteAdRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteAlicloudConfigAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteAlicloudConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteAlicloudRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteAlicloudRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteAwsRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteAwsRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteAzureConfigAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteAzureConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteAzureRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteAzureRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteConsulRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteConsulRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes the secret at the specified location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteCubbyholePathAsync(string path, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the secret at the specified location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteCubbyholePathWithHttpInfoAsync(string path, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteGcpRolesetNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteGcpRolesetNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteGcpStaticAccountNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteGcpStaticAccountNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the GCP KMS secrets engine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteGcpkmsConfigAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the GCP KMS secrets engine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteGcpkmsConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deregister an existing key in Vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to deregister in Vault. If the key exists in Google Cloud KMS, it will be left untouched.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteGcpkmsKeysDeregisterKeyAsync(string key, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deregister an existing key in Vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to deregister in Vault. If the key exists in Google Cloud KMS, it will be left untouched.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteGcpkmsKeysDeregisterKeyWithHttpInfoAsync(string key, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteGcpkmsKeysKeyAsync(string key, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteGcpkmsKeysKeyWithHttpInfoAsync(string key, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete old crypto key versions from Google Cloud KMS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteGcpkmsKeysTrimKeyAsync(string key, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete old crypto key versions from Google Cloud KMS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteGcpkmsKeysTrimKeyWithHttpInfoAsync(string key, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteKubernetesConfigAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteKubernetesConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteKubernetesRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteKubernetesRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteKvPathAsync(string path, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteKvPathWithHttpInfoAsync(string path, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteMongodbatlasRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteMongodbatlasRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteNomadConfigAccessAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteNomadConfigAccessWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the lease parameters for generated tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteNomadConfigLeaseAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the lease parameters for generated tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteNomadConfigLeaseWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteNomadRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteNomadRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteOpenldapConfigAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteOpenldapConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteOpenldapRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteOpenldapRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteOpenldapStaticRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteOpenldapStaticRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeletePkiIssuerRefDerPemAsync(string issuerRef, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeletePkiIssuerRefDerPemWithHttpInfoAsync(string issuerRef, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeletePkiJsonAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeletePkiJsonWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeletePkiKeyKeyRefAsync(string keyRef, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeletePkiKeyKeyRefWithHttpInfoAsync(string keyRef, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeletePkiRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeletePkiRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeletePkiRootAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeletePkiRootWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manage the roles that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteRabbitmqRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Manage the roles that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteRabbitmqRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteSecretDataPathAsync(string path, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteSecretDataPathWithHttpInfoAsync(string path, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configures settings for the KV store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteSecretMetadataPathAsync(string path, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configures settings for the KV store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteSecretMetadataPathWithHttpInfoAsync(string path, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set the SSH private key used for signing certificates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteSshConfigCaAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set the SSH private key used for signing certificates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteSshConfigCaWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Assign zero address as default CIDR block for select roles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteSshConfigZeroaddressAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Assign zero address as default CIDR block for select roles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteSshConfigZeroaddressWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Register a shared private key with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">[Required] Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteSshKeysKeyNameAsync(string keyName, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Register a shared private key with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">[Required] Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteSshKeysKeyNameWithHttpInfoAsync(string keyName, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteSshRolesRoleAsync(string role, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteSshRolesRoleWithHttpInfoAsync(string role, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteTerraformConfigAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteTerraformConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteTerraformRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteTerraformRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manage the keys that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteTotpKeysNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Manage the keys that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteTotpKeysNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Managed named encryption keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteTransitKeysNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Managed named encryption keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteTransitKeysNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the AD server to connect to, along with password options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAdConfigAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the AD server to connect to, along with password options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAdConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAdCredsNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAdCredsNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAdLibraryAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAdLibraryWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Read a library set.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAdLibraryNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Read a library set.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAdLibraryNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Check the status of the service accounts in a library set.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAdLibraryNameStatusAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Check the status of the service accounts in a library set.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAdLibraryNameStatusWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List the name of each role currently stored.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAdRolesAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List the name of each role currently stored.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAdRolesWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAdRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAdRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAdRotateRootAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAdRotateRootWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAlicloudConfigAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAlicloudConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate an API key or STS credential using the given role&#39;s configuration.&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAlicloudCredsNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate an API key or STS credential using the given role&#39;s configuration.&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAlicloudCredsNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List the existing roles in this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAlicloudRoleAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List the existing roles in this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAlicloudRoleWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAlicloudRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAlicloudRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the default lease information for generated credentials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAwsConfigLeaseAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the default lease information for generated credentials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAwsConfigLeaseWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the root credentials that are used to manage IAM.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAwsConfigRootAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the root credentials that are used to manage IAM.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAwsConfigRootWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate AWS credentials from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAwsCredsAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate AWS credentials from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAwsCredsWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List the existing roles in this backend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAwsRolesAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List the existing roles in this backend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAwsRolesWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAwsRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAwsRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate AWS credentials from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAwsStsNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate AWS credentials from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAwsStsNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAzureConfigAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAzureConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the Vault role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAzureCredsRoleAsync(string role, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the Vault role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAzureCredsRoleWithHttpInfoAsync(string role, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List existing roles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAzureRolesAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List existing roles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAzureRolesWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetAzureRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetAzureRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetConsulConfigAccessAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetConsulConfigAccessWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetConsulCredsRoleAsync(string role, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetConsulCredsRoleWithHttpInfoAsync(string role, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetConsulRolesAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetConsulRolesWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetConsulRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetConsulRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve the secret at the specified location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetCubbyholePathAsync(string path, string list = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve the secret at the specified location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetCubbyholePathWithHttpInfoAsync(string path, string list = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetGcpConfigAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetGcpConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetGcpKeyRolesetAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetGcpKeyRolesetWithHttpInfoAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetGcpRolesetNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetGcpRolesetNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetGcpRolesetRolesetKeyAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetGcpRolesetRolesetKeyWithHttpInfoAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetGcpRolesetRolesetTokenAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetGcpRolesetRolesetTokenWithHttpInfoAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetGcpRolesetsAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetGcpRolesetsWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetGcpStaticAccountNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetGcpStaticAccountNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetGcpStaticAccountNameKeyAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetGcpStaticAccountNameKeyWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetGcpStaticAccountNameTokenAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetGcpStaticAccountNameTokenWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetGcpStaticAccountsAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetGcpStaticAccountsWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetGcpTokenRolesetAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetGcpTokenRolesetWithHttpInfoAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the GCP KMS secrets engine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetGcpkmsConfigAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the GCP KMS secrets engine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetGcpkmsConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List named keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetGcpkmsKeysAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List named keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetGcpkmsKeysWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the key in Vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetGcpkmsKeysConfigKeyAsync(string key, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the key in Vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetGcpkmsKeysConfigKeyWithHttpInfoAsync(string key, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetGcpkmsKeysKeyAsync(string key, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetGcpkmsKeysKeyWithHttpInfoAsync(string key, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve the public key associated with the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key for which to get the public key. This key must already exist in Vault and Google Cloud KMS.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetGcpkmsPubkeyKeyAsync(string key, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve the public key associated with the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key for which to get the public key. This key must already exist in Vault and Google Cloud KMS.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetGcpkmsPubkeyKeyWithHttpInfoAsync(string key, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetKubernetesConfigAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetKubernetesConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetKubernetesRolesAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetKubernetesRolesWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetKubernetesRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetKubernetesRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetKvPathAsync(string path, string list = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetKvPathWithHttpInfoAsync(string path, string list = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the  credentials that are used to manage Database Users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetMongodbatlasConfigAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the  credentials that are used to manage Database Users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetMongodbatlasConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate MongoDB Atlas Programmatic API from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetMongodbatlasCredsNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate MongoDB Atlas Programmatic API from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetMongodbatlasCredsNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List the existing roles in this backend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetMongodbatlasRolesAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List the existing roles in this backend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetMongodbatlasRolesWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetMongodbatlasRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetMongodbatlasRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetNomadConfigAccessAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetNomadConfigAccessWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the lease parameters for generated tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetNomadConfigLeaseAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the lease parameters for generated tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetNomadConfigLeaseWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetNomadCredsNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetNomadCredsNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetNomadRoleAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetNomadRoleWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetNomadRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetNomadRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetOpenldapConfigAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetOpenldapConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the dynamic role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetOpenldapCredsNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the dynamic role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetOpenldapCredsNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetOpenldapRoleAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetOpenldapRoleWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetOpenldapRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetOpenldapRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetOpenldapStaticCredNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetOpenldapStaticCredNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetOpenldapStaticRoleAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetOpenldapStaticRoleWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetOpenldapStaticRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetOpenldapStaticRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiCaAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiCaWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiCaChainAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiCaChainWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiCaPemAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiCaPemWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiCertCaChainAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiCertCaChainWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiCertCrlAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiCertCrlWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiCertSerialAsync(string serial, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiCertSerialWithHttpInfoAsync(string serial, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiCertSerialRawAsync(string serial, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiCertSerialRawWithHttpInfoAsync(string serial, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiCertSerialRawPemAsync(string serial, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiCertSerialRawPemWithHttpInfoAsync(string serial, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiCertsAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiCertsWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiConfigCrlAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiConfigCrlWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiConfigIssuersAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiConfigIssuersWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiConfigKeysAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiConfigKeysWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiConfigUrlsAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiConfigUrlsWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiCrlAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiCrlWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiCrlPemAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiCrlPemWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiCrlRotateAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiCrlRotateWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiDerAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiDerWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiIssuerRefCrlPemAsync(string issuerRef, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiIssuerRefCrlPemWithHttpInfoAsync(string issuerRef, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiIssuerRefDerPemAsync(string issuerRef, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiIssuerRefDerPemWithHttpInfoAsync(string issuerRef, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiIssuersAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiIssuersWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiJsonAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiJsonWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiKeyKeyRefAsync(string keyRef, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiKeyKeyRefWithHttpInfoAsync(string keyRef, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiKeysAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiKeysWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiRolesAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiRolesWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetPkiTidyStatusAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetPkiTidyStatusWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the lease parameters for generated credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetRabbitmqConfigLeaseAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the lease parameters for generated credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetRabbitmqConfigLeaseWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Request RabbitMQ credentials for a certain role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetRabbitmqCredsNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Request RabbitMQ credentials for a certain role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetRabbitmqCredsNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manage the roles that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetRabbitmqRolesAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Manage the roles that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetRabbitmqRolesWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manage the roles that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetRabbitmqRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Manage the roles that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetRabbitmqRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Read the backend level settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetSecretConfigAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Read the backend level settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetSecretConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetSecretDataPathAsync(string path, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetSecretDataPathWithHttpInfoAsync(string path, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configures settings for the KV store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetSecretMetadataPathAsync(string path, string list = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configures settings for the KV store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetSecretMetadataPathWithHttpInfoAsync(string path, string list = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Read the structure of a secret entry from the Key-Value store with the values removed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetSecretSubkeysPathAsync(string path, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Read the structure of a secret entry from the Key-Value store with the values removed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetSecretSubkeysPathWithHttpInfoAsync(string path, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set the SSH private key used for signing certificates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetSshConfigCaAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set the SSH private key used for signing certificates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetSshConfigCaWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Assign zero address as default CIDR block for select roles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetSshConfigZeroaddressAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Assign zero address as default CIDR block for select roles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetSshConfigZeroaddressWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve the public key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetSshPublicKeyAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve the public key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetSshPublicKeyWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetSshRolesAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetSshRolesWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetSshRolesRoleAsync(string role, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetSshRolesRoleWithHttpInfoAsync(string role, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetTerraformConfigAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetTerraformConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate a Terraform Cloud or Enterprise API token from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetTerraformCredsNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate a Terraform Cloud or Enterprise API token from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetTerraformCredsNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetTerraformRoleAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetTerraformRoleWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetTerraformRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetTerraformRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Request time-based one-time use password or validate a password for a certain key .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetTotpCodeNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Request time-based one-time use password or validate a password for a certain key .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetTotpCodeNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manage the keys that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetTotpKeysAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Manage the keys that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetTotpKeysWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manage the keys that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetTotpKeysNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Manage the keys that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetTotpKeysNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Backup the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetTransitBackupNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Backup the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetTransitBackupNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the size of the active cache
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetTransitCacheConfigAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the size of the active cache
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetTransitCacheConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Export named encryption or signing key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="type">Type of key to export (encryption-key, signing-key, hmac-key)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetTransitExportTypeNameAsync(string name, string type, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Export named encryption or signing key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="type">Type of key to export (encryption-key, signing-key, hmac-key)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetTransitExportTypeNameWithHttpInfoAsync(string name, string type, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Export named encryption or signing key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="type">Type of key to export (encryption-key, signing-key, hmac-key)</param>
        /// <param name="version">Version of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetTransitExportTypeNameVersionAsync(string name, string type, string version, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Export named encryption or signing key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="type">Type of key to export (encryption-key, signing-key, hmac-key)</param>
        /// <param name="version">Version of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetTransitExportTypeNameVersionWithHttpInfoAsync(string name, string type, string version, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Managed named encryption keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetTransitKeysAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Managed named encryption keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetTransitKeysWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Managed named encryption keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetTransitKeysNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Managed named encryption keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetTransitKeysNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the public key to use for wrapping imported keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetTransitWrappingKeyAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the public key to use for wrapping imported keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetTransitWrappingKeyWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the AD server to connect to, along with password options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostAdConfigAsync(AdConfigRequest adConfigRequest = default(AdConfigRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the AD server to connect to, along with password options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostAdConfigWithHttpInfoAsync(AdConfigRequest adConfigRequest = default(AdConfigRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Check service accounts in to the library.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryManageCheckInRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostAdLibraryManageNameCheckInAsync(string name, AdLibraryManageCheckInRequest adLibraryManageCheckInRequest = default(AdLibraryManageCheckInRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Check service accounts in to the library.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryManageCheckInRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostAdLibraryManageNameCheckInWithHttpInfoAsync(string name, AdLibraryManageCheckInRequest adLibraryManageCheckInRequest = default(AdLibraryManageCheckInRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a library set.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostAdLibraryNameAsync(string name, AdLibraryRequest adLibraryRequest = default(AdLibraryRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a library set.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostAdLibraryNameWithHttpInfoAsync(string name, AdLibraryRequest adLibraryRequest = default(AdLibraryRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Check service accounts in to the library.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryCheckInRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostAdLibraryNameCheckInAsync(string name, AdLibraryCheckInRequest adLibraryCheckInRequest = default(AdLibraryCheckInRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Check service accounts in to the library.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryCheckInRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostAdLibraryNameCheckInWithHttpInfoAsync(string name, AdLibraryCheckInRequest adLibraryCheckInRequest = default(AdLibraryCheckInRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Check a service account out from the library.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set</param>
        /// <param name="adLibraryCheckOutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostAdLibraryNameCheckOutAsync(string name, AdLibraryCheckOutRequest adLibraryCheckOutRequest = default(AdLibraryCheckOutRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Check a service account out from the library.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set</param>
        /// <param name="adLibraryCheckOutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostAdLibraryNameCheckOutWithHttpInfoAsync(string name, AdLibraryCheckOutRequest adLibraryCheckOutRequest = default(AdLibraryCheckOutRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="adRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostAdRolesNameAsync(string name, AdRolesRequest adRolesRequest = default(AdRolesRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="adRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostAdRolesNameWithHttpInfoAsync(string name, AdRolesRequest adRolesRequest = default(AdRolesRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostAdRotateRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostAdRotateRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostAdRotateRootAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostAdRotateRootWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alicloudConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostAlicloudConfigAsync(AlicloudConfigRequest alicloudConfigRequest = default(AlicloudConfigRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alicloudConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostAlicloudConfigWithHttpInfoAsync(AlicloudConfigRequest alicloudConfigRequest = default(AlicloudConfigRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <param name="alicloudRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostAlicloudRoleNameAsync(string name, AlicloudRoleRequest alicloudRoleRequest = default(AlicloudRoleRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <param name="alicloudRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostAlicloudRoleNameWithHttpInfoAsync(string name, AlicloudRoleRequest alicloudRoleRequest = default(AlicloudRoleRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the default lease information for generated credentials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigLeaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostAwsConfigLeaseAsync(AwsConfigLeaseRequest awsConfigLeaseRequest = default(AwsConfigLeaseRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the default lease information for generated credentials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigLeaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostAwsConfigLeaseWithHttpInfoAsync(AwsConfigLeaseRequest awsConfigLeaseRequest = default(AwsConfigLeaseRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the root credentials that are used to manage IAM.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigRootRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostAwsConfigRootAsync(AwsConfigRootRequest awsConfigRootRequest = default(AwsConfigRootRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the root credentials that are used to manage IAM.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigRootRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostAwsConfigRootWithHttpInfoAsync(AwsConfigRootRequest awsConfigRootRequest = default(AwsConfigRootRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostAwsConfigRotateRootAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostAwsConfigRotateRootWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate AWS credentials from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsCredsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostAwsCredsAsync(AwsCredsRequest awsCredsRequest = default(AwsCredsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate AWS credentials from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsCredsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostAwsCredsWithHttpInfoAsync(AwsCredsRequest awsCredsRequest = default(AwsCredsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="awsRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostAwsRolesNameAsync(string name, AwsRolesRequest awsRolesRequest = default(AwsRolesRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="awsRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostAwsRolesNameWithHttpInfoAsync(string name, AwsRolesRequest awsRolesRequest = default(AwsRolesRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate AWS credentials from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="awsStsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostAwsStsNameAsync(string name, AwsStsRequest awsStsRequest = default(AwsStsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate AWS credentials from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="awsStsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostAwsStsNameWithHttpInfoAsync(string name, AwsStsRequest awsStsRequest = default(AwsStsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostAzureConfigAsync(AzureConfigRequest azureConfigRequest = default(AzureConfigRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostAzureConfigWithHttpInfoAsync(AzureConfigRequest azureConfigRequest = default(AzureConfigRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="azureRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostAzureRolesNameAsync(string name, AzureRolesRequest azureRolesRequest = default(AzureRolesRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="azureRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostAzureRolesNameWithHttpInfoAsync(string name, AzureRolesRequest azureRolesRequest = default(AzureRolesRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostAzureRotateRootAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostAzureRotateRootWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consulConfigAccessRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostConsulConfigAccessAsync(ConsulConfigAccessRequest consulConfigAccessRequest = default(ConsulConfigAccessRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consulConfigAccessRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostConsulConfigAccessWithHttpInfoAsync(ConsulConfigAccessRequest consulConfigAccessRequest = default(ConsulConfigAccessRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="consulRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostConsulRolesNameAsync(string name, ConsulRolesRequest consulRolesRequest = default(ConsulRolesRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="consulRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostConsulRolesNameWithHttpInfoAsync(string name, ConsulRolesRequest consulRolesRequest = default(ConsulRolesRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Store a secret at the specified location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostCubbyholePathAsync(string path, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Store a secret at the specified location.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostCubbyholePathWithHttpInfoAsync(string path, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpConfigAsync(GcpConfigRequest gcpConfigRequest = default(GcpConfigRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpConfigWithHttpInfoAsync(GcpConfigRequest gcpConfigRequest = default(GcpConfigRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpConfigRotateRootAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpConfigRotateRootWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="gcpKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpKeyRolesetAsync(string roleset, GcpKeyRequest gcpKeyRequest = default(GcpKeyRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="gcpKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpKeyRolesetWithHttpInfoAsync(string roleset, GcpKeyRequest gcpKeyRequest = default(GcpKeyRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <param name="gcpRolesetRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpRolesetNameAsync(string name, GcpRolesetRequest gcpRolesetRequest = default(GcpRolesetRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <param name="gcpRolesetRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpRolesetNameWithHttpInfoAsync(string name, GcpRolesetRequest gcpRolesetRequest = default(GcpRolesetRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpRolesetNameRotateAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpRolesetNameRotateWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpRolesetNameRotateKeyAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpRolesetNameRotateKeyWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="gcpRolesetKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpRolesetRolesetKeyAsync(string roleset, GcpRolesetKeyRequest gcpRolesetKeyRequest = default(GcpRolesetKeyRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="gcpRolesetKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpRolesetRolesetKeyWithHttpInfoAsync(string roleset, GcpRolesetKeyRequest gcpRolesetKeyRequest = default(GcpRolesetKeyRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpRolesetRolesetTokenAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpRolesetRolesetTokenWithHttpInfoAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <param name="gcpStaticAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpStaticAccountNameAsync(string name, GcpStaticAccountRequest gcpStaticAccountRequest = default(GcpStaticAccountRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <param name="gcpStaticAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpStaticAccountNameWithHttpInfoAsync(string name, GcpStaticAccountRequest gcpStaticAccountRequest = default(GcpStaticAccountRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <param name="gcpStaticAccountKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpStaticAccountNameKeyAsync(string name, GcpStaticAccountKeyRequest gcpStaticAccountKeyRequest = default(GcpStaticAccountKeyRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <param name="gcpStaticAccountKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpStaticAccountNameKeyWithHttpInfoAsync(string name, GcpStaticAccountKeyRequest gcpStaticAccountKeyRequest = default(GcpStaticAccountKeyRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpStaticAccountNameRotateKeyAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpStaticAccountNameRotateKeyWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpStaticAccountNameTokenAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpStaticAccountNameTokenWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpTokenRolesetAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpTokenRolesetWithHttpInfoAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the GCP KMS secrets engine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpkmsConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpkmsConfigAsync(GcpkmsConfigRequest gcpkmsConfigRequest = default(GcpkmsConfigRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the GCP KMS secrets engine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpkmsConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpkmsConfigWithHttpInfoAsync(GcpkmsConfigRequest gcpkmsConfigRequest = default(GcpkmsConfigRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Decrypt a ciphertext value using a named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for decryption. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsDecryptRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpkmsDecryptKeyAsync(string key, GcpkmsDecryptRequest gcpkmsDecryptRequest = default(GcpkmsDecryptRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Decrypt a ciphertext value using a named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for decryption. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsDecryptRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpkmsDecryptKeyWithHttpInfoAsync(string key, GcpkmsDecryptRequest gcpkmsDecryptRequest = default(GcpkmsDecryptRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Encrypt a plaintext value using a named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for encryption. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsEncryptRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpkmsEncryptKeyAsync(string key, GcpkmsEncryptRequest gcpkmsEncryptRequest = default(GcpkmsEncryptRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Encrypt a plaintext value using a named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for encryption. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsEncryptRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpkmsEncryptKeyWithHttpInfoAsync(string key, GcpkmsEncryptRequest gcpkmsEncryptRequest = default(GcpkmsEncryptRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the key in Vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="gcpkmsKeysConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpkmsKeysConfigKeyAsync(string key, GcpkmsKeysConfigRequest gcpkmsKeysConfigRequest = default(GcpkmsKeysConfigRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the key in Vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="gcpkmsKeysConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpkmsKeysConfigKeyWithHttpInfoAsync(string key, GcpkmsKeysConfigRequest gcpkmsKeysConfigRequest = default(GcpkmsKeysConfigRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deregister an existing key in Vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to deregister in Vault. If the key exists in Google Cloud KMS, it will be left untouched.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpkmsKeysDeregisterKeyAsync(string key, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deregister an existing key in Vault
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to deregister in Vault. If the key exists in Google Cloud KMS, it will be left untouched.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpkmsKeysDeregisterKeyWithHttpInfoAsync(string key, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="gcpkmsKeysRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpkmsKeysKeyAsync(string key, GcpkmsKeysRequest gcpkmsKeysRequest = default(GcpkmsKeysRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="gcpkmsKeysRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpkmsKeysKeyWithHttpInfoAsync(string key, GcpkmsKeysRequest gcpkmsKeysRequest = default(GcpkmsKeysRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Register an existing crypto key in Google Cloud KMS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to register in Vault. This will be the named used to refer to the underlying crypto key when encrypting or decrypting data.</param>
        /// <param name="gcpkmsKeysRegisterRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpkmsKeysRegisterKeyAsync(string key, GcpkmsKeysRegisterRequest gcpkmsKeysRegisterRequest = default(GcpkmsKeysRegisterRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Register an existing crypto key in Google Cloud KMS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to register in Vault. This will be the named used to refer to the underlying crypto key when encrypting or decrypting data.</param>
        /// <param name="gcpkmsKeysRegisterRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpkmsKeysRegisterKeyWithHttpInfoAsync(string key, GcpkmsKeysRegisterRequest gcpkmsKeysRegisterRequest = default(GcpkmsKeysRegisterRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Rotate a crypto key to a new primary version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to rotate. This key must already be registered with Vault and point to a valid Google Cloud KMS crypto key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpkmsKeysRotateKeyAsync(string key, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Rotate a crypto key to a new primary version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to rotate. This key must already be registered with Vault and point to a valid Google Cloud KMS crypto key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpkmsKeysRotateKeyWithHttpInfoAsync(string key, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete old crypto key versions from Google Cloud KMS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpkmsKeysTrimKeyAsync(string key, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete old crypto key versions from Google Cloud KMS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpkmsKeysTrimKeyWithHttpInfoAsync(string key, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Re-encrypt existing ciphertext data to a new version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to use for encryption. This key must already exist in Vault and Google Cloud KMS.</param>
        /// <param name="gcpkmsReencryptRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpkmsReencryptKeyAsync(string key, GcpkmsReencryptRequest gcpkmsReencryptRequest = default(GcpkmsReencryptRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Re-encrypt existing ciphertext data to a new version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to use for encryption. This key must already exist in Vault and Google Cloud KMS.</param>
        /// <param name="gcpkmsReencryptRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpkmsReencryptKeyWithHttpInfoAsync(string key, GcpkmsReencryptRequest gcpkmsReencryptRequest = default(GcpkmsReencryptRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Signs a message or digest using a named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for signing. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpkmsSignKeyAsync(string key, GcpkmsSignRequest gcpkmsSignRequest = default(GcpkmsSignRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Signs a message or digest using a named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for signing. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpkmsSignKeyWithHttpInfoAsync(string key, GcpkmsSignRequest gcpkmsSignRequest = default(GcpkmsSignRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Verify a signature using a named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for verification. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsVerifyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostGcpkmsVerifyKeyAsync(string key, GcpkmsVerifyRequest gcpkmsVerifyRequest = default(GcpkmsVerifyRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Verify a signature using a named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for verification. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsVerifyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostGcpkmsVerifyKeyWithHttpInfoAsync(string key, GcpkmsVerifyRequest gcpkmsVerifyRequest = default(GcpkmsVerifyRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostKubernetesConfigAsync(KubernetesConfigRequest kubernetesConfigRequest = default(KubernetesConfigRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostKubernetesConfigWithHttpInfoAsync(KubernetesConfigRequest kubernetesConfigRequest = default(KubernetesConfigRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Vault role</param>
        /// <param name="kubernetesCredsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostKubernetesCredsNameAsync(string name, KubernetesCredsRequest kubernetesCredsRequest = default(KubernetesCredsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Vault role</param>
        /// <param name="kubernetesCredsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostKubernetesCredsNameWithHttpInfoAsync(string name, KubernetesCredsRequest kubernetesCredsRequest = default(KubernetesCredsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="kubernetesRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostKubernetesRolesNameAsync(string name, KubernetesRolesRequest kubernetesRolesRequest = default(KubernetesRolesRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="kubernetesRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostKubernetesRolesNameWithHttpInfoAsync(string name, KubernetesRolesRequest kubernetesRolesRequest = default(KubernetesRolesRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostKvPathAsync(string path, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostKvPathWithHttpInfoAsync(string path, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the  credentials that are used to manage Database Users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mongodbatlasConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostMongodbatlasConfigAsync(MongodbatlasConfigRequest mongodbatlasConfigRequest = default(MongodbatlasConfigRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the  credentials that are used to manage Database Users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mongodbatlasConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostMongodbatlasConfigWithHttpInfoAsync(MongodbatlasConfigRequest mongodbatlasConfigRequest = default(MongodbatlasConfigRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate MongoDB Atlas Programmatic API from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostMongodbatlasCredsNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate MongoDB Atlas Programmatic API from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostMongodbatlasCredsNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <param name="mongodbatlasRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostMongodbatlasRolesNameAsync(string name, MongodbatlasRolesRequest mongodbatlasRolesRequest = default(MongodbatlasRolesRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <param name="mongodbatlasRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostMongodbatlasRolesNameWithHttpInfoAsync(string name, MongodbatlasRolesRequest mongodbatlasRolesRequest = default(MongodbatlasRolesRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nomadConfigAccessRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostNomadConfigAccessAsync(NomadConfigAccessRequest nomadConfigAccessRequest = default(NomadConfigAccessRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nomadConfigAccessRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostNomadConfigAccessWithHttpInfoAsync(NomadConfigAccessRequest nomadConfigAccessRequest = default(NomadConfigAccessRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the lease parameters for generated tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nomadConfigLeaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostNomadConfigLeaseAsync(NomadConfigLeaseRequest nomadConfigLeaseRequest = default(NomadConfigLeaseRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the lease parameters for generated tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nomadConfigLeaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostNomadConfigLeaseWithHttpInfoAsync(NomadConfigLeaseRequest nomadConfigLeaseRequest = default(NomadConfigLeaseRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="nomadRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostNomadRoleNameAsync(string name, NomadRoleRequest nomadRoleRequest = default(NomadRoleRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="nomadRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostNomadRoleNameWithHttpInfoAsync(string name, NomadRoleRequest nomadRoleRequest = default(NomadRoleRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openldapConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostOpenldapConfigAsync(OpenldapConfigRequest openldapConfigRequest = default(OpenldapConfigRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openldapConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostOpenldapConfigWithHttpInfoAsync(OpenldapConfigRequest openldapConfigRequest = default(OpenldapConfigRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <param name="openldapRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostOpenldapRoleNameAsync(string name, OpenldapRoleRequest openldapRoleRequest = default(OpenldapRoleRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <param name="openldapRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostOpenldapRoleNameWithHttpInfoAsync(string name, OpenldapRoleRequest openldapRoleRequest = default(OpenldapRoleRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostOpenldapRotateRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostOpenldapRotateRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostOpenldapRotateRootAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostOpenldapRotateRootWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="openldapStaticRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostOpenldapStaticRoleNameAsync(string name, OpenldapStaticRoleRequest openldapStaticRoleRequest = default(OpenldapStaticRoleRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="openldapStaticRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostOpenldapStaticRoleNameWithHttpInfoAsync(string name, OpenldapStaticRoleRequest openldapStaticRoleRequest = default(OpenldapStaticRoleRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiBundleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiBundleAsync(PkiBundleRequest pkiBundleRequest = default(PkiBundleRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiBundleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiBundleWithHttpInfoAsync(PkiBundleRequest pkiBundleRequest = default(PkiBundleRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiCertRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiCertAsync(PkiCertRequest pkiCertRequest = default(PkiCertRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiCertRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiCertWithHttpInfoAsync(PkiCertRequest pkiCertRequest = default(PkiCertRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigCaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiConfigCaAsync(PkiConfigCaRequest pkiConfigCaRequest = default(PkiConfigCaRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigCaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiConfigCaWithHttpInfoAsync(PkiConfigCaRequest pkiConfigCaRequest = default(PkiConfigCaRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigCrlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiConfigCrlAsync(PkiConfigCrlRequest pkiConfigCrlRequest = default(PkiConfigCrlRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigCrlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiConfigCrlWithHttpInfoAsync(PkiConfigCrlRequest pkiConfigCrlRequest = default(PkiConfigCrlRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigIssuersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiConfigIssuersAsync(PkiConfigIssuersRequest pkiConfigIssuersRequest = default(PkiConfigIssuersRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigIssuersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiConfigIssuersWithHttpInfoAsync(PkiConfigIssuersRequest pkiConfigIssuersRequest = default(PkiConfigIssuersRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigKeysRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiConfigKeysAsync(PkiConfigKeysRequest pkiConfigKeysRequest = default(PkiConfigKeysRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigKeysRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiConfigKeysWithHttpInfoAsync(PkiConfigKeysRequest pkiConfigKeysRequest = default(PkiConfigKeysRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigUrlsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiConfigUrlsAsync(PkiConfigUrlsRequest pkiConfigUrlsRequest = default(PkiConfigUrlsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigUrlsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiConfigUrlsWithHttpInfoAsync(PkiConfigUrlsRequest pkiConfigUrlsRequest = default(PkiConfigUrlsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiIntermediateCrossSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiIntermediateCrossSignAsync(PkiIntermediateCrossSignRequest pkiIntermediateCrossSignRequest = default(PkiIntermediateCrossSignRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiIntermediateCrossSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiIntermediateCrossSignWithHttpInfoAsync(PkiIntermediateCrossSignRequest pkiIntermediateCrossSignRequest = default(PkiIntermediateCrossSignRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIntermediateGenerateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiIntermediateGenerateExportedAsync(string exported, PkiIntermediateGenerateRequest pkiIntermediateGenerateRequest = default(PkiIntermediateGenerateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIntermediateGenerateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiIntermediateGenerateExportedWithHttpInfoAsync(string exported, PkiIntermediateGenerateRequest pkiIntermediateGenerateRequest = default(PkiIntermediateGenerateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiIntermediateSetSignedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiIntermediateSetSignedAsync(PkiIntermediateSetSignedRequest pkiIntermediateSetSignedRequest = default(PkiIntermediateSetSignedRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiIntermediateSetSignedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiIntermediateSetSignedWithHttpInfoAsync(PkiIntermediateSetSignedRequest pkiIntermediateSetSignedRequest = default(PkiIntermediateSetSignedRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiInternalExportedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiInternalExportedAsync(PkiInternalExportedRequest pkiInternalExportedRequest = default(PkiInternalExportedRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiInternalExportedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiInternalExportedWithHttpInfoAsync(PkiInternalExportedRequest pkiInternalExportedRequest = default(PkiInternalExportedRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssueRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiIssueRoleAsync(string role, PkiIssueRequest pkiIssueRequest = default(PkiIssueRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssueRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiIssueRoleWithHttpInfoAsync(string role, PkiIssueRequest pkiIssueRequest = default(PkiIssueRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerIssueRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiIssuerIssuerRefIssueRoleAsync(string issuerRef, string role, PkiIssuerIssueRequest pkiIssuerIssueRequest = default(PkiIssuerIssueRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerIssueRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiIssuerIssuerRefIssueRoleWithHttpInfoAsync(string issuerRef, string role, PkiIssuerIssueRequest pkiIssuerIssueRequest = default(PkiIssuerIssueRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignIntermediateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiIssuerIssuerRefSignIntermediateAsync(string issuerRef, PkiIssuerSignIntermediateRequest pkiIssuerSignIntermediateRequest = default(PkiIssuerSignIntermediateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignIntermediateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiIssuerIssuerRefSignIntermediateWithHttpInfoAsync(string issuerRef, PkiIssuerSignIntermediateRequest pkiIssuerSignIntermediateRequest = default(PkiIssuerSignIntermediateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiIssuerIssuerRefSignRoleAsync(string issuerRef, string role, PkiIssuerSignRequest pkiIssuerSignRequest = default(PkiIssuerSignRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiIssuerIssuerRefSignRoleWithHttpInfoAsync(string issuerRef, string role, PkiIssuerSignRequest pkiIssuerSignRequest = default(PkiIssuerSignRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignSelfIssuedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiIssuerIssuerRefSignSelfIssuedAsync(string issuerRef, PkiIssuerSignSelfIssuedRequest pkiIssuerSignSelfIssuedRequest = default(PkiIssuerSignSelfIssuedRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignSelfIssuedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiIssuerIssuerRefSignSelfIssuedWithHttpInfoAsync(string issuerRef, PkiIssuerSignSelfIssuedRequest pkiIssuerSignSelfIssuedRequest = default(PkiIssuerSignSelfIssuedRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignVerbatimRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiIssuerIssuerRefSignVerbatimAsync(string issuerRef, PkiIssuerSignVerbatimRequest pkiIssuerSignVerbatimRequest = default(PkiIssuerSignVerbatimRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignVerbatimRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiIssuerIssuerRefSignVerbatimWithHttpInfoAsync(string issuerRef, PkiIssuerSignVerbatimRequest pkiIssuerSignVerbatimRequest = default(PkiIssuerSignVerbatimRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerSignVerbatimRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiIssuerIssuerRefSignVerbatimRoleAsync(string issuerRef, string role, PkiIssuerSignVerbatimRequest pkiIssuerSignVerbatimRequest = default(PkiIssuerSignVerbatimRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerSignVerbatimRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiIssuerIssuerRefSignVerbatimRoleWithHttpInfoAsync(string issuerRef, string role, PkiIssuerSignVerbatimRequest pkiIssuerSignVerbatimRequest = default(PkiIssuerSignVerbatimRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiDerPemRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiIssuerRefDerPemAsync(string issuerRef, PkiDerPemRequest pkiDerPemRequest = default(PkiDerPemRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiDerPemRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiIssuerRefDerPemWithHttpInfoAsync(string issuerRef, PkiDerPemRequest pkiDerPemRequest = default(PkiDerPemRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIssuersGenerateIntermediateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiIssuersGenerateIntermediateExportedAsync(string exported, PkiIssuersGenerateIntermediateRequest pkiIssuersGenerateIntermediateRequest = default(PkiIssuersGenerateIntermediateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIssuersGenerateIntermediateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiIssuersGenerateIntermediateExportedWithHttpInfoAsync(string exported, PkiIssuersGenerateIntermediateRequest pkiIssuersGenerateIntermediateRequest = default(PkiIssuersGenerateIntermediateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIssuersGenerateRootRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiIssuersGenerateRootExportedAsync(string exported, PkiIssuersGenerateRootRequest pkiIssuersGenerateRootRequest = default(PkiIssuersGenerateRootRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIssuersGenerateRootRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiIssuersGenerateRootExportedWithHttpInfoAsync(string exported, PkiIssuersGenerateRootRequest pkiIssuersGenerateRootRequest = default(PkiIssuersGenerateRootRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiJsonAsync(PkiJsonRequest pkiJsonRequest = default(PkiJsonRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiJsonWithHttpInfoAsync(PkiJsonRequest pkiJsonRequest = default(PkiJsonRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <param name="pkiKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiKeyKeyRefAsync(string keyRef, PkiKeyRequest pkiKeyRequest = default(PkiKeyRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <param name="pkiKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiKeyKeyRefWithHttpInfoAsync(string keyRef, PkiKeyRequest pkiKeyRequest = default(PkiKeyRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiKeysImportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiKeysImportAsync(PkiKeysImportRequest pkiKeysImportRequest = default(PkiKeysImportRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiKeysImportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiKeysImportWithHttpInfoAsync(PkiKeysImportRequest pkiKeysImportRequest = default(PkiKeysImportRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiKmsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiKmsAsync(PkiKmsRequest pkiKmsRequest = default(PkiKmsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiKmsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiKmsWithHttpInfoAsync(PkiKmsRequest pkiKmsRequest = default(PkiKmsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRevokeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiRevokeAsync(PkiRevokeRequest pkiRevokeRequest = default(PkiRevokeRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRevokeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiRevokeWithHttpInfoAsync(PkiRevokeRequest pkiRevokeRequest = default(PkiRevokeRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="pkiRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiRolesNameAsync(string name, PkiRolesRequest pkiRolesRequest = default(PkiRolesRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="pkiRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiRolesNameWithHttpInfoAsync(string name, PkiRolesRequest pkiRolesRequest = default(PkiRolesRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiRootGenerateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiRootGenerateExportedAsync(string exported, PkiRootGenerateRequest pkiRootGenerateRequest = default(PkiRootGenerateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiRootGenerateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiRootGenerateExportedWithHttpInfoAsync(string exported, PkiRootGenerateRequest pkiRootGenerateRequest = default(PkiRootGenerateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootReplaceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiRootReplaceAsync(PkiRootReplaceRequest pkiRootReplaceRequest = default(PkiRootReplaceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootReplaceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiRootReplaceWithHttpInfoAsync(PkiRootReplaceRequest pkiRootReplaceRequest = default(PkiRootReplaceRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiRootRotateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiRootRotateExportedAsync(string exported, PkiRootRotateRequest pkiRootRotateRequest = default(PkiRootRotateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiRootRotateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiRootRotateExportedWithHttpInfoAsync(string exported, PkiRootRotateRequest pkiRootRotateRequest = default(PkiRootRotateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootSignIntermediateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiRootSignIntermediateAsync(PkiRootSignIntermediateRequest pkiRootSignIntermediateRequest = default(PkiRootSignIntermediateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootSignIntermediateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiRootSignIntermediateWithHttpInfoAsync(PkiRootSignIntermediateRequest pkiRootSignIntermediateRequest = default(PkiRootSignIntermediateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootSignSelfIssuedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiRootSignSelfIssuedAsync(PkiRootSignSelfIssuedRequest pkiRootSignSelfIssuedRequest = default(PkiRootSignSelfIssuedRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootSignSelfIssuedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiRootSignSelfIssuedWithHttpInfoAsync(PkiRootSignSelfIssuedRequest pkiRootSignSelfIssuedRequest = default(PkiRootSignSelfIssuedRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiSignRoleAsync(string role, PkiSignRequest pkiSignRequest = default(PkiSignRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiSignRoleWithHttpInfoAsync(string role, PkiSignRequest pkiSignRequest = default(PkiSignRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignVerbatimRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiSignVerbatimAsync(PkiSignVerbatimRequest pkiSignVerbatimRequest = default(PkiSignVerbatimRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignVerbatimRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiSignVerbatimWithHttpInfoAsync(PkiSignVerbatimRequest pkiSignVerbatimRequest = default(PkiSignVerbatimRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiSignVerbatimRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiSignVerbatimRoleAsync(string role, PkiSignVerbatimRequest pkiSignVerbatimRequest = default(PkiSignVerbatimRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiSignVerbatimRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiSignVerbatimRoleWithHttpInfoAsync(string role, PkiSignVerbatimRequest pkiSignVerbatimRequest = default(PkiSignVerbatimRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTidyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostPkiTidyAsync(PkiTidyRequest pkiTidyRequest = default(PkiTidyRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTidyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostPkiTidyWithHttpInfoAsync(PkiTidyRequest pkiTidyRequest = default(PkiTidyRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the connection URI, username, and password to talk to RabbitMQ management HTTP API.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rabbitmqConfigConnectionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostRabbitmqConfigConnectionAsync(RabbitmqConfigConnectionRequest rabbitmqConfigConnectionRequest = default(RabbitmqConfigConnectionRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the connection URI, username, and password to talk to RabbitMQ management HTTP API.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rabbitmqConfigConnectionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostRabbitmqConfigConnectionWithHttpInfoAsync(RabbitmqConfigConnectionRequest rabbitmqConfigConnectionRequest = default(RabbitmqConfigConnectionRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure the lease parameters for generated credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rabbitmqConfigLeaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostRabbitmqConfigLeaseAsync(RabbitmqConfigLeaseRequest rabbitmqConfigLeaseRequest = default(RabbitmqConfigLeaseRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure the lease parameters for generated credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rabbitmqConfigLeaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostRabbitmqConfigLeaseWithHttpInfoAsync(RabbitmqConfigLeaseRequest rabbitmqConfigLeaseRequest = default(RabbitmqConfigLeaseRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manage the roles that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="rabbitmqRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostRabbitmqRolesNameAsync(string name, RabbitmqRolesRequest rabbitmqRolesRequest = default(RabbitmqRolesRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Manage the roles that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="rabbitmqRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostRabbitmqRolesNameWithHttpInfoAsync(string name, RabbitmqRolesRequest rabbitmqRolesRequest = default(RabbitmqRolesRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure backend level settings that are applied to every key in the key-value store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kvConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostSecretConfigAsync(KvConfigRequest kvConfigRequest = default(KvConfigRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure backend level settings that are applied to every key in the key-value store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kvConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostSecretConfigWithHttpInfoAsync(KvConfigRequest kvConfigRequest = default(KvConfigRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDataRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostSecretDataPathAsync(string path, KvDataRequest kvDataRequest = default(KvDataRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDataRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostSecretDataPathWithHttpInfoAsync(string path, KvDataRequest kvDataRequest = default(KvDataRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Marks one or more versions as deleted in the KV store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostSecretDeletePathAsync(string path, KvDeleteRequest kvDeleteRequest = default(KvDeleteRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Marks one or more versions as deleted in the KV store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostSecretDeletePathWithHttpInfoAsync(string path, KvDeleteRequest kvDeleteRequest = default(KvDeleteRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Permanently removes one or more versions in the KV store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDestroyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostSecretDestroyPathAsync(string path, KvDestroyRequest kvDestroyRequest = default(KvDestroyRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Permanently removes one or more versions in the KV store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDestroyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostSecretDestroyPathWithHttpInfoAsync(string path, KvDestroyRequest kvDestroyRequest = default(KvDestroyRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configures settings for the KV store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvMetadataRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostSecretMetadataPathAsync(string path, KvMetadataRequest kvMetadataRequest = default(KvMetadataRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configures settings for the KV store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvMetadataRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostSecretMetadataPathWithHttpInfoAsync(string path, KvMetadataRequest kvMetadataRequest = default(KvMetadataRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Undeletes one or more versions from the KV store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvUndeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostSecretUndeletePathAsync(string path, KvUndeleteRequest kvUndeleteRequest = default(KvUndeleteRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Undeletes one or more versions from the KV store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvUndeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostSecretUndeletePathWithHttpInfoAsync(string path, KvUndeleteRequest kvUndeleteRequest = default(KvUndeleteRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set the SSH private key used for signing certificates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshConfigCaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostSshConfigCaAsync(SshConfigCaRequest sshConfigCaRequest = default(SshConfigCaRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set the SSH private key used for signing certificates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshConfigCaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostSshConfigCaWithHttpInfoAsync(SshConfigCaRequest sshConfigCaRequest = default(SshConfigCaRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Assign zero address as default CIDR block for select roles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshConfigZeroaddressRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostSshConfigZeroaddressAsync(SshConfigZeroaddressRequest sshConfigZeroaddressRequest = default(SshConfigZeroaddressRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Assign zero address as default CIDR block for select roles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshConfigZeroaddressRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostSshConfigZeroaddressWithHttpInfoAsync(SshConfigZeroaddressRequest sshConfigZeroaddressRequest = default(SshConfigZeroaddressRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a credential for establishing SSH connection with the remote host.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required] Name of the role</param>
        /// <param name="sshCredsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostSshCredsRoleAsync(string role, SshCredsRequest sshCredsRequest = default(SshCredsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a credential for establishing SSH connection with the remote host.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required] Name of the role</param>
        /// <param name="sshCredsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostSshCredsRoleWithHttpInfoAsync(string role, SshCredsRequest sshCredsRequest = default(SshCredsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Register a shared private key with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">[Required] Name of the key</param>
        /// <param name="sshKeysRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostSshKeysKeyNameAsync(string keyName, SshKeysRequest sshKeysRequest = default(SshKeysRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Register a shared private key with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">[Required] Name of the key</param>
        /// <param name="sshKeysRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostSshKeysKeyNameWithHttpInfoAsync(string keyName, SshKeysRequest sshKeysRequest = default(SshKeysRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all the roles associated with the given IP address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshLookupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostSshLookupAsync(SshLookupRequest sshLookupRequest = default(SshLookupRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all the roles associated with the given IP address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshLookupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostSshLookupWithHttpInfoAsync(SshLookupRequest sshLookupRequest = default(SshLookupRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <param name="sshRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostSshRolesRoleAsync(string role, SshRolesRequest sshRolesRequest = default(SshRolesRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <param name="sshRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostSshRolesRoleWithHttpInfoAsync(string role, SshRolesRequest sshRolesRequest = default(SshRolesRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Request signing an SSH key using a certain role with the provided details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request.</param>
        /// <param name="sshSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostSshSignRoleAsync(string role, SshSignRequest sshSignRequest = default(SshSignRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Request signing an SSH key using a certain role with the provided details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request.</param>
        /// <param name="sshSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostSshSignRoleWithHttpInfoAsync(string role, SshSignRequest sshSignRequest = default(SshSignRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Validate the OTP provided by Vault SSH Agent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshVerifyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostSshVerifyAsync(SshVerifyRequest sshVerifyRequest = default(SshVerifyRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Validate the OTP provided by Vault SSH Agent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshVerifyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostSshVerifyWithHttpInfoAsync(SshVerifyRequest sshVerifyRequest = default(SshVerifyRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terraformConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTerraformConfigAsync(TerraformConfigRequest terraformConfigRequest = default(TerraformConfigRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terraformConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTerraformConfigWithHttpInfoAsync(TerraformConfigRequest terraformConfigRequest = default(TerraformConfigRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate a Terraform Cloud or Enterprise API token from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTerraformCredsNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate a Terraform Cloud or Enterprise API token from a specific Vault role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTerraformCredsNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="terraformRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTerraformRoleNameAsync(string name, TerraformRoleRequest terraformRoleRequest = default(TerraformRoleRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="terraformRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTerraformRoleNameWithHttpInfoAsync(string name, TerraformRoleRequest terraformRoleRequest = default(TerraformRoleRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the team or organization role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTerraformRotateRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the team or organization role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTerraformRotateRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Request time-based one-time use password or validate a password for a certain key .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="totpCodeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTotpCodeNameAsync(string name, TotpCodeRequest totpCodeRequest = default(TotpCodeRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Request time-based one-time use password or validate a password for a certain key .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="totpCodeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTotpCodeNameWithHttpInfoAsync(string name, TotpCodeRequest totpCodeRequest = default(TotpCodeRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Manage the keys that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="totpKeysRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTotpKeysNameAsync(string name, TotpKeysRequest totpKeysRequest = default(TotpKeysRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Manage the keys that can be created with this backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="totpKeysRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTotpKeysNameWithHttpInfoAsync(string name, TotpKeysRequest totpKeysRequest = default(TotpKeysRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configures a new cache of the specified size
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitCacheConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitCacheConfigAsync(TransitCacheConfigRequest transitCacheConfigRequest = default(TransitCacheConfigRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configures a new cache of the specified size
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitCacheConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitCacheConfigWithHttpInfoAsync(TransitCacheConfigRequest transitCacheConfigRequest = default(TransitCacheConfigRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate a data key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The backend key used for encrypting the data key</param>
        /// <param name="plaintext">\&quot;plaintext\&quot; will return the key in both plaintext and ciphertext; \&quot;wrapped\&quot; will return the ciphertext only.</param>
        /// <param name="transitDatakeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitDatakeyPlaintextNameAsync(string name, string plaintext, TransitDatakeyRequest transitDatakeyRequest = default(TransitDatakeyRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate a data key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The backend key used for encrypting the data key</param>
        /// <param name="plaintext">\&quot;plaintext\&quot; will return the key in both plaintext and ciphertext; \&quot;wrapped\&quot; will return the ciphertext only.</param>
        /// <param name="transitDatakeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitDatakeyPlaintextNameWithHttpInfoAsync(string name, string plaintext, TransitDatakeyRequest transitDatakeyRequest = default(TransitDatakeyRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Decrypt a ciphertext value using a named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="transitDecryptRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitDecryptNameAsync(string name, TransitDecryptRequest transitDecryptRequest = default(TransitDecryptRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Decrypt a ciphertext value using a named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="transitDecryptRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitDecryptNameWithHttpInfoAsync(string name, TransitDecryptRequest transitDecryptRequest = default(TransitDecryptRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Encrypt a plaintext value or a batch of plaintext blocks using a named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="transitEncryptRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitEncryptNameAsync(string name, TransitEncryptRequest transitEncryptRequest = default(TransitEncryptRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Encrypt a plaintext value or a batch of plaintext blocks using a named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="transitEncryptRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitEncryptNameWithHttpInfoAsync(string name, TransitEncryptRequest transitEncryptRequest = default(TransitEncryptRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate a hash sum for input data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitHashRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitHashAsync(TransitHashRequest transitHashRequest = default(TransitHashRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate a hash sum for input data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitHashRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitHashWithHttpInfoAsync(TransitHashRequest transitHashRequest = default(TransitHashRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate a hash sum for input data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlalgorithm">Algorithm to use (POST URL parameter)</param>
        /// <param name="transitHashRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitHashUrlalgorithmAsync(string urlalgorithm, TransitHashRequest transitHashRequest = default(TransitHashRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate a hash sum for input data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlalgorithm">Algorithm to use (POST URL parameter)</param>
        /// <param name="transitHashRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitHashUrlalgorithmWithHttpInfoAsync(string urlalgorithm, TransitHashRequest transitHashRequest = default(TransitHashRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate an HMAC for input data using the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use for the HMAC function</param>
        /// <param name="transitHmacRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitHmacNameAsync(string name, TransitHmacRequest transitHmacRequest = default(TransitHmacRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate an HMAC for input data using the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use for the HMAC function</param>
        /// <param name="transitHmacRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitHmacNameWithHttpInfoAsync(string name, TransitHmacRequest transitHmacRequest = default(TransitHmacRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate an HMAC for input data using the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use for the HMAC function</param>
        /// <param name="urlalgorithm">Algorithm to use (POST URL parameter)</param>
        /// <param name="transitHmacRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitHmacNameUrlalgorithmAsync(string name, string urlalgorithm, TransitHmacRequest transitHmacRequest = default(TransitHmacRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate an HMAC for input data using the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use for the HMAC function</param>
        /// <param name="urlalgorithm">Algorithm to use (POST URL parameter)</param>
        /// <param name="transitHmacRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitHmacNameUrlalgorithmWithHttpInfoAsync(string name, string urlalgorithm, TransitHmacRequest transitHmacRequest = default(TransitHmacRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Managed named encryption keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitKeysNameAsync(string name, TransitKeysRequest transitKeysRequest = default(TransitKeysRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Managed named encryption keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitKeysNameWithHttpInfoAsync(string name, TransitKeysRequest transitKeysRequest = default(TransitKeysRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Configure a named encryption key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitKeysNameConfigAsync(string name, TransitKeysConfigRequest transitKeysConfigRequest = default(TransitKeysConfigRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Configure a named encryption key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitKeysNameConfigWithHttpInfoAsync(string name, TransitKeysConfigRequest transitKeysConfigRequest = default(TransitKeysConfigRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Imports an externally-generated key into a new transit key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the key</param>
        /// <param name="transitKeysImportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitKeysNameImportAsync(string name, TransitKeysImportRequest transitKeysImportRequest = default(TransitKeysImportRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Imports an externally-generated key into a new transit key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the key</param>
        /// <param name="transitKeysImportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitKeysNameImportWithHttpInfoAsync(string name, TransitKeysImportRequest transitKeysImportRequest = default(TransitKeysImportRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Imports an externally-generated key into an existing imported key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the key</param>
        /// <param name="transitKeysImportVersionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitKeysNameImportVersionAsync(string name, TransitKeysImportVersionRequest transitKeysImportVersionRequest = default(TransitKeysImportVersionRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Imports an externally-generated key into an existing imported key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the key</param>
        /// <param name="transitKeysImportVersionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitKeysNameImportVersionWithHttpInfoAsync(string name, TransitKeysImportVersionRequest transitKeysImportVersionRequest = default(TransitKeysImportVersionRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Rotate named encryption key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitKeysNameRotateAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Rotate named encryption key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitKeysNameRotateWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Trim key versions of a named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysTrimRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitKeysNameTrimAsync(string name, TransitKeysTrimRequest transitKeysTrimRequest = default(TransitKeysTrimRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Trim key versions of a named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysTrimRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitKeysNameTrimWithHttpInfoAsync(string name, TransitKeysTrimRequest transitKeysTrimRequest = default(TransitKeysTrimRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate random bytes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitRandomAsync(TransitRandomRequest transitRandomRequest = default(TransitRandomRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate random bytes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitRandomWithHttpInfoAsync(TransitRandomRequest transitRandomRequest = default(TransitRandomRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate random bytes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Which system to source random data from, ether \&quot;platform\&quot;, \&quot;seal\&quot;, or \&quot;all\&quot;.</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitRandomSourceAsync(string source, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate random bytes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Which system to source random data from, ether \&quot;platform\&quot;, \&quot;seal\&quot;, or \&quot;all\&quot;.</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitRandomSourceWithHttpInfoAsync(string source, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate random bytes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Which system to source random data from, ether \&quot;platform\&quot;, \&quot;seal\&quot;, or \&quot;all\&quot;.</param>
        /// <param name="urlbytes">The number of bytes to generate (POST URL parameter)</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitRandomSourceUrlbytesAsync(string source, string urlbytes, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate random bytes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Which system to source random data from, ether \&quot;platform\&quot;, \&quot;seal\&quot;, or \&quot;all\&quot;.</param>
        /// <param name="urlbytes">The number of bytes to generate (POST URL parameter)</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitRandomSourceUrlbytesWithHttpInfoAsync(string source, string urlbytes, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate random bytes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlbytes">The number of bytes to generate (POST URL parameter)</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitRandomUrlbytesAsync(string urlbytes, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate random bytes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlbytes">The number of bytes to generate (POST URL parameter)</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitRandomUrlbytesWithHttpInfoAsync(string urlbytes, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Restore the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitRestoreRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitRestoreAsync(TransitRestoreRequest transitRestoreRequest = default(TransitRestoreRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Restore the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitRestoreRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitRestoreWithHttpInfoAsync(TransitRestoreRequest transitRestoreRequest = default(TransitRestoreRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Restore the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">If set, this will be the name of the restored key.</param>
        /// <param name="transitRestoreRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitRestoreNameAsync(string name, TransitRestoreRequest transitRestoreRequest = default(TransitRestoreRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Restore the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">If set, this will be the name of the restored key.</param>
        /// <param name="transitRestoreRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitRestoreNameWithHttpInfoAsync(string name, TransitRestoreRequest transitRestoreRequest = default(TransitRestoreRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Rewrap ciphertext
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitRewrapRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitRewrapNameAsync(string name, TransitRewrapRequest transitRewrapRequest = default(TransitRewrapRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Rewrap ciphertext
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitRewrapRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitRewrapNameWithHttpInfoAsync(string name, TransitRewrapRequest transitRewrapRequest = default(TransitRewrapRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate a signature for input data using the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="transitSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitSignNameAsync(string name, TransitSignRequest transitSignRequest = default(TransitSignRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate a signature for input data using the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="transitSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitSignNameWithHttpInfoAsync(string name, TransitSignRequest transitSignRequest = default(TransitSignRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate a signature for input data using the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="urlalgorithm">Hash algorithm to use (POST URL parameter)</param>
        /// <param name="transitSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitSignNameUrlalgorithmAsync(string name, string urlalgorithm, TransitSignRequest transitSignRequest = default(TransitSignRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate a signature for input data using the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="urlalgorithm">Hash algorithm to use (POST URL parameter)</param>
        /// <param name="transitSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitSignNameUrlalgorithmWithHttpInfoAsync(string name, string urlalgorithm, TransitSignRequest transitSignRequest = default(TransitSignRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Verify a signature or HMAC for input data created using the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="transitVerifyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitVerifyNameAsync(string name, TransitVerifyRequest transitVerifyRequest = default(TransitVerifyRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Verify a signature or HMAC for input data created using the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="transitVerifyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitVerifyNameWithHttpInfoAsync(string name, TransitVerifyRequest transitVerifyRequest = default(TransitVerifyRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Verify a signature or HMAC for input data created using the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="urlalgorithm">Hash algorithm to use (POST URL parameter)</param>
        /// <param name="transitVerifyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostTransitVerifyNameUrlalgorithmAsync(string name, string urlalgorithm, TransitVerifyRequest transitVerifyRequest = default(TransitVerifyRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Verify a signature or HMAC for input data created using the named key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="urlalgorithm">Hash algorithm to use (POST URL parameter)</param>
        /// <param name="transitVerifyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostTransitVerifyNameUrlalgorithmWithHttpInfoAsync(string name, string urlalgorithm, TransitVerifyRequest transitVerifyRequest = default(TransitVerifyRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecretsApi : ISecretsApiSync, ISecretsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SecretsApi : IDisposable, ISecretsApi
    {
        private VaultClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SecretsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public SecretsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecretsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public SecretsApi(string basePath)
        {
            this.Configuration = VaultClient.Client.Configuration.MergeConfigurations(
                VaultClient.Client.GlobalConfiguration.Instance,
                new VaultClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new VaultClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = VaultClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecretsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SecretsApi(VaultClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VaultClient.Client.Configuration.MergeConfigurations(
                VaultClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new VaultClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = VaultClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecretsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SecretsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecretsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SecretsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = VaultClient.Client.Configuration.MergeConfigurations(
                VaultClient.Client.GlobalConfiguration.Instance,
                new VaultClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new VaultClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = VaultClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecretsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SecretsApi(HttpClient client, VaultClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = VaultClient.Client.Configuration.MergeConfigurations(
                VaultClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new VaultClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = VaultClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecretsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public SecretsApi(VaultClient.Client.ISynchronousClient client, VaultClient.Client.IAsynchronousClient asyncClient, VaultClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VaultClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public VaultClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VaultClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VaultClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VaultClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VaultClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Configure the AD server to connect to, along with password options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAdConfig()
        {
            DeleteAdConfigWithHttpInfo();
        }

        /// <summary>
        /// Configure the AD server to connect to, along with password options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAdConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ad/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAdConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the AD server to connect to, along with password options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteAdConfigAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteAdConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the AD server to connect to, along with password options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteAdConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ad/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAdConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a library set. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <returns></returns>
        public void DeleteAdLibraryName(string name)
        {
            DeleteAdLibraryNameWithHttpInfo(name);
        }

        /// <summary>
        /// Delete a library set. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAdLibraryNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteAdLibraryName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ad/library/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAdLibraryName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a library set. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteAdLibraryNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteAdLibraryNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a library set. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteAdLibraryNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteAdLibraryName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ad/library/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAdLibraryName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void DeleteAdRolesName(string name)
        {
            DeleteAdRolesNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAdRolesNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteAdRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ad/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAdRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteAdRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteAdRolesNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteAdRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteAdRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ad/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAdRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAlicloudConfig()
        {
            DeleteAlicloudConfigWithHttpInfo();
        }

        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAlicloudConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/alicloud/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAlicloudConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteAlicloudConfigAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteAlicloudConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteAlicloudConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/alicloud/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAlicloudConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <returns></returns>
        public void DeleteAlicloudRoleName(string name)
        {
            DeleteAlicloudRoleNameWithHttpInfo(name);
        }

        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAlicloudRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteAlicloudRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/alicloud/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAlicloudRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteAlicloudRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteAlicloudRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteAlicloudRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteAlicloudRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/alicloud/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAlicloudRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <returns></returns>
        public void DeleteAwsRolesName(string name)
        {
            DeleteAwsRolesNameWithHttpInfo(name);
        }

        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAwsRolesNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteAwsRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/aws/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAwsRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteAwsRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteAwsRolesNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteAwsRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteAwsRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/aws/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAwsRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAzureConfig()
        {
            DeleteAzureConfigWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAzureConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/azure/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAzureConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteAzureConfigAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteAzureConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteAzureConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/azure/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAzureConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAzureRolesName(string name)
        {
            DeleteAzureRolesNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAzureRolesNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteAzureRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/azure/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAzureRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteAzureRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteAzureRolesNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteAzureRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteAzureRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/azure/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAzureRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        public void DeleteConsulRolesName(string name)
        {
            DeleteConsulRolesNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteConsulRolesNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteConsulRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/consul/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConsulRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteConsulRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteConsulRolesNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteConsulRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteConsulRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/consul/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConsulRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes the secret at the specified location. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <returns></returns>
        public void DeleteCubbyholePath(string path)
        {
            DeleteCubbyholePathWithHttpInfo(path);
        }

        /// <summary>
        /// Deletes the secret at the specified location. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteCubbyholePathWithHttpInfo(string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->DeleteCubbyholePath");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/cubbyhole/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCubbyholePath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes the secret at the specified location. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteCubbyholePathAsync(string path, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteCubbyholePathWithHttpInfoAsync(path, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes the secret at the specified location. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteCubbyholePathWithHttpInfoAsync(string path, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->DeleteCubbyholePath");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/cubbyhole/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCubbyholePath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <returns></returns>
        public void DeleteGcpRolesetName(string name)
        {
            DeleteGcpRolesetNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteGcpRolesetNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteGcpRolesetName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/gcp/roleset/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGcpRolesetName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteGcpRolesetNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteGcpRolesetNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteGcpRolesetNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteGcpRolesetName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/gcp/roleset/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGcpRolesetName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <returns></returns>
        public void DeleteGcpStaticAccountName(string name)
        {
            DeleteGcpStaticAccountNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteGcpStaticAccountNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteGcpStaticAccountName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/gcp/static-account/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGcpStaticAccountName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteGcpStaticAccountNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteGcpStaticAccountNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteGcpStaticAccountNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteGcpStaticAccountName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/gcp/static-account/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGcpStaticAccountName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the GCP KMS secrets engine 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteGcpkmsConfig()
        {
            DeleteGcpkmsConfigWithHttpInfo();
        }

        /// <summary>
        /// Configure the GCP KMS secrets engine 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteGcpkmsConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/gcpkms/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGcpkmsConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the GCP KMS secrets engine 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteGcpkmsConfigAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteGcpkmsConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the GCP KMS secrets engine 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteGcpkmsConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/gcpkms/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGcpkmsConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deregister an existing key in Vault 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to deregister in Vault. If the key exists in Google Cloud KMS, it will be left untouched.</param>
        /// <returns></returns>
        public void DeleteGcpkmsKeysDeregisterKey(string key)
        {
            DeleteGcpkmsKeysDeregisterKeyWithHttpInfo(key);
        }

        /// <summary>
        /// Deregister an existing key in Vault 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to deregister in Vault. If the key exists in Google Cloud KMS, it will be left untouched.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteGcpkmsKeysDeregisterKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->DeleteGcpkmsKeysDeregisterKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/gcpkms/keys/deregister/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGcpkmsKeysDeregisterKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deregister an existing key in Vault 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to deregister in Vault. If the key exists in Google Cloud KMS, it will be left untouched.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteGcpkmsKeysDeregisterKeyAsync(string key, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteGcpkmsKeysDeregisterKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deregister an existing key in Vault 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to deregister in Vault. If the key exists in Google Cloud KMS, it will be left untouched.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteGcpkmsKeysDeregisterKeyWithHttpInfoAsync(string key, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->DeleteGcpkmsKeysDeregisterKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/gcpkms/keys/deregister/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGcpkmsKeysDeregisterKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <returns></returns>
        public void DeleteGcpkmsKeysKey(string key)
        {
            DeleteGcpkmsKeysKeyWithHttpInfo(key);
        }

        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteGcpkmsKeysKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->DeleteGcpkmsKeysKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/gcpkms/keys/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGcpkmsKeysKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteGcpkmsKeysKeyAsync(string key, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteGcpkmsKeysKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteGcpkmsKeysKeyWithHttpInfoAsync(string key, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->DeleteGcpkmsKeysKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/gcpkms/keys/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGcpkmsKeysKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete old crypto key versions from Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <returns></returns>
        public void DeleteGcpkmsKeysTrimKey(string key)
        {
            DeleteGcpkmsKeysTrimKeyWithHttpInfo(key);
        }

        /// <summary>
        /// Delete old crypto key versions from Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteGcpkmsKeysTrimKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->DeleteGcpkmsKeysTrimKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/gcpkms/keys/trim/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGcpkmsKeysTrimKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete old crypto key versions from Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteGcpkmsKeysTrimKeyAsync(string key, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteGcpkmsKeysTrimKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete old crypto key versions from Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteGcpkmsKeysTrimKeyWithHttpInfoAsync(string key, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->DeleteGcpkmsKeysTrimKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/gcpkms/keys/trim/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGcpkmsKeysTrimKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteKubernetesConfig()
        {
            DeleteKubernetesConfigWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteKubernetesConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/kubernetes/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteKubernetesConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteKubernetesConfigAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteKubernetesConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteKubernetesConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/kubernetes/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteKubernetesConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void DeleteKubernetesRolesName(string name)
        {
            DeleteKubernetesRolesNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteKubernetesRolesNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteKubernetesRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/kubernetes/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteKubernetesRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteKubernetesRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteKubernetesRolesNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteKubernetesRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteKubernetesRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/kubernetes/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteKubernetesRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns></returns>
        public void DeleteKvPath(string path)
        {
            DeleteKvPathWithHttpInfo(path);
        }

        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteKvPathWithHttpInfo(string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->DeleteKvPath");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/kv/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteKvPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteKvPathAsync(string path, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteKvPathWithHttpInfoAsync(path, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteKvPathWithHttpInfoAsync(string path, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->DeleteKvPath");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/kv/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteKvPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <returns></returns>
        public void DeleteMongodbatlasRolesName(string name)
        {
            DeleteMongodbatlasRolesNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteMongodbatlasRolesNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteMongodbatlasRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/mongodbatlas/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMongodbatlasRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteMongodbatlasRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteMongodbatlasRolesNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteMongodbatlasRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteMongodbatlasRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/mongodbatlas/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMongodbatlasRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteNomadConfigAccess()
        {
            DeleteNomadConfigAccessWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteNomadConfigAccessWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/nomad/config/access", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNomadConfigAccess", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteNomadConfigAccessAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteNomadConfigAccessWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteNomadConfigAccessWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/nomad/config/access", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNomadConfigAccess", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the lease parameters for generated tokens 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteNomadConfigLease()
        {
            DeleteNomadConfigLeaseWithHttpInfo();
        }

        /// <summary>
        /// Configure the lease parameters for generated tokens 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteNomadConfigLeaseWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/nomad/config/lease", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNomadConfigLease", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the lease parameters for generated tokens 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteNomadConfigLeaseAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteNomadConfigLeaseWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the lease parameters for generated tokens 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteNomadConfigLeaseWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/nomad/config/lease", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNomadConfigLease", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void DeleteNomadRoleName(string name)
        {
            DeleteNomadRoleNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteNomadRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteNomadRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/nomad/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNomadRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteNomadRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteNomadRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteNomadRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteNomadRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/nomad/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNomadRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteOpenldapConfig()
        {
            DeleteOpenldapConfigWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteOpenldapConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/openldap/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOpenldapConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteOpenldapConfigAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteOpenldapConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteOpenldapConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/openldap/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOpenldapConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <returns></returns>
        public void DeleteOpenldapRoleName(string name)
        {
            DeleteOpenldapRoleNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteOpenldapRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteOpenldapRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/openldap/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOpenldapRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteOpenldapRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteOpenldapRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteOpenldapRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteOpenldapRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/openldap/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOpenldapRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void DeleteOpenldapStaticRoleName(string name)
        {
            DeleteOpenldapStaticRoleNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteOpenldapStaticRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteOpenldapStaticRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/openldap/static-role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOpenldapStaticRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteOpenldapStaticRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteOpenldapStaticRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteOpenldapStaticRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteOpenldapStaticRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/openldap/static-role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOpenldapStaticRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <returns></returns>
        public void DeletePkiIssuerRefDerPem(string issuerRef)
        {
            DeletePkiIssuerRefDerPemWithHttpInfo(issuerRef);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeletePkiIssuerRefDerPemWithHttpInfo(string issuerRef)
        {
            // verify the required parameter 'issuerRef' is set
            if (issuerRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'issuerRef' when calling SecretsApi->DeletePkiIssuerRefDerPem");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("issuer_ref", VaultClient.Client.ClientUtils.ParameterToString(issuerRef)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/pki/{issuer_ref}/der|/pem", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePkiIssuerRefDerPem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeletePkiIssuerRefDerPemAsync(string issuerRef, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeletePkiIssuerRefDerPemWithHttpInfoAsync(issuerRef, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeletePkiIssuerRefDerPemWithHttpInfoAsync(string issuerRef, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'issuerRef' is set
            if (issuerRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'issuerRef' when calling SecretsApi->DeletePkiIssuerRefDerPem");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("issuer_ref", VaultClient.Client.ClientUtils.ParameterToString(issuerRef)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/pki/{issuer_ref}/der|/pem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePkiIssuerRefDerPem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeletePkiJson()
        {
            DeletePkiJsonWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeletePkiJsonWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/pki//json", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePkiJson", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeletePkiJsonAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeletePkiJsonWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeletePkiJsonWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/pki//json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePkiJson", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <returns></returns>
        public void DeletePkiKeyKeyRef(string keyRef)
        {
            DeletePkiKeyKeyRefWithHttpInfo(keyRef);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeletePkiKeyKeyRefWithHttpInfo(string keyRef)
        {
            // verify the required parameter 'keyRef' is set
            if (keyRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'keyRef' when calling SecretsApi->DeletePkiKeyKeyRef");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key_ref", VaultClient.Client.ClientUtils.ParameterToString(keyRef)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/pki/key/{key_ref}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePkiKeyKeyRef", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeletePkiKeyKeyRefAsync(string keyRef, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeletePkiKeyKeyRefWithHttpInfoAsync(keyRef, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeletePkiKeyKeyRefWithHttpInfoAsync(string keyRef, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'keyRef' is set
            if (keyRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'keyRef' when calling SecretsApi->DeletePkiKeyKeyRef");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key_ref", VaultClient.Client.ClientUtils.ParameterToString(keyRef)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/pki/key/{key_ref}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePkiKeyKeyRef", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void DeletePkiRolesName(string name)
        {
            DeletePkiRolesNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeletePkiRolesNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeletePkiRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/pki/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePkiRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeletePkiRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeletePkiRolesNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeletePkiRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeletePkiRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/pki/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePkiRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeletePkiRoot()
        {
            DeletePkiRootWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeletePkiRootWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/pki/root", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePkiRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeletePkiRootAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeletePkiRootWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeletePkiRootWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/pki/root", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePkiRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the roles that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        public void DeleteRabbitmqRolesName(string name)
        {
            DeleteRabbitmqRolesNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage the roles that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteRabbitmqRolesNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteRabbitmqRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/rabbitmq/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRabbitmqRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the roles that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteRabbitmqRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteRabbitmqRolesNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage the roles that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteRabbitmqRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteRabbitmqRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/rabbitmq/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRabbitmqRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns></returns>
        public void DeleteSecretDataPath(string path)
        {
            DeleteSecretDataPathWithHttpInfo(path);
        }

        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteSecretDataPathWithHttpInfo(string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->DeleteSecretDataPath");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/secret/data/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSecretDataPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteSecretDataPathAsync(string path, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteSecretDataPathWithHttpInfoAsync(path, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteSecretDataPathWithHttpInfoAsync(string path, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->DeleteSecretDataPath");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/secret/data/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSecretDataPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configures settings for the KV store 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns></returns>
        public void DeleteSecretMetadataPath(string path)
        {
            DeleteSecretMetadataPathWithHttpInfo(path);
        }

        /// <summary>
        /// Configures settings for the KV store 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteSecretMetadataPathWithHttpInfo(string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->DeleteSecretMetadataPath");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/secret/metadata/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSecretMetadataPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configures settings for the KV store 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteSecretMetadataPathAsync(string path, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteSecretMetadataPathWithHttpInfoAsync(path, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configures settings for the KV store 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteSecretMetadataPathWithHttpInfoAsync(string path, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->DeleteSecretMetadataPath");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/secret/metadata/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSecretMetadataPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the SSH private key used for signing certificates. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteSshConfigCa()
        {
            DeleteSshConfigCaWithHttpInfo();
        }

        /// <summary>
        /// Set the SSH private key used for signing certificates. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteSshConfigCaWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ssh/config/ca", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSshConfigCa", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the SSH private key used for signing certificates. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteSshConfigCaAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteSshConfigCaWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set the SSH private key used for signing certificates. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteSshConfigCaWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ssh/config/ca", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSshConfigCa", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign zero address as default CIDR block for select roles. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteSshConfigZeroaddress()
        {
            DeleteSshConfigZeroaddressWithHttpInfo();
        }

        /// <summary>
        /// Assign zero address as default CIDR block for select roles. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteSshConfigZeroaddressWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ssh/config/zeroaddress", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSshConfigZeroaddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign zero address as default CIDR block for select roles. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteSshConfigZeroaddressAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteSshConfigZeroaddressWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Assign zero address as default CIDR block for select roles. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteSshConfigZeroaddressWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ssh/config/zeroaddress", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSshConfigZeroaddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register a shared private key with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">[Required] Name of the key</param>
        /// <returns></returns>
        public void DeleteSshKeysKeyName(string keyName)
        {
            DeleteSshKeysKeyNameWithHttpInfo(keyName);
        }

        /// <summary>
        /// Register a shared private key with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">[Required] Name of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteSshKeysKeyNameWithHttpInfo(string keyName)
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'keyName' when calling SecretsApi->DeleteSshKeysKeyName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key_name", VaultClient.Client.ClientUtils.ParameterToString(keyName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ssh/keys/{key_name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSshKeysKeyName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register a shared private key with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">[Required] Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteSshKeysKeyNameAsync(string keyName, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteSshKeysKeyNameWithHttpInfoAsync(keyName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Register a shared private key with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">[Required] Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteSshKeysKeyNameWithHttpInfoAsync(string keyName, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'keyName' when calling SecretsApi->DeleteSshKeysKeyName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key_name", VaultClient.Client.ClientUtils.ParameterToString(keyName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ssh/keys/{key_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSshKeysKeyName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <returns></returns>
        public void DeleteSshRolesRole(string role)
        {
            DeleteSshRolesRoleWithHttpInfo(role);
        }

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteSshRolesRoleWithHttpInfo(string role)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->DeleteSshRolesRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ssh/roles/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSshRolesRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteSshRolesRoleAsync(string role, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteSshRolesRoleWithHttpInfoAsync(role, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteSshRolesRoleWithHttpInfoAsync(string role, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->DeleteSshRolesRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ssh/roles/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSshRolesRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteTerraformConfig()
        {
            DeleteTerraformConfigWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteTerraformConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/terraform/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTerraformConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteTerraformConfigAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteTerraformConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteTerraformConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/terraform/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTerraformConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void DeleteTerraformRoleName(string name)
        {
            DeleteTerraformRoleNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteTerraformRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteTerraformRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/terraform/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTerraformRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteTerraformRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteTerraformRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteTerraformRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteTerraformRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/terraform/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTerraformRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the keys that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <returns></returns>
        public void DeleteTotpKeysName(string name)
        {
            DeleteTotpKeysNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage the keys that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteTotpKeysNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteTotpKeysName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/totp/keys/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTotpKeysName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the keys that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteTotpKeysNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteTotpKeysNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage the keys that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteTotpKeysNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteTotpKeysName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/totp/keys/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTotpKeysName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Managed named encryption keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns></returns>
        public void DeleteTransitKeysName(string name)
        {
            DeleteTransitKeysNameWithHttpInfo(name);
        }

        /// <summary>
        /// Managed named encryption keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteTransitKeysNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteTransitKeysName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/transit/keys/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTransitKeysName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Managed named encryption keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteTransitKeysNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteTransitKeysNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Managed named encryption keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteTransitKeysNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->DeleteTransitKeysName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/transit/keys/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTransitKeysName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the AD server to connect to, along with password options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAdConfig()
        {
            GetAdConfigWithHttpInfo();
        }

        /// <summary>
        /// Configure the AD server to connect to, along with password options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAdConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/ad/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the AD server to connect to, along with password options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAdConfigAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAdConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the AD server to connect to, along with password options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAdConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/ad/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void GetAdCredsName(string name)
        {
            GetAdCredsNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAdCredsNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetAdCredsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/ad/creds/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdCredsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAdCredsNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAdCredsNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAdCredsNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetAdCredsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/ad/creds/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdCredsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAdLibrary(string list)
        {
            GetAdLibraryWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAdLibraryWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetAdLibrary");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/ad/library", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAdLibraryAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAdLibraryWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAdLibraryWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetAdLibrary");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/ad/library", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a library set. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <returns></returns>
        public void GetAdLibraryName(string name)
        {
            GetAdLibraryNameWithHttpInfo(name);
        }

        /// <summary>
        /// Read a library set. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAdLibraryNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetAdLibraryName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/ad/library/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdLibraryName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a library set. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAdLibraryNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAdLibraryNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read a library set. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAdLibraryNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetAdLibraryName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/ad/library/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdLibraryName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the status of the service accounts in a library set. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <returns></returns>
        public void GetAdLibraryNameStatus(string name)
        {
            GetAdLibraryNameStatusWithHttpInfo(name);
        }

        /// <summary>
        /// Check the status of the service accounts in a library set. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAdLibraryNameStatusWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetAdLibraryNameStatus");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/ad/library/{name}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdLibraryNameStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the status of the service accounts in a library set. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAdLibraryNameStatusAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAdLibraryNameStatusWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Check the status of the service accounts in a library set. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAdLibraryNameStatusWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetAdLibraryNameStatus");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/ad/library/{name}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdLibraryNameStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the name of each role currently stored. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAdRoles(string list)
        {
            GetAdRolesWithHttpInfo(list);
        }

        /// <summary>
        /// List the name of each role currently stored. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAdRolesWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetAdRoles");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/ad/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the name of each role currently stored. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAdRolesAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAdRolesWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List the name of each role currently stored. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAdRolesWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetAdRoles");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/ad/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void GetAdRolesName(string name)
        {
            GetAdRolesNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAdRolesNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetAdRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/ad/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAdRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAdRolesNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAdRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetAdRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/ad/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAdRotateRoot()
        {
            GetAdRotateRootWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAdRotateRootWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/ad/rotate-root", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdRotateRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAdRotateRootAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAdRotateRootWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAdRotateRootWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/ad/rotate-root", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAdRotateRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAlicloudConfig()
        {
            GetAlicloudConfigWithHttpInfo();
        }

        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAlicloudConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/alicloud/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlicloudConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAlicloudConfigAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAlicloudConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAlicloudConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/alicloud/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlicloudConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate an API key or STS credential using the given role&#39;s configuration.&#39; 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <returns></returns>
        public void GetAlicloudCredsName(string name)
        {
            GetAlicloudCredsNameWithHttpInfo(name);
        }

        /// <summary>
        /// Generate an API key or STS credential using the given role&#39;s configuration.&#39; 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAlicloudCredsNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetAlicloudCredsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/alicloud/creds/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlicloudCredsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate an API key or STS credential using the given role&#39;s configuration.&#39; 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAlicloudCredsNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAlicloudCredsNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate an API key or STS credential using the given role&#39;s configuration.&#39; 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAlicloudCredsNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetAlicloudCredsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/alicloud/creds/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlicloudCredsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the existing roles in this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAlicloudRole(string list)
        {
            GetAlicloudRoleWithHttpInfo(list);
        }

        /// <summary>
        /// List the existing roles in this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAlicloudRoleWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetAlicloudRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/alicloud/role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlicloudRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the existing roles in this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAlicloudRoleAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAlicloudRoleWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List the existing roles in this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAlicloudRoleWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetAlicloudRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/alicloud/role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlicloudRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <returns></returns>
        public void GetAlicloudRoleName(string name)
        {
            GetAlicloudRoleNameWithHttpInfo(name);
        }

        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAlicloudRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetAlicloudRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/alicloud/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlicloudRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAlicloudRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAlicloudRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAlicloudRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetAlicloudRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/alicloud/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAlicloudRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the default lease information for generated credentials. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAwsConfigLease()
        {
            GetAwsConfigLeaseWithHttpInfo();
        }

        /// <summary>
        /// Configure the default lease information for generated credentials. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAwsConfigLeaseWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/aws/config/lease", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAwsConfigLease", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the default lease information for generated credentials. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAwsConfigLeaseAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAwsConfigLeaseWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the default lease information for generated credentials. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAwsConfigLeaseWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/aws/config/lease", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAwsConfigLease", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the root credentials that are used to manage IAM. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAwsConfigRoot()
        {
            GetAwsConfigRootWithHttpInfo();
        }

        /// <summary>
        /// Configure the root credentials that are used to manage IAM. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAwsConfigRootWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/aws/config/root", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAwsConfigRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the root credentials that are used to manage IAM. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAwsConfigRootAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAwsConfigRootWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the root credentials that are used to manage IAM. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAwsConfigRootWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/aws/config/root", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAwsConfigRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate AWS credentials from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAwsCreds()
        {
            GetAwsCredsWithHttpInfo();
        }

        /// <summary>
        /// Generate AWS credentials from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAwsCredsWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/aws/creds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAwsCreds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate AWS credentials from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAwsCredsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAwsCredsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate AWS credentials from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAwsCredsWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/aws/creds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAwsCreds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the existing roles in this backend 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAwsRoles(string list)
        {
            GetAwsRolesWithHttpInfo(list);
        }

        /// <summary>
        /// List the existing roles in this backend 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAwsRolesWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetAwsRoles");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/aws/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAwsRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the existing roles in this backend 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAwsRolesAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAwsRolesWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List the existing roles in this backend 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAwsRolesWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetAwsRoles");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/aws/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAwsRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <returns></returns>
        public void GetAwsRolesName(string name)
        {
            GetAwsRolesNameWithHttpInfo(name);
        }

        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAwsRolesNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetAwsRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/aws/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAwsRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAwsRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAwsRolesNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAwsRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetAwsRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/aws/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAwsRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate AWS credentials from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void GetAwsStsName(string name)
        {
            GetAwsStsNameWithHttpInfo(name);
        }

        /// <summary>
        /// Generate AWS credentials from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAwsStsNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetAwsStsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/aws/sts/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAwsStsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate AWS credentials from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAwsStsNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAwsStsNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate AWS credentials from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAwsStsNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetAwsStsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/aws/sts/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAwsStsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAzureConfig()
        {
            GetAzureConfigWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAzureConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/azure/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAzureConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAzureConfigAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAzureConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAzureConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/azure/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAzureConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the Vault role</param>
        /// <returns></returns>
        public void GetAzureCredsRole(string role)
        {
            GetAzureCredsRoleWithHttpInfo(role);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the Vault role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAzureCredsRoleWithHttpInfo(string role)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->GetAzureCredsRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/azure/creds/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAzureCredsRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the Vault role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAzureCredsRoleAsync(string role, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAzureCredsRoleWithHttpInfoAsync(role, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the Vault role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAzureCredsRoleWithHttpInfoAsync(string role, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->GetAzureCredsRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/azure/creds/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAzureCredsRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List existing roles. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAzureRoles(string list)
        {
            GetAzureRolesWithHttpInfo(list);
        }

        /// <summary>
        /// List existing roles. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAzureRolesWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetAzureRoles");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/azure/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAzureRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List existing roles. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAzureRolesAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAzureRolesWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List existing roles. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAzureRolesWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetAzureRoles");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/azure/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAzureRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        public void GetAzureRolesName(string name)
        {
            GetAzureRolesNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAzureRolesNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetAzureRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/azure/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAzureRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetAzureRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetAzureRolesNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetAzureRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetAzureRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/azure/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAzureRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetConsulConfigAccess()
        {
            GetConsulConfigAccessWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetConsulConfigAccessWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/consul/config/access", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsulConfigAccess", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetConsulConfigAccessAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetConsulConfigAccessWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetConsulConfigAccessWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/consul/config/access", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsulConfigAccess", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <returns></returns>
        public void GetConsulCredsRole(string role)
        {
            GetConsulCredsRoleWithHttpInfo(role);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetConsulCredsRoleWithHttpInfo(string role)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->GetConsulCredsRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/consul/creds/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsulCredsRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetConsulCredsRoleAsync(string role, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetConsulCredsRoleWithHttpInfoAsync(role, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetConsulCredsRoleWithHttpInfoAsync(string role, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->GetConsulCredsRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/consul/creds/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsulCredsRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetConsulRoles(string list)
        {
            GetConsulRolesWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetConsulRolesWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetConsulRoles");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/consul/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsulRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetConsulRolesAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetConsulRolesWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetConsulRolesWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetConsulRoles");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/consul/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsulRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        public void GetConsulRolesName(string name)
        {
            GetConsulRolesNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetConsulRolesNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetConsulRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/consul/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsulRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetConsulRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetConsulRolesNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetConsulRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetConsulRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/consul/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConsulRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the secret at the specified location. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns></returns>
        public void GetCubbyholePath(string path, string list = default(string))
        {
            GetCubbyholePathWithHttpInfo(path, list);
        }

        /// <summary>
        /// Retrieve the secret at the specified location. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetCubbyholePathWithHttpInfo(string path, string list = default(string))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->GetCubbyholePath");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (list != null)
            {
                localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/cubbyhole/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCubbyholePath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the secret at the specified location. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetCubbyholePathAsync(string path, string list = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetCubbyholePathWithHttpInfoAsync(path, list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieve the secret at the specified location. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetCubbyholePathWithHttpInfoAsync(string path, string list = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->GetCubbyholePath");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (list != null)
            {
                localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/cubbyhole/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCubbyholePath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetGcpConfig()
        {
            GetGcpConfigWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetGcpConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/gcp/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetGcpConfigAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetGcpConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetGcpConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/gcp/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns></returns>
        public void GetGcpKeyRoleset(string roleset)
        {
            GetGcpKeyRolesetWithHttpInfo(roleset);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetGcpKeyRolesetWithHttpInfo(string roleset)
        {
            // verify the required parameter 'roleset' is set
            if (roleset == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleset' when calling SecretsApi->GetGcpKeyRoleset");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roleset", VaultClient.Client.ClientUtils.ParameterToString(roleset)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/gcp/key/{roleset}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpKeyRoleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetGcpKeyRolesetAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetGcpKeyRolesetWithHttpInfoAsync(roleset, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetGcpKeyRolesetWithHttpInfoAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'roleset' is set
            if (roleset == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleset' when calling SecretsApi->GetGcpKeyRoleset");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roleset", VaultClient.Client.ClientUtils.ParameterToString(roleset)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/gcp/key/{roleset}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpKeyRoleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <returns></returns>
        public void GetGcpRolesetName(string name)
        {
            GetGcpRolesetNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetGcpRolesetNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetGcpRolesetName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/gcp/roleset/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpRolesetName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetGcpRolesetNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetGcpRolesetNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetGcpRolesetNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetGcpRolesetName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/gcp/roleset/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpRolesetName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns></returns>
        public void GetGcpRolesetRolesetKey(string roleset)
        {
            GetGcpRolesetRolesetKeyWithHttpInfo(roleset);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetGcpRolesetRolesetKeyWithHttpInfo(string roleset)
        {
            // verify the required parameter 'roleset' is set
            if (roleset == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleset' when calling SecretsApi->GetGcpRolesetRolesetKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roleset", VaultClient.Client.ClientUtils.ParameterToString(roleset)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/gcp/roleset/{roleset}/key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpRolesetRolesetKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetGcpRolesetRolesetKeyAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetGcpRolesetRolesetKeyWithHttpInfoAsync(roleset, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetGcpRolesetRolesetKeyWithHttpInfoAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'roleset' is set
            if (roleset == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleset' when calling SecretsApi->GetGcpRolesetRolesetKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roleset", VaultClient.Client.ClientUtils.ParameterToString(roleset)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/gcp/roleset/{roleset}/key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpRolesetRolesetKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns></returns>
        public void GetGcpRolesetRolesetToken(string roleset)
        {
            GetGcpRolesetRolesetTokenWithHttpInfo(roleset);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetGcpRolesetRolesetTokenWithHttpInfo(string roleset)
        {
            // verify the required parameter 'roleset' is set
            if (roleset == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleset' when calling SecretsApi->GetGcpRolesetRolesetToken");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roleset", VaultClient.Client.ClientUtils.ParameterToString(roleset)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/gcp/roleset/{roleset}/token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpRolesetRolesetToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetGcpRolesetRolesetTokenAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetGcpRolesetRolesetTokenWithHttpInfoAsync(roleset, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetGcpRolesetRolesetTokenWithHttpInfoAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'roleset' is set
            if (roleset == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleset' when calling SecretsApi->GetGcpRolesetRolesetToken");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roleset", VaultClient.Client.ClientUtils.ParameterToString(roleset)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/gcp/roleset/{roleset}/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpRolesetRolesetToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetGcpRolesets(string list)
        {
            GetGcpRolesetsWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetGcpRolesetsWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetGcpRolesets");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/gcp/rolesets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpRolesets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetGcpRolesetsAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetGcpRolesetsWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetGcpRolesetsWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetGcpRolesets");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/gcp/rolesets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpRolesets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <returns></returns>
        public void GetGcpStaticAccountName(string name)
        {
            GetGcpStaticAccountNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetGcpStaticAccountNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetGcpStaticAccountName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/gcp/static-account/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpStaticAccountName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetGcpStaticAccountNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetGcpStaticAccountNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetGcpStaticAccountNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetGcpStaticAccountName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/gcp/static-account/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpStaticAccountName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <returns></returns>
        public void GetGcpStaticAccountNameKey(string name)
        {
            GetGcpStaticAccountNameKeyWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetGcpStaticAccountNameKeyWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetGcpStaticAccountNameKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/gcp/static-account/{name}/key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpStaticAccountNameKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetGcpStaticAccountNameKeyAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetGcpStaticAccountNameKeyWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetGcpStaticAccountNameKeyWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetGcpStaticAccountNameKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/gcp/static-account/{name}/key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpStaticAccountNameKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <returns></returns>
        public void GetGcpStaticAccountNameToken(string name)
        {
            GetGcpStaticAccountNameTokenWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetGcpStaticAccountNameTokenWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetGcpStaticAccountNameToken");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/gcp/static-account/{name}/token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpStaticAccountNameToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetGcpStaticAccountNameTokenAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetGcpStaticAccountNameTokenWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetGcpStaticAccountNameTokenWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetGcpStaticAccountNameToken");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/gcp/static-account/{name}/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpStaticAccountNameToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetGcpStaticAccounts(string list)
        {
            GetGcpStaticAccountsWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetGcpStaticAccountsWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetGcpStaticAccounts");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/gcp/static-accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpStaticAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetGcpStaticAccountsAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetGcpStaticAccountsWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetGcpStaticAccountsWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetGcpStaticAccounts");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/gcp/static-accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpStaticAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns></returns>
        public void GetGcpTokenRoleset(string roleset)
        {
            GetGcpTokenRolesetWithHttpInfo(roleset);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetGcpTokenRolesetWithHttpInfo(string roleset)
        {
            // verify the required parameter 'roleset' is set
            if (roleset == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleset' when calling SecretsApi->GetGcpTokenRoleset");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roleset", VaultClient.Client.ClientUtils.ParameterToString(roleset)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/gcp/token/{roleset}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpTokenRoleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetGcpTokenRolesetAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetGcpTokenRolesetWithHttpInfoAsync(roleset, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetGcpTokenRolesetWithHttpInfoAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'roleset' is set
            if (roleset == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleset' when calling SecretsApi->GetGcpTokenRoleset");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roleset", VaultClient.Client.ClientUtils.ParameterToString(roleset)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/gcp/token/{roleset}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpTokenRoleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the GCP KMS secrets engine 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetGcpkmsConfig()
        {
            GetGcpkmsConfigWithHttpInfo();
        }

        /// <summary>
        /// Configure the GCP KMS secrets engine 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetGcpkmsConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/gcpkms/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpkmsConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the GCP KMS secrets engine 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetGcpkmsConfigAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetGcpkmsConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the GCP KMS secrets engine 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetGcpkmsConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/gcpkms/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpkmsConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List named keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetGcpkmsKeys(string list)
        {
            GetGcpkmsKeysWithHttpInfo(list);
        }

        /// <summary>
        /// List named keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetGcpkmsKeysWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetGcpkmsKeys");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/gcpkms/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpkmsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List named keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetGcpkmsKeysAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetGcpkmsKeysWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List named keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetGcpkmsKeysWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetGcpkmsKeys");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/gcpkms/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpkmsKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the key in Vault 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <returns></returns>
        public void GetGcpkmsKeysConfigKey(string key)
        {
            GetGcpkmsKeysConfigKeyWithHttpInfo(key);
        }

        /// <summary>
        /// Configure the key in Vault 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetGcpkmsKeysConfigKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->GetGcpkmsKeysConfigKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/gcpkms/keys/config/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpkmsKeysConfigKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the key in Vault 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetGcpkmsKeysConfigKeyAsync(string key, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetGcpkmsKeysConfigKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the key in Vault 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetGcpkmsKeysConfigKeyWithHttpInfoAsync(string key, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->GetGcpkmsKeysConfigKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/gcpkms/keys/config/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpkmsKeysConfigKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <returns></returns>
        public void GetGcpkmsKeysKey(string key)
        {
            GetGcpkmsKeysKeyWithHttpInfo(key);
        }

        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetGcpkmsKeysKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->GetGcpkmsKeysKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/gcpkms/keys/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpkmsKeysKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetGcpkmsKeysKeyAsync(string key, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetGcpkmsKeysKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetGcpkmsKeysKeyWithHttpInfoAsync(string key, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->GetGcpkmsKeysKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/gcpkms/keys/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpkmsKeysKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the public key associated with the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key for which to get the public key. This key must already exist in Vault and Google Cloud KMS.</param>
        /// <returns></returns>
        public void GetGcpkmsPubkeyKey(string key)
        {
            GetGcpkmsPubkeyKeyWithHttpInfo(key);
        }

        /// <summary>
        /// Retrieve the public key associated with the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key for which to get the public key. This key must already exist in Vault and Google Cloud KMS.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetGcpkmsPubkeyKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->GetGcpkmsPubkeyKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/gcpkms/pubkey/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpkmsPubkeyKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the public key associated with the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key for which to get the public key. This key must already exist in Vault and Google Cloud KMS.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetGcpkmsPubkeyKeyAsync(string key, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetGcpkmsPubkeyKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieve the public key associated with the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key for which to get the public key. This key must already exist in Vault and Google Cloud KMS.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetGcpkmsPubkeyKeyWithHttpInfoAsync(string key, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->GetGcpkmsPubkeyKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/gcpkms/pubkey/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGcpkmsPubkeyKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetKubernetesConfig()
        {
            GetKubernetesConfigWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetKubernetesConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/kubernetes/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKubernetesConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetKubernetesConfigAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetKubernetesConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetKubernetesConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/kubernetes/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKubernetesConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetKubernetesRoles(string list)
        {
            GetKubernetesRolesWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetKubernetesRolesWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetKubernetesRoles");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/kubernetes/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKubernetesRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetKubernetesRolesAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetKubernetesRolesWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetKubernetesRolesWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetKubernetesRoles");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/kubernetes/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKubernetesRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void GetKubernetesRolesName(string name)
        {
            GetKubernetesRolesNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetKubernetesRolesNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetKubernetesRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/kubernetes/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKubernetesRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetKubernetesRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetKubernetesRolesNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetKubernetesRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetKubernetesRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/kubernetes/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKubernetesRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns></returns>
        public void GetKvPath(string path, string list = default(string))
        {
            GetKvPathWithHttpInfo(path, list);
        }

        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetKvPathWithHttpInfo(string path, string list = default(string))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->GetKvPath");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (list != null)
            {
                localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/kv/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKvPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetKvPathAsync(string path, string list = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetKvPathWithHttpInfoAsync(path, list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetKvPathWithHttpInfoAsync(string path, string list = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->GetKvPath");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (list != null)
            {
                localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/kv/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKvPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the  credentials that are used to manage Database Users. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetMongodbatlasConfig()
        {
            GetMongodbatlasConfigWithHttpInfo();
        }

        /// <summary>
        /// Configure the  credentials that are used to manage Database Users. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetMongodbatlasConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/mongodbatlas/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMongodbatlasConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the  credentials that are used to manage Database Users. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetMongodbatlasConfigAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetMongodbatlasConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the  credentials that are used to manage Database Users. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetMongodbatlasConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/mongodbatlas/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMongodbatlasConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate MongoDB Atlas Programmatic API from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void GetMongodbatlasCredsName(string name)
        {
            GetMongodbatlasCredsNameWithHttpInfo(name);
        }

        /// <summary>
        /// Generate MongoDB Atlas Programmatic API from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetMongodbatlasCredsNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetMongodbatlasCredsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/mongodbatlas/creds/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMongodbatlasCredsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate MongoDB Atlas Programmatic API from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetMongodbatlasCredsNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetMongodbatlasCredsNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate MongoDB Atlas Programmatic API from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetMongodbatlasCredsNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetMongodbatlasCredsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/mongodbatlas/creds/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMongodbatlasCredsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the existing roles in this backend 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetMongodbatlasRoles(string list)
        {
            GetMongodbatlasRolesWithHttpInfo(list);
        }

        /// <summary>
        /// List the existing roles in this backend 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetMongodbatlasRolesWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetMongodbatlasRoles");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/mongodbatlas/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMongodbatlasRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the existing roles in this backend 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetMongodbatlasRolesAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetMongodbatlasRolesWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List the existing roles in this backend 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetMongodbatlasRolesWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetMongodbatlasRoles");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/mongodbatlas/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMongodbatlasRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <returns></returns>
        public void GetMongodbatlasRolesName(string name)
        {
            GetMongodbatlasRolesNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetMongodbatlasRolesNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetMongodbatlasRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/mongodbatlas/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMongodbatlasRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetMongodbatlasRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetMongodbatlasRolesNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetMongodbatlasRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetMongodbatlasRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/mongodbatlas/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMongodbatlasRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetNomadConfigAccess()
        {
            GetNomadConfigAccessWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetNomadConfigAccessWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/nomad/config/access", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNomadConfigAccess", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetNomadConfigAccessAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetNomadConfigAccessWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetNomadConfigAccessWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/nomad/config/access", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNomadConfigAccess", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the lease parameters for generated tokens 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetNomadConfigLease()
        {
            GetNomadConfigLeaseWithHttpInfo();
        }

        /// <summary>
        /// Configure the lease parameters for generated tokens 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetNomadConfigLeaseWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/nomad/config/lease", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNomadConfigLease", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the lease parameters for generated tokens 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetNomadConfigLeaseAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetNomadConfigLeaseWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the lease parameters for generated tokens 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetNomadConfigLeaseWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/nomad/config/lease", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNomadConfigLease", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void GetNomadCredsName(string name)
        {
            GetNomadCredsNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetNomadCredsNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetNomadCredsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/nomad/creds/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNomadCredsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetNomadCredsNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetNomadCredsNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetNomadCredsNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetNomadCredsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/nomad/creds/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNomadCredsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetNomadRole(string list)
        {
            GetNomadRoleWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetNomadRoleWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetNomadRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/nomad/role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNomadRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetNomadRoleAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetNomadRoleWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetNomadRoleWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetNomadRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/nomad/role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNomadRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void GetNomadRoleName(string name)
        {
            GetNomadRoleNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetNomadRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetNomadRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/nomad/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNomadRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetNomadRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetNomadRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetNomadRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetNomadRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/nomad/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNomadRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetOpenldapConfig()
        {
            GetOpenldapConfigWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetOpenldapConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/openldap/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpenldapConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetOpenldapConfigAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetOpenldapConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetOpenldapConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/openldap/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpenldapConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the dynamic role.</param>
        /// <returns></returns>
        public void GetOpenldapCredsName(string name)
        {
            GetOpenldapCredsNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the dynamic role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetOpenldapCredsNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetOpenldapCredsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/openldap/creds/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpenldapCredsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the dynamic role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetOpenldapCredsNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetOpenldapCredsNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the dynamic role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetOpenldapCredsNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetOpenldapCredsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/openldap/creds/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpenldapCredsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetOpenldapRole(string list)
        {
            GetOpenldapRoleWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetOpenldapRoleWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetOpenldapRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/openldap/role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpenldapRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetOpenldapRoleAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetOpenldapRoleWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetOpenldapRoleWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetOpenldapRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/openldap/role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpenldapRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <returns></returns>
        public void GetOpenldapRoleName(string name)
        {
            GetOpenldapRoleNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetOpenldapRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetOpenldapRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/openldap/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpenldapRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetOpenldapRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetOpenldapRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetOpenldapRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetOpenldapRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/openldap/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpenldapRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role.</param>
        /// <returns></returns>
        public void GetOpenldapStaticCredName(string name)
        {
            GetOpenldapStaticCredNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetOpenldapStaticCredNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetOpenldapStaticCredName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/openldap/static-cred/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpenldapStaticCredName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetOpenldapStaticCredNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetOpenldapStaticCredNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetOpenldapStaticCredNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetOpenldapStaticCredName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/openldap/static-cred/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpenldapStaticCredName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetOpenldapStaticRole(string list)
        {
            GetOpenldapStaticRoleWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetOpenldapStaticRoleWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetOpenldapStaticRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/openldap/static-role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpenldapStaticRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetOpenldapStaticRoleAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetOpenldapStaticRoleWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetOpenldapStaticRoleWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetOpenldapStaticRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/openldap/static-role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpenldapStaticRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void GetOpenldapStaticRoleName(string name)
        {
            GetOpenldapStaticRoleNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetOpenldapStaticRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetOpenldapStaticRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/openldap/static-role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpenldapStaticRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetOpenldapStaticRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetOpenldapStaticRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetOpenldapStaticRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetOpenldapStaticRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/openldap/static-role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpenldapStaticRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetPkiCa()
        {
            GetPkiCaWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiCaWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/ca", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCa", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiCaAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiCaWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiCaWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/ca", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCa", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetPkiCaChain()
        {
            GetPkiCaChainWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiCaChainWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/ca_chain", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCaChain", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiCaChainAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiCaChainWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiCaChainWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/ca_chain", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCaChain", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetPkiCaPem()
        {
            GetPkiCaPemWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiCaPemWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/ca/pem", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCaPem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiCaPemAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiCaPemWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiCaPemWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/ca/pem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCaPem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetPkiCertCaChain()
        {
            GetPkiCertCaChainWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiCertCaChainWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/cert/ca_chain", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCertCaChain", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiCertCaChainAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiCertCaChainWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiCertCaChainWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/cert/ca_chain", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCertCaChain", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetPkiCertCrl()
        {
            GetPkiCertCrlWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiCertCrlWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/cert/crl", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCertCrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiCertCrlAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiCertCrlWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiCertCrlWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/cert/crl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCertCrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <returns></returns>
        public void GetPkiCertSerial(string serial)
        {
            GetPkiCertSerialWithHttpInfo(serial);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiCertSerialWithHttpInfo(string serial)
        {
            // verify the required parameter 'serial' is set
            if (serial == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'serial' when calling SecretsApi->GetPkiCertSerial");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("serial", VaultClient.Client.ClientUtils.ParameterToString(serial)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/cert/{serial}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCertSerial", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiCertSerialAsync(string serial, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiCertSerialWithHttpInfoAsync(serial, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiCertSerialWithHttpInfoAsync(string serial, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'serial' is set
            if (serial == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'serial' when calling SecretsApi->GetPkiCertSerial");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("serial", VaultClient.Client.ClientUtils.ParameterToString(serial)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/cert/{serial}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCertSerial", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <returns></returns>
        public void GetPkiCertSerialRaw(string serial)
        {
            GetPkiCertSerialRawWithHttpInfo(serial);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiCertSerialRawWithHttpInfo(string serial)
        {
            // verify the required parameter 'serial' is set
            if (serial == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'serial' when calling SecretsApi->GetPkiCertSerialRaw");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("serial", VaultClient.Client.ClientUtils.ParameterToString(serial)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/cert/{serial}/raw", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCertSerialRaw", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiCertSerialRawAsync(string serial, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiCertSerialRawWithHttpInfoAsync(serial, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiCertSerialRawWithHttpInfoAsync(string serial, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'serial' is set
            if (serial == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'serial' when calling SecretsApi->GetPkiCertSerialRaw");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("serial", VaultClient.Client.ClientUtils.ParameterToString(serial)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/cert/{serial}/raw", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCertSerialRaw", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <returns></returns>
        public void GetPkiCertSerialRawPem(string serial)
        {
            GetPkiCertSerialRawPemWithHttpInfo(serial);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiCertSerialRawPemWithHttpInfo(string serial)
        {
            // verify the required parameter 'serial' is set
            if (serial == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'serial' when calling SecretsApi->GetPkiCertSerialRawPem");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("serial", VaultClient.Client.ClientUtils.ParameterToString(serial)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/cert/{serial}/raw/pem", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCertSerialRawPem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiCertSerialRawPemAsync(string serial, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiCertSerialRawPemWithHttpInfoAsync(serial, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial">Certificate serial number, in colon- or hyphen-separated octal</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiCertSerialRawPemWithHttpInfoAsync(string serial, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'serial' is set
            if (serial == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'serial' when calling SecretsApi->GetPkiCertSerialRawPem");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("serial", VaultClient.Client.ClientUtils.ParameterToString(serial)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/cert/{serial}/raw/pem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCertSerialRawPem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetPkiCerts(string list)
        {
            GetPkiCertsWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiCertsWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetPkiCerts");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/certs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCerts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiCertsAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiCertsWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiCertsWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetPkiCerts");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/certs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCerts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetPkiConfigCrl()
        {
            GetPkiConfigCrlWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiConfigCrlWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/config/crl", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiConfigCrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiConfigCrlAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiConfigCrlWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiConfigCrlWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/config/crl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiConfigCrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetPkiConfigIssuers()
        {
            GetPkiConfigIssuersWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiConfigIssuersWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/config/issuers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiConfigIssuers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiConfigIssuersAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiConfigIssuersWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiConfigIssuersWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/config/issuers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiConfigIssuers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetPkiConfigKeys()
        {
            GetPkiConfigKeysWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiConfigKeysWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/config/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiConfigKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiConfigKeysAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiConfigKeysWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiConfigKeysWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/config/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiConfigKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetPkiConfigUrls()
        {
            GetPkiConfigUrlsWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiConfigUrlsWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/config/urls", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiConfigUrls", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiConfigUrlsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiConfigUrlsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiConfigUrlsWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/config/urls", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiConfigUrls", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetPkiCrl()
        {
            GetPkiCrlWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiCrlWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/crl", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiCrlAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiCrlWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiCrlWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/crl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetPkiCrlPem()
        {
            GetPkiCrlPemWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiCrlPemWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/crl/pem", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCrlPem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiCrlPemAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiCrlPemWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiCrlPemWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/crl/pem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCrlPem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetPkiCrlRotate()
        {
            GetPkiCrlRotateWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiCrlRotateWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/crl/rotate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCrlRotate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiCrlRotateAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiCrlRotateWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiCrlRotateWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/crl/rotate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiCrlRotate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetPkiDer()
        {
            GetPkiDerWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiDerWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki//der", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiDer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiDerAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiDerWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiDerWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki//der", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiDer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <returns></returns>
        public void GetPkiIssuerRefCrlPem(string issuerRef)
        {
            GetPkiIssuerRefCrlPemWithHttpInfo(issuerRef);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiIssuerRefCrlPemWithHttpInfo(string issuerRef)
        {
            // verify the required parameter 'issuerRef' is set
            if (issuerRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'issuerRef' when calling SecretsApi->GetPkiIssuerRefCrlPem");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("issuer_ref", VaultClient.Client.ClientUtils.ParameterToString(issuerRef)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/{issuer_ref}/crl/pem", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiIssuerRefCrlPem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiIssuerRefCrlPemAsync(string issuerRef, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiIssuerRefCrlPemWithHttpInfoAsync(issuerRef, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiIssuerRefCrlPemWithHttpInfoAsync(string issuerRef, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'issuerRef' is set
            if (issuerRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'issuerRef' when calling SecretsApi->GetPkiIssuerRefCrlPem");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("issuer_ref", VaultClient.Client.ClientUtils.ParameterToString(issuerRef)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/{issuer_ref}/crl/pem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiIssuerRefCrlPem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <returns></returns>
        public void GetPkiIssuerRefDerPem(string issuerRef)
        {
            GetPkiIssuerRefDerPemWithHttpInfo(issuerRef);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiIssuerRefDerPemWithHttpInfo(string issuerRef)
        {
            // verify the required parameter 'issuerRef' is set
            if (issuerRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'issuerRef' when calling SecretsApi->GetPkiIssuerRefDerPem");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("issuer_ref", VaultClient.Client.ClientUtils.ParameterToString(issuerRef)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/{issuer_ref}/der|/pem", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiIssuerRefDerPem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiIssuerRefDerPemAsync(string issuerRef, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiIssuerRefDerPemWithHttpInfoAsync(issuerRef, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiIssuerRefDerPemWithHttpInfoAsync(string issuerRef, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'issuerRef' is set
            if (issuerRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'issuerRef' when calling SecretsApi->GetPkiIssuerRefDerPem");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("issuer_ref", VaultClient.Client.ClientUtils.ParameterToString(issuerRef)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/{issuer_ref}/der|/pem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiIssuerRefDerPem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetPkiIssuers(string list)
        {
            GetPkiIssuersWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiIssuersWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetPkiIssuers");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/issuers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiIssuers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiIssuersAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiIssuersWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiIssuersWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetPkiIssuers");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/issuers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiIssuers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetPkiJson()
        {
            GetPkiJsonWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiJsonWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki//json", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiJson", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiJsonAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiJsonWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiJsonWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki//json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiJson", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <returns></returns>
        public void GetPkiKeyKeyRef(string keyRef)
        {
            GetPkiKeyKeyRefWithHttpInfo(keyRef);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiKeyKeyRefWithHttpInfo(string keyRef)
        {
            // verify the required parameter 'keyRef' is set
            if (keyRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'keyRef' when calling SecretsApi->GetPkiKeyKeyRef");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key_ref", VaultClient.Client.ClientUtils.ParameterToString(keyRef)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/key/{key_ref}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiKeyKeyRef", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiKeyKeyRefAsync(string keyRef, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiKeyKeyRefWithHttpInfoAsync(keyRef, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiKeyKeyRefWithHttpInfoAsync(string keyRef, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'keyRef' is set
            if (keyRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'keyRef' when calling SecretsApi->GetPkiKeyKeyRef");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key_ref", VaultClient.Client.ClientUtils.ParameterToString(keyRef)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/key/{key_ref}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiKeyKeyRef", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetPkiKeys(string list)
        {
            GetPkiKeysWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiKeysWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetPkiKeys");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiKeysAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiKeysWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiKeysWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetPkiKeys");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetPkiRoles(string list)
        {
            GetPkiRolesWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiRolesWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetPkiRoles");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiRolesAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiRolesWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiRolesWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetPkiRoles");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void GetPkiRolesName(string name)
        {
            GetPkiRolesNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiRolesNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetPkiRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiRolesNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetPkiRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetPkiTidyStatus()
        {
            GetPkiTidyStatusWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetPkiTidyStatusWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/pki/tidy-status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiTidyStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetPkiTidyStatusAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetPkiTidyStatusWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetPkiTidyStatusWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/pki/tidy-status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPkiTidyStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the lease parameters for generated credentials 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetRabbitmqConfigLease()
        {
            GetRabbitmqConfigLeaseWithHttpInfo();
        }

        /// <summary>
        /// Configure the lease parameters for generated credentials 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetRabbitmqConfigLeaseWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/rabbitmq/config/lease", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRabbitmqConfigLease", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the lease parameters for generated credentials 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetRabbitmqConfigLeaseAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetRabbitmqConfigLeaseWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the lease parameters for generated credentials 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetRabbitmqConfigLeaseWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/rabbitmq/config/lease", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRabbitmqConfigLease", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request RabbitMQ credentials for a certain role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        public void GetRabbitmqCredsName(string name)
        {
            GetRabbitmqCredsNameWithHttpInfo(name);
        }

        /// <summary>
        /// Request RabbitMQ credentials for a certain role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetRabbitmqCredsNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetRabbitmqCredsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/rabbitmq/creds/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRabbitmqCredsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request RabbitMQ credentials for a certain role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetRabbitmqCredsNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetRabbitmqCredsNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Request RabbitMQ credentials for a certain role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetRabbitmqCredsNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetRabbitmqCredsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/rabbitmq/creds/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRabbitmqCredsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the roles that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetRabbitmqRoles(string list)
        {
            GetRabbitmqRolesWithHttpInfo(list);
        }

        /// <summary>
        /// Manage the roles that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetRabbitmqRolesWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetRabbitmqRoles");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/rabbitmq/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRabbitmqRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the roles that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetRabbitmqRolesAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetRabbitmqRolesWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage the roles that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetRabbitmqRolesWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetRabbitmqRoles");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/rabbitmq/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRabbitmqRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the roles that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        public void GetRabbitmqRolesName(string name)
        {
            GetRabbitmqRolesNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage the roles that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetRabbitmqRolesNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetRabbitmqRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/rabbitmq/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRabbitmqRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the roles that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetRabbitmqRolesNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetRabbitmqRolesNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage the roles that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetRabbitmqRolesNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetRabbitmqRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/rabbitmq/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRabbitmqRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the backend level settings. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetSecretConfig()
        {
            GetSecretConfigWithHttpInfo();
        }

        /// <summary>
        /// Read the backend level settings. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetSecretConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/secret/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecretConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the backend level settings. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetSecretConfigAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetSecretConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read the backend level settings. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetSecretConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/secret/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecretConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns></returns>
        public void GetSecretDataPath(string path)
        {
            GetSecretDataPathWithHttpInfo(path);
        }

        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetSecretDataPathWithHttpInfo(string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->GetSecretDataPath");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/secret/data/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecretDataPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetSecretDataPathAsync(string path, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetSecretDataPathWithHttpInfoAsync(path, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetSecretDataPathWithHttpInfoAsync(string path, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->GetSecretDataPath");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/secret/data/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecretDataPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configures settings for the KV store 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns></returns>
        public void GetSecretMetadataPath(string path, string list = default(string))
        {
            GetSecretMetadataPathWithHttpInfo(path, list);
        }

        /// <summary>
        /// Configures settings for the KV store 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetSecretMetadataPathWithHttpInfo(string path, string list = default(string))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->GetSecretMetadataPath");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (list != null)
            {
                localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/secret/metadata/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecretMetadataPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configures settings for the KV store 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetSecretMetadataPathAsync(string path, string list = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetSecretMetadataPathWithHttpInfoAsync(path, list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configures settings for the KV store 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetSecretMetadataPathWithHttpInfoAsync(string path, string list = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->GetSecretMetadataPath");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (list != null)
            {
                localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/secret/metadata/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecretMetadataPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the structure of a secret entry from the Key-Value store with the values removed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns></returns>
        public void GetSecretSubkeysPath(string path)
        {
            GetSecretSubkeysPathWithHttpInfo(path);
        }

        /// <summary>
        /// Read the structure of a secret entry from the Key-Value store with the values removed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetSecretSubkeysPathWithHttpInfo(string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->GetSecretSubkeysPath");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/secret/subkeys/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecretSubkeysPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the structure of a secret entry from the Key-Value store with the values removed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetSecretSubkeysPathAsync(string path, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetSecretSubkeysPathWithHttpInfoAsync(path, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read the structure of a secret entry from the Key-Value store with the values removed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetSecretSubkeysPathWithHttpInfoAsync(string path, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->GetSecretSubkeysPath");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/secret/subkeys/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecretSubkeysPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the SSH private key used for signing certificates. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetSshConfigCa()
        {
            GetSshConfigCaWithHttpInfo();
        }

        /// <summary>
        /// Set the SSH private key used for signing certificates. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetSshConfigCaWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/ssh/config/ca", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSshConfigCa", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the SSH private key used for signing certificates. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetSshConfigCaAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetSshConfigCaWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set the SSH private key used for signing certificates. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetSshConfigCaWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/ssh/config/ca", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSshConfigCa", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign zero address as default CIDR block for select roles. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetSshConfigZeroaddress()
        {
            GetSshConfigZeroaddressWithHttpInfo();
        }

        /// <summary>
        /// Assign zero address as default CIDR block for select roles. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetSshConfigZeroaddressWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/ssh/config/zeroaddress", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSshConfigZeroaddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign zero address as default CIDR block for select roles. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetSshConfigZeroaddressAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetSshConfigZeroaddressWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Assign zero address as default CIDR block for select roles. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetSshConfigZeroaddressWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/ssh/config/zeroaddress", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSshConfigZeroaddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the public key. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetSshPublicKey()
        {
            GetSshPublicKeyWithHttpInfo();
        }

        /// <summary>
        /// Retrieve the public key. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetSshPublicKeyWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/ssh/public_key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSshPublicKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the public key. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetSshPublicKeyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetSshPublicKeyWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieve the public key. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetSshPublicKeyWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/ssh/public_key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSshPublicKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetSshRoles(string list)
        {
            GetSshRolesWithHttpInfo(list);
        }

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetSshRolesWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetSshRoles");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/ssh/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSshRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetSshRolesAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetSshRolesWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetSshRolesWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetSshRoles");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/ssh/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSshRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <returns></returns>
        public void GetSshRolesRole(string role)
        {
            GetSshRolesRoleWithHttpInfo(role);
        }

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetSshRolesRoleWithHttpInfo(string role)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->GetSshRolesRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/ssh/roles/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSshRolesRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetSshRolesRoleAsync(string role, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetSshRolesRoleWithHttpInfoAsync(role, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetSshRolesRoleWithHttpInfoAsync(string role, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->GetSshRolesRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/ssh/roles/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSshRolesRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetTerraformConfig()
        {
            GetTerraformConfigWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetTerraformConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/terraform/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTerraformConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetTerraformConfigAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetTerraformConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetTerraformConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/terraform/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTerraformConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a Terraform Cloud or Enterprise API token from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void GetTerraformCredsName(string name)
        {
            GetTerraformCredsNameWithHttpInfo(name);
        }

        /// <summary>
        /// Generate a Terraform Cloud or Enterprise API token from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetTerraformCredsNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetTerraformCredsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/terraform/creds/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTerraformCredsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a Terraform Cloud or Enterprise API token from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetTerraformCredsNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetTerraformCredsNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate a Terraform Cloud or Enterprise API token from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetTerraformCredsNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetTerraformCredsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/terraform/creds/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTerraformCredsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetTerraformRole(string list)
        {
            GetTerraformRoleWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetTerraformRoleWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetTerraformRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/terraform/role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTerraformRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetTerraformRoleAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetTerraformRoleWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetTerraformRoleWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetTerraformRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/terraform/role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTerraformRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void GetTerraformRoleName(string name)
        {
            GetTerraformRoleNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetTerraformRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetTerraformRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/terraform/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTerraformRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetTerraformRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetTerraformRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetTerraformRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetTerraformRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/terraform/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTerraformRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request time-based one-time use password or validate a password for a certain key . 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <returns></returns>
        public void GetTotpCodeName(string name)
        {
            GetTotpCodeNameWithHttpInfo(name);
        }

        /// <summary>
        /// Request time-based one-time use password or validate a password for a certain key . 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetTotpCodeNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetTotpCodeName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/totp/code/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTotpCodeName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request time-based one-time use password or validate a password for a certain key . 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetTotpCodeNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetTotpCodeNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Request time-based one-time use password or validate a password for a certain key . 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetTotpCodeNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetTotpCodeName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/totp/code/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTotpCodeName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the keys that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetTotpKeys(string list)
        {
            GetTotpKeysWithHttpInfo(list);
        }

        /// <summary>
        /// Manage the keys that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetTotpKeysWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetTotpKeys");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/totp/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTotpKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the keys that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetTotpKeysAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetTotpKeysWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage the keys that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetTotpKeysWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetTotpKeys");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/totp/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTotpKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the keys that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <returns></returns>
        public void GetTotpKeysName(string name)
        {
            GetTotpKeysNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage the keys that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetTotpKeysNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetTotpKeysName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/totp/keys/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTotpKeysName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the keys that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetTotpKeysNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetTotpKeysNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage the keys that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetTotpKeysNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetTotpKeysName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/totp/keys/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTotpKeysName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Backup the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns></returns>
        public void GetTransitBackupName(string name)
        {
            GetTransitBackupNameWithHttpInfo(name);
        }

        /// <summary>
        /// Backup the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetTransitBackupNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetTransitBackupName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/transit/backup/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransitBackupName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Backup the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetTransitBackupNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetTransitBackupNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Backup the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetTransitBackupNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetTransitBackupName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/transit/backup/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransitBackupName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the size of the active cache 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetTransitCacheConfig()
        {
            GetTransitCacheConfigWithHttpInfo();
        }

        /// <summary>
        /// Returns the size of the active cache 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetTransitCacheConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/transit/cache-config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransitCacheConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the size of the active cache 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetTransitCacheConfigAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetTransitCacheConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Returns the size of the active cache 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetTransitCacheConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/transit/cache-config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransitCacheConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export named encryption or signing key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="type">Type of key to export (encryption-key, signing-key, hmac-key)</param>
        /// <returns></returns>
        public void GetTransitExportTypeName(string name, string type)
        {
            GetTransitExportTypeNameWithHttpInfo(name, type);
        }

        /// <summary>
        /// Export named encryption or signing key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="type">Type of key to export (encryption-key, signing-key, hmac-key)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetTransitExportTypeNameWithHttpInfo(string name, string type)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetTransitExportTypeName");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'type' when calling SecretsApi->GetTransitExportTypeName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", VaultClient.Client.ClientUtils.ParameterToString(type)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/transit/export/{type}/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransitExportTypeName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export named encryption or signing key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="type">Type of key to export (encryption-key, signing-key, hmac-key)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetTransitExportTypeNameAsync(string name, string type, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetTransitExportTypeNameWithHttpInfoAsync(name, type, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Export named encryption or signing key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="type">Type of key to export (encryption-key, signing-key, hmac-key)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetTransitExportTypeNameWithHttpInfoAsync(string name, string type, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetTransitExportTypeName");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'type' when calling SecretsApi->GetTransitExportTypeName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", VaultClient.Client.ClientUtils.ParameterToString(type)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/transit/export/{type}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransitExportTypeName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export named encryption or signing key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="type">Type of key to export (encryption-key, signing-key, hmac-key)</param>
        /// <param name="version">Version of the key</param>
        /// <returns></returns>
        public void GetTransitExportTypeNameVersion(string name, string type, string version)
        {
            GetTransitExportTypeNameVersionWithHttpInfo(name, type, version);
        }

        /// <summary>
        /// Export named encryption or signing key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="type">Type of key to export (encryption-key, signing-key, hmac-key)</param>
        /// <param name="version">Version of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetTransitExportTypeNameVersionWithHttpInfo(string name, string type, string version)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetTransitExportTypeNameVersion");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'type' when calling SecretsApi->GetTransitExportTypeNameVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'version' when calling SecretsApi->GetTransitExportTypeNameVersion");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", VaultClient.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", VaultClient.Client.ClientUtils.ParameterToString(version)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/transit/export/{type}/{name}/{version}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransitExportTypeNameVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export named encryption or signing key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="type">Type of key to export (encryption-key, signing-key, hmac-key)</param>
        /// <param name="version">Version of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetTransitExportTypeNameVersionAsync(string name, string type, string version, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetTransitExportTypeNameVersionWithHttpInfoAsync(name, type, version, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Export named encryption or signing key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="type">Type of key to export (encryption-key, signing-key, hmac-key)</param>
        /// <param name="version">Version of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetTransitExportTypeNameVersionWithHttpInfoAsync(string name, string type, string version, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetTransitExportTypeNameVersion");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'type' when calling SecretsApi->GetTransitExportTypeNameVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'version' when calling SecretsApi->GetTransitExportTypeNameVersion");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", VaultClient.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", VaultClient.Client.ClientUtils.ParameterToString(version)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/transit/export/{type}/{name}/{version}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransitExportTypeNameVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Managed named encryption keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetTransitKeys(string list)
        {
            GetTransitKeysWithHttpInfo(list);
        }

        /// <summary>
        /// Managed named encryption keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetTransitKeysWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetTransitKeys");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/transit/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransitKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Managed named encryption keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetTransitKeysAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetTransitKeysWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Managed named encryption keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetTransitKeysWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling SecretsApi->GetTransitKeys");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/transit/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransitKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Managed named encryption keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns></returns>
        public void GetTransitKeysName(string name)
        {
            GetTransitKeysNameWithHttpInfo(name);
        }

        /// <summary>
        /// Managed named encryption keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetTransitKeysNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetTransitKeysName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/transit/keys/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransitKeysName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Managed named encryption keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetTransitKeysNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetTransitKeysNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Managed named encryption keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetTransitKeysNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->GetTransitKeysName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/transit/keys/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransitKeysName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the public key to use for wrapping imported keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetTransitWrappingKey()
        {
            GetTransitWrappingKeyWithHttpInfo();
        }

        /// <summary>
        /// Returns the public key to use for wrapping imported keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetTransitWrappingKeyWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/transit/wrapping_key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransitWrappingKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the public key to use for wrapping imported keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetTransitWrappingKeyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetTransitWrappingKeyWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Returns the public key to use for wrapping imported keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetTransitWrappingKeyWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/transit/wrapping_key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransitWrappingKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the AD server to connect to, along with password options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAdConfig(AdConfigRequest adConfigRequest = default(AdConfigRequest))
        {
            PostAdConfigWithHttpInfo(adConfigRequest);
        }

        /// <summary>
        /// Configure the AD server to connect to, along with password options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAdConfigWithHttpInfo(AdConfigRequest adConfigRequest = default(AdConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = adConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/ad/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAdConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the AD server to connect to, along with password options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostAdConfigAsync(AdConfigRequest adConfigRequest = default(AdConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostAdConfigWithHttpInfoAsync(adConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the AD server to connect to, along with password options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="adConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostAdConfigWithHttpInfoAsync(AdConfigRequest adConfigRequest = default(AdConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = adConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/ad/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAdConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check service accounts in to the library. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryManageCheckInRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAdLibraryManageNameCheckIn(string name, AdLibraryManageCheckInRequest adLibraryManageCheckInRequest = default(AdLibraryManageCheckInRequest))
        {
            PostAdLibraryManageNameCheckInWithHttpInfo(name, adLibraryManageCheckInRequest);
        }

        /// <summary>
        /// Check service accounts in to the library. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryManageCheckInRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAdLibraryManageNameCheckInWithHttpInfo(string name, AdLibraryManageCheckInRequest adLibraryManageCheckInRequest = default(AdLibraryManageCheckInRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostAdLibraryManageNameCheckIn");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = adLibraryManageCheckInRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/ad/library/manage/{name}/check-in", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAdLibraryManageNameCheckIn", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check service accounts in to the library. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryManageCheckInRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostAdLibraryManageNameCheckInAsync(string name, AdLibraryManageCheckInRequest adLibraryManageCheckInRequest = default(AdLibraryManageCheckInRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostAdLibraryManageNameCheckInWithHttpInfoAsync(name, adLibraryManageCheckInRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Check service accounts in to the library. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryManageCheckInRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostAdLibraryManageNameCheckInWithHttpInfoAsync(string name, AdLibraryManageCheckInRequest adLibraryManageCheckInRequest = default(AdLibraryManageCheckInRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostAdLibraryManageNameCheckIn");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = adLibraryManageCheckInRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/ad/library/manage/{name}/check-in", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAdLibraryManageNameCheckIn", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a library set. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAdLibraryName(string name, AdLibraryRequest adLibraryRequest = default(AdLibraryRequest))
        {
            PostAdLibraryNameWithHttpInfo(name, adLibraryRequest);
        }

        /// <summary>
        /// Update a library set. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAdLibraryNameWithHttpInfo(string name, AdLibraryRequest adLibraryRequest = default(AdLibraryRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostAdLibraryName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = adLibraryRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/ad/library/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAdLibraryName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a library set. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostAdLibraryNameAsync(string name, AdLibraryRequest adLibraryRequest = default(AdLibraryRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostAdLibraryNameWithHttpInfoAsync(name, adLibraryRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update a library set. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostAdLibraryNameWithHttpInfoAsync(string name, AdLibraryRequest adLibraryRequest = default(AdLibraryRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostAdLibraryName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = adLibraryRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/ad/library/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAdLibraryName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check service accounts in to the library. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryCheckInRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAdLibraryNameCheckIn(string name, AdLibraryCheckInRequest adLibraryCheckInRequest = default(AdLibraryCheckInRequest))
        {
            PostAdLibraryNameCheckInWithHttpInfo(name, adLibraryCheckInRequest);
        }

        /// <summary>
        /// Check service accounts in to the library. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryCheckInRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAdLibraryNameCheckInWithHttpInfo(string name, AdLibraryCheckInRequest adLibraryCheckInRequest = default(AdLibraryCheckInRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostAdLibraryNameCheckIn");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = adLibraryCheckInRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/ad/library/{name}/check-in", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAdLibraryNameCheckIn", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check service accounts in to the library. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryCheckInRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostAdLibraryNameCheckInAsync(string name, AdLibraryCheckInRequest adLibraryCheckInRequest = default(AdLibraryCheckInRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostAdLibraryNameCheckInWithHttpInfoAsync(name, adLibraryCheckInRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Check service accounts in to the library. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set.</param>
        /// <param name="adLibraryCheckInRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostAdLibraryNameCheckInWithHttpInfoAsync(string name, AdLibraryCheckInRequest adLibraryCheckInRequest = default(AdLibraryCheckInRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostAdLibraryNameCheckIn");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = adLibraryCheckInRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/ad/library/{name}/check-in", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAdLibraryNameCheckIn", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check a service account out from the library. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set</param>
        /// <param name="adLibraryCheckOutRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAdLibraryNameCheckOut(string name, AdLibraryCheckOutRequest adLibraryCheckOutRequest = default(AdLibraryCheckOutRequest))
        {
            PostAdLibraryNameCheckOutWithHttpInfo(name, adLibraryCheckOutRequest);
        }

        /// <summary>
        /// Check a service account out from the library. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set</param>
        /// <param name="adLibraryCheckOutRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAdLibraryNameCheckOutWithHttpInfo(string name, AdLibraryCheckOutRequest adLibraryCheckOutRequest = default(AdLibraryCheckOutRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostAdLibraryNameCheckOut");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = adLibraryCheckOutRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/ad/library/{name}/check-out", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAdLibraryNameCheckOut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check a service account out from the library. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set</param>
        /// <param name="adLibraryCheckOutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostAdLibraryNameCheckOutAsync(string name, AdLibraryCheckOutRequest adLibraryCheckOutRequest = default(AdLibraryCheckOutRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostAdLibraryNameCheckOutWithHttpInfoAsync(name, adLibraryCheckOutRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Check a service account out from the library. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the set</param>
        /// <param name="adLibraryCheckOutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostAdLibraryNameCheckOutWithHttpInfoAsync(string name, AdLibraryCheckOutRequest adLibraryCheckOutRequest = default(AdLibraryCheckOutRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostAdLibraryNameCheckOut");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = adLibraryCheckOutRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/ad/library/{name}/check-out", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAdLibraryNameCheckOut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="adRolesRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAdRolesName(string name, AdRolesRequest adRolesRequest = default(AdRolesRequest))
        {
            PostAdRolesNameWithHttpInfo(name, adRolesRequest);
        }

        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="adRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAdRolesNameWithHttpInfo(string name, AdRolesRequest adRolesRequest = default(AdRolesRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostAdRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = adRolesRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/ad/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAdRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="adRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostAdRolesNameAsync(string name, AdRolesRequest adRolesRequest = default(AdRolesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostAdRolesNameWithHttpInfoAsync(name, adRolesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage roles to build links between Vault and Active Directory service accounts. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="adRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostAdRolesNameWithHttpInfoAsync(string name, AdRolesRequest adRolesRequest = default(AdRolesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostAdRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = adRolesRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/ad/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAdRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role</param>
        /// <returns></returns>
        public void PostAdRotateRoleName(string name)
        {
            PostAdRotateRoleNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAdRotateRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostAdRotateRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/ad/rotate-role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAdRotateRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostAdRotateRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostAdRotateRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostAdRotateRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostAdRotateRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/ad/rotate-role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAdRotateRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void PostAdRotateRoot()
        {
            PostAdRotateRootWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAdRotateRootWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/ad/rotate-root", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAdRotateRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostAdRotateRootAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostAdRotateRootWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostAdRotateRootWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/ad/rotate-root", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAdRotateRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alicloudConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAlicloudConfig(AlicloudConfigRequest alicloudConfigRequest = default(AlicloudConfigRequest))
        {
            PostAlicloudConfigWithHttpInfo(alicloudConfigRequest);
        }

        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alicloudConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAlicloudConfigWithHttpInfo(AlicloudConfigRequest alicloudConfigRequest = default(AlicloudConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = alicloudConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/alicloud/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAlicloudConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alicloudConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostAlicloudConfigAsync(AlicloudConfigRequest alicloudConfigRequest = default(AlicloudConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostAlicloudConfigWithHttpInfoAsync(alicloudConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the access key and secret to use for RAM and STS calls. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alicloudConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostAlicloudConfigWithHttpInfoAsync(AlicloudConfigRequest alicloudConfigRequest = default(AlicloudConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = alicloudConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/alicloud/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAlicloudConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <param name="alicloudRoleRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAlicloudRoleName(string name, AlicloudRoleRequest alicloudRoleRequest = default(AlicloudRoleRequest))
        {
            PostAlicloudRoleNameWithHttpInfo(name, alicloudRoleRequest);
        }

        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <param name="alicloudRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAlicloudRoleNameWithHttpInfo(string name, AlicloudRoleRequest alicloudRoleRequest = default(AlicloudRoleRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostAlicloudRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = alicloudRoleRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/alicloud/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAlicloudRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <param name="alicloudRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostAlicloudRoleNameAsync(string name, AlicloudRoleRequest alicloudRoleRequest = default(AlicloudRoleRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostAlicloudRoleNameWithHttpInfoAsync(name, alicloudRoleRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read, write and reference policies and roles that API keys or STS credentials can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the role.</param>
        /// <param name="alicloudRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostAlicloudRoleNameWithHttpInfoAsync(string name, AlicloudRoleRequest alicloudRoleRequest = default(AlicloudRoleRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostAlicloudRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = alicloudRoleRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/alicloud/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAlicloudRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the default lease information for generated credentials. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigLeaseRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAwsConfigLease(AwsConfigLeaseRequest awsConfigLeaseRequest = default(AwsConfigLeaseRequest))
        {
            PostAwsConfigLeaseWithHttpInfo(awsConfigLeaseRequest);
        }

        /// <summary>
        /// Configure the default lease information for generated credentials. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigLeaseRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAwsConfigLeaseWithHttpInfo(AwsConfigLeaseRequest awsConfigLeaseRequest = default(AwsConfigLeaseRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsConfigLeaseRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/aws/config/lease", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAwsConfigLease", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the default lease information for generated credentials. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigLeaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostAwsConfigLeaseAsync(AwsConfigLeaseRequest awsConfigLeaseRequest = default(AwsConfigLeaseRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostAwsConfigLeaseWithHttpInfoAsync(awsConfigLeaseRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the default lease information for generated credentials. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigLeaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostAwsConfigLeaseWithHttpInfoAsync(AwsConfigLeaseRequest awsConfigLeaseRequest = default(AwsConfigLeaseRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsConfigLeaseRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/aws/config/lease", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAwsConfigLease", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the root credentials that are used to manage IAM. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigRootRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAwsConfigRoot(AwsConfigRootRequest awsConfigRootRequest = default(AwsConfigRootRequest))
        {
            PostAwsConfigRootWithHttpInfo(awsConfigRootRequest);
        }

        /// <summary>
        /// Configure the root credentials that are used to manage IAM. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigRootRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAwsConfigRootWithHttpInfo(AwsConfigRootRequest awsConfigRootRequest = default(AwsConfigRootRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsConfigRootRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/aws/config/root", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAwsConfigRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the root credentials that are used to manage IAM. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigRootRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostAwsConfigRootAsync(AwsConfigRootRequest awsConfigRootRequest = default(AwsConfigRootRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostAwsConfigRootWithHttpInfoAsync(awsConfigRootRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the root credentials that are used to manage IAM. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigRootRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostAwsConfigRootWithHttpInfoAsync(AwsConfigRootRequest awsConfigRootRequest = default(AwsConfigRootRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsConfigRootRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/aws/config/root", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAwsConfigRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void PostAwsConfigRotateRoot()
        {
            PostAwsConfigRotateRootWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAwsConfigRotateRootWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/aws/config/rotate-root", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAwsConfigRotateRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostAwsConfigRotateRootAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostAwsConfigRotateRootWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostAwsConfigRotateRootWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/aws/config/rotate-root", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAwsConfigRotateRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate AWS credentials from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsCredsRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAwsCreds(AwsCredsRequest awsCredsRequest = default(AwsCredsRequest))
        {
            PostAwsCredsWithHttpInfo(awsCredsRequest);
        }

        /// <summary>
        /// Generate AWS credentials from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsCredsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAwsCredsWithHttpInfo(AwsCredsRequest awsCredsRequest = default(AwsCredsRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsCredsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/aws/creds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAwsCreds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate AWS credentials from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsCredsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostAwsCredsAsync(AwsCredsRequest awsCredsRequest = default(AwsCredsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostAwsCredsWithHttpInfoAsync(awsCredsRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate AWS credentials from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsCredsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostAwsCredsWithHttpInfoAsync(AwsCredsRequest awsCredsRequest = default(AwsCredsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsCredsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/aws/creds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAwsCreds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="awsRolesRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAwsRolesName(string name, AwsRolesRequest awsRolesRequest = default(AwsRolesRequest))
        {
            PostAwsRolesNameWithHttpInfo(name, awsRolesRequest);
        }

        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="awsRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAwsRolesNameWithHttpInfo(string name, AwsRolesRequest awsRolesRequest = default(AwsRolesRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostAwsRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = awsRolesRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/aws/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAwsRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="awsRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostAwsRolesNameAsync(string name, AwsRolesRequest awsRolesRequest = default(AwsRolesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostAwsRolesNameWithHttpInfoAsync(name, awsRolesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read, write and reference IAM policies that access keys can be made for. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="awsRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostAwsRolesNameWithHttpInfoAsync(string name, AwsRolesRequest awsRolesRequest = default(AwsRolesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostAwsRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = awsRolesRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/aws/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAwsRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate AWS credentials from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="awsStsRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAwsStsName(string name, AwsStsRequest awsStsRequest = default(AwsStsRequest))
        {
            PostAwsStsNameWithHttpInfo(name, awsStsRequest);
        }

        /// <summary>
        /// Generate AWS credentials from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="awsStsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAwsStsNameWithHttpInfo(string name, AwsStsRequest awsStsRequest = default(AwsStsRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostAwsStsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = awsStsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/aws/sts/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAwsStsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate AWS credentials from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="awsStsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostAwsStsNameAsync(string name, AwsStsRequest awsStsRequest = default(AwsStsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostAwsStsNameWithHttpInfoAsync(name, awsStsRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate AWS credentials from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="awsStsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostAwsStsNameWithHttpInfoAsync(string name, AwsStsRequest awsStsRequest = default(AwsStsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostAwsStsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = awsStsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/aws/sts/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAwsStsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAzureConfig(AzureConfigRequest azureConfigRequest = default(AzureConfigRequest))
        {
            PostAzureConfigWithHttpInfo(azureConfigRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAzureConfigWithHttpInfo(AzureConfigRequest azureConfigRequest = default(AzureConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = azureConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/azure/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAzureConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostAzureConfigAsync(AzureConfigRequest azureConfigRequest = default(AzureConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostAzureConfigWithHttpInfoAsync(azureConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostAzureConfigWithHttpInfoAsync(AzureConfigRequest azureConfigRequest = default(AzureConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = azureConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/azure/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAzureConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="azureRolesRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAzureRolesName(string name, AzureRolesRequest azureRolesRequest = default(AzureRolesRequest))
        {
            PostAzureRolesNameWithHttpInfo(name, azureRolesRequest);
        }

        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="azureRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAzureRolesNameWithHttpInfo(string name, AzureRolesRequest azureRolesRequest = default(AzureRolesRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostAzureRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = azureRolesRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/azure/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAzureRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="azureRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostAzureRolesNameAsync(string name, AzureRolesRequest azureRolesRequest = default(AzureRolesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostAzureRolesNameWithHttpInfoAsync(name, azureRolesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage the Vault roles used to generate Azure credentials. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="azureRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostAzureRolesNameWithHttpInfoAsync(string name, AzureRolesRequest azureRolesRequest = default(AzureRolesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostAzureRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = azureRolesRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/azure/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAzureRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void PostAzureRotateRoot()
        {
            PostAzureRotateRootWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAzureRotateRootWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/azure/rotate-root", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAzureRotateRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostAzureRotateRootAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostAzureRotateRootWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostAzureRotateRootWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/azure/rotate-root", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAzureRotateRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consulConfigAccessRequest"> (optional)</param>
        /// <returns></returns>
        public void PostConsulConfigAccess(ConsulConfigAccessRequest consulConfigAccessRequest = default(ConsulConfigAccessRequest))
        {
            PostConsulConfigAccessWithHttpInfo(consulConfigAccessRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consulConfigAccessRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostConsulConfigAccessWithHttpInfo(ConsulConfigAccessRequest consulConfigAccessRequest = default(ConsulConfigAccessRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = consulConfigAccessRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/consul/config/access", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostConsulConfigAccess", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consulConfigAccessRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostConsulConfigAccessAsync(ConsulConfigAccessRequest consulConfigAccessRequest = default(ConsulConfigAccessRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostConsulConfigAccessWithHttpInfoAsync(consulConfigAccessRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consulConfigAccessRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostConsulConfigAccessWithHttpInfoAsync(ConsulConfigAccessRequest consulConfigAccessRequest = default(ConsulConfigAccessRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = consulConfigAccessRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/consul/config/access", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostConsulConfigAccess", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="consulRolesRequest"> (optional)</param>
        /// <returns></returns>
        public void PostConsulRolesName(string name, ConsulRolesRequest consulRolesRequest = default(ConsulRolesRequest))
        {
            PostConsulRolesNameWithHttpInfo(name, consulRolesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="consulRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostConsulRolesNameWithHttpInfo(string name, ConsulRolesRequest consulRolesRequest = default(ConsulRolesRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostConsulRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = consulRolesRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/consul/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostConsulRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="consulRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostConsulRolesNameAsync(string name, ConsulRolesRequest consulRolesRequest = default(ConsulRolesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostConsulRolesNameWithHttpInfoAsync(name, consulRolesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="consulRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostConsulRolesNameWithHttpInfoAsync(string name, ConsulRolesRequest consulRolesRequest = default(ConsulRolesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostConsulRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = consulRolesRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/consul/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostConsulRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a secret at the specified location. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <returns></returns>
        public void PostCubbyholePath(string path)
        {
            PostCubbyholePathWithHttpInfo(path);
        }

        /// <summary>
        /// Store a secret at the specified location. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostCubbyholePathWithHttpInfo(string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->PostCubbyholePath");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/cubbyhole/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCubbyholePath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a secret at the specified location. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostCubbyholePathAsync(string path, CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostCubbyholePathWithHttpInfoAsync(path, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Store a secret at the specified location. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Specifies the path of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostCubbyholePathWithHttpInfoAsync(string path, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->PostCubbyholePath");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/cubbyhole/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCubbyholePath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostGcpConfig(GcpConfigRequest gcpConfigRequest = default(GcpConfigRequest))
        {
            PostGcpConfigWithHttpInfo(gcpConfigRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpConfigWithHttpInfo(GcpConfigRequest gcpConfigRequest = default(GcpConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = gcpConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcp/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpConfigAsync(GcpConfigRequest gcpConfigRequest = default(GcpConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpConfigWithHttpInfoAsync(gcpConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpConfigWithHttpInfoAsync(GcpConfigRequest gcpConfigRequest = default(GcpConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = gcpConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcp/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void PostGcpConfigRotateRoot()
        {
            PostGcpConfigRotateRootWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpConfigRotateRootWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcp/config/rotate-root", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpConfigRotateRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpConfigRotateRootAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpConfigRotateRootWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpConfigRotateRootWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcp/config/rotate-root", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpConfigRotateRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="gcpKeyRequest"> (optional)</param>
        /// <returns></returns>
        public void PostGcpKeyRoleset(string roleset, GcpKeyRequest gcpKeyRequest = default(GcpKeyRequest))
        {
            PostGcpKeyRolesetWithHttpInfo(roleset, gcpKeyRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="gcpKeyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpKeyRolesetWithHttpInfo(string roleset, GcpKeyRequest gcpKeyRequest = default(GcpKeyRequest))
        {
            // verify the required parameter 'roleset' is set
            if (roleset == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleset' when calling SecretsApi->PostGcpKeyRoleset");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roleset", VaultClient.Client.ClientUtils.ParameterToString(roleset)); // path parameter
            localVarRequestOptions.Data = gcpKeyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcp/key/{roleset}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpKeyRoleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="gcpKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpKeyRolesetAsync(string roleset, GcpKeyRequest gcpKeyRequest = default(GcpKeyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpKeyRolesetWithHttpInfoAsync(roleset, gcpKeyRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="gcpKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpKeyRolesetWithHttpInfoAsync(string roleset, GcpKeyRequest gcpKeyRequest = default(GcpKeyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'roleset' is set
            if (roleset == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleset' when calling SecretsApi->PostGcpKeyRoleset");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roleset", VaultClient.Client.ClientUtils.ParameterToString(roleset)); // path parameter
            localVarRequestOptions.Data = gcpKeyRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcp/key/{roleset}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpKeyRoleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <param name="gcpRolesetRequest"> (optional)</param>
        /// <returns></returns>
        public void PostGcpRolesetName(string name, GcpRolesetRequest gcpRolesetRequest = default(GcpRolesetRequest))
        {
            PostGcpRolesetNameWithHttpInfo(name, gcpRolesetRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <param name="gcpRolesetRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpRolesetNameWithHttpInfo(string name, GcpRolesetRequest gcpRolesetRequest = default(GcpRolesetRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostGcpRolesetName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = gcpRolesetRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcp/roleset/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpRolesetName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <param name="gcpRolesetRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpRolesetNameAsync(string name, GcpRolesetRequest gcpRolesetRequest = default(GcpRolesetRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpRolesetNameWithHttpInfoAsync(name, gcpRolesetRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the role.</param>
        /// <param name="gcpRolesetRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpRolesetNameWithHttpInfoAsync(string name, GcpRolesetRequest gcpRolesetRequest = default(GcpRolesetRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostGcpRolesetName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = gcpRolesetRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcp/roleset/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpRolesetName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        public void PostGcpRolesetNameRotate(string name)
        {
            PostGcpRolesetNameRotateWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpRolesetNameRotateWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostGcpRolesetNameRotate");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcp/roleset/{name}/rotate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpRolesetNameRotate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpRolesetNameRotateAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpRolesetNameRotateWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpRolesetNameRotateWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostGcpRolesetNameRotate");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcp/roleset/{name}/rotate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpRolesetNameRotate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        public void PostGcpRolesetNameRotateKey(string name)
        {
            PostGcpRolesetNameRotateKeyWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpRolesetNameRotateKeyWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostGcpRolesetNameRotateKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcp/roleset/{name}/rotate-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpRolesetNameRotateKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpRolesetNameRotateKeyAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpRolesetNameRotateKeyWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpRolesetNameRotateKeyWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostGcpRolesetNameRotateKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcp/roleset/{name}/rotate-key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpRolesetNameRotateKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="gcpRolesetKeyRequest"> (optional)</param>
        /// <returns></returns>
        public void PostGcpRolesetRolesetKey(string roleset, GcpRolesetKeyRequest gcpRolesetKeyRequest = default(GcpRolesetKeyRequest))
        {
            PostGcpRolesetRolesetKeyWithHttpInfo(roleset, gcpRolesetKeyRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="gcpRolesetKeyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpRolesetRolesetKeyWithHttpInfo(string roleset, GcpRolesetKeyRequest gcpRolesetKeyRequest = default(GcpRolesetKeyRequest))
        {
            // verify the required parameter 'roleset' is set
            if (roleset == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleset' when calling SecretsApi->PostGcpRolesetRolesetKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roleset", VaultClient.Client.ClientUtils.ParameterToString(roleset)); // path parameter
            localVarRequestOptions.Data = gcpRolesetKeyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcp/roleset/{roleset}/key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpRolesetRolesetKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="gcpRolesetKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpRolesetRolesetKeyAsync(string roleset, GcpRolesetKeyRequest gcpRolesetKeyRequest = default(GcpRolesetKeyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpRolesetRolesetKeyWithHttpInfoAsync(roleset, gcpRolesetKeyRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="gcpRolesetKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpRolesetRolesetKeyWithHttpInfoAsync(string roleset, GcpRolesetKeyRequest gcpRolesetKeyRequest = default(GcpRolesetKeyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'roleset' is set
            if (roleset == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleset' when calling SecretsApi->PostGcpRolesetRolesetKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roleset", VaultClient.Client.ClientUtils.ParameterToString(roleset)); // path parameter
            localVarRequestOptions.Data = gcpRolesetKeyRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcp/roleset/{roleset}/key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpRolesetRolesetKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns></returns>
        public void PostGcpRolesetRolesetToken(string roleset)
        {
            PostGcpRolesetRolesetTokenWithHttpInfo(roleset);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpRolesetRolesetTokenWithHttpInfo(string roleset)
        {
            // verify the required parameter 'roleset' is set
            if (roleset == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleset' when calling SecretsApi->PostGcpRolesetRolesetToken");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roleset", VaultClient.Client.ClientUtils.ParameterToString(roleset)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcp/roleset/{roleset}/token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpRolesetRolesetToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpRolesetRolesetTokenAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpRolesetRolesetTokenWithHttpInfoAsync(roleset, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpRolesetRolesetTokenWithHttpInfoAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'roleset' is set
            if (roleset == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleset' when calling SecretsApi->PostGcpRolesetRolesetToken");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roleset", VaultClient.Client.ClientUtils.ParameterToString(roleset)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcp/roleset/{roleset}/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpRolesetRolesetToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <param name="gcpStaticAccountRequest"> (optional)</param>
        /// <returns></returns>
        public void PostGcpStaticAccountName(string name, GcpStaticAccountRequest gcpStaticAccountRequest = default(GcpStaticAccountRequest))
        {
            PostGcpStaticAccountNameWithHttpInfo(name, gcpStaticAccountRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <param name="gcpStaticAccountRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpStaticAccountNameWithHttpInfo(string name, GcpStaticAccountRequest gcpStaticAccountRequest = default(GcpStaticAccountRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostGcpStaticAccountName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = gcpStaticAccountRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcp/static-account/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpStaticAccountName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <param name="gcpStaticAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpStaticAccountNameAsync(string name, GcpStaticAccountRequest gcpStaticAccountRequest = default(GcpStaticAccountRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpStaticAccountNameWithHttpInfoAsync(name, gcpStaticAccountRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name to refer to this static account in Vault. Cannot be updated.</param>
        /// <param name="gcpStaticAccountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpStaticAccountNameWithHttpInfoAsync(string name, GcpStaticAccountRequest gcpStaticAccountRequest = default(GcpStaticAccountRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostGcpStaticAccountName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = gcpStaticAccountRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcp/static-account/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpStaticAccountName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <param name="gcpStaticAccountKeyRequest"> (optional)</param>
        /// <returns></returns>
        public void PostGcpStaticAccountNameKey(string name, GcpStaticAccountKeyRequest gcpStaticAccountKeyRequest = default(GcpStaticAccountKeyRequest))
        {
            PostGcpStaticAccountNameKeyWithHttpInfo(name, gcpStaticAccountKeyRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <param name="gcpStaticAccountKeyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpStaticAccountNameKeyWithHttpInfo(string name, GcpStaticAccountKeyRequest gcpStaticAccountKeyRequest = default(GcpStaticAccountKeyRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostGcpStaticAccountNameKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = gcpStaticAccountKeyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcp/static-account/{name}/key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpStaticAccountNameKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <param name="gcpStaticAccountKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpStaticAccountNameKeyAsync(string name, GcpStaticAccountKeyRequest gcpStaticAccountKeyRequest = default(GcpStaticAccountKeyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpStaticAccountNameKeyWithHttpInfoAsync(name, gcpStaticAccountKeyRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <param name="gcpStaticAccountKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpStaticAccountNameKeyWithHttpInfoAsync(string name, GcpStaticAccountKeyRequest gcpStaticAccountKeyRequest = default(GcpStaticAccountKeyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostGcpStaticAccountNameKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = gcpStaticAccountKeyRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcp/static-account/{name}/key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpStaticAccountNameKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the account.</param>
        /// <returns></returns>
        public void PostGcpStaticAccountNameRotateKey(string name)
        {
            PostGcpStaticAccountNameRotateKeyWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the account.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpStaticAccountNameRotateKeyWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostGcpStaticAccountNameRotateKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcp/static-account/{name}/rotate-key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpStaticAccountNameRotateKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpStaticAccountNameRotateKeyAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpStaticAccountNameRotateKeyWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpStaticAccountNameRotateKeyWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostGcpStaticAccountNameRotateKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcp/static-account/{name}/rotate-key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpStaticAccountNameRotateKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <returns></returns>
        public void PostGcpStaticAccountNameToken(string name)
        {
            PostGcpStaticAccountNameTokenWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpStaticAccountNameTokenWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostGcpStaticAccountNameToken");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcp/static-account/{name}/token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpStaticAccountNameToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpStaticAccountNameTokenAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpStaticAccountNameTokenWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Required. Name of the static account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpStaticAccountNameTokenWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostGcpStaticAccountNameToken");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcp/static-account/{name}/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpStaticAccountNameToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns></returns>
        public void PostGcpTokenRoleset(string roleset)
        {
            PostGcpTokenRolesetWithHttpInfo(roleset);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpTokenRolesetWithHttpInfo(string roleset)
        {
            // verify the required parameter 'roleset' is set
            if (roleset == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleset' when calling SecretsApi->PostGcpTokenRoleset");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roleset", VaultClient.Client.ClientUtils.ParameterToString(roleset)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcp/token/{roleset}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpTokenRoleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpTokenRolesetAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpTokenRolesetWithHttpInfoAsync(roleset, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleset">Required. Name of the role set.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpTokenRolesetWithHttpInfoAsync(string roleset, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'roleset' is set
            if (roleset == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleset' when calling SecretsApi->PostGcpTokenRoleset");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roleset", VaultClient.Client.ClientUtils.ParameterToString(roleset)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcp/token/{roleset}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpTokenRoleset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the GCP KMS secrets engine 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpkmsConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostGcpkmsConfig(GcpkmsConfigRequest gcpkmsConfigRequest = default(GcpkmsConfigRequest))
        {
            PostGcpkmsConfigWithHttpInfo(gcpkmsConfigRequest);
        }

        /// <summary>
        /// Configure the GCP KMS secrets engine 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpkmsConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpkmsConfigWithHttpInfo(GcpkmsConfigRequest gcpkmsConfigRequest = default(GcpkmsConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = gcpkmsConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcpkms/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the GCP KMS secrets engine 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpkmsConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpkmsConfigAsync(GcpkmsConfigRequest gcpkmsConfigRequest = default(GcpkmsConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpkmsConfigWithHttpInfoAsync(gcpkmsConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the GCP KMS secrets engine 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpkmsConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpkmsConfigWithHttpInfoAsync(GcpkmsConfigRequest gcpkmsConfigRequest = default(GcpkmsConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = gcpkmsConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcpkms/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Decrypt a ciphertext value using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for decryption. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsDecryptRequest"> (optional)</param>
        /// <returns></returns>
        public void PostGcpkmsDecryptKey(string key, GcpkmsDecryptRequest gcpkmsDecryptRequest = default(GcpkmsDecryptRequest))
        {
            PostGcpkmsDecryptKeyWithHttpInfo(key, gcpkmsDecryptRequest);
        }

        /// <summary>
        /// Decrypt a ciphertext value using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for decryption. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsDecryptRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpkmsDecryptKeyWithHttpInfo(string key, GcpkmsDecryptRequest gcpkmsDecryptRequest = default(GcpkmsDecryptRequest))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsDecryptKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = gcpkmsDecryptRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcpkms/decrypt/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsDecryptKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Decrypt a ciphertext value using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for decryption. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsDecryptRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpkmsDecryptKeyAsync(string key, GcpkmsDecryptRequest gcpkmsDecryptRequest = default(GcpkmsDecryptRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpkmsDecryptKeyWithHttpInfoAsync(key, gcpkmsDecryptRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Decrypt a ciphertext value using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for decryption. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsDecryptRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpkmsDecryptKeyWithHttpInfoAsync(string key, GcpkmsDecryptRequest gcpkmsDecryptRequest = default(GcpkmsDecryptRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsDecryptKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = gcpkmsDecryptRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcpkms/decrypt/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsDecryptKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Encrypt a plaintext value using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for encryption. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsEncryptRequest"> (optional)</param>
        /// <returns></returns>
        public void PostGcpkmsEncryptKey(string key, GcpkmsEncryptRequest gcpkmsEncryptRequest = default(GcpkmsEncryptRequest))
        {
            PostGcpkmsEncryptKeyWithHttpInfo(key, gcpkmsEncryptRequest);
        }

        /// <summary>
        /// Encrypt a plaintext value using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for encryption. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsEncryptRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpkmsEncryptKeyWithHttpInfo(string key, GcpkmsEncryptRequest gcpkmsEncryptRequest = default(GcpkmsEncryptRequest))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsEncryptKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = gcpkmsEncryptRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcpkms/encrypt/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsEncryptKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Encrypt a plaintext value using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for encryption. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsEncryptRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpkmsEncryptKeyAsync(string key, GcpkmsEncryptRequest gcpkmsEncryptRequest = default(GcpkmsEncryptRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpkmsEncryptKeyWithHttpInfoAsync(key, gcpkmsEncryptRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Encrypt a plaintext value using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for encryption. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsEncryptRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpkmsEncryptKeyWithHttpInfoAsync(string key, GcpkmsEncryptRequest gcpkmsEncryptRequest = default(GcpkmsEncryptRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsEncryptKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = gcpkmsEncryptRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcpkms/encrypt/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsEncryptKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the key in Vault 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="gcpkmsKeysConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostGcpkmsKeysConfigKey(string key, GcpkmsKeysConfigRequest gcpkmsKeysConfigRequest = default(GcpkmsKeysConfigRequest))
        {
            PostGcpkmsKeysConfigKeyWithHttpInfo(key, gcpkmsKeysConfigRequest);
        }

        /// <summary>
        /// Configure the key in Vault 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="gcpkmsKeysConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpkmsKeysConfigKeyWithHttpInfo(string key, GcpkmsKeysConfigRequest gcpkmsKeysConfigRequest = default(GcpkmsKeysConfigRequest))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsKeysConfigKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = gcpkmsKeysConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcpkms/keys/config/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsKeysConfigKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the key in Vault 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="gcpkmsKeysConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpkmsKeysConfigKeyAsync(string key, GcpkmsKeysConfigRequest gcpkmsKeysConfigRequest = default(GcpkmsKeysConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpkmsKeysConfigKeyWithHttpInfoAsync(key, gcpkmsKeysConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the key in Vault 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="gcpkmsKeysConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpkmsKeysConfigKeyWithHttpInfoAsync(string key, GcpkmsKeysConfigRequest gcpkmsKeysConfigRequest = default(GcpkmsKeysConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsKeysConfigKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = gcpkmsKeysConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcpkms/keys/config/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsKeysConfigKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deregister an existing key in Vault 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to deregister in Vault. If the key exists in Google Cloud KMS, it will be left untouched.</param>
        /// <returns></returns>
        public void PostGcpkmsKeysDeregisterKey(string key)
        {
            PostGcpkmsKeysDeregisterKeyWithHttpInfo(key);
        }

        /// <summary>
        /// Deregister an existing key in Vault 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to deregister in Vault. If the key exists in Google Cloud KMS, it will be left untouched.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpkmsKeysDeregisterKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsKeysDeregisterKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcpkms/keys/deregister/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsKeysDeregisterKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deregister an existing key in Vault 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to deregister in Vault. If the key exists in Google Cloud KMS, it will be left untouched.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpkmsKeysDeregisterKeyAsync(string key, CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpkmsKeysDeregisterKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deregister an existing key in Vault 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to deregister in Vault. If the key exists in Google Cloud KMS, it will be left untouched.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpkmsKeysDeregisterKeyWithHttpInfoAsync(string key, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsKeysDeregisterKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcpkms/keys/deregister/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsKeysDeregisterKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="gcpkmsKeysRequest"> (optional)</param>
        /// <returns></returns>
        public void PostGcpkmsKeysKey(string key, GcpkmsKeysRequest gcpkmsKeysRequest = default(GcpkmsKeysRequest))
        {
            PostGcpkmsKeysKeyWithHttpInfo(key, gcpkmsKeysRequest);
        }

        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="gcpkmsKeysRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpkmsKeysKeyWithHttpInfo(string key, GcpkmsKeysRequest gcpkmsKeysRequest = default(GcpkmsKeysRequest))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsKeysKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = gcpkmsKeysRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcpkms/keys/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsKeysKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="gcpkmsKeysRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpkmsKeysKeyAsync(string key, GcpkmsKeysRequest gcpkmsKeysRequest = default(GcpkmsKeysRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpkmsKeysKeyWithHttpInfoAsync(key, gcpkmsKeysRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Interact with crypto keys in Vault and Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="gcpkmsKeysRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpkmsKeysKeyWithHttpInfoAsync(string key, GcpkmsKeysRequest gcpkmsKeysRequest = default(GcpkmsKeysRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsKeysKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = gcpkmsKeysRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcpkms/keys/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsKeysKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register an existing crypto key in Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to register in Vault. This will be the named used to refer to the underlying crypto key when encrypting or decrypting data.</param>
        /// <param name="gcpkmsKeysRegisterRequest"> (optional)</param>
        /// <returns></returns>
        public void PostGcpkmsKeysRegisterKey(string key, GcpkmsKeysRegisterRequest gcpkmsKeysRegisterRequest = default(GcpkmsKeysRegisterRequest))
        {
            PostGcpkmsKeysRegisterKeyWithHttpInfo(key, gcpkmsKeysRegisterRequest);
        }

        /// <summary>
        /// Register an existing crypto key in Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to register in Vault. This will be the named used to refer to the underlying crypto key when encrypting or decrypting data.</param>
        /// <param name="gcpkmsKeysRegisterRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpkmsKeysRegisterKeyWithHttpInfo(string key, GcpkmsKeysRegisterRequest gcpkmsKeysRegisterRequest = default(GcpkmsKeysRegisterRequest))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsKeysRegisterKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = gcpkmsKeysRegisterRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcpkms/keys/register/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsKeysRegisterKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register an existing crypto key in Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to register in Vault. This will be the named used to refer to the underlying crypto key when encrypting or decrypting data.</param>
        /// <param name="gcpkmsKeysRegisterRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpkmsKeysRegisterKeyAsync(string key, GcpkmsKeysRegisterRequest gcpkmsKeysRegisterRequest = default(GcpkmsKeysRegisterRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpkmsKeysRegisterKeyWithHttpInfoAsync(key, gcpkmsKeysRegisterRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Register an existing crypto key in Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to register in Vault. This will be the named used to refer to the underlying crypto key when encrypting or decrypting data.</param>
        /// <param name="gcpkmsKeysRegisterRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpkmsKeysRegisterKeyWithHttpInfoAsync(string key, GcpkmsKeysRegisterRequest gcpkmsKeysRegisterRequest = default(GcpkmsKeysRegisterRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsKeysRegisterKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = gcpkmsKeysRegisterRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcpkms/keys/register/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsKeysRegisterKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rotate a crypto key to a new primary version 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to rotate. This key must already be registered with Vault and point to a valid Google Cloud KMS crypto key.</param>
        /// <returns></returns>
        public void PostGcpkmsKeysRotateKey(string key)
        {
            PostGcpkmsKeysRotateKeyWithHttpInfo(key);
        }

        /// <summary>
        /// Rotate a crypto key to a new primary version 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to rotate. This key must already be registered with Vault and point to a valid Google Cloud KMS crypto key.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpkmsKeysRotateKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsKeysRotateKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcpkms/keys/rotate/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsKeysRotateKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rotate a crypto key to a new primary version 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to rotate. This key must already be registered with Vault and point to a valid Google Cloud KMS crypto key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpkmsKeysRotateKeyAsync(string key, CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpkmsKeysRotateKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Rotate a crypto key to a new primary version 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to rotate. This key must already be registered with Vault and point to a valid Google Cloud KMS crypto key.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpkmsKeysRotateKeyWithHttpInfoAsync(string key, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsKeysRotateKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcpkms/keys/rotate/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsKeysRotateKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete old crypto key versions from Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <returns></returns>
        public void PostGcpkmsKeysTrimKey(string key)
        {
            PostGcpkmsKeysTrimKeyWithHttpInfo(key);
        }

        /// <summary>
        /// Delete old crypto key versions from Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpkmsKeysTrimKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsKeysTrimKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcpkms/keys/trim/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsKeysTrimKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete old crypto key versions from Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpkmsKeysTrimKeyAsync(string key, CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpkmsKeysTrimKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete old crypto key versions from Google Cloud KMS 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpkmsKeysTrimKeyWithHttpInfoAsync(string key, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsKeysTrimKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcpkms/keys/trim/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsKeysTrimKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Re-encrypt existing ciphertext data to a new version 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to use for encryption. This key must already exist in Vault and Google Cloud KMS.</param>
        /// <param name="gcpkmsReencryptRequest"> (optional)</param>
        /// <returns></returns>
        public void PostGcpkmsReencryptKey(string key, GcpkmsReencryptRequest gcpkmsReencryptRequest = default(GcpkmsReencryptRequest))
        {
            PostGcpkmsReencryptKeyWithHttpInfo(key, gcpkmsReencryptRequest);
        }

        /// <summary>
        /// Re-encrypt existing ciphertext data to a new version 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to use for encryption. This key must already exist in Vault and Google Cloud KMS.</param>
        /// <param name="gcpkmsReencryptRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpkmsReencryptKeyWithHttpInfo(string key, GcpkmsReencryptRequest gcpkmsReencryptRequest = default(GcpkmsReencryptRequest))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsReencryptKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = gcpkmsReencryptRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcpkms/reencrypt/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsReencryptKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Re-encrypt existing ciphertext data to a new version 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to use for encryption. This key must already exist in Vault and Google Cloud KMS.</param>
        /// <param name="gcpkmsReencryptRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpkmsReencryptKeyAsync(string key, GcpkmsReencryptRequest gcpkmsReencryptRequest = default(GcpkmsReencryptRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpkmsReencryptKeyWithHttpInfoAsync(key, gcpkmsReencryptRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Re-encrypt existing ciphertext data to a new version 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key to use for encryption. This key must already exist in Vault and Google Cloud KMS.</param>
        /// <param name="gcpkmsReencryptRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpkmsReencryptKeyWithHttpInfoAsync(string key, GcpkmsReencryptRequest gcpkmsReencryptRequest = default(GcpkmsReencryptRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsReencryptKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = gcpkmsReencryptRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcpkms/reencrypt/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsReencryptKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Signs a message or digest using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for signing. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsSignRequest"> (optional)</param>
        /// <returns></returns>
        public void PostGcpkmsSignKey(string key, GcpkmsSignRequest gcpkmsSignRequest = default(GcpkmsSignRequest))
        {
            PostGcpkmsSignKeyWithHttpInfo(key, gcpkmsSignRequest);
        }

        /// <summary>
        /// Signs a message or digest using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for signing. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsSignRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpkmsSignKeyWithHttpInfo(string key, GcpkmsSignRequest gcpkmsSignRequest = default(GcpkmsSignRequest))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsSignKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = gcpkmsSignRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcpkms/sign/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsSignKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Signs a message or digest using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for signing. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpkmsSignKeyAsync(string key, GcpkmsSignRequest gcpkmsSignRequest = default(GcpkmsSignRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpkmsSignKeyWithHttpInfoAsync(key, gcpkmsSignRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Signs a message or digest using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for signing. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpkmsSignKeyWithHttpInfoAsync(string key, GcpkmsSignRequest gcpkmsSignRequest = default(GcpkmsSignRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsSignKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = gcpkmsSignRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcpkms/sign/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsSignKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify a signature using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for verification. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsVerifyRequest"> (optional)</param>
        /// <returns></returns>
        public void PostGcpkmsVerifyKey(string key, GcpkmsVerifyRequest gcpkmsVerifyRequest = default(GcpkmsVerifyRequest))
        {
            PostGcpkmsVerifyKeyWithHttpInfo(key, gcpkmsVerifyRequest);
        }

        /// <summary>
        /// Verify a signature using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for verification. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsVerifyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostGcpkmsVerifyKeyWithHttpInfo(string key, GcpkmsVerifyRequest gcpkmsVerifyRequest = default(GcpkmsVerifyRequest))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsVerifyKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = gcpkmsVerifyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/gcpkms/verify/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsVerifyKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify a signature using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for verification. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsVerifyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostGcpkmsVerifyKeyAsync(string key, GcpkmsVerifyRequest gcpkmsVerifyRequest = default(GcpkmsVerifyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostGcpkmsVerifyKeyWithHttpInfoAsync(key, gcpkmsVerifyRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Verify a signature using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Name of the key in Vault to use for verification. This key must already exist in Vault and must map back to a Google Cloud KMS key.</param>
        /// <param name="gcpkmsVerifyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostGcpkmsVerifyKeyWithHttpInfoAsync(string key, GcpkmsVerifyRequest gcpkmsVerifyRequest = default(GcpkmsVerifyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling SecretsApi->PostGcpkmsVerifyKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = gcpkmsVerifyRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/gcpkms/verify/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostGcpkmsVerifyKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostKubernetesConfig(KubernetesConfigRequest kubernetesConfigRequest = default(KubernetesConfigRequest))
        {
            PostKubernetesConfigWithHttpInfo(kubernetesConfigRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostKubernetesConfigWithHttpInfo(KubernetesConfigRequest kubernetesConfigRequest = default(KubernetesConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = kubernetesConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/kubernetes/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostKubernetesConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostKubernetesConfigAsync(KubernetesConfigRequest kubernetesConfigRequest = default(KubernetesConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostKubernetesConfigWithHttpInfoAsync(kubernetesConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostKubernetesConfigWithHttpInfoAsync(KubernetesConfigRequest kubernetesConfigRequest = default(KubernetesConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = kubernetesConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/kubernetes/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostKubernetesConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Vault role</param>
        /// <param name="kubernetesCredsRequest"> (optional)</param>
        /// <returns></returns>
        public void PostKubernetesCredsName(string name, KubernetesCredsRequest kubernetesCredsRequest = default(KubernetesCredsRequest))
        {
            PostKubernetesCredsNameWithHttpInfo(name, kubernetesCredsRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Vault role</param>
        /// <param name="kubernetesCredsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostKubernetesCredsNameWithHttpInfo(string name, KubernetesCredsRequest kubernetesCredsRequest = default(KubernetesCredsRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostKubernetesCredsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = kubernetesCredsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/kubernetes/creds/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostKubernetesCredsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Vault role</param>
        /// <param name="kubernetesCredsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostKubernetesCredsNameAsync(string name, KubernetesCredsRequest kubernetesCredsRequest = default(KubernetesCredsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostKubernetesCredsNameWithHttpInfoAsync(name, kubernetesCredsRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Vault role</param>
        /// <param name="kubernetesCredsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostKubernetesCredsNameWithHttpInfoAsync(string name, KubernetesCredsRequest kubernetesCredsRequest = default(KubernetesCredsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostKubernetesCredsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = kubernetesCredsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/kubernetes/creds/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostKubernetesCredsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="kubernetesRolesRequest"> (optional)</param>
        /// <returns></returns>
        public void PostKubernetesRolesName(string name, KubernetesRolesRequest kubernetesRolesRequest = default(KubernetesRolesRequest))
        {
            PostKubernetesRolesNameWithHttpInfo(name, kubernetesRolesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="kubernetesRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostKubernetesRolesNameWithHttpInfo(string name, KubernetesRolesRequest kubernetesRolesRequest = default(KubernetesRolesRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostKubernetesRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = kubernetesRolesRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/kubernetes/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostKubernetesRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="kubernetesRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostKubernetesRolesNameAsync(string name, KubernetesRolesRequest kubernetesRolesRequest = default(KubernetesRolesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostKubernetesRolesNameWithHttpInfoAsync(name, kubernetesRolesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="kubernetesRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostKubernetesRolesNameWithHttpInfoAsync(string name, KubernetesRolesRequest kubernetesRolesRequest = default(KubernetesRolesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostKubernetesRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = kubernetesRolesRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/kubernetes/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostKubernetesRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns></returns>
        public void PostKvPath(string path)
        {
            PostKvPathWithHttpInfo(path);
        }

        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostKvPathWithHttpInfo(string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->PostKvPath");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/kv/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostKvPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostKvPathAsync(string path, CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostKvPathWithHttpInfoAsync(path, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Pass-through secret storage to the storage backend, allowing you to read/write arbitrary data into secret storage. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostKvPathWithHttpInfoAsync(string path, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->PostKvPath");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/kv/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostKvPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the  credentials that are used to manage Database Users. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mongodbatlasConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostMongodbatlasConfig(MongodbatlasConfigRequest mongodbatlasConfigRequest = default(MongodbatlasConfigRequest))
        {
            PostMongodbatlasConfigWithHttpInfo(mongodbatlasConfigRequest);
        }

        /// <summary>
        /// Configure the  credentials that are used to manage Database Users. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mongodbatlasConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostMongodbatlasConfigWithHttpInfo(MongodbatlasConfigRequest mongodbatlasConfigRequest = default(MongodbatlasConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = mongodbatlasConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mongodbatlas/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMongodbatlasConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the  credentials that are used to manage Database Users. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mongodbatlasConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostMongodbatlasConfigAsync(MongodbatlasConfigRequest mongodbatlasConfigRequest = default(MongodbatlasConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostMongodbatlasConfigWithHttpInfoAsync(mongodbatlasConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the  credentials that are used to manage Database Users. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mongodbatlasConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostMongodbatlasConfigWithHttpInfoAsync(MongodbatlasConfigRequest mongodbatlasConfigRequest = default(MongodbatlasConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = mongodbatlasConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mongodbatlas/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMongodbatlasConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate MongoDB Atlas Programmatic API from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void PostMongodbatlasCredsName(string name)
        {
            PostMongodbatlasCredsNameWithHttpInfo(name);
        }

        /// <summary>
        /// Generate MongoDB Atlas Programmatic API from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostMongodbatlasCredsNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostMongodbatlasCredsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mongodbatlas/creds/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMongodbatlasCredsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate MongoDB Atlas Programmatic API from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostMongodbatlasCredsNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostMongodbatlasCredsNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate MongoDB Atlas Programmatic API from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostMongodbatlasCredsNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostMongodbatlasCredsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mongodbatlas/creds/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMongodbatlasCredsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <param name="mongodbatlasRolesRequest"> (optional)</param>
        /// <returns></returns>
        public void PostMongodbatlasRolesName(string name, MongodbatlasRolesRequest mongodbatlasRolesRequest = default(MongodbatlasRolesRequest))
        {
            PostMongodbatlasRolesNameWithHttpInfo(name, mongodbatlasRolesRequest);
        }

        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <param name="mongodbatlasRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostMongodbatlasRolesNameWithHttpInfo(string name, MongodbatlasRolesRequest mongodbatlasRolesRequest = default(MongodbatlasRolesRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostMongodbatlasRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = mongodbatlasRolesRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mongodbatlas/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMongodbatlasRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <param name="mongodbatlasRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostMongodbatlasRolesNameAsync(string name, MongodbatlasRolesRequest mongodbatlasRolesRequest = default(MongodbatlasRolesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostMongodbatlasRolesNameWithHttpInfoAsync(name, mongodbatlasRolesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage the roles used to generate MongoDB Atlas Programmatic API Keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Roles</param>
        /// <param name="mongodbatlasRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostMongodbatlasRolesNameWithHttpInfoAsync(string name, MongodbatlasRolesRequest mongodbatlasRolesRequest = default(MongodbatlasRolesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostMongodbatlasRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = mongodbatlasRolesRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mongodbatlas/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostMongodbatlasRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nomadConfigAccessRequest"> (optional)</param>
        /// <returns></returns>
        public void PostNomadConfigAccess(NomadConfigAccessRequest nomadConfigAccessRequest = default(NomadConfigAccessRequest))
        {
            PostNomadConfigAccessWithHttpInfo(nomadConfigAccessRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nomadConfigAccessRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostNomadConfigAccessWithHttpInfo(NomadConfigAccessRequest nomadConfigAccessRequest = default(NomadConfigAccessRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = nomadConfigAccessRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/nomad/config/access", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNomadConfigAccess", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nomadConfigAccessRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostNomadConfigAccessAsync(NomadConfigAccessRequest nomadConfigAccessRequest = default(NomadConfigAccessRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostNomadConfigAccessWithHttpInfoAsync(nomadConfigAccessRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nomadConfigAccessRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostNomadConfigAccessWithHttpInfoAsync(NomadConfigAccessRequest nomadConfigAccessRequest = default(NomadConfigAccessRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = nomadConfigAccessRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/nomad/config/access", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNomadConfigAccess", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the lease parameters for generated tokens 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nomadConfigLeaseRequest"> (optional)</param>
        /// <returns></returns>
        public void PostNomadConfigLease(NomadConfigLeaseRequest nomadConfigLeaseRequest = default(NomadConfigLeaseRequest))
        {
            PostNomadConfigLeaseWithHttpInfo(nomadConfigLeaseRequest);
        }

        /// <summary>
        /// Configure the lease parameters for generated tokens 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nomadConfigLeaseRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostNomadConfigLeaseWithHttpInfo(NomadConfigLeaseRequest nomadConfigLeaseRequest = default(NomadConfigLeaseRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = nomadConfigLeaseRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/nomad/config/lease", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNomadConfigLease", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the lease parameters for generated tokens 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nomadConfigLeaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostNomadConfigLeaseAsync(NomadConfigLeaseRequest nomadConfigLeaseRequest = default(NomadConfigLeaseRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostNomadConfigLeaseWithHttpInfoAsync(nomadConfigLeaseRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the lease parameters for generated tokens 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nomadConfigLeaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostNomadConfigLeaseWithHttpInfoAsync(NomadConfigLeaseRequest nomadConfigLeaseRequest = default(NomadConfigLeaseRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = nomadConfigLeaseRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/nomad/config/lease", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNomadConfigLease", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="nomadRoleRequest"> (optional)</param>
        /// <returns></returns>
        public void PostNomadRoleName(string name, NomadRoleRequest nomadRoleRequest = default(NomadRoleRequest))
        {
            PostNomadRoleNameWithHttpInfo(name, nomadRoleRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="nomadRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostNomadRoleNameWithHttpInfo(string name, NomadRoleRequest nomadRoleRequest = default(NomadRoleRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostNomadRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = nomadRoleRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/nomad/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNomadRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="nomadRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostNomadRoleNameAsync(string name, NomadRoleRequest nomadRoleRequest = default(NomadRoleRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostNomadRoleNameWithHttpInfoAsync(name, nomadRoleRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="nomadRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostNomadRoleNameWithHttpInfoAsync(string name, NomadRoleRequest nomadRoleRequest = default(NomadRoleRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostNomadRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = nomadRoleRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/nomad/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNomadRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openldapConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostOpenldapConfig(OpenldapConfigRequest openldapConfigRequest = default(OpenldapConfigRequest))
        {
            PostOpenldapConfigWithHttpInfo(openldapConfigRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openldapConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostOpenldapConfigWithHttpInfo(OpenldapConfigRequest openldapConfigRequest = default(OpenldapConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = openldapConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/openldap/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOpenldapConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openldapConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostOpenldapConfigAsync(OpenldapConfigRequest openldapConfigRequest = default(OpenldapConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostOpenldapConfigWithHttpInfoAsync(openldapConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openldapConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostOpenldapConfigWithHttpInfoAsync(OpenldapConfigRequest openldapConfigRequest = default(OpenldapConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = openldapConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/openldap/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOpenldapConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <param name="openldapRoleRequest"> (optional)</param>
        /// <returns></returns>
        public void PostOpenldapRoleName(string name, OpenldapRoleRequest openldapRoleRequest = default(OpenldapRoleRequest))
        {
            PostOpenldapRoleNameWithHttpInfo(name, openldapRoleRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <param name="openldapRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostOpenldapRoleNameWithHttpInfo(string name, OpenldapRoleRequest openldapRoleRequest = default(OpenldapRoleRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostOpenldapRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = openldapRoleRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/openldap/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOpenldapRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <param name="openldapRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostOpenldapRoleNameAsync(string name, OpenldapRoleRequest openldapRoleRequest = default(OpenldapRoleRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostOpenldapRoleNameWithHttpInfoAsync(name, openldapRoleRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role (lowercase)</param>
        /// <param name="openldapRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostOpenldapRoleNameWithHttpInfoAsync(string name, OpenldapRoleRequest openldapRoleRequest = default(OpenldapRoleRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostOpenldapRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = openldapRoleRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/openldap/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOpenldapRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role</param>
        /// <returns></returns>
        public void PostOpenldapRotateRoleName(string name)
        {
            PostOpenldapRotateRoleNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostOpenldapRotateRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostOpenldapRotateRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/openldap/rotate-role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOpenldapRotateRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostOpenldapRotateRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostOpenldapRotateRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the static role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostOpenldapRotateRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostOpenldapRotateRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/openldap/rotate-role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOpenldapRotateRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void PostOpenldapRotateRoot()
        {
            PostOpenldapRotateRootWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostOpenldapRotateRootWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/openldap/rotate-root", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOpenldapRotateRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostOpenldapRotateRootAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostOpenldapRotateRootWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostOpenldapRotateRootWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/openldap/rotate-root", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOpenldapRotateRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="openldapStaticRoleRequest"> (optional)</param>
        /// <returns></returns>
        public void PostOpenldapStaticRoleName(string name, OpenldapStaticRoleRequest openldapStaticRoleRequest = default(OpenldapStaticRoleRequest))
        {
            PostOpenldapStaticRoleNameWithHttpInfo(name, openldapStaticRoleRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="openldapStaticRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostOpenldapStaticRoleNameWithHttpInfo(string name, OpenldapStaticRoleRequest openldapStaticRoleRequest = default(OpenldapStaticRoleRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostOpenldapStaticRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = openldapStaticRoleRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/openldap/static-role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOpenldapStaticRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="openldapStaticRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostOpenldapStaticRoleNameAsync(string name, OpenldapStaticRoleRequest openldapStaticRoleRequest = default(OpenldapStaticRoleRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostOpenldapStaticRoleNameWithHttpInfoAsync(name, openldapStaticRoleRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="openldapStaticRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostOpenldapStaticRoleNameWithHttpInfoAsync(string name, OpenldapStaticRoleRequest openldapStaticRoleRequest = default(OpenldapStaticRoleRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostOpenldapStaticRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = openldapStaticRoleRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/openldap/static-role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOpenldapStaticRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiBundleRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiBundle(PkiBundleRequest pkiBundleRequest = default(PkiBundleRequest))
        {
            PostPkiBundleWithHttpInfo(pkiBundleRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiBundleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiBundleWithHttpInfo(PkiBundleRequest pkiBundleRequest = default(PkiBundleRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiBundleRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/bundle", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiBundle", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiBundleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiBundleAsync(PkiBundleRequest pkiBundleRequest = default(PkiBundleRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiBundleWithHttpInfoAsync(pkiBundleRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiBundleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiBundleWithHttpInfoAsync(PkiBundleRequest pkiBundleRequest = default(PkiBundleRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiBundleRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/bundle", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiBundle", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiCertRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiCert(PkiCertRequest pkiCertRequest = default(PkiCertRequest))
        {
            PostPkiCertWithHttpInfo(pkiCertRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiCertRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiCertWithHttpInfo(PkiCertRequest pkiCertRequest = default(PkiCertRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiCertRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/cert", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiCert", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiCertRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiCertAsync(PkiCertRequest pkiCertRequest = default(PkiCertRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiCertWithHttpInfoAsync(pkiCertRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiCertRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiCertWithHttpInfoAsync(PkiCertRequest pkiCertRequest = default(PkiCertRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiCertRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/cert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiCert", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigCaRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiConfigCa(PkiConfigCaRequest pkiConfigCaRequest = default(PkiConfigCaRequest))
        {
            PostPkiConfigCaWithHttpInfo(pkiConfigCaRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigCaRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiConfigCaWithHttpInfo(PkiConfigCaRequest pkiConfigCaRequest = default(PkiConfigCaRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiConfigCaRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/config/ca", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiConfigCa", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigCaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiConfigCaAsync(PkiConfigCaRequest pkiConfigCaRequest = default(PkiConfigCaRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiConfigCaWithHttpInfoAsync(pkiConfigCaRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigCaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiConfigCaWithHttpInfoAsync(PkiConfigCaRequest pkiConfigCaRequest = default(PkiConfigCaRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiConfigCaRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/config/ca", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiConfigCa", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigCrlRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiConfigCrl(PkiConfigCrlRequest pkiConfigCrlRequest = default(PkiConfigCrlRequest))
        {
            PostPkiConfigCrlWithHttpInfo(pkiConfigCrlRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigCrlRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiConfigCrlWithHttpInfo(PkiConfigCrlRequest pkiConfigCrlRequest = default(PkiConfigCrlRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiConfigCrlRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/config/crl", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiConfigCrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigCrlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiConfigCrlAsync(PkiConfigCrlRequest pkiConfigCrlRequest = default(PkiConfigCrlRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiConfigCrlWithHttpInfoAsync(pkiConfigCrlRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigCrlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiConfigCrlWithHttpInfoAsync(PkiConfigCrlRequest pkiConfigCrlRequest = default(PkiConfigCrlRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiConfigCrlRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/config/crl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiConfigCrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigIssuersRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiConfigIssuers(PkiConfigIssuersRequest pkiConfigIssuersRequest = default(PkiConfigIssuersRequest))
        {
            PostPkiConfigIssuersWithHttpInfo(pkiConfigIssuersRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigIssuersRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiConfigIssuersWithHttpInfo(PkiConfigIssuersRequest pkiConfigIssuersRequest = default(PkiConfigIssuersRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiConfigIssuersRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/config/issuers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiConfigIssuers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigIssuersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiConfigIssuersAsync(PkiConfigIssuersRequest pkiConfigIssuersRequest = default(PkiConfigIssuersRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiConfigIssuersWithHttpInfoAsync(pkiConfigIssuersRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigIssuersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiConfigIssuersWithHttpInfoAsync(PkiConfigIssuersRequest pkiConfigIssuersRequest = default(PkiConfigIssuersRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiConfigIssuersRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/config/issuers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiConfigIssuers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigKeysRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiConfigKeys(PkiConfigKeysRequest pkiConfigKeysRequest = default(PkiConfigKeysRequest))
        {
            PostPkiConfigKeysWithHttpInfo(pkiConfigKeysRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigKeysRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiConfigKeysWithHttpInfo(PkiConfigKeysRequest pkiConfigKeysRequest = default(PkiConfigKeysRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiConfigKeysRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/config/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiConfigKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigKeysRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiConfigKeysAsync(PkiConfigKeysRequest pkiConfigKeysRequest = default(PkiConfigKeysRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiConfigKeysWithHttpInfoAsync(pkiConfigKeysRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigKeysRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiConfigKeysWithHttpInfoAsync(PkiConfigKeysRequest pkiConfigKeysRequest = default(PkiConfigKeysRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiConfigKeysRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/config/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiConfigKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigUrlsRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiConfigUrls(PkiConfigUrlsRequest pkiConfigUrlsRequest = default(PkiConfigUrlsRequest))
        {
            PostPkiConfigUrlsWithHttpInfo(pkiConfigUrlsRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigUrlsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiConfigUrlsWithHttpInfo(PkiConfigUrlsRequest pkiConfigUrlsRequest = default(PkiConfigUrlsRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiConfigUrlsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/config/urls", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiConfigUrls", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigUrlsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiConfigUrlsAsync(PkiConfigUrlsRequest pkiConfigUrlsRequest = default(PkiConfigUrlsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiConfigUrlsWithHttpInfoAsync(pkiConfigUrlsRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiConfigUrlsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiConfigUrlsWithHttpInfoAsync(PkiConfigUrlsRequest pkiConfigUrlsRequest = default(PkiConfigUrlsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiConfigUrlsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/config/urls", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiConfigUrls", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiIntermediateCrossSignRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiIntermediateCrossSign(PkiIntermediateCrossSignRequest pkiIntermediateCrossSignRequest = default(PkiIntermediateCrossSignRequest))
        {
            PostPkiIntermediateCrossSignWithHttpInfo(pkiIntermediateCrossSignRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiIntermediateCrossSignRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiIntermediateCrossSignWithHttpInfo(PkiIntermediateCrossSignRequest pkiIntermediateCrossSignRequest = default(PkiIntermediateCrossSignRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiIntermediateCrossSignRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/intermediate/cross-sign", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIntermediateCrossSign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiIntermediateCrossSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiIntermediateCrossSignAsync(PkiIntermediateCrossSignRequest pkiIntermediateCrossSignRequest = default(PkiIntermediateCrossSignRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiIntermediateCrossSignWithHttpInfoAsync(pkiIntermediateCrossSignRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiIntermediateCrossSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiIntermediateCrossSignWithHttpInfoAsync(PkiIntermediateCrossSignRequest pkiIntermediateCrossSignRequest = default(PkiIntermediateCrossSignRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiIntermediateCrossSignRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/intermediate/cross-sign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIntermediateCrossSign", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIntermediateGenerateRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiIntermediateGenerateExported(string exported, PkiIntermediateGenerateRequest pkiIntermediateGenerateRequest = default(PkiIntermediateGenerateRequest))
        {
            PostPkiIntermediateGenerateExportedWithHttpInfo(exported, pkiIntermediateGenerateRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIntermediateGenerateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiIntermediateGenerateExportedWithHttpInfo(string exported, PkiIntermediateGenerateRequest pkiIntermediateGenerateRequest = default(PkiIntermediateGenerateRequest))
        {
            // verify the required parameter 'exported' is set
            if (exported == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'exported' when calling SecretsApi->PostPkiIntermediateGenerateExported");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("exported", VaultClient.Client.ClientUtils.ParameterToString(exported)); // path parameter
            localVarRequestOptions.Data = pkiIntermediateGenerateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/intermediate/generate/{exported}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIntermediateGenerateExported", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIntermediateGenerateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiIntermediateGenerateExportedAsync(string exported, PkiIntermediateGenerateRequest pkiIntermediateGenerateRequest = default(PkiIntermediateGenerateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiIntermediateGenerateExportedWithHttpInfoAsync(exported, pkiIntermediateGenerateRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIntermediateGenerateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiIntermediateGenerateExportedWithHttpInfoAsync(string exported, PkiIntermediateGenerateRequest pkiIntermediateGenerateRequest = default(PkiIntermediateGenerateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'exported' is set
            if (exported == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'exported' when calling SecretsApi->PostPkiIntermediateGenerateExported");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("exported", VaultClient.Client.ClientUtils.ParameterToString(exported)); // path parameter
            localVarRequestOptions.Data = pkiIntermediateGenerateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/intermediate/generate/{exported}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIntermediateGenerateExported", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiIntermediateSetSignedRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiIntermediateSetSigned(PkiIntermediateSetSignedRequest pkiIntermediateSetSignedRequest = default(PkiIntermediateSetSignedRequest))
        {
            PostPkiIntermediateSetSignedWithHttpInfo(pkiIntermediateSetSignedRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiIntermediateSetSignedRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiIntermediateSetSignedWithHttpInfo(PkiIntermediateSetSignedRequest pkiIntermediateSetSignedRequest = default(PkiIntermediateSetSignedRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiIntermediateSetSignedRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/intermediate/set-signed", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIntermediateSetSigned", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiIntermediateSetSignedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiIntermediateSetSignedAsync(PkiIntermediateSetSignedRequest pkiIntermediateSetSignedRequest = default(PkiIntermediateSetSignedRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiIntermediateSetSignedWithHttpInfoAsync(pkiIntermediateSetSignedRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiIntermediateSetSignedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiIntermediateSetSignedWithHttpInfoAsync(PkiIntermediateSetSignedRequest pkiIntermediateSetSignedRequest = default(PkiIntermediateSetSignedRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiIntermediateSetSignedRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/intermediate/set-signed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIntermediateSetSigned", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiInternalExportedRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiInternalExported(PkiInternalExportedRequest pkiInternalExportedRequest = default(PkiInternalExportedRequest))
        {
            PostPkiInternalExportedWithHttpInfo(pkiInternalExportedRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiInternalExportedRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiInternalExportedWithHttpInfo(PkiInternalExportedRequest pkiInternalExportedRequest = default(PkiInternalExportedRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiInternalExportedRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/internal|exported", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiInternalExported", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiInternalExportedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiInternalExportedAsync(PkiInternalExportedRequest pkiInternalExportedRequest = default(PkiInternalExportedRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiInternalExportedWithHttpInfoAsync(pkiInternalExportedRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiInternalExportedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiInternalExportedWithHttpInfoAsync(PkiInternalExportedRequest pkiInternalExportedRequest = default(PkiInternalExportedRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiInternalExportedRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/internal|exported", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiInternalExported", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssueRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiIssueRole(string role, PkiIssueRequest pkiIssueRequest = default(PkiIssueRequest))
        {
            PostPkiIssueRoleWithHttpInfo(role, pkiIssueRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssueRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiIssueRoleWithHttpInfo(string role, PkiIssueRequest pkiIssueRequest = default(PkiIssueRequest))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->PostPkiIssueRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = pkiIssueRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/issue/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIssueRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssueRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiIssueRoleAsync(string role, PkiIssueRequest pkiIssueRequest = default(PkiIssueRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiIssueRoleWithHttpInfoAsync(role, pkiIssueRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssueRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiIssueRoleWithHttpInfoAsync(string role, PkiIssueRequest pkiIssueRequest = default(PkiIssueRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->PostPkiIssueRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = pkiIssueRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/issue/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIssueRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerIssueRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiIssuerIssuerRefIssueRole(string issuerRef, string role, PkiIssuerIssueRequest pkiIssuerIssueRequest = default(PkiIssuerIssueRequest))
        {
            PostPkiIssuerIssuerRefIssueRoleWithHttpInfo(issuerRef, role, pkiIssuerIssueRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerIssueRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiIssuerIssuerRefIssueRoleWithHttpInfo(string issuerRef, string role, PkiIssuerIssueRequest pkiIssuerIssueRequest = default(PkiIssuerIssueRequest))
        {
            // verify the required parameter 'issuerRef' is set
            if (issuerRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'issuerRef' when calling SecretsApi->PostPkiIssuerIssuerRefIssueRole");

            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->PostPkiIssuerIssuerRefIssueRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("issuer_ref", VaultClient.Client.ClientUtils.ParameterToString(issuerRef)); // path parameter
            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = pkiIssuerIssueRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/issuer/{issuer_ref}/issue/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIssuerIssuerRefIssueRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerIssueRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiIssuerIssuerRefIssueRoleAsync(string issuerRef, string role, PkiIssuerIssueRequest pkiIssuerIssueRequest = default(PkiIssuerIssueRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiIssuerIssuerRefIssueRoleWithHttpInfoAsync(issuerRef, role, pkiIssuerIssueRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerIssueRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiIssuerIssuerRefIssueRoleWithHttpInfoAsync(string issuerRef, string role, PkiIssuerIssueRequest pkiIssuerIssueRequest = default(PkiIssuerIssueRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'issuerRef' is set
            if (issuerRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'issuerRef' when calling SecretsApi->PostPkiIssuerIssuerRefIssueRole");

            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->PostPkiIssuerIssuerRefIssueRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("issuer_ref", VaultClient.Client.ClientUtils.ParameterToString(issuerRef)); // path parameter
            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = pkiIssuerIssueRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/issuer/{issuer_ref}/issue/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIssuerIssuerRefIssueRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignIntermediateRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiIssuerIssuerRefSignIntermediate(string issuerRef, PkiIssuerSignIntermediateRequest pkiIssuerSignIntermediateRequest = default(PkiIssuerSignIntermediateRequest))
        {
            PostPkiIssuerIssuerRefSignIntermediateWithHttpInfo(issuerRef, pkiIssuerSignIntermediateRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignIntermediateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiIssuerIssuerRefSignIntermediateWithHttpInfo(string issuerRef, PkiIssuerSignIntermediateRequest pkiIssuerSignIntermediateRequest = default(PkiIssuerSignIntermediateRequest))
        {
            // verify the required parameter 'issuerRef' is set
            if (issuerRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'issuerRef' when calling SecretsApi->PostPkiIssuerIssuerRefSignIntermediate");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("issuer_ref", VaultClient.Client.ClientUtils.ParameterToString(issuerRef)); // path parameter
            localVarRequestOptions.Data = pkiIssuerSignIntermediateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/issuer/{issuer_ref}/sign-intermediate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIssuerIssuerRefSignIntermediate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignIntermediateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiIssuerIssuerRefSignIntermediateAsync(string issuerRef, PkiIssuerSignIntermediateRequest pkiIssuerSignIntermediateRequest = default(PkiIssuerSignIntermediateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiIssuerIssuerRefSignIntermediateWithHttpInfoAsync(issuerRef, pkiIssuerSignIntermediateRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignIntermediateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiIssuerIssuerRefSignIntermediateWithHttpInfoAsync(string issuerRef, PkiIssuerSignIntermediateRequest pkiIssuerSignIntermediateRequest = default(PkiIssuerSignIntermediateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'issuerRef' is set
            if (issuerRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'issuerRef' when calling SecretsApi->PostPkiIssuerIssuerRefSignIntermediate");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("issuer_ref", VaultClient.Client.ClientUtils.ParameterToString(issuerRef)); // path parameter
            localVarRequestOptions.Data = pkiIssuerSignIntermediateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/issuer/{issuer_ref}/sign-intermediate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIssuerIssuerRefSignIntermediate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerSignRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiIssuerIssuerRefSignRole(string issuerRef, string role, PkiIssuerSignRequest pkiIssuerSignRequest = default(PkiIssuerSignRequest))
        {
            PostPkiIssuerIssuerRefSignRoleWithHttpInfo(issuerRef, role, pkiIssuerSignRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerSignRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiIssuerIssuerRefSignRoleWithHttpInfo(string issuerRef, string role, PkiIssuerSignRequest pkiIssuerSignRequest = default(PkiIssuerSignRequest))
        {
            // verify the required parameter 'issuerRef' is set
            if (issuerRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'issuerRef' when calling SecretsApi->PostPkiIssuerIssuerRefSignRole");

            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->PostPkiIssuerIssuerRefSignRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("issuer_ref", VaultClient.Client.ClientUtils.ParameterToString(issuerRef)); // path parameter
            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = pkiIssuerSignRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/issuer/{issuer_ref}/sign/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIssuerIssuerRefSignRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiIssuerIssuerRefSignRoleAsync(string issuerRef, string role, PkiIssuerSignRequest pkiIssuerSignRequest = default(PkiIssuerSignRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiIssuerIssuerRefSignRoleWithHttpInfoAsync(issuerRef, role, pkiIssuerSignRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiIssuerIssuerRefSignRoleWithHttpInfoAsync(string issuerRef, string role, PkiIssuerSignRequest pkiIssuerSignRequest = default(PkiIssuerSignRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'issuerRef' is set
            if (issuerRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'issuerRef' when calling SecretsApi->PostPkiIssuerIssuerRefSignRole");

            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->PostPkiIssuerIssuerRefSignRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("issuer_ref", VaultClient.Client.ClientUtils.ParameterToString(issuerRef)); // path parameter
            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = pkiIssuerSignRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/issuer/{issuer_ref}/sign/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIssuerIssuerRefSignRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignSelfIssuedRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiIssuerIssuerRefSignSelfIssued(string issuerRef, PkiIssuerSignSelfIssuedRequest pkiIssuerSignSelfIssuedRequest = default(PkiIssuerSignSelfIssuedRequest))
        {
            PostPkiIssuerIssuerRefSignSelfIssuedWithHttpInfo(issuerRef, pkiIssuerSignSelfIssuedRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignSelfIssuedRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiIssuerIssuerRefSignSelfIssuedWithHttpInfo(string issuerRef, PkiIssuerSignSelfIssuedRequest pkiIssuerSignSelfIssuedRequest = default(PkiIssuerSignSelfIssuedRequest))
        {
            // verify the required parameter 'issuerRef' is set
            if (issuerRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'issuerRef' when calling SecretsApi->PostPkiIssuerIssuerRefSignSelfIssued");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("issuer_ref", VaultClient.Client.ClientUtils.ParameterToString(issuerRef)); // path parameter
            localVarRequestOptions.Data = pkiIssuerSignSelfIssuedRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/issuer/{issuer_ref}/sign-self-issued", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIssuerIssuerRefSignSelfIssued", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignSelfIssuedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiIssuerIssuerRefSignSelfIssuedAsync(string issuerRef, PkiIssuerSignSelfIssuedRequest pkiIssuerSignSelfIssuedRequest = default(PkiIssuerSignSelfIssuedRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiIssuerIssuerRefSignSelfIssuedWithHttpInfoAsync(issuerRef, pkiIssuerSignSelfIssuedRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignSelfIssuedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiIssuerIssuerRefSignSelfIssuedWithHttpInfoAsync(string issuerRef, PkiIssuerSignSelfIssuedRequest pkiIssuerSignSelfIssuedRequest = default(PkiIssuerSignSelfIssuedRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'issuerRef' is set
            if (issuerRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'issuerRef' when calling SecretsApi->PostPkiIssuerIssuerRefSignSelfIssued");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("issuer_ref", VaultClient.Client.ClientUtils.ParameterToString(issuerRef)); // path parameter
            localVarRequestOptions.Data = pkiIssuerSignSelfIssuedRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/issuer/{issuer_ref}/sign-self-issued", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIssuerIssuerRefSignSelfIssued", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignVerbatimRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiIssuerIssuerRefSignVerbatim(string issuerRef, PkiIssuerSignVerbatimRequest pkiIssuerSignVerbatimRequest = default(PkiIssuerSignVerbatimRequest))
        {
            PostPkiIssuerIssuerRefSignVerbatimWithHttpInfo(issuerRef, pkiIssuerSignVerbatimRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignVerbatimRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiIssuerIssuerRefSignVerbatimWithHttpInfo(string issuerRef, PkiIssuerSignVerbatimRequest pkiIssuerSignVerbatimRequest = default(PkiIssuerSignVerbatimRequest))
        {
            // verify the required parameter 'issuerRef' is set
            if (issuerRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'issuerRef' when calling SecretsApi->PostPkiIssuerIssuerRefSignVerbatim");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("issuer_ref", VaultClient.Client.ClientUtils.ParameterToString(issuerRef)); // path parameter
            localVarRequestOptions.Data = pkiIssuerSignVerbatimRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/issuer/{issuer_ref}/sign-verbatim", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIssuerIssuerRefSignVerbatim", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignVerbatimRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiIssuerIssuerRefSignVerbatimAsync(string issuerRef, PkiIssuerSignVerbatimRequest pkiIssuerSignVerbatimRequest = default(PkiIssuerSignVerbatimRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiIssuerIssuerRefSignVerbatimWithHttpInfoAsync(issuerRef, pkiIssuerSignVerbatimRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiIssuerSignVerbatimRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiIssuerIssuerRefSignVerbatimWithHttpInfoAsync(string issuerRef, PkiIssuerSignVerbatimRequest pkiIssuerSignVerbatimRequest = default(PkiIssuerSignVerbatimRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'issuerRef' is set
            if (issuerRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'issuerRef' when calling SecretsApi->PostPkiIssuerIssuerRefSignVerbatim");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("issuer_ref", VaultClient.Client.ClientUtils.ParameterToString(issuerRef)); // path parameter
            localVarRequestOptions.Data = pkiIssuerSignVerbatimRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/issuer/{issuer_ref}/sign-verbatim", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIssuerIssuerRefSignVerbatim", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerSignVerbatimRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiIssuerIssuerRefSignVerbatimRole(string issuerRef, string role, PkiIssuerSignVerbatimRequest pkiIssuerSignVerbatimRequest = default(PkiIssuerSignVerbatimRequest))
        {
            PostPkiIssuerIssuerRefSignVerbatimRoleWithHttpInfo(issuerRef, role, pkiIssuerSignVerbatimRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerSignVerbatimRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiIssuerIssuerRefSignVerbatimRoleWithHttpInfo(string issuerRef, string role, PkiIssuerSignVerbatimRequest pkiIssuerSignVerbatimRequest = default(PkiIssuerSignVerbatimRequest))
        {
            // verify the required parameter 'issuerRef' is set
            if (issuerRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'issuerRef' when calling SecretsApi->PostPkiIssuerIssuerRefSignVerbatimRole");

            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->PostPkiIssuerIssuerRefSignVerbatimRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("issuer_ref", VaultClient.Client.ClientUtils.ParameterToString(issuerRef)); // path parameter
            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = pkiIssuerSignVerbatimRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/issuer/{issuer_ref}/sign-verbatim/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIssuerIssuerRefSignVerbatimRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerSignVerbatimRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiIssuerIssuerRefSignVerbatimRoleAsync(string issuerRef, string role, PkiIssuerSignVerbatimRequest pkiIssuerSignVerbatimRequest = default(PkiIssuerSignVerbatimRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiIssuerIssuerRefSignVerbatimRoleWithHttpInfoAsync(issuerRef, role, pkiIssuerSignVerbatimRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiIssuerSignVerbatimRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiIssuerIssuerRefSignVerbatimRoleWithHttpInfoAsync(string issuerRef, string role, PkiIssuerSignVerbatimRequest pkiIssuerSignVerbatimRequest = default(PkiIssuerSignVerbatimRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'issuerRef' is set
            if (issuerRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'issuerRef' when calling SecretsApi->PostPkiIssuerIssuerRefSignVerbatimRole");

            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->PostPkiIssuerIssuerRefSignVerbatimRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("issuer_ref", VaultClient.Client.ClientUtils.ParameterToString(issuerRef)); // path parameter
            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = pkiIssuerSignVerbatimRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/issuer/{issuer_ref}/sign-verbatim/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIssuerIssuerRefSignVerbatimRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiDerPemRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiIssuerRefDerPem(string issuerRef, PkiDerPemRequest pkiDerPemRequest = default(PkiDerPemRequest))
        {
            PostPkiIssuerRefDerPemWithHttpInfo(issuerRef, pkiDerPemRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiDerPemRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiIssuerRefDerPemWithHttpInfo(string issuerRef, PkiDerPemRequest pkiDerPemRequest = default(PkiDerPemRequest))
        {
            // verify the required parameter 'issuerRef' is set
            if (issuerRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'issuerRef' when calling SecretsApi->PostPkiIssuerRefDerPem");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("issuer_ref", VaultClient.Client.ClientUtils.ParameterToString(issuerRef)); // path parameter
            localVarRequestOptions.Data = pkiDerPemRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/{issuer_ref}/der|/pem", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIssuerRefDerPem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiDerPemRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiIssuerRefDerPemAsync(string issuerRef, PkiDerPemRequest pkiDerPemRequest = default(PkiDerPemRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiIssuerRefDerPemWithHttpInfoAsync(issuerRef, pkiDerPemRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issuerRef">Reference to a existing issuer; either \&quot;default\&quot; for the configured default issuer, an identifier or the name assigned to the issuer.</param>
        /// <param name="pkiDerPemRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiIssuerRefDerPemWithHttpInfoAsync(string issuerRef, PkiDerPemRequest pkiDerPemRequest = default(PkiDerPemRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'issuerRef' is set
            if (issuerRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'issuerRef' when calling SecretsApi->PostPkiIssuerRefDerPem");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("issuer_ref", VaultClient.Client.ClientUtils.ParameterToString(issuerRef)); // path parameter
            localVarRequestOptions.Data = pkiDerPemRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/{issuer_ref}/der|/pem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIssuerRefDerPem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIssuersGenerateIntermediateRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiIssuersGenerateIntermediateExported(string exported, PkiIssuersGenerateIntermediateRequest pkiIssuersGenerateIntermediateRequest = default(PkiIssuersGenerateIntermediateRequest))
        {
            PostPkiIssuersGenerateIntermediateExportedWithHttpInfo(exported, pkiIssuersGenerateIntermediateRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIssuersGenerateIntermediateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiIssuersGenerateIntermediateExportedWithHttpInfo(string exported, PkiIssuersGenerateIntermediateRequest pkiIssuersGenerateIntermediateRequest = default(PkiIssuersGenerateIntermediateRequest))
        {
            // verify the required parameter 'exported' is set
            if (exported == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'exported' when calling SecretsApi->PostPkiIssuersGenerateIntermediateExported");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("exported", VaultClient.Client.ClientUtils.ParameterToString(exported)); // path parameter
            localVarRequestOptions.Data = pkiIssuersGenerateIntermediateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/issuers/generate/intermediate/{exported}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIssuersGenerateIntermediateExported", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIssuersGenerateIntermediateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiIssuersGenerateIntermediateExportedAsync(string exported, PkiIssuersGenerateIntermediateRequest pkiIssuersGenerateIntermediateRequest = default(PkiIssuersGenerateIntermediateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiIssuersGenerateIntermediateExportedWithHttpInfoAsync(exported, pkiIssuersGenerateIntermediateRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIssuersGenerateIntermediateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiIssuersGenerateIntermediateExportedWithHttpInfoAsync(string exported, PkiIssuersGenerateIntermediateRequest pkiIssuersGenerateIntermediateRequest = default(PkiIssuersGenerateIntermediateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'exported' is set
            if (exported == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'exported' when calling SecretsApi->PostPkiIssuersGenerateIntermediateExported");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("exported", VaultClient.Client.ClientUtils.ParameterToString(exported)); // path parameter
            localVarRequestOptions.Data = pkiIssuersGenerateIntermediateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/issuers/generate/intermediate/{exported}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIssuersGenerateIntermediateExported", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIssuersGenerateRootRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiIssuersGenerateRootExported(string exported, PkiIssuersGenerateRootRequest pkiIssuersGenerateRootRequest = default(PkiIssuersGenerateRootRequest))
        {
            PostPkiIssuersGenerateRootExportedWithHttpInfo(exported, pkiIssuersGenerateRootRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIssuersGenerateRootRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiIssuersGenerateRootExportedWithHttpInfo(string exported, PkiIssuersGenerateRootRequest pkiIssuersGenerateRootRequest = default(PkiIssuersGenerateRootRequest))
        {
            // verify the required parameter 'exported' is set
            if (exported == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'exported' when calling SecretsApi->PostPkiIssuersGenerateRootExported");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("exported", VaultClient.Client.ClientUtils.ParameterToString(exported)); // path parameter
            localVarRequestOptions.Data = pkiIssuersGenerateRootRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/issuers/generate/root/{exported}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIssuersGenerateRootExported", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIssuersGenerateRootRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiIssuersGenerateRootExportedAsync(string exported, PkiIssuersGenerateRootRequest pkiIssuersGenerateRootRequest = default(PkiIssuersGenerateRootRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiIssuersGenerateRootExportedWithHttpInfoAsync(exported, pkiIssuersGenerateRootRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiIssuersGenerateRootRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiIssuersGenerateRootExportedWithHttpInfoAsync(string exported, PkiIssuersGenerateRootRequest pkiIssuersGenerateRootRequest = default(PkiIssuersGenerateRootRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'exported' is set
            if (exported == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'exported' when calling SecretsApi->PostPkiIssuersGenerateRootExported");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("exported", VaultClient.Client.ClientUtils.ParameterToString(exported)); // path parameter
            localVarRequestOptions.Data = pkiIssuersGenerateRootRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/issuers/generate/root/{exported}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiIssuersGenerateRootExported", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiJsonRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiJson(PkiJsonRequest pkiJsonRequest = default(PkiJsonRequest))
        {
            PostPkiJsonWithHttpInfo(pkiJsonRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiJsonRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiJsonWithHttpInfo(PkiJsonRequest pkiJsonRequest = default(PkiJsonRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiJsonRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki//json", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiJson", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiJsonAsync(PkiJsonRequest pkiJsonRequest = default(PkiJsonRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiJsonWithHttpInfoAsync(pkiJsonRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiJsonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiJsonWithHttpInfoAsync(PkiJsonRequest pkiJsonRequest = default(PkiJsonRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiJsonRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki//json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiJson", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <param name="pkiKeyRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiKeyKeyRef(string keyRef, PkiKeyRequest pkiKeyRequest = default(PkiKeyRequest))
        {
            PostPkiKeyKeyRefWithHttpInfo(keyRef, pkiKeyRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <param name="pkiKeyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiKeyKeyRefWithHttpInfo(string keyRef, PkiKeyRequest pkiKeyRequest = default(PkiKeyRequest))
        {
            // verify the required parameter 'keyRef' is set
            if (keyRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'keyRef' when calling SecretsApi->PostPkiKeyKeyRef");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key_ref", VaultClient.Client.ClientUtils.ParameterToString(keyRef)); // path parameter
            localVarRequestOptions.Data = pkiKeyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/key/{key_ref}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiKeyKeyRef", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <param name="pkiKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiKeyKeyRefAsync(string keyRef, PkiKeyRequest pkiKeyRequest = default(PkiKeyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiKeyKeyRefWithHttpInfoAsync(keyRef, pkiKeyRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyRef">Reference to key; either \&quot;default\&quot; for the configured default key, an identifier of a key, or the name assigned to the key.</param>
        /// <param name="pkiKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiKeyKeyRefWithHttpInfoAsync(string keyRef, PkiKeyRequest pkiKeyRequest = default(PkiKeyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'keyRef' is set
            if (keyRef == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'keyRef' when calling SecretsApi->PostPkiKeyKeyRef");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key_ref", VaultClient.Client.ClientUtils.ParameterToString(keyRef)); // path parameter
            localVarRequestOptions.Data = pkiKeyRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/key/{key_ref}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiKeyKeyRef", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiKeysImportRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiKeysImport(PkiKeysImportRequest pkiKeysImportRequest = default(PkiKeysImportRequest))
        {
            PostPkiKeysImportWithHttpInfo(pkiKeysImportRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiKeysImportRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiKeysImportWithHttpInfo(PkiKeysImportRequest pkiKeysImportRequest = default(PkiKeysImportRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiKeysImportRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/keys/import", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiKeysImport", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiKeysImportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiKeysImportAsync(PkiKeysImportRequest pkiKeysImportRequest = default(PkiKeysImportRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiKeysImportWithHttpInfoAsync(pkiKeysImportRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiKeysImportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiKeysImportWithHttpInfoAsync(PkiKeysImportRequest pkiKeysImportRequest = default(PkiKeysImportRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiKeysImportRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/keys/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiKeysImport", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiKmsRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiKms(PkiKmsRequest pkiKmsRequest = default(PkiKmsRequest))
        {
            PostPkiKmsWithHttpInfo(pkiKmsRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiKmsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiKmsWithHttpInfo(PkiKmsRequest pkiKmsRequest = default(PkiKmsRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiKmsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/kms", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiKms", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiKmsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiKmsAsync(PkiKmsRequest pkiKmsRequest = default(PkiKmsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiKmsWithHttpInfoAsync(pkiKmsRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiKmsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiKmsWithHttpInfoAsync(PkiKmsRequest pkiKmsRequest = default(PkiKmsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiKmsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/kms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiKms", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRevokeRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiRevoke(PkiRevokeRequest pkiRevokeRequest = default(PkiRevokeRequest))
        {
            PostPkiRevokeWithHttpInfo(pkiRevokeRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRevokeRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiRevokeWithHttpInfo(PkiRevokeRequest pkiRevokeRequest = default(PkiRevokeRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiRevokeRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/revoke", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiRevoke", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRevokeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiRevokeAsync(PkiRevokeRequest pkiRevokeRequest = default(PkiRevokeRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiRevokeWithHttpInfoAsync(pkiRevokeRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRevokeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiRevokeWithHttpInfoAsync(PkiRevokeRequest pkiRevokeRequest = default(PkiRevokeRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiRevokeRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/revoke", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiRevoke", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="pkiRolesRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiRolesName(string name, PkiRolesRequest pkiRolesRequest = default(PkiRolesRequest))
        {
            PostPkiRolesNameWithHttpInfo(name, pkiRolesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="pkiRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiRolesNameWithHttpInfo(string name, PkiRolesRequest pkiRolesRequest = default(PkiRolesRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostPkiRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = pkiRolesRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="pkiRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiRolesNameAsync(string name, PkiRolesRequest pkiRolesRequest = default(PkiRolesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiRolesNameWithHttpInfoAsync(name, pkiRolesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="pkiRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiRolesNameWithHttpInfoAsync(string name, PkiRolesRequest pkiRolesRequest = default(PkiRolesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostPkiRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = pkiRolesRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiRootGenerateRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiRootGenerateExported(string exported, PkiRootGenerateRequest pkiRootGenerateRequest = default(PkiRootGenerateRequest))
        {
            PostPkiRootGenerateExportedWithHttpInfo(exported, pkiRootGenerateRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiRootGenerateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiRootGenerateExportedWithHttpInfo(string exported, PkiRootGenerateRequest pkiRootGenerateRequest = default(PkiRootGenerateRequest))
        {
            // verify the required parameter 'exported' is set
            if (exported == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'exported' when calling SecretsApi->PostPkiRootGenerateExported");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("exported", VaultClient.Client.ClientUtils.ParameterToString(exported)); // path parameter
            localVarRequestOptions.Data = pkiRootGenerateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/root/generate/{exported}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiRootGenerateExported", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiRootGenerateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiRootGenerateExportedAsync(string exported, PkiRootGenerateRequest pkiRootGenerateRequest = default(PkiRootGenerateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiRootGenerateExportedWithHttpInfoAsync(exported, pkiRootGenerateRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiRootGenerateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiRootGenerateExportedWithHttpInfoAsync(string exported, PkiRootGenerateRequest pkiRootGenerateRequest = default(PkiRootGenerateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'exported' is set
            if (exported == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'exported' when calling SecretsApi->PostPkiRootGenerateExported");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("exported", VaultClient.Client.ClientUtils.ParameterToString(exported)); // path parameter
            localVarRequestOptions.Data = pkiRootGenerateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/root/generate/{exported}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiRootGenerateExported", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootReplaceRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiRootReplace(PkiRootReplaceRequest pkiRootReplaceRequest = default(PkiRootReplaceRequest))
        {
            PostPkiRootReplaceWithHttpInfo(pkiRootReplaceRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootReplaceRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiRootReplaceWithHttpInfo(PkiRootReplaceRequest pkiRootReplaceRequest = default(PkiRootReplaceRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiRootReplaceRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/root/replace", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiRootReplace", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootReplaceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiRootReplaceAsync(PkiRootReplaceRequest pkiRootReplaceRequest = default(PkiRootReplaceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiRootReplaceWithHttpInfoAsync(pkiRootReplaceRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootReplaceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiRootReplaceWithHttpInfoAsync(PkiRootReplaceRequest pkiRootReplaceRequest = default(PkiRootReplaceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiRootReplaceRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/root/replace", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiRootReplace", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiRootRotateRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiRootRotateExported(string exported, PkiRootRotateRequest pkiRootRotateRequest = default(PkiRootRotateRequest))
        {
            PostPkiRootRotateExportedWithHttpInfo(exported, pkiRootRotateRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiRootRotateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiRootRotateExportedWithHttpInfo(string exported, PkiRootRotateRequest pkiRootRotateRequest = default(PkiRootRotateRequest))
        {
            // verify the required parameter 'exported' is set
            if (exported == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'exported' when calling SecretsApi->PostPkiRootRotateExported");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("exported", VaultClient.Client.ClientUtils.ParameterToString(exported)); // path parameter
            localVarRequestOptions.Data = pkiRootRotateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/root/rotate/{exported}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiRootRotateExported", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiRootRotateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiRootRotateExportedAsync(string exported, PkiRootRotateRequest pkiRootRotateRequest = default(PkiRootRotateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiRootRotateExportedWithHttpInfoAsync(exported, pkiRootRotateRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exported">Must be \&quot;internal\&quot;, \&quot;exported\&quot; or \&quot;kms\&quot;. If set to \&quot;exported\&quot;, the generated private key will be returned. This is your *only* chance to retrieve the private key!</param>
        /// <param name="pkiRootRotateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiRootRotateExportedWithHttpInfoAsync(string exported, PkiRootRotateRequest pkiRootRotateRequest = default(PkiRootRotateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'exported' is set
            if (exported == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'exported' when calling SecretsApi->PostPkiRootRotateExported");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("exported", VaultClient.Client.ClientUtils.ParameterToString(exported)); // path parameter
            localVarRequestOptions.Data = pkiRootRotateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/root/rotate/{exported}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiRootRotateExported", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootSignIntermediateRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiRootSignIntermediate(PkiRootSignIntermediateRequest pkiRootSignIntermediateRequest = default(PkiRootSignIntermediateRequest))
        {
            PostPkiRootSignIntermediateWithHttpInfo(pkiRootSignIntermediateRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootSignIntermediateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiRootSignIntermediateWithHttpInfo(PkiRootSignIntermediateRequest pkiRootSignIntermediateRequest = default(PkiRootSignIntermediateRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiRootSignIntermediateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/root/sign-intermediate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiRootSignIntermediate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootSignIntermediateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiRootSignIntermediateAsync(PkiRootSignIntermediateRequest pkiRootSignIntermediateRequest = default(PkiRootSignIntermediateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiRootSignIntermediateWithHttpInfoAsync(pkiRootSignIntermediateRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootSignIntermediateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiRootSignIntermediateWithHttpInfoAsync(PkiRootSignIntermediateRequest pkiRootSignIntermediateRequest = default(PkiRootSignIntermediateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiRootSignIntermediateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/root/sign-intermediate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiRootSignIntermediate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootSignSelfIssuedRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiRootSignSelfIssued(PkiRootSignSelfIssuedRequest pkiRootSignSelfIssuedRequest = default(PkiRootSignSelfIssuedRequest))
        {
            PostPkiRootSignSelfIssuedWithHttpInfo(pkiRootSignSelfIssuedRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootSignSelfIssuedRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiRootSignSelfIssuedWithHttpInfo(PkiRootSignSelfIssuedRequest pkiRootSignSelfIssuedRequest = default(PkiRootSignSelfIssuedRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiRootSignSelfIssuedRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/root/sign-self-issued", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiRootSignSelfIssued", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootSignSelfIssuedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiRootSignSelfIssuedAsync(PkiRootSignSelfIssuedRequest pkiRootSignSelfIssuedRequest = default(PkiRootSignSelfIssuedRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiRootSignSelfIssuedWithHttpInfoAsync(pkiRootSignSelfIssuedRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiRootSignSelfIssuedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiRootSignSelfIssuedWithHttpInfoAsync(PkiRootSignSelfIssuedRequest pkiRootSignSelfIssuedRequest = default(PkiRootSignSelfIssuedRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiRootSignSelfIssuedRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/root/sign-self-issued", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiRootSignSelfIssued", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiSignRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiSignRole(string role, PkiSignRequest pkiSignRequest = default(PkiSignRequest))
        {
            PostPkiSignRoleWithHttpInfo(role, pkiSignRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiSignRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiSignRoleWithHttpInfo(string role, PkiSignRequest pkiSignRequest = default(PkiSignRequest))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->PostPkiSignRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = pkiSignRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/sign/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiSignRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiSignRoleAsync(string role, PkiSignRequest pkiSignRequest = default(PkiSignRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiSignRoleWithHttpInfoAsync(role, pkiSignRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiSignRoleWithHttpInfoAsync(string role, PkiSignRequest pkiSignRequest = default(PkiSignRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->PostPkiSignRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = pkiSignRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/sign/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiSignRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignVerbatimRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiSignVerbatim(PkiSignVerbatimRequest pkiSignVerbatimRequest = default(PkiSignVerbatimRequest))
        {
            PostPkiSignVerbatimWithHttpInfo(pkiSignVerbatimRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignVerbatimRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiSignVerbatimWithHttpInfo(PkiSignVerbatimRequest pkiSignVerbatimRequest = default(PkiSignVerbatimRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiSignVerbatimRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/sign-verbatim", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiSignVerbatim", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignVerbatimRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiSignVerbatimAsync(PkiSignVerbatimRequest pkiSignVerbatimRequest = default(PkiSignVerbatimRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiSignVerbatimWithHttpInfoAsync(pkiSignVerbatimRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignVerbatimRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiSignVerbatimWithHttpInfoAsync(PkiSignVerbatimRequest pkiSignVerbatimRequest = default(PkiSignVerbatimRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiSignVerbatimRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/sign-verbatim", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiSignVerbatim", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiSignVerbatimRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiSignVerbatimRole(string role, PkiSignVerbatimRequest pkiSignVerbatimRequest = default(PkiSignVerbatimRequest))
        {
            PostPkiSignVerbatimRoleWithHttpInfo(role, pkiSignVerbatimRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiSignVerbatimRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiSignVerbatimRoleWithHttpInfo(string role, PkiSignVerbatimRequest pkiSignVerbatimRequest = default(PkiSignVerbatimRequest))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->PostPkiSignVerbatimRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = pkiSignVerbatimRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/sign-verbatim/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiSignVerbatimRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiSignVerbatimRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiSignVerbatimRoleAsync(string role, PkiSignVerbatimRequest pkiSignVerbatimRequest = default(PkiSignVerbatimRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiSignVerbatimRoleWithHttpInfoAsync(role, pkiSignVerbatimRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request</param>
        /// <param name="pkiSignVerbatimRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiSignVerbatimRoleWithHttpInfoAsync(string role, PkiSignVerbatimRequest pkiSignVerbatimRequest = default(PkiSignVerbatimRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->PostPkiSignVerbatimRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = pkiSignVerbatimRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/sign-verbatim/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiSignVerbatimRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTidyRequest"> (optional)</param>
        /// <returns></returns>
        public void PostPkiTidy(PkiTidyRequest pkiTidyRequest = default(PkiTidyRequest))
        {
            PostPkiTidyWithHttpInfo(pkiTidyRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTidyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostPkiTidyWithHttpInfo(PkiTidyRequest pkiTidyRequest = default(PkiTidyRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiTidyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pki/tidy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiTidy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTidyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostPkiTidyAsync(PkiTidyRequest pkiTidyRequest = default(PkiTidyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostPkiTidyWithHttpInfoAsync(pkiTidyRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTidyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostPkiTidyWithHttpInfoAsync(PkiTidyRequest pkiTidyRequest = default(PkiTidyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = pkiTidyRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pki/tidy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostPkiTidy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the connection URI, username, and password to talk to RabbitMQ management HTTP API. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rabbitmqConfigConnectionRequest"> (optional)</param>
        /// <returns></returns>
        public void PostRabbitmqConfigConnection(RabbitmqConfigConnectionRequest rabbitmqConfigConnectionRequest = default(RabbitmqConfigConnectionRequest))
        {
            PostRabbitmqConfigConnectionWithHttpInfo(rabbitmqConfigConnectionRequest);
        }

        /// <summary>
        /// Configure the connection URI, username, and password to talk to RabbitMQ management HTTP API. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rabbitmqConfigConnectionRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostRabbitmqConfigConnectionWithHttpInfo(RabbitmqConfigConnectionRequest rabbitmqConfigConnectionRequest = default(RabbitmqConfigConnectionRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = rabbitmqConfigConnectionRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/rabbitmq/config/connection", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostRabbitmqConfigConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the connection URI, username, and password to talk to RabbitMQ management HTTP API. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rabbitmqConfigConnectionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostRabbitmqConfigConnectionAsync(RabbitmqConfigConnectionRequest rabbitmqConfigConnectionRequest = default(RabbitmqConfigConnectionRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostRabbitmqConfigConnectionWithHttpInfoAsync(rabbitmqConfigConnectionRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the connection URI, username, and password to talk to RabbitMQ management HTTP API. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rabbitmqConfigConnectionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostRabbitmqConfigConnectionWithHttpInfoAsync(RabbitmqConfigConnectionRequest rabbitmqConfigConnectionRequest = default(RabbitmqConfigConnectionRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = rabbitmqConfigConnectionRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/rabbitmq/config/connection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostRabbitmqConfigConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the lease parameters for generated credentials 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rabbitmqConfigLeaseRequest"> (optional)</param>
        /// <returns></returns>
        public void PostRabbitmqConfigLease(RabbitmqConfigLeaseRequest rabbitmqConfigLeaseRequest = default(RabbitmqConfigLeaseRequest))
        {
            PostRabbitmqConfigLeaseWithHttpInfo(rabbitmqConfigLeaseRequest);
        }

        /// <summary>
        /// Configure the lease parameters for generated credentials 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rabbitmqConfigLeaseRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostRabbitmqConfigLeaseWithHttpInfo(RabbitmqConfigLeaseRequest rabbitmqConfigLeaseRequest = default(RabbitmqConfigLeaseRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = rabbitmqConfigLeaseRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/rabbitmq/config/lease", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostRabbitmqConfigLease", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the lease parameters for generated credentials 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rabbitmqConfigLeaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostRabbitmqConfigLeaseAsync(RabbitmqConfigLeaseRequest rabbitmqConfigLeaseRequest = default(RabbitmqConfigLeaseRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostRabbitmqConfigLeaseWithHttpInfoAsync(rabbitmqConfigLeaseRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the lease parameters for generated credentials 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rabbitmqConfigLeaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostRabbitmqConfigLeaseWithHttpInfoAsync(RabbitmqConfigLeaseRequest rabbitmqConfigLeaseRequest = default(RabbitmqConfigLeaseRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = rabbitmqConfigLeaseRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/rabbitmq/config/lease", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostRabbitmqConfigLease", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the roles that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="rabbitmqRolesRequest"> (optional)</param>
        /// <returns></returns>
        public void PostRabbitmqRolesName(string name, RabbitmqRolesRequest rabbitmqRolesRequest = default(RabbitmqRolesRequest))
        {
            PostRabbitmqRolesNameWithHttpInfo(name, rabbitmqRolesRequest);
        }

        /// <summary>
        /// Manage the roles that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="rabbitmqRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostRabbitmqRolesNameWithHttpInfo(string name, RabbitmqRolesRequest rabbitmqRolesRequest = default(RabbitmqRolesRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostRabbitmqRolesName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = rabbitmqRolesRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/rabbitmq/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostRabbitmqRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the roles that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="rabbitmqRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostRabbitmqRolesNameAsync(string name, RabbitmqRolesRequest rabbitmqRolesRequest = default(RabbitmqRolesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostRabbitmqRolesNameWithHttpInfoAsync(name, rabbitmqRolesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage the roles that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="rabbitmqRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostRabbitmqRolesNameWithHttpInfoAsync(string name, RabbitmqRolesRequest rabbitmqRolesRequest = default(RabbitmqRolesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostRabbitmqRolesName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = rabbitmqRolesRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/rabbitmq/roles/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostRabbitmqRolesName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure backend level settings that are applied to every key in the key-value store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kvConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostSecretConfig(KvConfigRequest kvConfigRequest = default(KvConfigRequest))
        {
            PostSecretConfigWithHttpInfo(kvConfigRequest);
        }

        /// <summary>
        /// Configure backend level settings that are applied to every key in the key-value store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kvConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostSecretConfigWithHttpInfo(KvConfigRequest kvConfigRequest = default(KvConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = kvConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/secret/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecretConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure backend level settings that are applied to every key in the key-value store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kvConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostSecretConfigAsync(KvConfigRequest kvConfigRequest = default(KvConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostSecretConfigWithHttpInfoAsync(kvConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure backend level settings that are applied to every key in the key-value store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kvConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostSecretConfigWithHttpInfoAsync(KvConfigRequest kvConfigRequest = default(KvConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = kvConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/secret/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecretConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDataRequest"> (optional)</param>
        /// <returns></returns>
        public void PostSecretDataPath(string path, KvDataRequest kvDataRequest = default(KvDataRequest))
        {
            PostSecretDataPathWithHttpInfo(path, kvDataRequest);
        }

        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDataRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostSecretDataPathWithHttpInfo(string path, KvDataRequest kvDataRequest = default(KvDataRequest))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->PostSecretDataPath");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = kvDataRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/secret/data/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecretDataPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDataRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostSecretDataPathAsync(string path, KvDataRequest kvDataRequest = default(KvDataRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostSecretDataPathWithHttpInfoAsync(path, kvDataRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Write, Patch, Read, and Delete data in the Key-Value Store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDataRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostSecretDataPathWithHttpInfoAsync(string path, KvDataRequest kvDataRequest = default(KvDataRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->PostSecretDataPath");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = kvDataRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/secret/data/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecretDataPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Marks one or more versions as deleted in the KV store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDeleteRequest"> (optional)</param>
        /// <returns></returns>
        public void PostSecretDeletePath(string path, KvDeleteRequest kvDeleteRequest = default(KvDeleteRequest))
        {
            PostSecretDeletePathWithHttpInfo(path, kvDeleteRequest);
        }

        /// <summary>
        /// Marks one or more versions as deleted in the KV store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDeleteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostSecretDeletePathWithHttpInfo(string path, KvDeleteRequest kvDeleteRequest = default(KvDeleteRequest))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->PostSecretDeletePath");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = kvDeleteRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/secret/delete/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecretDeletePath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Marks one or more versions as deleted in the KV store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostSecretDeletePathAsync(string path, KvDeleteRequest kvDeleteRequest = default(KvDeleteRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostSecretDeletePathWithHttpInfoAsync(path, kvDeleteRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Marks one or more versions as deleted in the KV store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostSecretDeletePathWithHttpInfoAsync(string path, KvDeleteRequest kvDeleteRequest = default(KvDeleteRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->PostSecretDeletePath");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = kvDeleteRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/secret/delete/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecretDeletePath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Permanently removes one or more versions in the KV store 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDestroyRequest"> (optional)</param>
        /// <returns></returns>
        public void PostSecretDestroyPath(string path, KvDestroyRequest kvDestroyRequest = default(KvDestroyRequest))
        {
            PostSecretDestroyPathWithHttpInfo(path, kvDestroyRequest);
        }

        /// <summary>
        /// Permanently removes one or more versions in the KV store 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDestroyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostSecretDestroyPathWithHttpInfo(string path, KvDestroyRequest kvDestroyRequest = default(KvDestroyRequest))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->PostSecretDestroyPath");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = kvDestroyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/secret/destroy/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecretDestroyPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Permanently removes one or more versions in the KV store 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDestroyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostSecretDestroyPathAsync(string path, KvDestroyRequest kvDestroyRequest = default(KvDestroyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostSecretDestroyPathWithHttpInfoAsync(path, kvDestroyRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Permanently removes one or more versions in the KV store 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvDestroyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostSecretDestroyPathWithHttpInfoAsync(string path, KvDestroyRequest kvDestroyRequest = default(KvDestroyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->PostSecretDestroyPath");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = kvDestroyRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/secret/destroy/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecretDestroyPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configures settings for the KV store 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvMetadataRequest"> (optional)</param>
        /// <returns></returns>
        public void PostSecretMetadataPath(string path, KvMetadataRequest kvMetadataRequest = default(KvMetadataRequest))
        {
            PostSecretMetadataPathWithHttpInfo(path, kvMetadataRequest);
        }

        /// <summary>
        /// Configures settings for the KV store 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvMetadataRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostSecretMetadataPathWithHttpInfo(string path, KvMetadataRequest kvMetadataRequest = default(KvMetadataRequest))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->PostSecretMetadataPath");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = kvMetadataRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/secret/metadata/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecretMetadataPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configures settings for the KV store 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvMetadataRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostSecretMetadataPathAsync(string path, KvMetadataRequest kvMetadataRequest = default(KvMetadataRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostSecretMetadataPathWithHttpInfoAsync(path, kvMetadataRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configures settings for the KV store 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvMetadataRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostSecretMetadataPathWithHttpInfoAsync(string path, KvMetadataRequest kvMetadataRequest = default(KvMetadataRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->PostSecretMetadataPath");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = kvMetadataRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/secret/metadata/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecretMetadataPath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Undeletes one or more versions from the KV store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvUndeleteRequest"> (optional)</param>
        /// <returns></returns>
        public void PostSecretUndeletePath(string path, KvUndeleteRequest kvUndeleteRequest = default(KvUndeleteRequest))
        {
            PostSecretUndeletePathWithHttpInfo(path, kvUndeleteRequest);
        }

        /// <summary>
        /// Undeletes one or more versions from the KV store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvUndeleteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostSecretUndeletePathWithHttpInfo(string path, KvUndeleteRequest kvUndeleteRequest = default(KvUndeleteRequest))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->PostSecretUndeletePath");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = kvUndeleteRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/secret/undelete/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecretUndeletePath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Undeletes one or more versions from the KV store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvUndeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostSecretUndeletePathAsync(string path, KvUndeleteRequest kvUndeleteRequest = default(KvUndeleteRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostSecretUndeletePathWithHttpInfoAsync(path, kvUndeleteRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Undeletes one or more versions from the KV store. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Location of the secret.</param>
        /// <param name="kvUndeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostSecretUndeletePathWithHttpInfoAsync(string path, KvUndeleteRequest kvUndeleteRequest = default(KvUndeleteRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->PostSecretUndeletePath");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", VaultClient.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = kvUndeleteRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/secret/undelete/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecretUndeletePath", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the SSH private key used for signing certificates. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshConfigCaRequest"> (optional)</param>
        /// <returns></returns>
        public void PostSshConfigCa(SshConfigCaRequest sshConfigCaRequest = default(SshConfigCaRequest))
        {
            PostSshConfigCaWithHttpInfo(sshConfigCaRequest);
        }

        /// <summary>
        /// Set the SSH private key used for signing certificates. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshConfigCaRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostSshConfigCaWithHttpInfo(SshConfigCaRequest sshConfigCaRequest = default(SshConfigCaRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sshConfigCaRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/ssh/config/ca", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSshConfigCa", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the SSH private key used for signing certificates. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshConfigCaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostSshConfigCaAsync(SshConfigCaRequest sshConfigCaRequest = default(SshConfigCaRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostSshConfigCaWithHttpInfoAsync(sshConfigCaRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Set the SSH private key used for signing certificates. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshConfigCaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostSshConfigCaWithHttpInfoAsync(SshConfigCaRequest sshConfigCaRequest = default(SshConfigCaRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sshConfigCaRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/ssh/config/ca", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSshConfigCa", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign zero address as default CIDR block for select roles. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshConfigZeroaddressRequest"> (optional)</param>
        /// <returns></returns>
        public void PostSshConfigZeroaddress(SshConfigZeroaddressRequest sshConfigZeroaddressRequest = default(SshConfigZeroaddressRequest))
        {
            PostSshConfigZeroaddressWithHttpInfo(sshConfigZeroaddressRequest);
        }

        /// <summary>
        /// Assign zero address as default CIDR block for select roles. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshConfigZeroaddressRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostSshConfigZeroaddressWithHttpInfo(SshConfigZeroaddressRequest sshConfigZeroaddressRequest = default(SshConfigZeroaddressRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sshConfigZeroaddressRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/ssh/config/zeroaddress", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSshConfigZeroaddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign zero address as default CIDR block for select roles. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshConfigZeroaddressRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostSshConfigZeroaddressAsync(SshConfigZeroaddressRequest sshConfigZeroaddressRequest = default(SshConfigZeroaddressRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostSshConfigZeroaddressWithHttpInfoAsync(sshConfigZeroaddressRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Assign zero address as default CIDR block for select roles. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshConfigZeroaddressRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostSshConfigZeroaddressWithHttpInfoAsync(SshConfigZeroaddressRequest sshConfigZeroaddressRequest = default(SshConfigZeroaddressRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sshConfigZeroaddressRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/ssh/config/zeroaddress", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSshConfigZeroaddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a credential for establishing SSH connection with the remote host. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required] Name of the role</param>
        /// <param name="sshCredsRequest"> (optional)</param>
        /// <returns></returns>
        public void PostSshCredsRole(string role, SshCredsRequest sshCredsRequest = default(SshCredsRequest))
        {
            PostSshCredsRoleWithHttpInfo(role, sshCredsRequest);
        }

        /// <summary>
        /// Creates a credential for establishing SSH connection with the remote host. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required] Name of the role</param>
        /// <param name="sshCredsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostSshCredsRoleWithHttpInfo(string role, SshCredsRequest sshCredsRequest = default(SshCredsRequest))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->PostSshCredsRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = sshCredsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/ssh/creds/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSshCredsRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a credential for establishing SSH connection with the remote host. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required] Name of the role</param>
        /// <param name="sshCredsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostSshCredsRoleAsync(string role, SshCredsRequest sshCredsRequest = default(SshCredsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostSshCredsRoleWithHttpInfoAsync(role, sshCredsRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates a credential for establishing SSH connection with the remote host. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required] Name of the role</param>
        /// <param name="sshCredsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostSshCredsRoleWithHttpInfoAsync(string role, SshCredsRequest sshCredsRequest = default(SshCredsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->PostSshCredsRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = sshCredsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/ssh/creds/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSshCredsRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register a shared private key with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">[Required] Name of the key</param>
        /// <param name="sshKeysRequest"> (optional)</param>
        /// <returns></returns>
        public void PostSshKeysKeyName(string keyName, SshKeysRequest sshKeysRequest = default(SshKeysRequest))
        {
            PostSshKeysKeyNameWithHttpInfo(keyName, sshKeysRequest);
        }

        /// <summary>
        /// Register a shared private key with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">[Required] Name of the key</param>
        /// <param name="sshKeysRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostSshKeysKeyNameWithHttpInfo(string keyName, SshKeysRequest sshKeysRequest = default(SshKeysRequest))
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'keyName' when calling SecretsApi->PostSshKeysKeyName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key_name", VaultClient.Client.ClientUtils.ParameterToString(keyName)); // path parameter
            localVarRequestOptions.Data = sshKeysRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/ssh/keys/{key_name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSshKeysKeyName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register a shared private key with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">[Required] Name of the key</param>
        /// <param name="sshKeysRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostSshKeysKeyNameAsync(string keyName, SshKeysRequest sshKeysRequest = default(SshKeysRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostSshKeysKeyNameWithHttpInfoAsync(keyName, sshKeysRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Register a shared private key with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyName">[Required] Name of the key</param>
        /// <param name="sshKeysRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostSshKeysKeyNameWithHttpInfoAsync(string keyName, SshKeysRequest sshKeysRequest = default(SshKeysRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'keyName' when calling SecretsApi->PostSshKeysKeyName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key_name", VaultClient.Client.ClientUtils.ParameterToString(keyName)); // path parameter
            localVarRequestOptions.Data = sshKeysRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/ssh/keys/{key_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSshKeysKeyName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the roles associated with the given IP address. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshLookupRequest"> (optional)</param>
        /// <returns></returns>
        public void PostSshLookup(SshLookupRequest sshLookupRequest = default(SshLookupRequest))
        {
            PostSshLookupWithHttpInfo(sshLookupRequest);
        }

        /// <summary>
        /// List all the roles associated with the given IP address. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshLookupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostSshLookupWithHttpInfo(SshLookupRequest sshLookupRequest = default(SshLookupRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sshLookupRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/ssh/lookup", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSshLookup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the roles associated with the given IP address. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshLookupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostSshLookupAsync(SshLookupRequest sshLookupRequest = default(SshLookupRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostSshLookupWithHttpInfoAsync(sshLookupRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List all the roles associated with the given IP address. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshLookupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostSshLookupWithHttpInfoAsync(SshLookupRequest sshLookupRequest = default(SshLookupRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sshLookupRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/ssh/lookup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSshLookup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <param name="sshRolesRequest"> (optional)</param>
        /// <returns></returns>
        public void PostSshRolesRole(string role, SshRolesRequest sshRolesRequest = default(SshRolesRequest))
        {
            PostSshRolesRoleWithHttpInfo(role, sshRolesRequest);
        }

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <param name="sshRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostSshRolesRoleWithHttpInfo(string role, SshRolesRequest sshRolesRequest = default(SshRolesRequest))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->PostSshRolesRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = sshRolesRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/ssh/roles/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSshRolesRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <param name="sshRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostSshRolesRoleAsync(string role, SshRolesRequest sshRolesRequest = default(SshRolesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostSshRolesRoleWithHttpInfoAsync(role, sshRolesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage the &#39;roles&#39; that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">[Required for all types] Name of the role being created.</param>
        /// <param name="sshRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostSshRolesRoleWithHttpInfoAsync(string role, SshRolesRequest sshRolesRequest = default(SshRolesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->PostSshRolesRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = sshRolesRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/ssh/roles/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSshRolesRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request signing an SSH key using a certain role with the provided details. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request.</param>
        /// <param name="sshSignRequest"> (optional)</param>
        /// <returns></returns>
        public void PostSshSignRole(string role, SshSignRequest sshSignRequest = default(SshSignRequest))
        {
            PostSshSignRoleWithHttpInfo(role, sshSignRequest);
        }

        /// <summary>
        /// Request signing an SSH key using a certain role with the provided details. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request.</param>
        /// <param name="sshSignRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostSshSignRoleWithHttpInfo(string role, SshSignRequest sshSignRequest = default(SshSignRequest))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->PostSshSignRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = sshSignRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/ssh/sign/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSshSignRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request signing an SSH key using a certain role with the provided details. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request.</param>
        /// <param name="sshSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostSshSignRoleAsync(string role, SshSignRequest sshSignRequest = default(SshSignRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostSshSignRoleWithHttpInfoAsync(role, sshSignRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Request signing an SSH key using a certain role with the provided details. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The desired role with configuration for this request.</param>
        /// <param name="sshSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostSshSignRoleWithHttpInfoAsync(string role, SshSignRequest sshSignRequest = default(SshSignRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling SecretsApi->PostSshSignRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = sshSignRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/ssh/sign/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSshSignRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate the OTP provided by Vault SSH Agent. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshVerifyRequest"> (optional)</param>
        /// <returns></returns>
        public void PostSshVerify(SshVerifyRequest sshVerifyRequest = default(SshVerifyRequest))
        {
            PostSshVerifyWithHttpInfo(sshVerifyRequest);
        }

        /// <summary>
        /// Validate the OTP provided by Vault SSH Agent. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshVerifyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostSshVerifyWithHttpInfo(SshVerifyRequest sshVerifyRequest = default(SshVerifyRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sshVerifyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/ssh/verify", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSshVerify", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate the OTP provided by Vault SSH Agent. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshVerifyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostSshVerifyAsync(SshVerifyRequest sshVerifyRequest = default(SshVerifyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostSshVerifyWithHttpInfoAsync(sshVerifyRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Validate the OTP provided by Vault SSH Agent. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sshVerifyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostSshVerifyWithHttpInfoAsync(SshVerifyRequest sshVerifyRequest = default(SshVerifyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sshVerifyRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/ssh/verify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSshVerify", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terraformConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTerraformConfig(TerraformConfigRequest terraformConfigRequest = default(TerraformConfigRequest))
        {
            PostTerraformConfigWithHttpInfo(terraformConfigRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terraformConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTerraformConfigWithHttpInfo(TerraformConfigRequest terraformConfigRequest = default(TerraformConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = terraformConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/terraform/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTerraformConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terraformConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTerraformConfigAsync(TerraformConfigRequest terraformConfigRequest = default(TerraformConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTerraformConfigWithHttpInfoAsync(terraformConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="terraformConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTerraformConfigWithHttpInfoAsync(TerraformConfigRequest terraformConfigRequest = default(TerraformConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = terraformConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/terraform/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTerraformConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a Terraform Cloud or Enterprise API token from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void PostTerraformCredsName(string name)
        {
            PostTerraformCredsNameWithHttpInfo(name);
        }

        /// <summary>
        /// Generate a Terraform Cloud or Enterprise API token from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTerraformCredsNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTerraformCredsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/terraform/creds/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTerraformCredsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a Terraform Cloud or Enterprise API token from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTerraformCredsNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTerraformCredsNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate a Terraform Cloud or Enterprise API token from a specific Vault role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTerraformCredsNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTerraformCredsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/terraform/creds/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTerraformCredsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="terraformRoleRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTerraformRoleName(string name, TerraformRoleRequest terraformRoleRequest = default(TerraformRoleRequest))
        {
            PostTerraformRoleNameWithHttpInfo(name, terraformRoleRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="terraformRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTerraformRoleNameWithHttpInfo(string name, TerraformRoleRequest terraformRoleRequest = default(TerraformRoleRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTerraformRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = terraformRoleRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/terraform/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTerraformRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="terraformRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTerraformRoleNameAsync(string name, TerraformRoleRequest terraformRoleRequest = default(TerraformRoleRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTerraformRoleNameWithHttpInfoAsync(name, terraformRoleRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="terraformRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTerraformRoleNameWithHttpInfoAsync(string name, TerraformRoleRequest terraformRoleRequest = default(TerraformRoleRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTerraformRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = terraformRoleRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/terraform/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTerraformRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the team or organization role</param>
        /// <returns></returns>
        public void PostTerraformRotateRoleName(string name)
        {
            PostTerraformRotateRoleNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the team or organization role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTerraformRotateRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTerraformRotateRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/terraform/rotate-role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTerraformRotateRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the team or organization role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTerraformRotateRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTerraformRotateRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the team or organization role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTerraformRotateRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTerraformRotateRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/terraform/rotate-role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTerraformRotateRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request time-based one-time use password or validate a password for a certain key . 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="totpCodeRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTotpCodeName(string name, TotpCodeRequest totpCodeRequest = default(TotpCodeRequest))
        {
            PostTotpCodeNameWithHttpInfo(name, totpCodeRequest);
        }

        /// <summary>
        /// Request time-based one-time use password or validate a password for a certain key . 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="totpCodeRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTotpCodeNameWithHttpInfo(string name, TotpCodeRequest totpCodeRequest = default(TotpCodeRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTotpCodeName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = totpCodeRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/totp/code/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTotpCodeName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request time-based one-time use password or validate a password for a certain key . 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="totpCodeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTotpCodeNameAsync(string name, TotpCodeRequest totpCodeRequest = default(TotpCodeRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTotpCodeNameWithHttpInfoAsync(name, totpCodeRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Request time-based one-time use password or validate a password for a certain key . 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="totpCodeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTotpCodeNameWithHttpInfoAsync(string name, TotpCodeRequest totpCodeRequest = default(TotpCodeRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTotpCodeName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = totpCodeRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/totp/code/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTotpCodeName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the keys that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="totpKeysRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTotpKeysName(string name, TotpKeysRequest totpKeysRequest = default(TotpKeysRequest))
        {
            PostTotpKeysNameWithHttpInfo(name, totpKeysRequest);
        }

        /// <summary>
        /// Manage the keys that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="totpKeysRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTotpKeysNameWithHttpInfo(string name, TotpKeysRequest totpKeysRequest = default(TotpKeysRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTotpKeysName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = totpKeysRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/totp/keys/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTotpKeysName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage the keys that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="totpKeysRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTotpKeysNameAsync(string name, TotpKeysRequest totpKeysRequest = default(TotpKeysRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTotpKeysNameWithHttpInfoAsync(name, totpKeysRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage the keys that can be created with this backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key.</param>
        /// <param name="totpKeysRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTotpKeysNameWithHttpInfoAsync(string name, TotpKeysRequest totpKeysRequest = default(TotpKeysRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTotpKeysName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = totpKeysRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/totp/keys/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTotpKeysName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configures a new cache of the specified size 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitCacheConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitCacheConfig(TransitCacheConfigRequest transitCacheConfigRequest = default(TransitCacheConfigRequest))
        {
            PostTransitCacheConfigWithHttpInfo(transitCacheConfigRequest);
        }

        /// <summary>
        /// Configures a new cache of the specified size 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitCacheConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitCacheConfigWithHttpInfo(TransitCacheConfigRequest transitCacheConfigRequest = default(TransitCacheConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transitCacheConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/cache-config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitCacheConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configures a new cache of the specified size 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitCacheConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitCacheConfigAsync(TransitCacheConfigRequest transitCacheConfigRequest = default(TransitCacheConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitCacheConfigWithHttpInfoAsync(transitCacheConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configures a new cache of the specified size 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitCacheConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitCacheConfigWithHttpInfoAsync(TransitCacheConfigRequest transitCacheConfigRequest = default(TransitCacheConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transitCacheConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/cache-config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitCacheConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a data key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The backend key used for encrypting the data key</param>
        /// <param name="plaintext">\&quot;plaintext\&quot; will return the key in both plaintext and ciphertext; \&quot;wrapped\&quot; will return the ciphertext only.</param>
        /// <param name="transitDatakeyRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitDatakeyPlaintextName(string name, string plaintext, TransitDatakeyRequest transitDatakeyRequest = default(TransitDatakeyRequest))
        {
            PostTransitDatakeyPlaintextNameWithHttpInfo(name, plaintext, transitDatakeyRequest);
        }

        /// <summary>
        /// Generate a data key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The backend key used for encrypting the data key</param>
        /// <param name="plaintext">\&quot;plaintext\&quot; will return the key in both plaintext and ciphertext; \&quot;wrapped\&quot; will return the ciphertext only.</param>
        /// <param name="transitDatakeyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitDatakeyPlaintextNameWithHttpInfo(string name, string plaintext, TransitDatakeyRequest transitDatakeyRequest = default(TransitDatakeyRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitDatakeyPlaintextName");

            // verify the required parameter 'plaintext' is set
            if (plaintext == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'plaintext' when calling SecretsApi->PostTransitDatakeyPlaintextName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("plaintext", VaultClient.Client.ClientUtils.ParameterToString(plaintext)); // path parameter
            localVarRequestOptions.Data = transitDatakeyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/datakey/{plaintext}/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitDatakeyPlaintextName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a data key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The backend key used for encrypting the data key</param>
        /// <param name="plaintext">\&quot;plaintext\&quot; will return the key in both plaintext and ciphertext; \&quot;wrapped\&quot; will return the ciphertext only.</param>
        /// <param name="transitDatakeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitDatakeyPlaintextNameAsync(string name, string plaintext, TransitDatakeyRequest transitDatakeyRequest = default(TransitDatakeyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitDatakeyPlaintextNameWithHttpInfoAsync(name, plaintext, transitDatakeyRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate a data key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The backend key used for encrypting the data key</param>
        /// <param name="plaintext">\&quot;plaintext\&quot; will return the key in both plaintext and ciphertext; \&quot;wrapped\&quot; will return the ciphertext only.</param>
        /// <param name="transitDatakeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitDatakeyPlaintextNameWithHttpInfoAsync(string name, string plaintext, TransitDatakeyRequest transitDatakeyRequest = default(TransitDatakeyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitDatakeyPlaintextName");

            // verify the required parameter 'plaintext' is set
            if (plaintext == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'plaintext' when calling SecretsApi->PostTransitDatakeyPlaintextName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("plaintext", VaultClient.Client.ClientUtils.ParameterToString(plaintext)); // path parameter
            localVarRequestOptions.Data = transitDatakeyRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/datakey/{plaintext}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitDatakeyPlaintextName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Decrypt a ciphertext value using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="transitDecryptRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitDecryptName(string name, TransitDecryptRequest transitDecryptRequest = default(TransitDecryptRequest))
        {
            PostTransitDecryptNameWithHttpInfo(name, transitDecryptRequest);
        }

        /// <summary>
        /// Decrypt a ciphertext value using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="transitDecryptRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitDecryptNameWithHttpInfo(string name, TransitDecryptRequest transitDecryptRequest = default(TransitDecryptRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitDecryptName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitDecryptRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/decrypt/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitDecryptName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Decrypt a ciphertext value using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="transitDecryptRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitDecryptNameAsync(string name, TransitDecryptRequest transitDecryptRequest = default(TransitDecryptRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitDecryptNameWithHttpInfoAsync(name, transitDecryptRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Decrypt a ciphertext value using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="transitDecryptRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitDecryptNameWithHttpInfoAsync(string name, TransitDecryptRequest transitDecryptRequest = default(TransitDecryptRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitDecryptName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitDecryptRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/decrypt/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitDecryptName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Encrypt a plaintext value or a batch of plaintext blocks using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="transitEncryptRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitEncryptName(string name, TransitEncryptRequest transitEncryptRequest = default(TransitEncryptRequest))
        {
            PostTransitEncryptNameWithHttpInfo(name, transitEncryptRequest);
        }

        /// <summary>
        /// Encrypt a plaintext value or a batch of plaintext blocks using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="transitEncryptRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitEncryptNameWithHttpInfo(string name, TransitEncryptRequest transitEncryptRequest = default(TransitEncryptRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitEncryptName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitEncryptRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/encrypt/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitEncryptName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Encrypt a plaintext value or a batch of plaintext blocks using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="transitEncryptRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitEncryptNameAsync(string name, TransitEncryptRequest transitEncryptRequest = default(TransitEncryptRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitEncryptNameWithHttpInfoAsync(name, transitEncryptRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Encrypt a plaintext value or a batch of plaintext blocks using a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the policy</param>
        /// <param name="transitEncryptRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitEncryptNameWithHttpInfoAsync(string name, TransitEncryptRequest transitEncryptRequest = default(TransitEncryptRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitEncryptName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitEncryptRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/encrypt/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitEncryptName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a hash sum for input data 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitHashRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitHash(TransitHashRequest transitHashRequest = default(TransitHashRequest))
        {
            PostTransitHashWithHttpInfo(transitHashRequest);
        }

        /// <summary>
        /// Generate a hash sum for input data 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitHashRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitHashWithHttpInfo(TransitHashRequest transitHashRequest = default(TransitHashRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transitHashRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/hash", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitHash", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a hash sum for input data 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitHashRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitHashAsync(TransitHashRequest transitHashRequest = default(TransitHashRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitHashWithHttpInfoAsync(transitHashRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate a hash sum for input data 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitHashRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitHashWithHttpInfoAsync(TransitHashRequest transitHashRequest = default(TransitHashRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transitHashRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/hash", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitHash", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a hash sum for input data 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlalgorithm">Algorithm to use (POST URL parameter)</param>
        /// <param name="transitHashRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitHashUrlalgorithm(string urlalgorithm, TransitHashRequest transitHashRequest = default(TransitHashRequest))
        {
            PostTransitHashUrlalgorithmWithHttpInfo(urlalgorithm, transitHashRequest);
        }

        /// <summary>
        /// Generate a hash sum for input data 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlalgorithm">Algorithm to use (POST URL parameter)</param>
        /// <param name="transitHashRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitHashUrlalgorithmWithHttpInfo(string urlalgorithm, TransitHashRequest transitHashRequest = default(TransitHashRequest))
        {
            // verify the required parameter 'urlalgorithm' is set
            if (urlalgorithm == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'urlalgorithm' when calling SecretsApi->PostTransitHashUrlalgorithm");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("urlalgorithm", VaultClient.Client.ClientUtils.ParameterToString(urlalgorithm)); // path parameter
            localVarRequestOptions.Data = transitHashRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/hash/{urlalgorithm}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitHashUrlalgorithm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a hash sum for input data 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlalgorithm">Algorithm to use (POST URL parameter)</param>
        /// <param name="transitHashRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitHashUrlalgorithmAsync(string urlalgorithm, TransitHashRequest transitHashRequest = default(TransitHashRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitHashUrlalgorithmWithHttpInfoAsync(urlalgorithm, transitHashRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate a hash sum for input data 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlalgorithm">Algorithm to use (POST URL parameter)</param>
        /// <param name="transitHashRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitHashUrlalgorithmWithHttpInfoAsync(string urlalgorithm, TransitHashRequest transitHashRequest = default(TransitHashRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'urlalgorithm' is set
            if (urlalgorithm == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'urlalgorithm' when calling SecretsApi->PostTransitHashUrlalgorithm");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("urlalgorithm", VaultClient.Client.ClientUtils.ParameterToString(urlalgorithm)); // path parameter
            localVarRequestOptions.Data = transitHashRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/hash/{urlalgorithm}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitHashUrlalgorithm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate an HMAC for input data using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use for the HMAC function</param>
        /// <param name="transitHmacRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitHmacName(string name, TransitHmacRequest transitHmacRequest = default(TransitHmacRequest))
        {
            PostTransitHmacNameWithHttpInfo(name, transitHmacRequest);
        }

        /// <summary>
        /// Generate an HMAC for input data using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use for the HMAC function</param>
        /// <param name="transitHmacRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitHmacNameWithHttpInfo(string name, TransitHmacRequest transitHmacRequest = default(TransitHmacRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitHmacName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitHmacRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/hmac/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitHmacName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate an HMAC for input data using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use for the HMAC function</param>
        /// <param name="transitHmacRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitHmacNameAsync(string name, TransitHmacRequest transitHmacRequest = default(TransitHmacRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitHmacNameWithHttpInfoAsync(name, transitHmacRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate an HMAC for input data using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use for the HMAC function</param>
        /// <param name="transitHmacRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitHmacNameWithHttpInfoAsync(string name, TransitHmacRequest transitHmacRequest = default(TransitHmacRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitHmacName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitHmacRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/hmac/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitHmacName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate an HMAC for input data using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use for the HMAC function</param>
        /// <param name="urlalgorithm">Algorithm to use (POST URL parameter)</param>
        /// <param name="transitHmacRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitHmacNameUrlalgorithm(string name, string urlalgorithm, TransitHmacRequest transitHmacRequest = default(TransitHmacRequest))
        {
            PostTransitHmacNameUrlalgorithmWithHttpInfo(name, urlalgorithm, transitHmacRequest);
        }

        /// <summary>
        /// Generate an HMAC for input data using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use for the HMAC function</param>
        /// <param name="urlalgorithm">Algorithm to use (POST URL parameter)</param>
        /// <param name="transitHmacRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitHmacNameUrlalgorithmWithHttpInfo(string name, string urlalgorithm, TransitHmacRequest transitHmacRequest = default(TransitHmacRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitHmacNameUrlalgorithm");

            // verify the required parameter 'urlalgorithm' is set
            if (urlalgorithm == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'urlalgorithm' when calling SecretsApi->PostTransitHmacNameUrlalgorithm");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("urlalgorithm", VaultClient.Client.ClientUtils.ParameterToString(urlalgorithm)); // path parameter
            localVarRequestOptions.Data = transitHmacRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/hmac/{name}/{urlalgorithm}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitHmacNameUrlalgorithm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate an HMAC for input data using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use for the HMAC function</param>
        /// <param name="urlalgorithm">Algorithm to use (POST URL parameter)</param>
        /// <param name="transitHmacRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitHmacNameUrlalgorithmAsync(string name, string urlalgorithm, TransitHmacRequest transitHmacRequest = default(TransitHmacRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitHmacNameUrlalgorithmWithHttpInfoAsync(name, urlalgorithm, transitHmacRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate an HMAC for input data using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use for the HMAC function</param>
        /// <param name="urlalgorithm">Algorithm to use (POST URL parameter)</param>
        /// <param name="transitHmacRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitHmacNameUrlalgorithmWithHttpInfoAsync(string name, string urlalgorithm, TransitHmacRequest transitHmacRequest = default(TransitHmacRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitHmacNameUrlalgorithm");

            // verify the required parameter 'urlalgorithm' is set
            if (urlalgorithm == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'urlalgorithm' when calling SecretsApi->PostTransitHmacNameUrlalgorithm");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("urlalgorithm", VaultClient.Client.ClientUtils.ParameterToString(urlalgorithm)); // path parameter
            localVarRequestOptions.Data = transitHmacRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/hmac/{name}/{urlalgorithm}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitHmacNameUrlalgorithm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Managed named encryption keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitKeysName(string name, TransitKeysRequest transitKeysRequest = default(TransitKeysRequest))
        {
            PostTransitKeysNameWithHttpInfo(name, transitKeysRequest);
        }

        /// <summary>
        /// Managed named encryption keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitKeysNameWithHttpInfo(string name, TransitKeysRequest transitKeysRequest = default(TransitKeysRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitKeysName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitKeysRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/keys/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitKeysName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Managed named encryption keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitKeysNameAsync(string name, TransitKeysRequest transitKeysRequest = default(TransitKeysRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitKeysNameWithHttpInfoAsync(name, transitKeysRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Managed named encryption keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitKeysNameWithHttpInfoAsync(string name, TransitKeysRequest transitKeysRequest = default(TransitKeysRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitKeysName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitKeysRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/keys/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitKeysName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure a named encryption key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitKeysNameConfig(string name, TransitKeysConfigRequest transitKeysConfigRequest = default(TransitKeysConfigRequest))
        {
            PostTransitKeysNameConfigWithHttpInfo(name, transitKeysConfigRequest);
        }

        /// <summary>
        /// Configure a named encryption key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitKeysNameConfigWithHttpInfo(string name, TransitKeysConfigRequest transitKeysConfigRequest = default(TransitKeysConfigRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitKeysNameConfig");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitKeysConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/keys/{name}/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitKeysNameConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure a named encryption key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitKeysNameConfigAsync(string name, TransitKeysConfigRequest transitKeysConfigRequest = default(TransitKeysConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitKeysNameConfigWithHttpInfoAsync(name, transitKeysConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure a named encryption key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitKeysNameConfigWithHttpInfoAsync(string name, TransitKeysConfigRequest transitKeysConfigRequest = default(TransitKeysConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitKeysNameConfig");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitKeysConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/keys/{name}/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitKeysNameConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Imports an externally-generated key into a new transit key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the key</param>
        /// <param name="transitKeysImportRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitKeysNameImport(string name, TransitKeysImportRequest transitKeysImportRequest = default(TransitKeysImportRequest))
        {
            PostTransitKeysNameImportWithHttpInfo(name, transitKeysImportRequest);
        }

        /// <summary>
        /// Imports an externally-generated key into a new transit key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the key</param>
        /// <param name="transitKeysImportRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitKeysNameImportWithHttpInfo(string name, TransitKeysImportRequest transitKeysImportRequest = default(TransitKeysImportRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitKeysNameImport");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitKeysImportRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/keys/{name}/import", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitKeysNameImport", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Imports an externally-generated key into a new transit key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the key</param>
        /// <param name="transitKeysImportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitKeysNameImportAsync(string name, TransitKeysImportRequest transitKeysImportRequest = default(TransitKeysImportRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitKeysNameImportWithHttpInfoAsync(name, transitKeysImportRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Imports an externally-generated key into a new transit key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the key</param>
        /// <param name="transitKeysImportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitKeysNameImportWithHttpInfoAsync(string name, TransitKeysImportRequest transitKeysImportRequest = default(TransitKeysImportRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitKeysNameImport");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitKeysImportRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/keys/{name}/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitKeysNameImport", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Imports an externally-generated key into an existing imported key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the key</param>
        /// <param name="transitKeysImportVersionRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitKeysNameImportVersion(string name, TransitKeysImportVersionRequest transitKeysImportVersionRequest = default(TransitKeysImportVersionRequest))
        {
            PostTransitKeysNameImportVersionWithHttpInfo(name, transitKeysImportVersionRequest);
        }

        /// <summary>
        /// Imports an externally-generated key into an existing imported key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the key</param>
        /// <param name="transitKeysImportVersionRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitKeysNameImportVersionWithHttpInfo(string name, TransitKeysImportVersionRequest transitKeysImportVersionRequest = default(TransitKeysImportVersionRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitKeysNameImportVersion");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitKeysImportVersionRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/keys/{name}/import_version", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitKeysNameImportVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Imports an externally-generated key into an existing imported key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the key</param>
        /// <param name="transitKeysImportVersionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitKeysNameImportVersionAsync(string name, TransitKeysImportVersionRequest transitKeysImportVersionRequest = default(TransitKeysImportVersionRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitKeysNameImportVersionWithHttpInfoAsync(name, transitKeysImportVersionRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Imports an externally-generated key into an existing imported key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the key</param>
        /// <param name="transitKeysImportVersionRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitKeysNameImportVersionWithHttpInfoAsync(string name, TransitKeysImportVersionRequest transitKeysImportVersionRequest = default(TransitKeysImportVersionRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitKeysNameImportVersion");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitKeysImportVersionRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/keys/{name}/import_version", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitKeysNameImportVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rotate named encryption key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns></returns>
        public void PostTransitKeysNameRotate(string name)
        {
            PostTransitKeysNameRotateWithHttpInfo(name);
        }

        /// <summary>
        /// Rotate named encryption key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitKeysNameRotateWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitKeysNameRotate");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/keys/{name}/rotate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitKeysNameRotate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rotate named encryption key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitKeysNameRotateAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitKeysNameRotateWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Rotate named encryption key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitKeysNameRotateWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitKeysNameRotate");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/keys/{name}/rotate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitKeysNameRotate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trim key versions of a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysTrimRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitKeysNameTrim(string name, TransitKeysTrimRequest transitKeysTrimRequest = default(TransitKeysTrimRequest))
        {
            PostTransitKeysNameTrimWithHttpInfo(name, transitKeysTrimRequest);
        }

        /// <summary>
        /// Trim key versions of a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysTrimRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitKeysNameTrimWithHttpInfo(string name, TransitKeysTrimRequest transitKeysTrimRequest = default(TransitKeysTrimRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitKeysNameTrim");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitKeysTrimRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/keys/{name}/trim", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitKeysNameTrim", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trim key versions of a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysTrimRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitKeysNameTrimAsync(string name, TransitKeysTrimRequest transitKeysTrimRequest = default(TransitKeysTrimRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitKeysNameTrimWithHttpInfoAsync(name, transitKeysTrimRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Trim key versions of a named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitKeysTrimRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitKeysNameTrimWithHttpInfoAsync(string name, TransitKeysTrimRequest transitKeysTrimRequest = default(TransitKeysTrimRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitKeysNameTrim");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitKeysTrimRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/keys/{name}/trim", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitKeysNameTrim", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate random bytes 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitRandom(TransitRandomRequest transitRandomRequest = default(TransitRandomRequest))
        {
            PostTransitRandomWithHttpInfo(transitRandomRequest);
        }

        /// <summary>
        /// Generate random bytes 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitRandomWithHttpInfo(TransitRandomRequest transitRandomRequest = default(TransitRandomRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transitRandomRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/random", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitRandom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate random bytes 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitRandomAsync(TransitRandomRequest transitRandomRequest = default(TransitRandomRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitRandomWithHttpInfoAsync(transitRandomRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate random bytes 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitRandomWithHttpInfoAsync(TransitRandomRequest transitRandomRequest = default(TransitRandomRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transitRandomRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/random", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitRandom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate random bytes 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Which system to source random data from, ether \&quot;platform\&quot;, \&quot;seal\&quot;, or \&quot;all\&quot;.</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitRandomSource(string source, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest))
        {
            PostTransitRandomSourceWithHttpInfo(source, transitRandomRequest);
        }

        /// <summary>
        /// Generate random bytes 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Which system to source random data from, ether \&quot;platform\&quot;, \&quot;seal\&quot;, or \&quot;all\&quot;.</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitRandomSourceWithHttpInfo(string source, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest))
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'source' when calling SecretsApi->PostTransitRandomSource");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("source", VaultClient.Client.ClientUtils.ParameterToString(source)); // path parameter
            localVarRequestOptions.Data = transitRandomRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/random/{source}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitRandomSource", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate random bytes 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Which system to source random data from, ether \&quot;platform\&quot;, \&quot;seal\&quot;, or \&quot;all\&quot;.</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitRandomSourceAsync(string source, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitRandomSourceWithHttpInfoAsync(source, transitRandomRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate random bytes 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Which system to source random data from, ether \&quot;platform\&quot;, \&quot;seal\&quot;, or \&quot;all\&quot;.</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitRandomSourceWithHttpInfoAsync(string source, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'source' when calling SecretsApi->PostTransitRandomSource");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("source", VaultClient.Client.ClientUtils.ParameterToString(source)); // path parameter
            localVarRequestOptions.Data = transitRandomRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/random/{source}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitRandomSource", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate random bytes 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Which system to source random data from, ether \&quot;platform\&quot;, \&quot;seal\&quot;, or \&quot;all\&quot;.</param>
        /// <param name="urlbytes">The number of bytes to generate (POST URL parameter)</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitRandomSourceUrlbytes(string source, string urlbytes, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest))
        {
            PostTransitRandomSourceUrlbytesWithHttpInfo(source, urlbytes, transitRandomRequest);
        }

        /// <summary>
        /// Generate random bytes 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Which system to source random data from, ether \&quot;platform\&quot;, \&quot;seal\&quot;, or \&quot;all\&quot;.</param>
        /// <param name="urlbytes">The number of bytes to generate (POST URL parameter)</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitRandomSourceUrlbytesWithHttpInfo(string source, string urlbytes, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest))
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'source' when calling SecretsApi->PostTransitRandomSourceUrlbytes");

            // verify the required parameter 'urlbytes' is set
            if (urlbytes == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'urlbytes' when calling SecretsApi->PostTransitRandomSourceUrlbytes");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("source", VaultClient.Client.ClientUtils.ParameterToString(source)); // path parameter
            localVarRequestOptions.PathParameters.Add("urlbytes", VaultClient.Client.ClientUtils.ParameterToString(urlbytes)); // path parameter
            localVarRequestOptions.Data = transitRandomRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/random/{source}/{urlbytes}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitRandomSourceUrlbytes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate random bytes 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Which system to source random data from, ether \&quot;platform\&quot;, \&quot;seal\&quot;, or \&quot;all\&quot;.</param>
        /// <param name="urlbytes">The number of bytes to generate (POST URL parameter)</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitRandomSourceUrlbytesAsync(string source, string urlbytes, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitRandomSourceUrlbytesWithHttpInfoAsync(source, urlbytes, transitRandomRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate random bytes 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Which system to source random data from, ether \&quot;platform\&quot;, \&quot;seal\&quot;, or \&quot;all\&quot;.</param>
        /// <param name="urlbytes">The number of bytes to generate (POST URL parameter)</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitRandomSourceUrlbytesWithHttpInfoAsync(string source, string urlbytes, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'source' when calling SecretsApi->PostTransitRandomSourceUrlbytes");

            // verify the required parameter 'urlbytes' is set
            if (urlbytes == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'urlbytes' when calling SecretsApi->PostTransitRandomSourceUrlbytes");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("source", VaultClient.Client.ClientUtils.ParameterToString(source)); // path parameter
            localVarRequestOptions.PathParameters.Add("urlbytes", VaultClient.Client.ClientUtils.ParameterToString(urlbytes)); // path parameter
            localVarRequestOptions.Data = transitRandomRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/random/{source}/{urlbytes}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitRandomSourceUrlbytes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate random bytes 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlbytes">The number of bytes to generate (POST URL parameter)</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitRandomUrlbytes(string urlbytes, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest))
        {
            PostTransitRandomUrlbytesWithHttpInfo(urlbytes, transitRandomRequest);
        }

        /// <summary>
        /// Generate random bytes 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlbytes">The number of bytes to generate (POST URL parameter)</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitRandomUrlbytesWithHttpInfo(string urlbytes, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest))
        {
            // verify the required parameter 'urlbytes' is set
            if (urlbytes == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'urlbytes' when calling SecretsApi->PostTransitRandomUrlbytes");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("urlbytes", VaultClient.Client.ClientUtils.ParameterToString(urlbytes)); // path parameter
            localVarRequestOptions.Data = transitRandomRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/random/{urlbytes}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitRandomUrlbytes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate random bytes 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlbytes">The number of bytes to generate (POST URL parameter)</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitRandomUrlbytesAsync(string urlbytes, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitRandomUrlbytesWithHttpInfoAsync(urlbytes, transitRandomRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate random bytes 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlbytes">The number of bytes to generate (POST URL parameter)</param>
        /// <param name="transitRandomRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitRandomUrlbytesWithHttpInfoAsync(string urlbytes, TransitRandomRequest transitRandomRequest = default(TransitRandomRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'urlbytes' is set
            if (urlbytes == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'urlbytes' when calling SecretsApi->PostTransitRandomUrlbytes");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("urlbytes", VaultClient.Client.ClientUtils.ParameterToString(urlbytes)); // path parameter
            localVarRequestOptions.Data = transitRandomRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/random/{urlbytes}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitRandomUrlbytes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitRestoreRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitRestore(TransitRestoreRequest transitRestoreRequest = default(TransitRestoreRequest))
        {
            PostTransitRestoreWithHttpInfo(transitRestoreRequest);
        }

        /// <summary>
        /// Restore the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitRestoreRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitRestoreWithHttpInfo(TransitRestoreRequest transitRestoreRequest = default(TransitRestoreRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transitRestoreRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/restore", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitRestore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitRestoreRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitRestoreAsync(TransitRestoreRequest transitRestoreRequest = default(TransitRestoreRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitRestoreWithHttpInfoAsync(transitRestoreRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Restore the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transitRestoreRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitRestoreWithHttpInfoAsync(TransitRestoreRequest transitRestoreRequest = default(TransitRestoreRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transitRestoreRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/restore", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitRestore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">If set, this will be the name of the restored key.</param>
        /// <param name="transitRestoreRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitRestoreName(string name, TransitRestoreRequest transitRestoreRequest = default(TransitRestoreRequest))
        {
            PostTransitRestoreNameWithHttpInfo(name, transitRestoreRequest);
        }

        /// <summary>
        /// Restore the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">If set, this will be the name of the restored key.</param>
        /// <param name="transitRestoreRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitRestoreNameWithHttpInfo(string name, TransitRestoreRequest transitRestoreRequest = default(TransitRestoreRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitRestoreName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitRestoreRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/restore/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitRestoreName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">If set, this will be the name of the restored key.</param>
        /// <param name="transitRestoreRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitRestoreNameAsync(string name, TransitRestoreRequest transitRestoreRequest = default(TransitRestoreRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitRestoreNameWithHttpInfoAsync(name, transitRestoreRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Restore the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">If set, this will be the name of the restored key.</param>
        /// <param name="transitRestoreRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitRestoreNameWithHttpInfoAsync(string name, TransitRestoreRequest transitRestoreRequest = default(TransitRestoreRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitRestoreName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitRestoreRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/restore/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitRestoreName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rewrap ciphertext 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitRewrapRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitRewrapName(string name, TransitRewrapRequest transitRewrapRequest = default(TransitRewrapRequest))
        {
            PostTransitRewrapNameWithHttpInfo(name, transitRewrapRequest);
        }

        /// <summary>
        /// Rewrap ciphertext 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitRewrapRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitRewrapNameWithHttpInfo(string name, TransitRewrapRequest transitRewrapRequest = default(TransitRewrapRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitRewrapName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitRewrapRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/rewrap/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitRewrapName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rewrap ciphertext 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitRewrapRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitRewrapNameAsync(string name, TransitRewrapRequest transitRewrapRequest = default(TransitRewrapRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitRewrapNameWithHttpInfoAsync(name, transitRewrapRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Rewrap ciphertext 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="transitRewrapRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitRewrapNameWithHttpInfoAsync(string name, TransitRewrapRequest transitRewrapRequest = default(TransitRewrapRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitRewrapName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitRewrapRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/rewrap/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitRewrapName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a signature for input data using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="transitSignRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitSignName(string name, TransitSignRequest transitSignRequest = default(TransitSignRequest))
        {
            PostTransitSignNameWithHttpInfo(name, transitSignRequest);
        }

        /// <summary>
        /// Generate a signature for input data using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="transitSignRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitSignNameWithHttpInfo(string name, TransitSignRequest transitSignRequest = default(TransitSignRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitSignName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitSignRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/sign/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitSignName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a signature for input data using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="transitSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitSignNameAsync(string name, TransitSignRequest transitSignRequest = default(TransitSignRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitSignNameWithHttpInfoAsync(name, transitSignRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate a signature for input data using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="transitSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitSignNameWithHttpInfoAsync(string name, TransitSignRequest transitSignRequest = default(TransitSignRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitSignName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitSignRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/sign/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitSignName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a signature for input data using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="urlalgorithm">Hash algorithm to use (POST URL parameter)</param>
        /// <param name="transitSignRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitSignNameUrlalgorithm(string name, string urlalgorithm, TransitSignRequest transitSignRequest = default(TransitSignRequest))
        {
            PostTransitSignNameUrlalgorithmWithHttpInfo(name, urlalgorithm, transitSignRequest);
        }

        /// <summary>
        /// Generate a signature for input data using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="urlalgorithm">Hash algorithm to use (POST URL parameter)</param>
        /// <param name="transitSignRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitSignNameUrlalgorithmWithHttpInfo(string name, string urlalgorithm, TransitSignRequest transitSignRequest = default(TransitSignRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitSignNameUrlalgorithm");

            // verify the required parameter 'urlalgorithm' is set
            if (urlalgorithm == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'urlalgorithm' when calling SecretsApi->PostTransitSignNameUrlalgorithm");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("urlalgorithm", VaultClient.Client.ClientUtils.ParameterToString(urlalgorithm)); // path parameter
            localVarRequestOptions.Data = transitSignRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/sign/{name}/{urlalgorithm}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitSignNameUrlalgorithm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a signature for input data using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="urlalgorithm">Hash algorithm to use (POST URL parameter)</param>
        /// <param name="transitSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitSignNameUrlalgorithmAsync(string name, string urlalgorithm, TransitSignRequest transitSignRequest = default(TransitSignRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitSignNameUrlalgorithmWithHttpInfoAsync(name, urlalgorithm, transitSignRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate a signature for input data using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="urlalgorithm">Hash algorithm to use (POST URL parameter)</param>
        /// <param name="transitSignRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitSignNameUrlalgorithmWithHttpInfoAsync(string name, string urlalgorithm, TransitSignRequest transitSignRequest = default(TransitSignRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitSignNameUrlalgorithm");

            // verify the required parameter 'urlalgorithm' is set
            if (urlalgorithm == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'urlalgorithm' when calling SecretsApi->PostTransitSignNameUrlalgorithm");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("urlalgorithm", VaultClient.Client.ClientUtils.ParameterToString(urlalgorithm)); // path parameter
            localVarRequestOptions.Data = transitSignRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/sign/{name}/{urlalgorithm}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitSignNameUrlalgorithm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify a signature or HMAC for input data created using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="transitVerifyRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitVerifyName(string name, TransitVerifyRequest transitVerifyRequest = default(TransitVerifyRequest))
        {
            PostTransitVerifyNameWithHttpInfo(name, transitVerifyRequest);
        }

        /// <summary>
        /// Verify a signature or HMAC for input data created using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="transitVerifyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitVerifyNameWithHttpInfo(string name, TransitVerifyRequest transitVerifyRequest = default(TransitVerifyRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitVerifyName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitVerifyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/verify/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitVerifyName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify a signature or HMAC for input data created using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="transitVerifyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitVerifyNameAsync(string name, TransitVerifyRequest transitVerifyRequest = default(TransitVerifyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitVerifyNameWithHttpInfoAsync(name, transitVerifyRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Verify a signature or HMAC for input data created using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="transitVerifyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitVerifyNameWithHttpInfoAsync(string name, TransitVerifyRequest transitVerifyRequest = default(TransitVerifyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitVerifyName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = transitVerifyRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/verify/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitVerifyName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify a signature or HMAC for input data created using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="urlalgorithm">Hash algorithm to use (POST URL parameter)</param>
        /// <param name="transitVerifyRequest"> (optional)</param>
        /// <returns></returns>
        public void PostTransitVerifyNameUrlalgorithm(string name, string urlalgorithm, TransitVerifyRequest transitVerifyRequest = default(TransitVerifyRequest))
        {
            PostTransitVerifyNameUrlalgorithmWithHttpInfo(name, urlalgorithm, transitVerifyRequest);
        }

        /// <summary>
        /// Verify a signature or HMAC for input data created using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="urlalgorithm">Hash algorithm to use (POST URL parameter)</param>
        /// <param name="transitVerifyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostTransitVerifyNameUrlalgorithmWithHttpInfo(string name, string urlalgorithm, TransitVerifyRequest transitVerifyRequest = default(TransitVerifyRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitVerifyNameUrlalgorithm");

            // verify the required parameter 'urlalgorithm' is set
            if (urlalgorithm == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'urlalgorithm' when calling SecretsApi->PostTransitVerifyNameUrlalgorithm");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("urlalgorithm", VaultClient.Client.ClientUtils.ParameterToString(urlalgorithm)); // path parameter
            localVarRequestOptions.Data = transitVerifyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/transit/verify/{name}/{urlalgorithm}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitVerifyNameUrlalgorithm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify a signature or HMAC for input data created using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="urlalgorithm">Hash algorithm to use (POST URL parameter)</param>
        /// <param name="transitVerifyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostTransitVerifyNameUrlalgorithmAsync(string name, string urlalgorithm, TransitVerifyRequest transitVerifyRequest = default(TransitVerifyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostTransitVerifyNameUrlalgorithmWithHttpInfoAsync(name, urlalgorithm, transitVerifyRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Verify a signature or HMAC for input data created using the named key 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The key to use</param>
        /// <param name="urlalgorithm">Hash algorithm to use (POST URL parameter)</param>
        /// <param name="transitVerifyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostTransitVerifyNameUrlalgorithmWithHttpInfoAsync(string name, string urlalgorithm, TransitVerifyRequest transitVerifyRequest = default(TransitVerifyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling SecretsApi->PostTransitVerifyNameUrlalgorithm");

            // verify the required parameter 'urlalgorithm' is set
            if (urlalgorithm == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'urlalgorithm' when calling SecretsApi->PostTransitVerifyNameUrlalgorithm");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("urlalgorithm", VaultClient.Client.ClientUtils.ParameterToString(urlalgorithm)); // path parameter
            localVarRequestOptions.Data = transitVerifyRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/transit/verify/{name}/{urlalgorithm}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTransitVerifyNameUrlalgorithm", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
