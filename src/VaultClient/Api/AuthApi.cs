/*
 * HashiCorp Vault API
 *
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.11.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using VaultClient.Client;
using VaultClient.Model;

namespace VaultClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <returns></returns>
        void DeleteAuthAlicloudRoleRole(string role);

        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthAlicloudRoleRoleWithHttpInfo(string role);
        /// <summary>
        /// Read/write/delete a single app-id mapping
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <returns></returns>
        void DeleteAuthAppIdMapAppIdKey(string key);

        /// <summary>
        /// Read/write/delete a single app-id mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthAppIdMapAppIdKeyWithHttpInfo(string key);
        /// <summary>
        /// Read/write/delete a single user-id mapping
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <returns></returns>
        void DeleteAuthAppIdMapUserIdKey(string key);

        /// <summary>
        /// Read/write/delete a single user-id mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthAppIdMapUserIdKeyWithHttpInfo(string key);
        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void DeleteAuthApproleRoleRoleName(string roleName);

        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthApproleRoleRoleNameWithHttpInfo(string roleName);
        /// <summary>
        /// Impose secret_id to be presented during login using this role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void DeleteAuthApproleRoleRoleNameBindSecretId(string roleName);

        /// <summary>
        /// Impose secret_id to be presented during login using this role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthApproleRoleRoleNameBindSecretIdWithHttpInfo(string roleName);
        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void DeleteAuthApproleRoleRoleNameBoundCidrList(string roleName);

        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthApproleRoleRoleNameBoundCidrListWithHttpInfo(string roleName);
        /// <summary>
        /// Updates the value of &#39;period&#39; on the role
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void DeleteAuthApproleRoleRoleNamePeriod(string roleName);

        /// <summary>
        /// Updates the value of &#39;period&#39; on the role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthApproleRoleRoleNamePeriodWithHttpInfo(string roleName);
        /// <summary>
        /// Policies of the role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void DeleteAuthApproleRoleRoleNamePolicies(string roleName);

        /// <summary>
        /// Policies of the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthApproleRoleRoleNamePoliciesWithHttpInfo(string roleName);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void DeleteAuthApproleRoleRoleNameSecretIdAccessorDestroy(string roleName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthApproleRoleRoleNameSecretIdAccessorDestroyWithHttpInfo(string roleName);
        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void DeleteAuthApproleRoleRoleNameSecretIdBoundCidrs(string roleName);

        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthApproleRoleRoleNameSecretIdBoundCidrsWithHttpInfo(string roleName);
        /// <summary>
        /// Invalidate an issued secret_id
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void DeleteAuthApproleRoleRoleNameSecretIdDestroy(string roleName);

        /// <summary>
        /// Invalidate an issued secret_id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthApproleRoleRoleNameSecretIdDestroyWithHttpInfo(string roleName);
        /// <summary>
        /// Use limit of the SecretID generated against the role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void DeleteAuthApproleRoleRoleNameSecretIdNumUses(string roleName);

        /// <summary>
        /// Use limit of the SecretID generated against the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthApproleRoleRoleNameSecretIdNumUsesWithHttpInfo(string roleName);
        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void DeleteAuthApproleRoleRoleNameSecretIdTtl(string roleName);

        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthApproleRoleRoleNameSecretIdTtlWithHttpInfo(string roleName);
        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void DeleteAuthApproleRoleRoleNameTokenBoundCidrs(string roleName);

        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthApproleRoleRoleNameTokenBoundCidrsWithHttpInfo(string roleName);
        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void DeleteAuthApproleRoleRoleNameTokenMaxTtl(string roleName);

        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthApproleRoleRoleNameTokenMaxTtlWithHttpInfo(string roleName);
        /// <summary>
        /// Number of times issued tokens can be used
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void DeleteAuthApproleRoleRoleNameTokenNumUses(string roleName);

        /// <summary>
        /// Number of times issued tokens can be used
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthApproleRoleRoleNameTokenNumUsesWithHttpInfo(string roleName);
        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void DeleteAuthApproleRoleRoleNameTokenTtl(string roleName);

        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthApproleRoleRoleNameTokenTtlWithHttpInfo(string roleName);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <returns></returns>
        void DeleteAuthAwsConfigCertificateCertName(string certName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthAwsConfigCertificateCertNameWithHttpInfo(string certName);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAuthAwsConfigClient();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthAwsConfigClientWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <returns></returns>
        void DeleteAuthAwsConfigStsAccountId(string accountId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthAwsConfigStsAccountIdWithHttpInfo(string accountId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAuthAwsConfigTidyIdentityAccesslist();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthAwsConfigTidyIdentityAccesslistWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAuthAwsConfigTidyIdentityWhitelist();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthAwsConfigTidyIdentityWhitelistWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAuthAwsConfigTidyRoletagBlacklist();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthAwsConfigTidyRoletagBlacklistWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAuthAwsConfigTidyRoletagDenylist();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthAwsConfigTidyRoletagDenylistWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <returns></returns>
        void DeleteAuthAwsIdentityAccesslistInstanceId(string instanceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthAwsIdentityAccesslistInstanceIdWithHttpInfo(string instanceId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <returns></returns>
        void DeleteAuthAwsIdentityWhitelistInstanceId(string instanceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthAwsIdentityWhitelistInstanceIdWithHttpInfo(string instanceId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <returns></returns>
        void DeleteAuthAwsRoleRole(string role);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthAwsRoleRoleWithHttpInfo(string role);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns></returns>
        void DeleteAuthAwsRoletagBlacklistRoleTag(string roleTag);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthAwsRoletagBlacklistRoleTagWithHttpInfo(string roleTag);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns></returns>
        void DeleteAuthAwsRoletagDenylistRoleTag(string roleTag);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthAwsRoletagDenylistRoleTagWithHttpInfo(string roleTag);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAuthAzureConfig();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthAzureConfigWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        void DeleteAuthAzureRoleName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthAzureRoleNameWithHttpInfo(string name);
        /// <summary>
        /// Manage trusted certificates used for authentication.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <returns></returns>
        void DeleteAuthCertCertsName(string name);

        /// <summary>
        /// Manage trusted certificates used for authentication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthCertCertsNameWithHttpInfo(string name);
        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <returns></returns>
        void DeleteAuthCertCrlsName(string name);

        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthCertCrlsNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAuthCfConfig();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthCfConfigWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <returns></returns>
        void DeleteAuthCfRolesRole(string role);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthCfRolesRoleWithHttpInfo(string role);
        /// <summary>
        /// Create a GCP role with associated policies and required attributes.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        void DeleteAuthGcpRoleName(string name);

        /// <summary>
        /// Create a GCP role with associated policies and required attributes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthGcpRoleNameWithHttpInfo(string name);
        /// <summary>
        /// Read/write/delete a single teams mapping
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <returns></returns>
        void DeleteAuthGithubMapTeamsKey(string key);

        /// <summary>
        /// Read/write/delete a single teams mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthGithubMapTeamsKeyWithHttpInfo(string key);
        /// <summary>
        /// Read/write/delete a single users mapping
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <returns></returns>
        void DeleteAuthGithubMapUsersKey(string key);

        /// <summary>
        /// Read/write/delete a single users mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthGithubMapUsersKeyWithHttpInfo(string key);
        /// <summary>
        /// Delete an existing role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        void DeleteAuthJwtRoleName(string name);

        /// <summary>
        /// Delete an existing role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthJwtRoleNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <returns></returns>
        void DeleteAuthKerberosGroupsName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthKerberosGroupsNameWithHttpInfo(string name);
        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        void DeleteAuthKubernetesRoleName(string name);

        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthKubernetesRoleNameWithHttpInfo(string name);
        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <returns></returns>
        void DeleteAuthLdapGroupsName(string name);

        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthLdapGroupsNameWithHttpInfo(string name);
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <returns></returns>
        void DeleteAuthLdapUsersName(string name);

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthLdapUsersNameWithHttpInfo(string name);
        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAuthOciConfig();

        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthOciConfigWithHttpInfo();
        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <returns></returns>
        void DeleteAuthOciRoleRole(string role);

        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthOciRoleRoleWithHttpInfo(string role);
        /// <summary>
        /// Delete an existing role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        void DeleteAuthOidcRoleName(string name);

        /// <summary>
        /// Delete an existing role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthOidcRoleNameWithHttpInfo(string name);
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <returns></returns>
        void DeleteAuthOktaGroupsName(string name);

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthOktaGroupsNameWithHttpInfo(string name);
        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <returns></returns>
        void DeleteAuthOktaUsersName(string name);

        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthOktaUsersNameWithHttpInfo(string name);
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <returns></returns>
        void DeleteAuthRadiusUsersName(string name);

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthRadiusUsersNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <returns></returns>
        void DeleteAuthTokenRolesRoleName(string roleName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthTokenRolesRoleNameWithHttpInfo(string roleName);
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <returns></returns>
        void DeleteAuthUserpassUsersUsername(string username);

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthUserpassUsersUsernameWithHttpInfo(string username);
        /// <summary>
        /// Lists all the roles that are registered with Vault.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthAlicloudRole(string list);

        /// <summary>
        /// Lists all the roles that are registered with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAlicloudRoleWithHttpInfo(string list);
        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <returns></returns>
        void GetAuthAlicloudRoleRole(string role);

        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAlicloudRoleRoleWithHttpInfo(string role);
        /// <summary>
        /// Lists all the roles that are registered with Vault.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthAlicloudRoles(string list);

        /// <summary>
        /// Lists all the roles that are registered with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAlicloudRolesWithHttpInfo(string list);
        /// <summary>
        /// Read mappings for app-id
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns></returns>
        void GetAuthAppIdMapAppId(string list = default(string));

        /// <summary>
        /// Read mappings for app-id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAppIdMapAppIdWithHttpInfo(string list = default(string));
        /// <summary>
        /// Read/write/delete a single app-id mapping
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <returns></returns>
        void GetAuthAppIdMapAppIdKey(string key);

        /// <summary>
        /// Read/write/delete a single app-id mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAppIdMapAppIdKeyWithHttpInfo(string key);
        /// <summary>
        /// Read mappings for user-id
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns></returns>
        void GetAuthAppIdMapUserId(string list = default(string));

        /// <summary>
        /// Read mappings for user-id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAppIdMapUserIdWithHttpInfo(string list = default(string));
        /// <summary>
        /// Read/write/delete a single user-id mapping
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <returns></returns>
        void GetAuthAppIdMapUserIdKey(string key);

        /// <summary>
        /// Read/write/delete a single user-id mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAppIdMapUserIdKeyWithHttpInfo(string key);
        /// <summary>
        /// Lists all the roles registered with the backend.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthApproleRole(string list);

        /// <summary>
        /// Lists all the roles registered with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthApproleRoleWithHttpInfo(string list);
        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void GetAuthApproleRoleRoleName(string roleName);

        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthApproleRoleRoleNameWithHttpInfo(string roleName);
        /// <summary>
        /// Impose secret_id to be presented during login using this role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void GetAuthApproleRoleRoleNameBindSecretId(string roleName);

        /// <summary>
        /// Impose secret_id to be presented during login using this role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthApproleRoleRoleNameBindSecretIdWithHttpInfo(string roleName);
        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void GetAuthApproleRoleRoleNameBoundCidrList(string roleName);

        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthApproleRoleRoleNameBoundCidrListWithHttpInfo(string roleName);
        /// <summary>
        /// Enables cluster local secret IDs
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void GetAuthApproleRoleRoleNameLocalSecretIds(string roleName);

        /// <summary>
        /// Enables cluster local secret IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthApproleRoleRoleNameLocalSecretIdsWithHttpInfo(string roleName);
        /// <summary>
        /// Updates the value of &#39;period&#39; on the role
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void GetAuthApproleRoleRoleNamePeriod(string roleName);

        /// <summary>
        /// Updates the value of &#39;period&#39; on the role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthApproleRoleRoleNamePeriodWithHttpInfo(string roleName);
        /// <summary>
        /// Policies of the role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void GetAuthApproleRoleRoleNamePolicies(string roleName);

        /// <summary>
        /// Policies of the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthApproleRoleRoleNamePoliciesWithHttpInfo(string roleName);
        /// <summary>
        /// Returns the &#39;role_id&#39; of the role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void GetAuthApproleRoleRoleNameRoleId(string roleName);

        /// <summary>
        /// Returns the &#39;role_id&#39; of the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthApproleRoleRoleNameRoleIdWithHttpInfo(string roleName);
        /// <summary>
        /// Generate a SecretID against this role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthApproleRoleRoleNameSecretId(string roleName, string list);

        /// <summary>
        /// Generate a SecretID against this role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthApproleRoleRoleNameSecretIdWithHttpInfo(string roleName, string list);
        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void GetAuthApproleRoleRoleNameSecretIdBoundCidrs(string roleName);

        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthApproleRoleRoleNameSecretIdBoundCidrsWithHttpInfo(string roleName);
        /// <summary>
        /// Use limit of the SecretID generated against the role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void GetAuthApproleRoleRoleNameSecretIdNumUses(string roleName);

        /// <summary>
        /// Use limit of the SecretID generated against the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthApproleRoleRoleNameSecretIdNumUsesWithHttpInfo(string roleName);
        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void GetAuthApproleRoleRoleNameSecretIdTtl(string roleName);

        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthApproleRoleRoleNameSecretIdTtlWithHttpInfo(string roleName);
        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void GetAuthApproleRoleRoleNameTokenBoundCidrs(string roleName);

        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthApproleRoleRoleNameTokenBoundCidrsWithHttpInfo(string roleName);
        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void GetAuthApproleRoleRoleNameTokenMaxTtl(string roleName);

        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthApproleRoleRoleNameTokenMaxTtlWithHttpInfo(string roleName);
        /// <summary>
        /// Number of times issued tokens can be used
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void GetAuthApproleRoleRoleNameTokenNumUses(string roleName);

        /// <summary>
        /// Number of times issued tokens can be used
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthApproleRoleRoleNameTokenNumUsesWithHttpInfo(string roleName);
        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        void GetAuthApproleRoleRoleNameTokenTtl(string roleName);

        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthApproleRoleRoleNameTokenTtlWithHttpInfo(string roleName);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <returns></returns>
        void GetAuthAwsConfigCertificateCertName(string certName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAwsConfigCertificateCertNameWithHttpInfo(string certName);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthAwsConfigCertificates(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAwsConfigCertificatesWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthAwsConfigClient();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAwsConfigClientWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthAwsConfigIdentity();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAwsConfigIdentityWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthAwsConfigSts(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAwsConfigStsWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <returns></returns>
        void GetAuthAwsConfigStsAccountId(string accountId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAwsConfigStsAccountIdWithHttpInfo(string accountId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthAwsConfigTidyIdentityAccesslist();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAwsConfigTidyIdentityAccesslistWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthAwsConfigTidyIdentityWhitelist();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAwsConfigTidyIdentityWhitelistWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthAwsConfigTidyRoletagBlacklist();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAwsConfigTidyRoletagBlacklistWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthAwsConfigTidyRoletagDenylist();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAwsConfigTidyRoletagDenylistWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthAwsIdentityAccesslist(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAwsIdentityAccesslistWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <returns></returns>
        void GetAuthAwsIdentityAccesslistInstanceId(string instanceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAwsIdentityAccesslistInstanceIdWithHttpInfo(string instanceId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthAwsIdentityWhitelist(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAwsIdentityWhitelistWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <returns></returns>
        void GetAuthAwsIdentityWhitelistInstanceId(string instanceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAwsIdentityWhitelistInstanceIdWithHttpInfo(string instanceId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthAwsRole(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAwsRoleWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <returns></returns>
        void GetAuthAwsRoleRole(string role);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAwsRoleRoleWithHttpInfo(string role);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthAwsRoles(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAwsRolesWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthAwsRoletagBlacklist(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAwsRoletagBlacklistWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns></returns>
        void GetAuthAwsRoletagBlacklistRoleTag(string roleTag);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAwsRoletagBlacklistRoleTagWithHttpInfo(string roleTag);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthAwsRoletagDenylist(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAwsRoletagDenylistWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns></returns>
        void GetAuthAwsRoletagDenylistRoleTag(string roleTag);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAwsRoletagDenylistRoleTagWithHttpInfo(string roleTag);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthAzureConfig();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAzureConfigWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthAzureRole(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAzureRoleWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        void GetAuthAzureRoleName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthAzureRoleNameWithHttpInfo(string name);
        /// <summary>
        /// This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform for authenticating users.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthCentrifyConfig();

        /// <summary>
        /// This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform for authenticating users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthCentrifyConfigWithHttpInfo();
        /// <summary>
        /// Manage trusted certificates used for authentication.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthCertCerts(string list);

        /// <summary>
        /// Manage trusted certificates used for authentication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthCertCertsWithHttpInfo(string list);
        /// <summary>
        /// Manage trusted certificates used for authentication.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <returns></returns>
        void GetAuthCertCertsName(string name);

        /// <summary>
        /// Manage trusted certificates used for authentication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthCertCertsNameWithHttpInfo(string name);
        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <returns></returns>
        void GetAuthCertCrlsName(string name);

        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthCertCrlsNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthCfConfig();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthCfConfigWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthCfRoles(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthCfRolesWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <returns></returns>
        void GetAuthCfRolesRole(string role);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthCfRolesRoleWithHttpInfo(string role);
        /// <summary>
        /// Configure credentials used to query the GCP IAM API to verify authenticating service accounts
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthGcpConfig();

        /// <summary>
        /// Configure credentials used to query the GCP IAM API to verify authenticating service accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthGcpConfigWithHttpInfo();
        /// <summary>
        /// Lists all the roles that are registered with Vault.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthGcpRole(string list);

        /// <summary>
        /// Lists all the roles that are registered with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthGcpRoleWithHttpInfo(string list);
        /// <summary>
        /// Create a GCP role with associated policies and required attributes.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        void GetAuthGcpRoleName(string name);

        /// <summary>
        /// Create a GCP role with associated policies and required attributes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthGcpRoleNameWithHttpInfo(string name);
        /// <summary>
        /// Lists all the roles that are registered with Vault.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthGcpRoles(string list);

        /// <summary>
        /// Lists all the roles that are registered with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthGcpRolesWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthGithubConfig();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthGithubConfigWithHttpInfo();
        /// <summary>
        /// Read mappings for teams
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns></returns>
        void GetAuthGithubMapTeams(string list = default(string));

        /// <summary>
        /// Read mappings for teams
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthGithubMapTeamsWithHttpInfo(string list = default(string));
        /// <summary>
        /// Read/write/delete a single teams mapping
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <returns></returns>
        void GetAuthGithubMapTeamsKey(string key);

        /// <summary>
        /// Read/write/delete a single teams mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthGithubMapTeamsKeyWithHttpInfo(string key);
        /// <summary>
        /// Read mappings for users
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns></returns>
        void GetAuthGithubMapUsers(string list = default(string));

        /// <summary>
        /// Read mappings for users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthGithubMapUsersWithHttpInfo(string list = default(string));
        /// <summary>
        /// Read/write/delete a single users mapping
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <returns></returns>
        void GetAuthGithubMapUsersKey(string key);

        /// <summary>
        /// Read/write/delete a single users mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthGithubMapUsersKeyWithHttpInfo(string key);
        /// <summary>
        /// Read the current JWT authentication backend configuration.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthJwtConfig();

        /// <summary>
        /// Read the current JWT authentication backend configuration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthJwtConfigWithHttpInfo();
        /// <summary>
        /// Callback endpoint to complete an OIDC login.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthJwtOidcCallback();

        /// <summary>
        /// Callback endpoint to complete an OIDC login.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthJwtOidcCallbackWithHttpInfo();
        /// <summary>
        /// Lists all the roles registered with the backend.
        /// </summary>
        /// <remarks>
        /// The list will contain the names of the roles.
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthJwtRole(string list);

        /// <summary>
        /// Lists all the roles registered with the backend.
        /// </summary>
        /// <remarks>
        /// The list will contain the names of the roles.
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthJwtRoleWithHttpInfo(string list);
        /// <summary>
        /// Read an existing role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        void GetAuthJwtRoleName(string name);

        /// <summary>
        /// Read an existing role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthJwtRoleNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthKerberosConfig();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthKerberosConfigWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthKerberosConfigLdap();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthKerberosConfigLdapWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthKerberosGroups(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthKerberosGroupsWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <returns></returns>
        void GetAuthKerberosGroupsName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthKerberosGroupsNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthKerberosLogin();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthKerberosLoginWithHttpInfo();
        /// <summary>
        /// Configures the JWT Public Key and Kubernetes API information.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthKubernetesConfig();

        /// <summary>
        /// Configures the JWT Public Key and Kubernetes API information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthKubernetesConfigWithHttpInfo();
        /// <summary>
        /// Lists all the roles registered with the backend.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthKubernetesRole(string list);

        /// <summary>
        /// Lists all the roles registered with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthKubernetesRoleWithHttpInfo(string list);
        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        void GetAuthKubernetesRoleName(string name);

        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthKubernetesRoleNameWithHttpInfo(string name);
        /// <summary>
        /// Configure the LDAP server to connect to, along with its options.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthLdapConfig();

        /// <summary>
        /// Configure the LDAP server to connect to, along with its options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthLdapConfigWithHttpInfo();
        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthLdapGroups(string list);

        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthLdapGroupsWithHttpInfo(string list);
        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <returns></returns>
        void GetAuthLdapGroupsName(string name);

        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthLdapGroupsNameWithHttpInfo(string name);
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthLdapUsers(string list);

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthLdapUsersWithHttpInfo(string list);
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <returns></returns>
        void GetAuthLdapUsersName(string name);

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthLdapUsersNameWithHttpInfo(string name);
        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthOciConfig();

        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthOciConfigWithHttpInfo();
        /// <summary>
        /// Lists all the roles that are registered with Vault.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthOciRole(string list);

        /// <summary>
        /// Lists all the roles that are registered with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthOciRoleWithHttpInfo(string list);
        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <returns></returns>
        void GetAuthOciRoleRole(string role);

        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthOciRoleRoleWithHttpInfo(string role);
        /// <summary>
        /// Read the current JWT authentication backend configuration.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthOidcConfig();

        /// <summary>
        /// Read the current JWT authentication backend configuration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthOidcConfigWithHttpInfo();
        /// <summary>
        /// Callback endpoint to complete an OIDC login.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthOidcOidcCallback();

        /// <summary>
        /// Callback endpoint to complete an OIDC login.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthOidcOidcCallbackWithHttpInfo();
        /// <summary>
        /// Lists all the roles registered with the backend.
        /// </summary>
        /// <remarks>
        /// The list will contain the names of the roles.
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthOidcRole(string list);

        /// <summary>
        /// Lists all the roles registered with the backend.
        /// </summary>
        /// <remarks>
        /// The list will contain the names of the roles.
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthOidcRoleWithHttpInfo(string list);
        /// <summary>
        /// Read an existing role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        void GetAuthOidcRoleName(string name);

        /// <summary>
        /// Read an existing role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthOidcRoleNameWithHttpInfo(string name);
        /// <summary>
        /// This endpoint allows you to configure the Okta and its configuration options.  The Okta organization are the characters at the front of the URL for Okta. Example https://ORG.okta.com
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthOktaConfig();

        /// <summary>
        /// This endpoint allows you to configure the Okta and its configuration options.  The Okta organization are the characters at the front of the URL for Okta. Example https://ORG.okta.com
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthOktaConfigWithHttpInfo();
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthOktaGroups(string list);

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthOktaGroupsWithHttpInfo(string list);
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <returns></returns>
        void GetAuthOktaGroupsName(string name);

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthOktaGroupsNameWithHttpInfo(string name);
        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthOktaUsers(string list);

        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthOktaUsersWithHttpInfo(string list);
        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <returns></returns>
        void GetAuthOktaUsersName(string name);

        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthOktaUsersNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonce">Nonce provided during a login request to retrieve the number verification challenge for the matching request.</param>
        /// <returns></returns>
        void GetAuthOktaVerifyNonce(string nonce);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonce">Nonce provided during a login request to retrieve the number verification challenge for the matching request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthOktaVerifyNonceWithHttpInfo(string nonce);
        /// <summary>
        /// Configure the RADIUS server to connect to, along with its options.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthRadiusConfig();

        /// <summary>
        /// Configure the RADIUS server to connect to, along with its options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthRadiusConfigWithHttpInfo();
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthRadiusUsers(string list);

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthRadiusUsersWithHttpInfo(string list);
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <returns></returns>
        void GetAuthRadiusUsersName(string name);

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthRadiusUsersNameWithHttpInfo(string name);
        /// <summary>
        /// List token accessors, which can then be be used to iterate and discover their properties or revoke them. Because this can be used to cause a denial of service, this endpoint requires &#39;sudo&#39; capability in addition to &#39;list&#39;.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthTokenAccessors(string list);

        /// <summary>
        /// List token accessors, which can then be be used to iterate and discover their properties or revoke them. Because this can be used to cause a denial of service, this endpoint requires &#39;sudo&#39; capability in addition to &#39;list&#39;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthTokenAccessorsWithHttpInfo(string list);
        /// <summary>
        /// This endpoint will lookup a token and its properties.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthTokenLookup();

        /// <summary>
        /// This endpoint will lookup a token and its properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthTokenLookupWithHttpInfo();
        /// <summary>
        /// This endpoint will lookup a token and its properties.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetAuthTokenLookupSelf();

        /// <summary>
        /// This endpoint will lookup a token and its properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthTokenLookupSelfWithHttpInfo();
        /// <summary>
        /// This endpoint lists configured roles.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthTokenRoles(string list);

        /// <summary>
        /// This endpoint lists configured roles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthTokenRolesWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <returns></returns>
        void GetAuthTokenRolesRoleName(string roleName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthTokenRolesRoleNameWithHttpInfo(string roleName);
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetAuthUserpassUsers(string list);

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthUserpassUsersWithHttpInfo(string list);
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <returns></returns>
        void GetAuthUserpassUsersUsername(string username);

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAuthUserpassUsersUsernameWithHttpInfo(string username);
        /// <summary>
        /// Authenticates an RAM entity with Vault.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alicloudLoginRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAlicloudLogin(AlicloudLoginRequest alicloudLoginRequest = default(AlicloudLoginRequest));

        /// <summary>
        /// Authenticates an RAM entity with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alicloudLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAlicloudLoginWithHttpInfo(AlicloudLoginRequest alicloudLoginRequest = default(AlicloudLoginRequest));
        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <param name="alicloudRoleRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAlicloudRoleRole(string role, AlicloudRoleRequest alicloudRoleRequest = default(AlicloudRoleRequest));

        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <param name="alicloudRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAlicloudRoleRoleWithHttpInfo(string role, AlicloudRoleRequest alicloudRoleRequest = default(AlicloudRoleRequest));
        /// <summary>
        /// Log in with an App ID and User ID.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appIdLoginRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAppIdLogin(AppIdLoginRequest appIdLoginRequest = default(AppIdLoginRequest));

        /// <summary>
        /// Log in with an App ID and User ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appIdLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAppIdLoginWithHttpInfo(AppIdLoginRequest appIdLoginRequest = default(AppIdLoginRequest));
        /// <summary>
        /// Log in with an App ID and User ID.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The unique app ID</param>
        /// <param name="appIdLoginRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAppIdLoginAppId(string appId, AppIdLoginRequest appIdLoginRequest = default(AppIdLoginRequest));

        /// <summary>
        /// Log in with an App ID and User ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The unique app ID</param>
        /// <param name="appIdLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAppIdLoginAppIdWithHttpInfo(string appId, AppIdLoginRequest appIdLoginRequest = default(AppIdLoginRequest));
        /// <summary>
        /// Read/write/delete a single app-id mapping
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <param name="appIdMapAppIdRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAppIdMapAppIdKey(string key, AppIdMapAppIdRequest appIdMapAppIdRequest = default(AppIdMapAppIdRequest));

        /// <summary>
        /// Read/write/delete a single app-id mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <param name="appIdMapAppIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAppIdMapAppIdKeyWithHttpInfo(string key, AppIdMapAppIdRequest appIdMapAppIdRequest = default(AppIdMapAppIdRequest));
        /// <summary>
        /// Read/write/delete a single user-id mapping
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <param name="appIdMapUserIdRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAppIdMapUserIdKey(string key, AppIdMapUserIdRequest appIdMapUserIdRequest = default(AppIdMapUserIdRequest));

        /// <summary>
        /// Read/write/delete a single user-id mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <param name="appIdMapUserIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAppIdMapUserIdKeyWithHttpInfo(string key, AppIdMapUserIdRequest appIdMapUserIdRequest = default(AppIdMapUserIdRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approleLoginRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthApproleLogin(ApproleLoginRequest approleLoginRequest = default(ApproleLoginRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approleLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthApproleLoginWithHttpInfo(ApproleLoginRequest approleLoginRequest = default(ApproleLoginRequest));
        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthApproleRoleRoleName(string roleName, ApproleRoleRequest approleRoleRequest = default(ApproleRoleRequest));

        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthApproleRoleRoleNameWithHttpInfo(string roleName, ApproleRoleRequest approleRoleRequest = default(ApproleRoleRequest));
        /// <summary>
        /// Impose secret_id to be presented during login using this role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleBindSecretIdRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthApproleRoleRoleNameBindSecretId(string roleName, ApproleRoleBindSecretIdRequest approleRoleBindSecretIdRequest = default(ApproleRoleBindSecretIdRequest));

        /// <summary>
        /// Impose secret_id to be presented during login using this role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleBindSecretIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthApproleRoleRoleNameBindSecretIdWithHttpInfo(string roleName, ApproleRoleBindSecretIdRequest approleRoleBindSecretIdRequest = default(ApproleRoleBindSecretIdRequest));
        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleBoundCidrListRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthApproleRoleRoleNameBoundCidrList(string roleName, ApproleRoleBoundCidrListRequest approleRoleBoundCidrListRequest = default(ApproleRoleBoundCidrListRequest));

        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleBoundCidrListRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthApproleRoleRoleNameBoundCidrListWithHttpInfo(string roleName, ApproleRoleBoundCidrListRequest approleRoleBoundCidrListRequest = default(ApproleRoleBoundCidrListRequest));
        /// <summary>
        /// Assign a SecretID of choice against the role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleCustomSecretIdRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthApproleRoleRoleNameCustomSecretId(string roleName, ApproleRoleCustomSecretIdRequest approleRoleCustomSecretIdRequest = default(ApproleRoleCustomSecretIdRequest));

        /// <summary>
        /// Assign a SecretID of choice against the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleCustomSecretIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthApproleRoleRoleNameCustomSecretIdWithHttpInfo(string roleName, ApproleRoleCustomSecretIdRequest approleRoleCustomSecretIdRequest = default(ApproleRoleCustomSecretIdRequest));
        /// <summary>
        /// Updates the value of &#39;period&#39; on the role
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRolePeriodRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthApproleRoleRoleNamePeriod(string roleName, ApproleRolePeriodRequest approleRolePeriodRequest = default(ApproleRolePeriodRequest));

        /// <summary>
        /// Updates the value of &#39;period&#39; on the role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRolePeriodRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthApproleRoleRoleNamePeriodWithHttpInfo(string roleName, ApproleRolePeriodRequest approleRolePeriodRequest = default(ApproleRolePeriodRequest));
        /// <summary>
        /// Policies of the role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRolePoliciesRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthApproleRoleRoleNamePolicies(string roleName, ApproleRolePoliciesRequest approleRolePoliciesRequest = default(ApproleRolePoliciesRequest));

        /// <summary>
        /// Policies of the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRolePoliciesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthApproleRoleRoleNamePoliciesWithHttpInfo(string roleName, ApproleRolePoliciesRequest approleRolePoliciesRequest = default(ApproleRolePoliciesRequest));
        /// <summary>
        /// Returns the &#39;role_id&#39; of the role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleRoleIdRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthApproleRoleRoleNameRoleId(string roleName, ApproleRoleRoleIdRequest approleRoleRoleIdRequest = default(ApproleRoleRoleIdRequest));

        /// <summary>
        /// Returns the &#39;role_id&#39; of the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleRoleIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthApproleRoleRoleNameRoleIdWithHttpInfo(string roleName, ApproleRoleRoleIdRequest approleRoleRoleIdRequest = default(ApproleRoleRoleIdRequest));
        /// <summary>
        /// Generate a SecretID against this role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthApproleRoleRoleNameSecretId(string roleName, ApproleRoleSecretIdRequest approleRoleSecretIdRequest = default(ApproleRoleSecretIdRequest));

        /// <summary>
        /// Generate a SecretID against this role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthApproleRoleRoleNameSecretIdWithHttpInfo(string roleName, ApproleRoleSecretIdRequest approleRoleSecretIdRequest = default(ApproleRoleSecretIdRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdAccessorDestroyRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthApproleRoleRoleNameSecretIdAccessorDestroy(string roleName, ApproleRoleSecretIdAccessorDestroyRequest approleRoleSecretIdAccessorDestroyRequest = default(ApproleRoleSecretIdAccessorDestroyRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdAccessorDestroyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthApproleRoleRoleNameSecretIdAccessorDestroyWithHttpInfo(string roleName, ApproleRoleSecretIdAccessorDestroyRequest approleRoleSecretIdAccessorDestroyRequest = default(ApproleRoleSecretIdAccessorDestroyRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdAccessorLookupRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthApproleRoleRoleNameSecretIdAccessorLookup(string roleName, ApproleRoleSecretIdAccessorLookupRequest approleRoleSecretIdAccessorLookupRequest = default(ApproleRoleSecretIdAccessorLookupRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdAccessorLookupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthApproleRoleRoleNameSecretIdAccessorLookupWithHttpInfo(string roleName, ApproleRoleSecretIdAccessorLookupRequest approleRoleSecretIdAccessorLookupRequest = default(ApproleRoleSecretIdAccessorLookupRequest));
        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdBoundCidrsRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthApproleRoleRoleNameSecretIdBoundCidrs(string roleName, ApproleRoleSecretIdBoundCidrsRequest approleRoleSecretIdBoundCidrsRequest = default(ApproleRoleSecretIdBoundCidrsRequest));

        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdBoundCidrsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthApproleRoleRoleNameSecretIdBoundCidrsWithHttpInfo(string roleName, ApproleRoleSecretIdBoundCidrsRequest approleRoleSecretIdBoundCidrsRequest = default(ApproleRoleSecretIdBoundCidrsRequest));
        /// <summary>
        /// Invalidate an issued secret_id
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdDestroyRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthApproleRoleRoleNameSecretIdDestroy(string roleName, ApproleRoleSecretIdDestroyRequest approleRoleSecretIdDestroyRequest = default(ApproleRoleSecretIdDestroyRequest));

        /// <summary>
        /// Invalidate an issued secret_id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdDestroyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthApproleRoleRoleNameSecretIdDestroyWithHttpInfo(string roleName, ApproleRoleSecretIdDestroyRequest approleRoleSecretIdDestroyRequest = default(ApproleRoleSecretIdDestroyRequest));
        /// <summary>
        /// Read the properties of an issued secret_id
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdLookupRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthApproleRoleRoleNameSecretIdLookup(string roleName, ApproleRoleSecretIdLookupRequest approleRoleSecretIdLookupRequest = default(ApproleRoleSecretIdLookupRequest));

        /// <summary>
        /// Read the properties of an issued secret_id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdLookupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthApproleRoleRoleNameSecretIdLookupWithHttpInfo(string roleName, ApproleRoleSecretIdLookupRequest approleRoleSecretIdLookupRequest = default(ApproleRoleSecretIdLookupRequest));
        /// <summary>
        /// Use limit of the SecretID generated against the role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdNumUsesRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthApproleRoleRoleNameSecretIdNumUses(string roleName, ApproleRoleSecretIdNumUsesRequest approleRoleSecretIdNumUsesRequest = default(ApproleRoleSecretIdNumUsesRequest));

        /// <summary>
        /// Use limit of the SecretID generated against the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdNumUsesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthApproleRoleRoleNameSecretIdNumUsesWithHttpInfo(string roleName, ApproleRoleSecretIdNumUsesRequest approleRoleSecretIdNumUsesRequest = default(ApproleRoleSecretIdNumUsesRequest));
        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdTtlRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthApproleRoleRoleNameSecretIdTtl(string roleName, ApproleRoleSecretIdTtlRequest approleRoleSecretIdTtlRequest = default(ApproleRoleSecretIdTtlRequest));

        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdTtlRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthApproleRoleRoleNameSecretIdTtlWithHttpInfo(string roleName, ApproleRoleSecretIdTtlRequest approleRoleSecretIdTtlRequest = default(ApproleRoleSecretIdTtlRequest));
        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenBoundCidrsRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthApproleRoleRoleNameTokenBoundCidrs(string roleName, ApproleRoleTokenBoundCidrsRequest approleRoleTokenBoundCidrsRequest = default(ApproleRoleTokenBoundCidrsRequest));

        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenBoundCidrsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthApproleRoleRoleNameTokenBoundCidrsWithHttpInfo(string roleName, ApproleRoleTokenBoundCidrsRequest approleRoleTokenBoundCidrsRequest = default(ApproleRoleTokenBoundCidrsRequest));
        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenMaxTtlRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthApproleRoleRoleNameTokenMaxTtl(string roleName, ApproleRoleTokenMaxTtlRequest approleRoleTokenMaxTtlRequest = default(ApproleRoleTokenMaxTtlRequest));

        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenMaxTtlRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthApproleRoleRoleNameTokenMaxTtlWithHttpInfo(string roleName, ApproleRoleTokenMaxTtlRequest approleRoleTokenMaxTtlRequest = default(ApproleRoleTokenMaxTtlRequest));
        /// <summary>
        /// Number of times issued tokens can be used
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenNumUsesRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthApproleRoleRoleNameTokenNumUses(string roleName, ApproleRoleTokenNumUsesRequest approleRoleTokenNumUsesRequest = default(ApproleRoleTokenNumUsesRequest));

        /// <summary>
        /// Number of times issued tokens can be used
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenNumUsesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthApproleRoleRoleNameTokenNumUsesWithHttpInfo(string roleName, ApproleRoleTokenNumUsesRequest approleRoleTokenNumUsesRequest = default(ApproleRoleTokenNumUsesRequest));
        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenTtlRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthApproleRoleRoleNameTokenTtl(string roleName, ApproleRoleTokenTtlRequest approleRoleTokenTtlRequest = default(ApproleRoleTokenTtlRequest));

        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenTtlRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthApproleRoleRoleNameTokenTtlWithHttpInfo(string roleName, ApproleRoleTokenTtlRequest approleRoleTokenTtlRequest = default(ApproleRoleTokenTtlRequest));
        /// <summary>
        /// Trigger the clean-up of expired SecretID entries.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void PostAuthApproleTidySecretId();

        /// <summary>
        /// Trigger the clean-up of expired SecretID entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthApproleTidySecretIdWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <param name="awsConfigCertificateRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAwsConfigCertificateCertName(string certName, AwsConfigCertificateRequest awsConfigCertificateRequest = default(AwsConfigCertificateRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <param name="awsConfigCertificateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAwsConfigCertificateCertNameWithHttpInfo(string certName, AwsConfigCertificateRequest awsConfigCertificateRequest = default(AwsConfigCertificateRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigClientRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAwsConfigClient(AwsConfigClientRequest awsConfigClientRequest = default(AwsConfigClientRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigClientRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAwsConfigClientWithHttpInfo(AwsConfigClientRequest awsConfigClientRequest = default(AwsConfigClientRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigIdentityRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAwsConfigIdentity(AwsConfigIdentityRequest awsConfigIdentityRequest = default(AwsConfigIdentityRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigIdentityRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAwsConfigIdentityWithHttpInfo(AwsConfigIdentityRequest awsConfigIdentityRequest = default(AwsConfigIdentityRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void PostAuthAwsConfigRotateRoot();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAwsConfigRotateRootWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <param name="awsConfigStsRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAwsConfigStsAccountId(string accountId, AwsConfigStsRequest awsConfigStsRequest = default(AwsConfigStsRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <param name="awsConfigStsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAwsConfigStsAccountIdWithHttpInfo(string accountId, AwsConfigStsRequest awsConfigStsRequest = default(AwsConfigStsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyIdentityAccesslistRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAwsConfigTidyIdentityAccesslist(AwsConfigTidyIdentityAccesslistRequest awsConfigTidyIdentityAccesslistRequest = default(AwsConfigTidyIdentityAccesslistRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyIdentityAccesslistRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAwsConfigTidyIdentityAccesslistWithHttpInfo(AwsConfigTidyIdentityAccesslistRequest awsConfigTidyIdentityAccesslistRequest = default(AwsConfigTidyIdentityAccesslistRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyIdentityWhitelistRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAwsConfigTidyIdentityWhitelist(AwsConfigTidyIdentityWhitelistRequest awsConfigTidyIdentityWhitelistRequest = default(AwsConfigTidyIdentityWhitelistRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyIdentityWhitelistRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAwsConfigTidyIdentityWhitelistWithHttpInfo(AwsConfigTidyIdentityWhitelistRequest awsConfigTidyIdentityWhitelistRequest = default(AwsConfigTidyIdentityWhitelistRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyRoletagBlacklistRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAwsConfigTidyRoletagBlacklist(AwsConfigTidyRoletagBlacklistRequest awsConfigTidyRoletagBlacklistRequest = default(AwsConfigTidyRoletagBlacklistRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyRoletagBlacklistRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAwsConfigTidyRoletagBlacklistWithHttpInfo(AwsConfigTidyRoletagBlacklistRequest awsConfigTidyRoletagBlacklistRequest = default(AwsConfigTidyRoletagBlacklistRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyRoletagDenylistRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAwsConfigTidyRoletagDenylist(AwsConfigTidyRoletagDenylistRequest awsConfigTidyRoletagDenylistRequest = default(AwsConfigTidyRoletagDenylistRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyRoletagDenylistRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAwsConfigTidyRoletagDenylistWithHttpInfo(AwsConfigTidyRoletagDenylistRequest awsConfigTidyRoletagDenylistRequest = default(AwsConfigTidyRoletagDenylistRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsLoginRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAwsLogin(AwsLoginRequest awsLoginRequest = default(AwsLoginRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAwsLoginWithHttpInfo(AwsLoginRequest awsLoginRequest = default(AwsLoginRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="awsRoleRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAwsRoleRole(string role, AwsRoleRequest awsRoleRequest = default(AwsRoleRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="awsRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAwsRoleRoleWithHttpInfo(string role, AwsRoleRequest awsRoleRequest = default(AwsRoleRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="awsRoleTagRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAwsRoleRoleTag(string role, AwsRoleTagRequest awsRoleTagRequest = default(AwsRoleTagRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="awsRoleTagRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAwsRoleRoleTagWithHttpInfo(string role, AwsRoleTagRequest awsRoleTagRequest = default(AwsRoleTagRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns></returns>
        void PostAuthAwsRoletagBlacklistRoleTag(string roleTag);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAwsRoletagBlacklistRoleTagWithHttpInfo(string roleTag);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns></returns>
        void PostAuthAwsRoletagDenylistRoleTag(string roleTag);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAwsRoletagDenylistRoleTagWithHttpInfo(string roleTag);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyIdentityAccesslistRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAwsTidyIdentityAccesslist(AwsTidyIdentityAccesslistRequest awsTidyIdentityAccesslistRequest = default(AwsTidyIdentityAccesslistRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyIdentityAccesslistRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAwsTidyIdentityAccesslistWithHttpInfo(AwsTidyIdentityAccesslistRequest awsTidyIdentityAccesslistRequest = default(AwsTidyIdentityAccesslistRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyIdentityWhitelistRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAwsTidyIdentityWhitelist(AwsTidyIdentityWhitelistRequest awsTidyIdentityWhitelistRequest = default(AwsTidyIdentityWhitelistRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyIdentityWhitelistRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAwsTidyIdentityWhitelistWithHttpInfo(AwsTidyIdentityWhitelistRequest awsTidyIdentityWhitelistRequest = default(AwsTidyIdentityWhitelistRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyRoletagBlacklistRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAwsTidyRoletagBlacklist(AwsTidyRoletagBlacklistRequest awsTidyRoletagBlacklistRequest = default(AwsTidyRoletagBlacklistRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyRoletagBlacklistRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAwsTidyRoletagBlacklistWithHttpInfo(AwsTidyRoletagBlacklistRequest awsTidyRoletagBlacklistRequest = default(AwsTidyRoletagBlacklistRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyRoletagDenylistRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAwsTidyRoletagDenylist(AwsTidyRoletagDenylistRequest awsTidyRoletagDenylistRequest = default(AwsTidyRoletagDenylistRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyRoletagDenylistRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAwsTidyRoletagDenylistWithHttpInfo(AwsTidyRoletagDenylistRequest awsTidyRoletagDenylistRequest = default(AwsTidyRoletagDenylistRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAzureConfig(AzureConfigRequest azureConfigRequest = default(AzureConfigRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAzureConfigWithHttpInfo(AzureConfigRequest azureConfigRequest = default(AzureConfigRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureLoginRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAzureLogin(AzureLoginRequest azureLoginRequest = default(AzureLoginRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAzureLoginWithHttpInfo(AzureLoginRequest azureLoginRequest = default(AzureLoginRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="azureRoleRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthAzureRoleName(string name, AzureRoleRequest azureRoleRequest = default(AzureRoleRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="azureRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthAzureRoleNameWithHttpInfo(string name, AzureRoleRequest azureRoleRequest = default(AzureRoleRequest));
        /// <summary>
        /// This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform for authenticating users.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="centrifyConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthCentrifyConfig(CentrifyConfigRequest centrifyConfigRequest = default(CentrifyConfigRequest));

        /// <summary>
        /// This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform for authenticating users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="centrifyConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthCentrifyConfigWithHttpInfo(CentrifyConfigRequest centrifyConfigRequest = default(CentrifyConfigRequest));
        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="centrifyLoginRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthCentrifyLogin(CentrifyLoginRequest centrifyLoginRequest = default(CentrifyLoginRequest));

        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="centrifyLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthCentrifyLoginWithHttpInfo(CentrifyLoginRequest centrifyLoginRequest = default(CentrifyLoginRequest));
        /// <summary>
        /// Manage trusted certificates used for authentication.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="certCertsRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthCertCertsName(string name, CertCertsRequest certCertsRequest = default(CertCertsRequest));

        /// <summary>
        /// Manage trusted certificates used for authentication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="certCertsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthCertCertsNameWithHttpInfo(string name, CertCertsRequest certCertsRequest = default(CertCertsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthCertConfig(CertConfigRequest certConfigRequest = default(CertConfigRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthCertConfigWithHttpInfo(CertConfigRequest certConfigRequest = default(CertConfigRequest));
        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="certCrlsRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthCertCrlsName(string name, CertCrlsRequest certCrlsRequest = default(CertCrlsRequest));

        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="certCrlsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthCertCrlsNameWithHttpInfo(string name, CertCrlsRequest certCrlsRequest = default(CertCrlsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certLoginRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthCertLogin(CertLoginRequest certLoginRequest = default(CertLoginRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthCertLoginWithHttpInfo(CertLoginRequest certLoginRequest = default(CertLoginRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthCfConfig(CfConfigRequest cfConfigRequest = default(CfConfigRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthCfConfigWithHttpInfo(CfConfigRequest cfConfigRequest = default(CfConfigRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfLoginRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthCfLogin(CfLoginRequest cfLoginRequest = default(CfLoginRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthCfLoginWithHttpInfo(CfLoginRequest cfLoginRequest = default(CfLoginRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <param name="cfRolesRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthCfRolesRole(string role, CfRolesRequest cfRolesRequest = default(CfRolesRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <param name="cfRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthCfRolesRoleWithHttpInfo(string role, CfRolesRequest cfRolesRequest = default(CfRolesRequest));
        /// <summary>
        /// Configure credentials used to query the GCP IAM API to verify authenticating service accounts
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthGcpConfig(GcpConfigRequest gcpConfigRequest = default(GcpConfigRequest));

        /// <summary>
        /// Configure credentials used to query the GCP IAM API to verify authenticating service accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthGcpConfigWithHttpInfo(GcpConfigRequest gcpConfigRequest = default(GcpConfigRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpLoginRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthGcpLogin(GcpLoginRequest gcpLoginRequest = default(GcpLoginRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthGcpLoginWithHttpInfo(GcpLoginRequest gcpLoginRequest = default(GcpLoginRequest));
        /// <summary>
        /// Create a GCP role with associated policies and required attributes.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthGcpRoleName(string name, GcpRoleRequest gcpRoleRequest = default(GcpRoleRequest));

        /// <summary>
        /// Create a GCP role with associated policies and required attributes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthGcpRoleNameWithHttpInfo(string name, GcpRoleRequest gcpRoleRequest = default(GcpRoleRequest));
        /// <summary>
        /// Add or remove labels for an existing &#39;gce&#39; role
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleLabelsRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthGcpRoleNameLabels(string name, GcpRoleLabelsRequest gcpRoleLabelsRequest = default(GcpRoleLabelsRequest));

        /// <summary>
        /// Add or remove labels for an existing &#39;gce&#39; role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleLabelsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthGcpRoleNameLabelsWithHttpInfo(string name, GcpRoleLabelsRequest gcpRoleLabelsRequest = default(GcpRoleLabelsRequest));
        /// <summary>
        /// Add or remove service accounts for an existing &#x60;iam&#x60; role
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleServiceAccountsRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthGcpRoleNameServiceAccounts(string name, GcpRoleServiceAccountsRequest gcpRoleServiceAccountsRequest = default(GcpRoleServiceAccountsRequest));

        /// <summary>
        /// Add or remove service accounts for an existing &#x60;iam&#x60; role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleServiceAccountsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthGcpRoleNameServiceAccountsWithHttpInfo(string name, GcpRoleServiceAccountsRequest gcpRoleServiceAccountsRequest = default(GcpRoleServiceAccountsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="githubConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthGithubConfig(GithubConfigRequest githubConfigRequest = default(GithubConfigRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="githubConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthGithubConfigWithHttpInfo(GithubConfigRequest githubConfigRequest = default(GithubConfigRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="githubLoginRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthGithubLogin(GithubLoginRequest githubLoginRequest = default(GithubLoginRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="githubLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthGithubLoginWithHttpInfo(GithubLoginRequest githubLoginRequest = default(GithubLoginRequest));
        /// <summary>
        /// Read/write/delete a single teams mapping
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <param name="githubMapTeamsRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthGithubMapTeamsKey(string key, GithubMapTeamsRequest githubMapTeamsRequest = default(GithubMapTeamsRequest));

        /// <summary>
        /// Read/write/delete a single teams mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <param name="githubMapTeamsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthGithubMapTeamsKeyWithHttpInfo(string key, GithubMapTeamsRequest githubMapTeamsRequest = default(GithubMapTeamsRequest));
        /// <summary>
        /// Read/write/delete a single users mapping
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <param name="githubMapUsersRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthGithubMapUsersKey(string key, GithubMapUsersRequest githubMapUsersRequest = default(GithubMapUsersRequest));

        /// <summary>
        /// Read/write/delete a single users mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <param name="githubMapUsersRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthGithubMapUsersKeyWithHttpInfo(string key, GithubMapUsersRequest githubMapUsersRequest = default(GithubMapUsersRequest));
        /// <summary>
        /// Configure the JWT authentication backend.
        /// </summary>
        /// <remarks>
        /// The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthJwtConfig(JwtConfigRequest jwtConfigRequest = default(JwtConfigRequest));

        /// <summary>
        /// Configure the JWT authentication backend.
        /// </summary>
        /// <remarks>
        /// The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthJwtConfigWithHttpInfo(JwtConfigRequest jwtConfigRequest = default(JwtConfigRequest));
        /// <summary>
        /// Authenticates to Vault using a JWT (or OIDC) token.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtLoginRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthJwtLogin(JwtLoginRequest jwtLoginRequest = default(JwtLoginRequest));

        /// <summary>
        /// Authenticates to Vault using a JWT (or OIDC) token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthJwtLoginWithHttpInfo(JwtLoginRequest jwtLoginRequest = default(JwtLoginRequest));
        /// <summary>
        /// Request an authorization URL to start an OIDC login flow.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtOidcAuthUrlRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthJwtOidcAuthUrl(JwtOidcAuthUrlRequest jwtOidcAuthUrlRequest = default(JwtOidcAuthUrlRequest));

        /// <summary>
        /// Request an authorization URL to start an OIDC login flow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtOidcAuthUrlRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthJwtOidcAuthUrlWithHttpInfo(JwtOidcAuthUrlRequest jwtOidcAuthUrlRequest = default(JwtOidcAuthUrlRequest));
        /// <summary>
        /// Callback endpoint to handle form_posts.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtOidcCallbackRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthJwtOidcCallback(JwtOidcCallbackRequest jwtOidcCallbackRequest = default(JwtOidcCallbackRequest));

        /// <summary>
        /// Callback endpoint to handle form_posts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtOidcCallbackRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthJwtOidcCallbackWithHttpInfo(JwtOidcCallbackRequest jwtOidcCallbackRequest = default(JwtOidcCallbackRequest));
        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="jwtRoleRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthJwtRoleName(string name, JwtRoleRequest jwtRoleRequest = default(JwtRoleRequest));

        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="jwtRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthJwtRoleNameWithHttpInfo(string name, JwtRoleRequest jwtRoleRequest = default(JwtRoleRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthKerberosConfig(KerberosConfigRequest kerberosConfigRequest = default(KerberosConfigRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthKerberosConfigWithHttpInfo(KerberosConfigRequest kerberosConfigRequest = default(KerberosConfigRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosConfigLdapRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthKerberosConfigLdap(KerberosConfigLdapRequest kerberosConfigLdapRequest = default(KerberosConfigLdapRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosConfigLdapRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthKerberosConfigLdapWithHttpInfo(KerberosConfigLdapRequest kerberosConfigLdapRequest = default(KerberosConfigLdapRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="kerberosGroupsRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthKerberosGroupsName(string name, KerberosGroupsRequest kerberosGroupsRequest = default(KerberosGroupsRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="kerberosGroupsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthKerberosGroupsNameWithHttpInfo(string name, KerberosGroupsRequest kerberosGroupsRequest = default(KerberosGroupsRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosLoginRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthKerberosLogin(KerberosLoginRequest kerberosLoginRequest = default(KerberosLoginRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthKerberosLoginWithHttpInfo(KerberosLoginRequest kerberosLoginRequest = default(KerberosLoginRequest));
        /// <summary>
        /// Configures the JWT Public Key and Kubernetes API information.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthKubernetesConfig(KubernetesConfigRequest kubernetesConfigRequest = default(KubernetesConfigRequest));

        /// <summary>
        /// Configures the JWT Public Key and Kubernetes API information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthKubernetesConfigWithHttpInfo(KubernetesConfigRequest kubernetesConfigRequest = default(KubernetesConfigRequest));
        /// <summary>
        /// Authenticates Kubernetes service accounts with Vault.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesLoginRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthKubernetesLogin(KubernetesLoginRequest kubernetesLoginRequest = default(KubernetesLoginRequest));

        /// <summary>
        /// Authenticates Kubernetes service accounts with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthKubernetesLoginWithHttpInfo(KubernetesLoginRequest kubernetesLoginRequest = default(KubernetesLoginRequest));
        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="kubernetesRoleRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthKubernetesRoleName(string name, KubernetesRoleRequest kubernetesRoleRequest = default(KubernetesRoleRequest));

        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="kubernetesRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthKubernetesRoleNameWithHttpInfo(string name, KubernetesRoleRequest kubernetesRoleRequest = default(KubernetesRoleRequest));
        /// <summary>
        /// Configure the LDAP server to connect to, along with its options.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ldapConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthLdapConfig(LdapConfigRequest ldapConfigRequest = default(LdapConfigRequest));

        /// <summary>
        /// Configure the LDAP server to connect to, along with its options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ldapConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthLdapConfigWithHttpInfo(LdapConfigRequest ldapConfigRequest = default(LdapConfigRequest));
        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="ldapGroupsRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthLdapGroupsName(string name, LdapGroupsRequest ldapGroupsRequest = default(LdapGroupsRequest));

        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="ldapGroupsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthLdapGroupsNameWithHttpInfo(string name, LdapGroupsRequest ldapGroupsRequest = default(LdapGroupsRequest));
        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">DN (distinguished name) to be used for login.</param>
        /// <param name="ldapLoginRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthLdapLoginUsername(string username, LdapLoginRequest ldapLoginRequest = default(LdapLoginRequest));

        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">DN (distinguished name) to be used for login.</param>
        /// <param name="ldapLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthLdapLoginUsernameWithHttpInfo(string username, LdapLoginRequest ldapLoginRequest = default(LdapLoginRequest));
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <param name="ldapUsersRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthLdapUsersName(string name, LdapUsersRequest ldapUsersRequest = default(LdapUsersRequest));

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <param name="ldapUsersRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthLdapUsersNameWithHttpInfo(string name, LdapUsersRequest ldapUsersRequest = default(LdapUsersRequest));
        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ociConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthOciConfig(OciConfigRequest ociConfigRequest = default(OciConfigRequest));

        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ociConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthOciConfigWithHttpInfo(OciConfigRequest ociConfigRequest = default(OciConfigRequest));
        /// <summary>
        /// Authenticates to Vault using OCI credentials
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="ociLoginRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthOciLoginRole(string role, OciLoginRequest ociLoginRequest = default(OciLoginRequest));

        /// <summary>
        /// Authenticates to Vault using OCI credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="ociLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthOciLoginRoleWithHttpInfo(string role, OciLoginRequest ociLoginRequest = default(OciLoginRequest));
        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="ociRoleRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthOciRoleRole(string role, OciRoleRequest ociRoleRequest = default(OciRoleRequest));

        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="ociRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthOciRoleRoleWithHttpInfo(string role, OciRoleRequest ociRoleRequest = default(OciRoleRequest));
        /// <summary>
        /// Configure the JWT authentication backend.
        /// </summary>
        /// <remarks>
        /// The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthOidcConfig(OidcConfigRequest oidcConfigRequest = default(OidcConfigRequest));

        /// <summary>
        /// Configure the JWT authentication backend.
        /// </summary>
        /// <remarks>
        /// The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthOidcConfigWithHttpInfo(OidcConfigRequest oidcConfigRequest = default(OidcConfigRequest));
        /// <summary>
        /// Authenticates to Vault using a JWT (or OIDC) token.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcLoginRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthOidcLogin(OidcLoginRequest oidcLoginRequest = default(OidcLoginRequest));

        /// <summary>
        /// Authenticates to Vault using a JWT (or OIDC) token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthOidcLoginWithHttpInfo(OidcLoginRequest oidcLoginRequest = default(OidcLoginRequest));
        /// <summary>
        /// Request an authorization URL to start an OIDC login flow.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcOidcAuthUrlRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthOidcOidcAuthUrl(OidcOidcAuthUrlRequest oidcOidcAuthUrlRequest = default(OidcOidcAuthUrlRequest));

        /// <summary>
        /// Request an authorization URL to start an OIDC login flow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcOidcAuthUrlRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthOidcOidcAuthUrlWithHttpInfo(OidcOidcAuthUrlRequest oidcOidcAuthUrlRequest = default(OidcOidcAuthUrlRequest));
        /// <summary>
        /// Callback endpoint to handle form_posts.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcOidcCallbackRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthOidcOidcCallback(OidcOidcCallbackRequest oidcOidcCallbackRequest = default(OidcOidcCallbackRequest));

        /// <summary>
        /// Callback endpoint to handle form_posts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcOidcCallbackRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthOidcOidcCallbackWithHttpInfo(OidcOidcCallbackRequest oidcOidcCallbackRequest = default(OidcOidcCallbackRequest));
        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="oidcRoleRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthOidcRoleName(string name, OidcRoleRequest oidcRoleRequest = default(OidcRoleRequest));

        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="oidcRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthOidcRoleNameWithHttpInfo(string name, OidcRoleRequest oidcRoleRequest = default(OidcRoleRequest));
        /// <summary>
        /// This endpoint allows you to configure the Okta and its configuration options.  The Okta organization are the characters at the front of the URL for Okta. Example https://ORG.okta.com
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oktaConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthOktaConfig(OktaConfigRequest oktaConfigRequest = default(OktaConfigRequest));

        /// <summary>
        /// This endpoint allows you to configure the Okta and its configuration options.  The Okta organization are the characters at the front of the URL for Okta. Example https://ORG.okta.com
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oktaConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthOktaConfigWithHttpInfo(OktaConfigRequest oktaConfigRequest = default(OktaConfigRequest));
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <param name="oktaGroupsRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthOktaGroupsName(string name, OktaGroupsRequest oktaGroupsRequest = default(OktaGroupsRequest));

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <param name="oktaGroupsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthOktaGroupsNameWithHttpInfo(string name, OktaGroupsRequest oktaGroupsRequest = default(OktaGroupsRequest));
        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to be used for login.</param>
        /// <param name="oktaLoginRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthOktaLoginUsername(string username, OktaLoginRequest oktaLoginRequest = default(OktaLoginRequest));

        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to be used for login.</param>
        /// <param name="oktaLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthOktaLoginUsernameWithHttpInfo(string username, OktaLoginRequest oktaLoginRequest = default(OktaLoginRequest));
        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <param name="oktaUsersRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthOktaUsersName(string name, OktaUsersRequest oktaUsersRequest = default(OktaUsersRequest));

        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <param name="oktaUsersRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthOktaUsersNameWithHttpInfo(string name, OktaUsersRequest oktaUsersRequest = default(OktaUsersRequest));
        /// <summary>
        /// Configure the RADIUS server to connect to, along with its options.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radiusConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthRadiusConfig(RadiusConfigRequest radiusConfigRequest = default(RadiusConfigRequest));

        /// <summary>
        /// Configure the RADIUS server to connect to, along with its options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radiusConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthRadiusConfigWithHttpInfo(RadiusConfigRequest radiusConfigRequest = default(RadiusConfigRequest));
        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radiusLoginRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthRadiusLogin(RadiusLoginRequest radiusLoginRequest = default(RadiusLoginRequest));

        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radiusLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthRadiusLoginWithHttpInfo(RadiusLoginRequest radiusLoginRequest = default(RadiusLoginRequest));
        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlusername">Username to be used for login. (URL parameter)</param>
        /// <param name="radiusLoginRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthRadiusLoginUrlusername(string urlusername, RadiusLoginRequest radiusLoginRequest = default(RadiusLoginRequest));

        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlusername">Username to be used for login. (URL parameter)</param>
        /// <param name="radiusLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthRadiusLoginUrlusernameWithHttpInfo(string urlusername, RadiusLoginRequest radiusLoginRequest = default(RadiusLoginRequest));
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <param name="radiusUsersRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthRadiusUsersName(string name, RadiusUsersRequest radiusUsersRequest = default(RadiusUsersRequest));

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <param name="radiusUsersRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthRadiusUsersNameWithHttpInfo(string name, RadiusUsersRequest radiusUsersRequest = default(RadiusUsersRequest));
        /// <summary>
        /// The token create path is used to create new tokens.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void PostAuthTokenCreate();

        /// <summary>
        /// The token create path is used to create new tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthTokenCreateWithHttpInfo();
        /// <summary>
        /// The token create path is used to create new orphan tokens.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void PostAuthTokenCreateOrphan();

        /// <summary>
        /// The token create path is used to create new orphan tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthTokenCreateOrphanWithHttpInfo();
        /// <summary>
        /// This token create path is used to create new tokens adhering to the given role.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <returns></returns>
        void PostAuthTokenCreateRoleName(string roleName);

        /// <summary>
        /// This token create path is used to create new tokens adhering to the given role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthTokenCreateRoleNameWithHttpInfo(string roleName);
        /// <summary>
        /// This endpoint will lookup a token and its properties.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthTokenLookup(TokenLookupRequest tokenLookupRequest = default(TokenLookupRequest));

        /// <summary>
        /// This endpoint will lookup a token and its properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthTokenLookupWithHttpInfo(TokenLookupRequest tokenLookupRequest = default(TokenLookupRequest));
        /// <summary>
        /// This endpoint will lookup a token associated with the given accessor and its properties. Response will not contain the token ID.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupAccessorRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthTokenLookupAccessor(TokenLookupAccessorRequest tokenLookupAccessorRequest = default(TokenLookupAccessorRequest));

        /// <summary>
        /// This endpoint will lookup a token associated with the given accessor and its properties. Response will not contain the token ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupAccessorRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthTokenLookupAccessorWithHttpInfo(TokenLookupAccessorRequest tokenLookupAccessorRequest = default(TokenLookupAccessorRequest));
        /// <summary>
        /// This endpoint will lookup a token and its properties.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupSelfRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthTokenLookupSelf(TokenLookupSelfRequest tokenLookupSelfRequest = default(TokenLookupSelfRequest));

        /// <summary>
        /// This endpoint will lookup a token and its properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupSelfRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthTokenLookupSelfWithHttpInfo(TokenLookupSelfRequest tokenLookupSelfRequest = default(TokenLookupSelfRequest));
        /// <summary>
        /// This endpoint will renew the given token and prevent expiration.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthTokenRenew(TokenRenewRequest tokenRenewRequest = default(TokenRenewRequest));

        /// <summary>
        /// This endpoint will renew the given token and prevent expiration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthTokenRenewWithHttpInfo(TokenRenewRequest tokenRenewRequest = default(TokenRenewRequest));
        /// <summary>
        /// This endpoint will renew a token associated with the given accessor and its properties. Response will not contain the token ID.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewAccessorRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthTokenRenewAccessor(TokenRenewAccessorRequest tokenRenewAccessorRequest = default(TokenRenewAccessorRequest));

        /// <summary>
        /// This endpoint will renew a token associated with the given accessor and its properties. Response will not contain the token ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewAccessorRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthTokenRenewAccessorWithHttpInfo(TokenRenewAccessorRequest tokenRenewAccessorRequest = default(TokenRenewAccessorRequest));
        /// <summary>
        /// This endpoint will renew the token used to call it and prevent expiration.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewSelfRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthTokenRenewSelf(TokenRenewSelfRequest tokenRenewSelfRequest = default(TokenRenewSelfRequest));

        /// <summary>
        /// This endpoint will renew the token used to call it and prevent expiration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewSelfRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthTokenRenewSelfWithHttpInfo(TokenRenewSelfRequest tokenRenewSelfRequest = default(TokenRenewSelfRequest));
        /// <summary>
        /// This endpoint will delete the given token and all of its child tokens.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthTokenRevoke(TokenRevokeRequest tokenRevokeRequest = default(TokenRevokeRequest));

        /// <summary>
        /// This endpoint will delete the given token and all of its child tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthTokenRevokeWithHttpInfo(TokenRevokeRequest tokenRevokeRequest = default(TokenRevokeRequest));
        /// <summary>
        /// This endpoint will delete the token associated with the accessor and all of its child tokens.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeAccessorRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthTokenRevokeAccessor(TokenRevokeAccessorRequest tokenRevokeAccessorRequest = default(TokenRevokeAccessorRequest));

        /// <summary>
        /// This endpoint will delete the token associated with the accessor and all of its child tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeAccessorRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthTokenRevokeAccessorWithHttpInfo(TokenRevokeAccessorRequest tokenRevokeAccessorRequest = default(TokenRevokeAccessorRequest));
        /// <summary>
        /// This endpoint will delete the token and orphan its child tokens.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeOrphanRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthTokenRevokeOrphan(TokenRevokeOrphanRequest tokenRevokeOrphanRequest = default(TokenRevokeOrphanRequest));

        /// <summary>
        /// This endpoint will delete the token and orphan its child tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeOrphanRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthTokenRevokeOrphanWithHttpInfo(TokenRevokeOrphanRequest tokenRevokeOrphanRequest = default(TokenRevokeOrphanRequest));
        /// <summary>
        /// This endpoint will delete the token used to call it and all of its child tokens.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void PostAuthTokenRevokeSelf();

        /// <summary>
        /// This endpoint will delete the token used to call it and all of its child tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthTokenRevokeSelfWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <param name="tokenRolesRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthTokenRolesRoleName(string roleName, TokenRolesRequest tokenRolesRequest = default(TokenRolesRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <param name="tokenRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthTokenRolesRoleNameWithHttpInfo(string roleName, TokenRolesRequest tokenRolesRequest = default(TokenRolesRequest));
        /// <summary>
        /// This endpoint performs cleanup tasks that can be run if certain error conditions have occurred.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void PostAuthTokenTidy();

        /// <summary>
        /// This endpoint performs cleanup tasks that can be run if certain error conditions have occurred.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthTokenTidyWithHttpInfo();
        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the user.</param>
        /// <param name="userpassLoginRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthUserpassLoginUsername(string username, UserpassLoginRequest userpassLoginRequest = default(UserpassLoginRequest));

        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the user.</param>
        /// <param name="userpassLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthUserpassLoginUsernameWithHttpInfo(string username, UserpassLoginRequest userpassLoginRequest = default(UserpassLoginRequest));
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthUserpassUsersUsername(string username, UserpassUsersRequest userpassUsersRequest = default(UserpassUsersRequest));

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthUserpassUsersUsernameWithHttpInfo(string username, UserpassUsersRequest userpassUsersRequest = default(UserpassUsersRequest));
        /// <summary>
        /// Reset user&#39;s password.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersPasswordRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthUserpassUsersUsernamePassword(string username, UserpassUsersPasswordRequest userpassUsersPasswordRequest = default(UserpassUsersPasswordRequest));

        /// <summary>
        /// Reset user&#39;s password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersPasswordRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthUserpassUsersUsernamePasswordWithHttpInfo(string username, UserpassUsersPasswordRequest userpassUsersPasswordRequest = default(UserpassUsersPasswordRequest));
        /// <summary>
        /// Update the policies associated with the username.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersPoliciesRequest"> (optional)</param>
        /// <returns></returns>
        void PostAuthUserpassUsersUsernamePolicies(string username, UserpassUsersPoliciesRequest userpassUsersPoliciesRequest = default(UserpassUsersPoliciesRequest));

        /// <summary>
        /// Update the policies associated with the username.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersPoliciesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostAuthUserpassUsersUsernamePoliciesWithHttpInfo(string username, UserpassUsersPoliciesRequest userpassUsersPoliciesRequest = default(UserpassUsersPoliciesRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthAlicloudRoleRoleAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthAlicloudRoleRoleWithHttpInfoAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read/write/delete a single app-id mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthAppIdMapAppIdKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read/write/delete a single app-id mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthAppIdMapAppIdKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read/write/delete a single user-id mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthAppIdMapUserIdKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read/write/delete a single user-id mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthAppIdMapUserIdKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthApproleRoleRoleNameWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Impose secret_id to be presented during login using this role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameBindSecretIdAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Impose secret_id to be presented during login using this role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthApproleRoleRoleNameBindSecretIdWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameBoundCidrListAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthApproleRoleRoleNameBoundCidrListWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the value of &#39;period&#39; on the role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNamePeriodAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the value of &#39;period&#39; on the role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthApproleRoleRoleNamePeriodWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Policies of the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNamePoliciesAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Policies of the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthApproleRoleRoleNamePoliciesWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameSecretIdAccessorDestroyAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthApproleRoleRoleNameSecretIdAccessorDestroyWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameSecretIdBoundCidrsAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthApproleRoleRoleNameSecretIdBoundCidrsWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Invalidate an issued secret_id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameSecretIdDestroyAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Invalidate an issued secret_id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthApproleRoleRoleNameSecretIdDestroyWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Use limit of the SecretID generated against the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameSecretIdNumUsesAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Use limit of the SecretID generated against the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthApproleRoleRoleNameSecretIdNumUsesWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameSecretIdTtlAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthApproleRoleRoleNameSecretIdTtlWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameTokenBoundCidrsAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthApproleRoleRoleNameTokenBoundCidrsWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameTokenMaxTtlAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthApproleRoleRoleNameTokenMaxTtlWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Number of times issued tokens can be used
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameTokenNumUsesAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Number of times issued tokens can be used
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthApproleRoleRoleNameTokenNumUsesWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameTokenTtlAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthApproleRoleRoleNameTokenTtlWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthAwsConfigCertificateCertNameAsync(string certName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthAwsConfigCertificateCertNameWithHttpInfoAsync(string certName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthAwsConfigClientAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthAwsConfigClientWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthAwsConfigStsAccountIdAsync(string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthAwsConfigStsAccountIdWithHttpInfoAsync(string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthAwsConfigTidyIdentityAccesslistAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthAwsConfigTidyIdentityAccesslistWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthAwsConfigTidyIdentityWhitelistAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthAwsConfigTidyIdentityWhitelistWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthAwsConfigTidyRoletagBlacklistAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthAwsConfigTidyRoletagBlacklistWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthAwsConfigTidyRoletagDenylistAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthAwsConfigTidyRoletagDenylistWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthAwsIdentityAccesslistInstanceIdAsync(string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthAwsIdentityAccesslistInstanceIdWithHttpInfoAsync(string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthAwsIdentityWhitelistInstanceIdAsync(string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthAwsIdentityWhitelistInstanceIdWithHttpInfoAsync(string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthAwsRoleRoleAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthAwsRoleRoleWithHttpInfoAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthAwsRoletagBlacklistRoleTagAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthAwsRoletagBlacklistRoleTagWithHttpInfoAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthAwsRoletagDenylistRoleTagAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthAwsRoletagDenylistRoleTagWithHttpInfoAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthAzureConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthAzureConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthAzureRoleNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthAzureRoleNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage trusted certificates used for authentication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthCertCertsNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage trusted certificates used for authentication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthCertCertsNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthCertCrlsNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthCertCrlsNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthCfConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthCfConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthCfRolesRoleAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthCfRolesRoleWithHttpInfoAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a GCP role with associated policies and required attributes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthGcpRoleNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a GCP role with associated policies and required attributes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthGcpRoleNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read/write/delete a single teams mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthGithubMapTeamsKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read/write/delete a single teams mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthGithubMapTeamsKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read/write/delete a single users mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthGithubMapUsersKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read/write/delete a single users mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthGithubMapUsersKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an existing role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthJwtRoleNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an existing role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthJwtRoleNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthKerberosGroupsNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthKerberosGroupsNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthKubernetesRoleNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthKubernetesRoleNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthLdapGroupsNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthLdapGroupsNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthLdapUsersNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthLdapUsersNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthOciConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthOciConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthOciRoleRoleAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthOciRoleRoleWithHttpInfoAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an existing role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthOidcRoleNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an existing role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthOidcRoleNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthOktaGroupsNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthOktaGroupsNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthOktaUsersNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthOktaUsersNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthRadiusUsersNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthRadiusUsersNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthTokenRolesRoleNameAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthTokenRolesRoleNameWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthUserpassUsersUsernameAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthUserpassUsersUsernameWithHttpInfoAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lists all the roles that are registered with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAlicloudRoleAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lists all the roles that are registered with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAlicloudRoleWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAlicloudRoleRoleAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAlicloudRoleRoleWithHttpInfoAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lists all the roles that are registered with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAlicloudRolesAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lists all the roles that are registered with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAlicloudRolesWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read mappings for app-id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAppIdMapAppIdAsync(string list = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read mappings for app-id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAppIdMapAppIdWithHttpInfoAsync(string list = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read/write/delete a single app-id mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAppIdMapAppIdKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read/write/delete a single app-id mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAppIdMapAppIdKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read mappings for user-id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAppIdMapUserIdAsync(string list = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read mappings for user-id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAppIdMapUserIdWithHttpInfoAsync(string list = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read/write/delete a single user-id mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAppIdMapUserIdKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read/write/delete a single user-id mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAppIdMapUserIdKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lists all the roles registered with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthApproleRoleAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lists all the roles registered with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthApproleRoleWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthApproleRoleRoleNameAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthApproleRoleRoleNameWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Impose secret_id to be presented during login using this role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthApproleRoleRoleNameBindSecretIdAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Impose secret_id to be presented during login using this role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthApproleRoleRoleNameBindSecretIdWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthApproleRoleRoleNameBoundCidrListAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthApproleRoleRoleNameBoundCidrListWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Enables cluster local secret IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthApproleRoleRoleNameLocalSecretIdsAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Enables cluster local secret IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthApproleRoleRoleNameLocalSecretIdsWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the value of &#39;period&#39; on the role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthApproleRoleRoleNamePeriodAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the value of &#39;period&#39; on the role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthApproleRoleRoleNamePeriodWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Policies of the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthApproleRoleRoleNamePoliciesAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Policies of the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthApproleRoleRoleNamePoliciesWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the &#39;role_id&#39; of the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthApproleRoleRoleNameRoleIdAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the &#39;role_id&#39; of the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthApproleRoleRoleNameRoleIdWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate a SecretID against this role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthApproleRoleRoleNameSecretIdAsync(string roleName, string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate a SecretID against this role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthApproleRoleRoleNameSecretIdWithHttpInfoAsync(string roleName, string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthApproleRoleRoleNameSecretIdBoundCidrsAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthApproleRoleRoleNameSecretIdBoundCidrsWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Use limit of the SecretID generated against the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthApproleRoleRoleNameSecretIdNumUsesAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Use limit of the SecretID generated against the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthApproleRoleRoleNameSecretIdNumUsesWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthApproleRoleRoleNameSecretIdTtlAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthApproleRoleRoleNameSecretIdTtlWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthApproleRoleRoleNameTokenBoundCidrsAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthApproleRoleRoleNameTokenBoundCidrsWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthApproleRoleRoleNameTokenMaxTtlAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthApproleRoleRoleNameTokenMaxTtlWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Number of times issued tokens can be used
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthApproleRoleRoleNameTokenNumUsesAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Number of times issued tokens can be used
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthApproleRoleRoleNameTokenNumUsesWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthApproleRoleRoleNameTokenTtlAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthApproleRoleRoleNameTokenTtlWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAwsConfigCertificateCertNameAsync(string certName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAwsConfigCertificateCertNameWithHttpInfoAsync(string certName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAwsConfigCertificatesAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAwsConfigCertificatesWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAwsConfigClientAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAwsConfigClientWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAwsConfigIdentityAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAwsConfigIdentityWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAwsConfigStsAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAwsConfigStsWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAwsConfigStsAccountIdAsync(string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAwsConfigStsAccountIdWithHttpInfoAsync(string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAwsConfigTidyIdentityAccesslistAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAwsConfigTidyIdentityAccesslistWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAwsConfigTidyIdentityWhitelistAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAwsConfigTidyIdentityWhitelistWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAwsConfigTidyRoletagBlacklistAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAwsConfigTidyRoletagBlacklistWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAwsConfigTidyRoletagDenylistAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAwsConfigTidyRoletagDenylistWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAwsIdentityAccesslistAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAwsIdentityAccesslistWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAwsIdentityAccesslistInstanceIdAsync(string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAwsIdentityAccesslistInstanceIdWithHttpInfoAsync(string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAwsIdentityWhitelistAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAwsIdentityWhitelistWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAwsIdentityWhitelistInstanceIdAsync(string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAwsIdentityWhitelistInstanceIdWithHttpInfoAsync(string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAwsRoleAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAwsRoleWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAwsRoleRoleAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAwsRoleRoleWithHttpInfoAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAwsRolesAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAwsRolesWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAwsRoletagBlacklistAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAwsRoletagBlacklistWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAwsRoletagBlacklistRoleTagAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAwsRoletagBlacklistRoleTagWithHttpInfoAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAwsRoletagDenylistAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAwsRoletagDenylistWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAwsRoletagDenylistRoleTagAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAwsRoletagDenylistRoleTagWithHttpInfoAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAzureConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAzureConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAzureRoleAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAzureRoleWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthAzureRoleNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthAzureRoleNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform for authenticating users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthCentrifyConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform for authenticating users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthCentrifyConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage trusted certificates used for authentication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthCertCertsAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage trusted certificates used for authentication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthCertCertsWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage trusted certificates used for authentication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthCertCertsNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage trusted certificates used for authentication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthCertCertsNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthCertCrlsNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthCertCrlsNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthCfConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthCfConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthCfRolesAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthCfRolesWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthCfRolesRoleAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthCfRolesRoleWithHttpInfoAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Configure credentials used to query the GCP IAM API to verify authenticating service accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthGcpConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Configure credentials used to query the GCP IAM API to verify authenticating service accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthGcpConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lists all the roles that are registered with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthGcpRoleAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lists all the roles that are registered with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthGcpRoleWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a GCP role with associated policies and required attributes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthGcpRoleNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a GCP role with associated policies and required attributes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthGcpRoleNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lists all the roles that are registered with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthGcpRolesAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lists all the roles that are registered with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthGcpRolesWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthGithubConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthGithubConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read mappings for teams
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthGithubMapTeamsAsync(string list = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read mappings for teams
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthGithubMapTeamsWithHttpInfoAsync(string list = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read/write/delete a single teams mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthGithubMapTeamsKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read/write/delete a single teams mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthGithubMapTeamsKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read mappings for users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthGithubMapUsersAsync(string list = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read mappings for users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthGithubMapUsersWithHttpInfoAsync(string list = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read/write/delete a single users mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthGithubMapUsersKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read/write/delete a single users mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthGithubMapUsersKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read the current JWT authentication backend configuration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthJwtConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read the current JWT authentication backend configuration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthJwtConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Callback endpoint to complete an OIDC login.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthJwtOidcCallbackAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Callback endpoint to complete an OIDC login.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthJwtOidcCallbackWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lists all the roles registered with the backend.
        /// </summary>
        /// <remarks>
        /// The list will contain the names of the roles.
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthJwtRoleAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lists all the roles registered with the backend.
        /// </summary>
        /// <remarks>
        /// The list will contain the names of the roles.
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthJwtRoleWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read an existing role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthJwtRoleNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read an existing role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthJwtRoleNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthKerberosConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthKerberosConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthKerberosConfigLdapAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthKerberosConfigLdapWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthKerberosGroupsAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthKerberosGroupsWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthKerberosGroupsNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthKerberosGroupsNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthKerberosLoginAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthKerberosLoginWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Configures the JWT Public Key and Kubernetes API information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthKubernetesConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Configures the JWT Public Key and Kubernetes API information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthKubernetesConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lists all the roles registered with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthKubernetesRoleAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lists all the roles registered with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthKubernetesRoleWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthKubernetesRoleNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthKubernetesRoleNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Configure the LDAP server to connect to, along with its options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthLdapConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Configure the LDAP server to connect to, along with its options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthLdapConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthLdapGroupsAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthLdapGroupsWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthLdapGroupsNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthLdapGroupsNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthLdapUsersAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthLdapUsersWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthLdapUsersNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthLdapUsersNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthOciConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthOciConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lists all the roles that are registered with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthOciRoleAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lists all the roles that are registered with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthOciRoleWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthOciRoleRoleAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthOciRoleRoleWithHttpInfoAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read the current JWT authentication backend configuration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthOidcConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read the current JWT authentication backend configuration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthOidcConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Callback endpoint to complete an OIDC login.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthOidcOidcCallbackAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Callback endpoint to complete an OIDC login.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthOidcOidcCallbackWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lists all the roles registered with the backend.
        /// </summary>
        /// <remarks>
        /// The list will contain the names of the roles.
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthOidcRoleAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lists all the roles registered with the backend.
        /// </summary>
        /// <remarks>
        /// The list will contain the names of the roles.
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthOidcRoleWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read an existing role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthOidcRoleNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read an existing role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthOidcRoleNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint allows you to configure the Okta and its configuration options.  The Okta organization are the characters at the front of the URL for Okta. Example https://ORG.okta.com
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthOktaConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint allows you to configure the Okta and its configuration options.  The Okta organization are the characters at the front of the URL for Okta. Example https://ORG.okta.com
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthOktaConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthOktaGroupsAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthOktaGroupsWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthOktaGroupsNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthOktaGroupsNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthOktaUsersAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthOktaUsersWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthOktaUsersNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthOktaUsersNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonce">Nonce provided during a login request to retrieve the number verification challenge for the matching request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthOktaVerifyNonceAsync(string nonce, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonce">Nonce provided during a login request to retrieve the number verification challenge for the matching request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthOktaVerifyNonceWithHttpInfoAsync(string nonce, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Configure the RADIUS server to connect to, along with its options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthRadiusConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Configure the RADIUS server to connect to, along with its options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthRadiusConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthRadiusUsersAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthRadiusUsersWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthRadiusUsersNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthRadiusUsersNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List token accessors, which can then be be used to iterate and discover their properties or revoke them. Because this can be used to cause a denial of service, this endpoint requires &#39;sudo&#39; capability in addition to &#39;list&#39;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthTokenAccessorsAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List token accessors, which can then be be used to iterate and discover their properties or revoke them. Because this can be used to cause a denial of service, this endpoint requires &#39;sudo&#39; capability in addition to &#39;list&#39;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthTokenAccessorsWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint will lookup a token and its properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthTokenLookupAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint will lookup a token and its properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthTokenLookupWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint will lookup a token and its properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthTokenLookupSelfAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint will lookup a token and its properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthTokenLookupSelfWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint lists configured roles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthTokenRolesAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint lists configured roles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthTokenRolesWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthTokenRolesRoleNameAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthTokenRolesRoleNameWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthUserpassUsersAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthUserpassUsersWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAuthUserpassUsersUsernameAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAuthUserpassUsersUsernameWithHttpInfoAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Authenticates an RAM entity with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alicloudLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAlicloudLoginAsync(AlicloudLoginRequest alicloudLoginRequest = default(AlicloudLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Authenticates an RAM entity with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alicloudLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAlicloudLoginWithHttpInfoAsync(AlicloudLoginRequest alicloudLoginRequest = default(AlicloudLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <param name="alicloudRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAlicloudRoleRoleAsync(string role, AlicloudRoleRequest alicloudRoleRequest = default(AlicloudRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <param name="alicloudRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAlicloudRoleRoleWithHttpInfoAsync(string role, AlicloudRoleRequest alicloudRoleRequest = default(AlicloudRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Log in with an App ID and User ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appIdLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAppIdLoginAsync(AppIdLoginRequest appIdLoginRequest = default(AppIdLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Log in with an App ID and User ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appIdLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAppIdLoginWithHttpInfoAsync(AppIdLoginRequest appIdLoginRequest = default(AppIdLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Log in with an App ID and User ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The unique app ID</param>
        /// <param name="appIdLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAppIdLoginAppIdAsync(string appId, AppIdLoginRequest appIdLoginRequest = default(AppIdLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Log in with an App ID and User ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The unique app ID</param>
        /// <param name="appIdLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAppIdLoginAppIdWithHttpInfoAsync(string appId, AppIdLoginRequest appIdLoginRequest = default(AppIdLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read/write/delete a single app-id mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <param name="appIdMapAppIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAppIdMapAppIdKeyAsync(string key, AppIdMapAppIdRequest appIdMapAppIdRequest = default(AppIdMapAppIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read/write/delete a single app-id mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <param name="appIdMapAppIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAppIdMapAppIdKeyWithHttpInfoAsync(string key, AppIdMapAppIdRequest appIdMapAppIdRequest = default(AppIdMapAppIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read/write/delete a single user-id mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <param name="appIdMapUserIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAppIdMapUserIdKeyAsync(string key, AppIdMapUserIdRequest appIdMapUserIdRequest = default(AppIdMapUserIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read/write/delete a single user-id mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <param name="appIdMapUserIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAppIdMapUserIdKeyWithHttpInfoAsync(string key, AppIdMapUserIdRequest appIdMapUserIdRequest = default(AppIdMapUserIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approleLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthApproleLoginAsync(ApproleLoginRequest approleLoginRequest = default(ApproleLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approleLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthApproleLoginWithHttpInfoAsync(ApproleLoginRequest approleLoginRequest = default(ApproleLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthApproleRoleRoleNameAsync(string roleName, ApproleRoleRequest approleRoleRequest = default(ApproleRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthApproleRoleRoleNameWithHttpInfoAsync(string roleName, ApproleRoleRequest approleRoleRequest = default(ApproleRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Impose secret_id to be presented during login using this role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleBindSecretIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthApproleRoleRoleNameBindSecretIdAsync(string roleName, ApproleRoleBindSecretIdRequest approleRoleBindSecretIdRequest = default(ApproleRoleBindSecretIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Impose secret_id to be presented during login using this role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleBindSecretIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthApproleRoleRoleNameBindSecretIdWithHttpInfoAsync(string roleName, ApproleRoleBindSecretIdRequest approleRoleBindSecretIdRequest = default(ApproleRoleBindSecretIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleBoundCidrListRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthApproleRoleRoleNameBoundCidrListAsync(string roleName, ApproleRoleBoundCidrListRequest approleRoleBoundCidrListRequest = default(ApproleRoleBoundCidrListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleBoundCidrListRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthApproleRoleRoleNameBoundCidrListWithHttpInfoAsync(string roleName, ApproleRoleBoundCidrListRequest approleRoleBoundCidrListRequest = default(ApproleRoleBoundCidrListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Assign a SecretID of choice against the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleCustomSecretIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthApproleRoleRoleNameCustomSecretIdAsync(string roleName, ApproleRoleCustomSecretIdRequest approleRoleCustomSecretIdRequest = default(ApproleRoleCustomSecretIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Assign a SecretID of choice against the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleCustomSecretIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthApproleRoleRoleNameCustomSecretIdWithHttpInfoAsync(string roleName, ApproleRoleCustomSecretIdRequest approleRoleCustomSecretIdRequest = default(ApproleRoleCustomSecretIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the value of &#39;period&#39; on the role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRolePeriodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthApproleRoleRoleNamePeriodAsync(string roleName, ApproleRolePeriodRequest approleRolePeriodRequest = default(ApproleRolePeriodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the value of &#39;period&#39; on the role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRolePeriodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthApproleRoleRoleNamePeriodWithHttpInfoAsync(string roleName, ApproleRolePeriodRequest approleRolePeriodRequest = default(ApproleRolePeriodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Policies of the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRolePoliciesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthApproleRoleRoleNamePoliciesAsync(string roleName, ApproleRolePoliciesRequest approleRolePoliciesRequest = default(ApproleRolePoliciesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Policies of the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRolePoliciesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthApproleRoleRoleNamePoliciesWithHttpInfoAsync(string roleName, ApproleRolePoliciesRequest approleRolePoliciesRequest = default(ApproleRolePoliciesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the &#39;role_id&#39; of the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleRoleIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthApproleRoleRoleNameRoleIdAsync(string roleName, ApproleRoleRoleIdRequest approleRoleRoleIdRequest = default(ApproleRoleRoleIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the &#39;role_id&#39; of the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleRoleIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthApproleRoleRoleNameRoleIdWithHttpInfoAsync(string roleName, ApproleRoleRoleIdRequest approleRoleRoleIdRequest = default(ApproleRoleRoleIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate a SecretID against this role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthApproleRoleRoleNameSecretIdAsync(string roleName, ApproleRoleSecretIdRequest approleRoleSecretIdRequest = default(ApproleRoleSecretIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate a SecretID against this role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthApproleRoleRoleNameSecretIdWithHttpInfoAsync(string roleName, ApproleRoleSecretIdRequest approleRoleSecretIdRequest = default(ApproleRoleSecretIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdAccessorDestroyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthApproleRoleRoleNameSecretIdAccessorDestroyAsync(string roleName, ApproleRoleSecretIdAccessorDestroyRequest approleRoleSecretIdAccessorDestroyRequest = default(ApproleRoleSecretIdAccessorDestroyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdAccessorDestroyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthApproleRoleRoleNameSecretIdAccessorDestroyWithHttpInfoAsync(string roleName, ApproleRoleSecretIdAccessorDestroyRequest approleRoleSecretIdAccessorDestroyRequest = default(ApproleRoleSecretIdAccessorDestroyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdAccessorLookupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthApproleRoleRoleNameSecretIdAccessorLookupAsync(string roleName, ApproleRoleSecretIdAccessorLookupRequest approleRoleSecretIdAccessorLookupRequest = default(ApproleRoleSecretIdAccessorLookupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdAccessorLookupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthApproleRoleRoleNameSecretIdAccessorLookupWithHttpInfoAsync(string roleName, ApproleRoleSecretIdAccessorLookupRequest approleRoleSecretIdAccessorLookupRequest = default(ApproleRoleSecretIdAccessorLookupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdBoundCidrsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthApproleRoleRoleNameSecretIdBoundCidrsAsync(string roleName, ApproleRoleSecretIdBoundCidrsRequest approleRoleSecretIdBoundCidrsRequest = default(ApproleRoleSecretIdBoundCidrsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdBoundCidrsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthApproleRoleRoleNameSecretIdBoundCidrsWithHttpInfoAsync(string roleName, ApproleRoleSecretIdBoundCidrsRequest approleRoleSecretIdBoundCidrsRequest = default(ApproleRoleSecretIdBoundCidrsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Invalidate an issued secret_id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdDestroyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthApproleRoleRoleNameSecretIdDestroyAsync(string roleName, ApproleRoleSecretIdDestroyRequest approleRoleSecretIdDestroyRequest = default(ApproleRoleSecretIdDestroyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Invalidate an issued secret_id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdDestroyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthApproleRoleRoleNameSecretIdDestroyWithHttpInfoAsync(string roleName, ApproleRoleSecretIdDestroyRequest approleRoleSecretIdDestroyRequest = default(ApproleRoleSecretIdDestroyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read the properties of an issued secret_id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdLookupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthApproleRoleRoleNameSecretIdLookupAsync(string roleName, ApproleRoleSecretIdLookupRequest approleRoleSecretIdLookupRequest = default(ApproleRoleSecretIdLookupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read the properties of an issued secret_id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdLookupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthApproleRoleRoleNameSecretIdLookupWithHttpInfoAsync(string roleName, ApproleRoleSecretIdLookupRequest approleRoleSecretIdLookupRequest = default(ApproleRoleSecretIdLookupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Use limit of the SecretID generated against the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdNumUsesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthApproleRoleRoleNameSecretIdNumUsesAsync(string roleName, ApproleRoleSecretIdNumUsesRequest approleRoleSecretIdNumUsesRequest = default(ApproleRoleSecretIdNumUsesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Use limit of the SecretID generated against the role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdNumUsesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthApproleRoleRoleNameSecretIdNumUsesWithHttpInfoAsync(string roleName, ApproleRoleSecretIdNumUsesRequest approleRoleSecretIdNumUsesRequest = default(ApproleRoleSecretIdNumUsesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdTtlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthApproleRoleRoleNameSecretIdTtlAsync(string roleName, ApproleRoleSecretIdTtlRequest approleRoleSecretIdTtlRequest = default(ApproleRoleSecretIdTtlRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdTtlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthApproleRoleRoleNameSecretIdTtlWithHttpInfoAsync(string roleName, ApproleRoleSecretIdTtlRequest approleRoleSecretIdTtlRequest = default(ApproleRoleSecretIdTtlRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenBoundCidrsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthApproleRoleRoleNameTokenBoundCidrsAsync(string roleName, ApproleRoleTokenBoundCidrsRequest approleRoleTokenBoundCidrsRequest = default(ApproleRoleTokenBoundCidrsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenBoundCidrsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthApproleRoleRoleNameTokenBoundCidrsWithHttpInfoAsync(string roleName, ApproleRoleTokenBoundCidrsRequest approleRoleTokenBoundCidrsRequest = default(ApproleRoleTokenBoundCidrsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenMaxTtlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthApproleRoleRoleNameTokenMaxTtlAsync(string roleName, ApproleRoleTokenMaxTtlRequest approleRoleTokenMaxTtlRequest = default(ApproleRoleTokenMaxTtlRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenMaxTtlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthApproleRoleRoleNameTokenMaxTtlWithHttpInfoAsync(string roleName, ApproleRoleTokenMaxTtlRequest approleRoleTokenMaxTtlRequest = default(ApproleRoleTokenMaxTtlRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Number of times issued tokens can be used
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenNumUsesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthApproleRoleRoleNameTokenNumUsesAsync(string roleName, ApproleRoleTokenNumUsesRequest approleRoleTokenNumUsesRequest = default(ApproleRoleTokenNumUsesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Number of times issued tokens can be used
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenNumUsesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthApproleRoleRoleNameTokenNumUsesWithHttpInfoAsync(string roleName, ApproleRoleTokenNumUsesRequest approleRoleTokenNumUsesRequest = default(ApproleRoleTokenNumUsesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenTtlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthApproleRoleRoleNameTokenTtlAsync(string roleName, ApproleRoleTokenTtlRequest approleRoleTokenTtlRequest = default(ApproleRoleTokenTtlRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenTtlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthApproleRoleRoleNameTokenTtlWithHttpInfoAsync(string roleName, ApproleRoleTokenTtlRequest approleRoleTokenTtlRequest = default(ApproleRoleTokenTtlRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the clean-up of expired SecretID entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthApproleTidySecretIdAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the clean-up of expired SecretID entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthApproleTidySecretIdWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <param name="awsConfigCertificateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAwsConfigCertificateCertNameAsync(string certName, AwsConfigCertificateRequest awsConfigCertificateRequest = default(AwsConfigCertificateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <param name="awsConfigCertificateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAwsConfigCertificateCertNameWithHttpInfoAsync(string certName, AwsConfigCertificateRequest awsConfigCertificateRequest = default(AwsConfigCertificateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigClientRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAwsConfigClientAsync(AwsConfigClientRequest awsConfigClientRequest = default(AwsConfigClientRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigClientRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAwsConfigClientWithHttpInfoAsync(AwsConfigClientRequest awsConfigClientRequest = default(AwsConfigClientRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigIdentityRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAwsConfigIdentityAsync(AwsConfigIdentityRequest awsConfigIdentityRequest = default(AwsConfigIdentityRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigIdentityRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAwsConfigIdentityWithHttpInfoAsync(AwsConfigIdentityRequest awsConfigIdentityRequest = default(AwsConfigIdentityRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAwsConfigRotateRootAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAwsConfigRotateRootWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <param name="awsConfigStsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAwsConfigStsAccountIdAsync(string accountId, AwsConfigStsRequest awsConfigStsRequest = default(AwsConfigStsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <param name="awsConfigStsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAwsConfigStsAccountIdWithHttpInfoAsync(string accountId, AwsConfigStsRequest awsConfigStsRequest = default(AwsConfigStsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyIdentityAccesslistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAwsConfigTidyIdentityAccesslistAsync(AwsConfigTidyIdentityAccesslistRequest awsConfigTidyIdentityAccesslistRequest = default(AwsConfigTidyIdentityAccesslistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyIdentityAccesslistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAwsConfigTidyIdentityAccesslistWithHttpInfoAsync(AwsConfigTidyIdentityAccesslistRequest awsConfigTidyIdentityAccesslistRequest = default(AwsConfigTidyIdentityAccesslistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyIdentityWhitelistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAwsConfigTidyIdentityWhitelistAsync(AwsConfigTidyIdentityWhitelistRequest awsConfigTidyIdentityWhitelistRequest = default(AwsConfigTidyIdentityWhitelistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyIdentityWhitelistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAwsConfigTidyIdentityWhitelistWithHttpInfoAsync(AwsConfigTidyIdentityWhitelistRequest awsConfigTidyIdentityWhitelistRequest = default(AwsConfigTidyIdentityWhitelistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyRoletagBlacklistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAwsConfigTidyRoletagBlacklistAsync(AwsConfigTidyRoletagBlacklistRequest awsConfigTidyRoletagBlacklistRequest = default(AwsConfigTidyRoletagBlacklistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyRoletagBlacklistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAwsConfigTidyRoletagBlacklistWithHttpInfoAsync(AwsConfigTidyRoletagBlacklistRequest awsConfigTidyRoletagBlacklistRequest = default(AwsConfigTidyRoletagBlacklistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyRoletagDenylistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAwsConfigTidyRoletagDenylistAsync(AwsConfigTidyRoletagDenylistRequest awsConfigTidyRoletagDenylistRequest = default(AwsConfigTidyRoletagDenylistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyRoletagDenylistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAwsConfigTidyRoletagDenylistWithHttpInfoAsync(AwsConfigTidyRoletagDenylistRequest awsConfigTidyRoletagDenylistRequest = default(AwsConfigTidyRoletagDenylistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAwsLoginAsync(AwsLoginRequest awsLoginRequest = default(AwsLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAwsLoginWithHttpInfoAsync(AwsLoginRequest awsLoginRequest = default(AwsLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="awsRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAwsRoleRoleAsync(string role, AwsRoleRequest awsRoleRequest = default(AwsRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="awsRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAwsRoleRoleWithHttpInfoAsync(string role, AwsRoleRequest awsRoleRequest = default(AwsRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="awsRoleTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAwsRoleRoleTagAsync(string role, AwsRoleTagRequest awsRoleTagRequest = default(AwsRoleTagRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="awsRoleTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAwsRoleRoleTagWithHttpInfoAsync(string role, AwsRoleTagRequest awsRoleTagRequest = default(AwsRoleTagRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAwsRoletagBlacklistRoleTagAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAwsRoletagBlacklistRoleTagWithHttpInfoAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAwsRoletagDenylistRoleTagAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAwsRoletagDenylistRoleTagWithHttpInfoAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyIdentityAccesslistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAwsTidyIdentityAccesslistAsync(AwsTidyIdentityAccesslistRequest awsTidyIdentityAccesslistRequest = default(AwsTidyIdentityAccesslistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyIdentityAccesslistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAwsTidyIdentityAccesslistWithHttpInfoAsync(AwsTidyIdentityAccesslistRequest awsTidyIdentityAccesslistRequest = default(AwsTidyIdentityAccesslistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyIdentityWhitelistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAwsTidyIdentityWhitelistAsync(AwsTidyIdentityWhitelistRequest awsTidyIdentityWhitelistRequest = default(AwsTidyIdentityWhitelistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyIdentityWhitelistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAwsTidyIdentityWhitelistWithHttpInfoAsync(AwsTidyIdentityWhitelistRequest awsTidyIdentityWhitelistRequest = default(AwsTidyIdentityWhitelistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyRoletagBlacklistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAwsTidyRoletagBlacklistAsync(AwsTidyRoletagBlacklistRequest awsTidyRoletagBlacklistRequest = default(AwsTidyRoletagBlacklistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyRoletagBlacklistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAwsTidyRoletagBlacklistWithHttpInfoAsync(AwsTidyRoletagBlacklistRequest awsTidyRoletagBlacklistRequest = default(AwsTidyRoletagBlacklistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyRoletagDenylistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAwsTidyRoletagDenylistAsync(AwsTidyRoletagDenylistRequest awsTidyRoletagDenylistRequest = default(AwsTidyRoletagDenylistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyRoletagDenylistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAwsTidyRoletagDenylistWithHttpInfoAsync(AwsTidyRoletagDenylistRequest awsTidyRoletagDenylistRequest = default(AwsTidyRoletagDenylistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAzureConfigAsync(AzureConfigRequest azureConfigRequest = default(AzureConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAzureConfigWithHttpInfoAsync(AzureConfigRequest azureConfigRequest = default(AzureConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAzureLoginAsync(AzureLoginRequest azureLoginRequest = default(AzureLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAzureLoginWithHttpInfoAsync(AzureLoginRequest azureLoginRequest = default(AzureLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="azureRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthAzureRoleNameAsync(string name, AzureRoleRequest azureRoleRequest = default(AzureRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="azureRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthAzureRoleNameWithHttpInfoAsync(string name, AzureRoleRequest azureRoleRequest = default(AzureRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform for authenticating users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="centrifyConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthCentrifyConfigAsync(CentrifyConfigRequest centrifyConfigRequest = default(CentrifyConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform for authenticating users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="centrifyConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthCentrifyConfigWithHttpInfoAsync(CentrifyConfigRequest centrifyConfigRequest = default(CentrifyConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="centrifyLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthCentrifyLoginAsync(CentrifyLoginRequest centrifyLoginRequest = default(CentrifyLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="centrifyLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthCentrifyLoginWithHttpInfoAsync(CentrifyLoginRequest centrifyLoginRequest = default(CentrifyLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage trusted certificates used for authentication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="certCertsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthCertCertsNameAsync(string name, CertCertsRequest certCertsRequest = default(CertCertsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage trusted certificates used for authentication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="certCertsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthCertCertsNameWithHttpInfoAsync(string name, CertCertsRequest certCertsRequest = default(CertCertsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthCertConfigAsync(CertConfigRequest certConfigRequest = default(CertConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthCertConfigWithHttpInfoAsync(CertConfigRequest certConfigRequest = default(CertConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="certCrlsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthCertCrlsNameAsync(string name, CertCrlsRequest certCrlsRequest = default(CertCrlsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="certCrlsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthCertCrlsNameWithHttpInfoAsync(string name, CertCrlsRequest certCrlsRequest = default(CertCrlsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthCertLoginAsync(CertLoginRequest certLoginRequest = default(CertLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthCertLoginWithHttpInfoAsync(CertLoginRequest certLoginRequest = default(CertLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthCfConfigAsync(CfConfigRequest cfConfigRequest = default(CfConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthCfConfigWithHttpInfoAsync(CfConfigRequest cfConfigRequest = default(CfConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthCfLoginAsync(CfLoginRequest cfLoginRequest = default(CfLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthCfLoginWithHttpInfoAsync(CfLoginRequest cfLoginRequest = default(CfLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <param name="cfRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthCfRolesRoleAsync(string role, CfRolesRequest cfRolesRequest = default(CfRolesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <param name="cfRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthCfRolesRoleWithHttpInfoAsync(string role, CfRolesRequest cfRolesRequest = default(CfRolesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Configure credentials used to query the GCP IAM API to verify authenticating service accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthGcpConfigAsync(GcpConfigRequest gcpConfigRequest = default(GcpConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Configure credentials used to query the GCP IAM API to verify authenticating service accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthGcpConfigWithHttpInfoAsync(GcpConfigRequest gcpConfigRequest = default(GcpConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthGcpLoginAsync(GcpLoginRequest gcpLoginRequest = default(GcpLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthGcpLoginWithHttpInfoAsync(GcpLoginRequest gcpLoginRequest = default(GcpLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a GCP role with associated policies and required attributes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthGcpRoleNameAsync(string name, GcpRoleRequest gcpRoleRequest = default(GcpRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a GCP role with associated policies and required attributes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthGcpRoleNameWithHttpInfoAsync(string name, GcpRoleRequest gcpRoleRequest = default(GcpRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add or remove labels for an existing &#39;gce&#39; role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleLabelsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthGcpRoleNameLabelsAsync(string name, GcpRoleLabelsRequest gcpRoleLabelsRequest = default(GcpRoleLabelsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add or remove labels for an existing &#39;gce&#39; role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleLabelsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthGcpRoleNameLabelsWithHttpInfoAsync(string name, GcpRoleLabelsRequest gcpRoleLabelsRequest = default(GcpRoleLabelsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add or remove service accounts for an existing &#x60;iam&#x60; role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleServiceAccountsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthGcpRoleNameServiceAccountsAsync(string name, GcpRoleServiceAccountsRequest gcpRoleServiceAccountsRequest = default(GcpRoleServiceAccountsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add or remove service accounts for an existing &#x60;iam&#x60; role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleServiceAccountsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthGcpRoleNameServiceAccountsWithHttpInfoAsync(string name, GcpRoleServiceAccountsRequest gcpRoleServiceAccountsRequest = default(GcpRoleServiceAccountsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="githubConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthGithubConfigAsync(GithubConfigRequest githubConfigRequest = default(GithubConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="githubConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthGithubConfigWithHttpInfoAsync(GithubConfigRequest githubConfigRequest = default(GithubConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="githubLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthGithubLoginAsync(GithubLoginRequest githubLoginRequest = default(GithubLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="githubLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthGithubLoginWithHttpInfoAsync(GithubLoginRequest githubLoginRequest = default(GithubLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read/write/delete a single teams mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <param name="githubMapTeamsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthGithubMapTeamsKeyAsync(string key, GithubMapTeamsRequest githubMapTeamsRequest = default(GithubMapTeamsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read/write/delete a single teams mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <param name="githubMapTeamsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthGithubMapTeamsKeyWithHttpInfoAsync(string key, GithubMapTeamsRequest githubMapTeamsRequest = default(GithubMapTeamsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read/write/delete a single users mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <param name="githubMapUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthGithubMapUsersKeyAsync(string key, GithubMapUsersRequest githubMapUsersRequest = default(GithubMapUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read/write/delete a single users mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <param name="githubMapUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthGithubMapUsersKeyWithHttpInfoAsync(string key, GithubMapUsersRequest githubMapUsersRequest = default(GithubMapUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Configure the JWT authentication backend.
        /// </summary>
        /// <remarks>
        /// The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthJwtConfigAsync(JwtConfigRequest jwtConfigRequest = default(JwtConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Configure the JWT authentication backend.
        /// </summary>
        /// <remarks>
        /// The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthJwtConfigWithHttpInfoAsync(JwtConfigRequest jwtConfigRequest = default(JwtConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Authenticates to Vault using a JWT (or OIDC) token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthJwtLoginAsync(JwtLoginRequest jwtLoginRequest = default(JwtLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Authenticates to Vault using a JWT (or OIDC) token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthJwtLoginWithHttpInfoAsync(JwtLoginRequest jwtLoginRequest = default(JwtLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Request an authorization URL to start an OIDC login flow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtOidcAuthUrlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthJwtOidcAuthUrlAsync(JwtOidcAuthUrlRequest jwtOidcAuthUrlRequest = default(JwtOidcAuthUrlRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request an authorization URL to start an OIDC login flow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtOidcAuthUrlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthJwtOidcAuthUrlWithHttpInfoAsync(JwtOidcAuthUrlRequest jwtOidcAuthUrlRequest = default(JwtOidcAuthUrlRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Callback endpoint to handle form_posts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtOidcCallbackRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthJwtOidcCallbackAsync(JwtOidcCallbackRequest jwtOidcCallbackRequest = default(JwtOidcCallbackRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Callback endpoint to handle form_posts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtOidcCallbackRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthJwtOidcCallbackWithHttpInfoAsync(JwtOidcCallbackRequest jwtOidcCallbackRequest = default(JwtOidcCallbackRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="jwtRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthJwtRoleNameAsync(string name, JwtRoleRequest jwtRoleRequest = default(JwtRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="jwtRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthJwtRoleNameWithHttpInfoAsync(string name, JwtRoleRequest jwtRoleRequest = default(JwtRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthKerberosConfigAsync(KerberosConfigRequest kerberosConfigRequest = default(KerberosConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthKerberosConfigWithHttpInfoAsync(KerberosConfigRequest kerberosConfigRequest = default(KerberosConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosConfigLdapRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthKerberosConfigLdapAsync(KerberosConfigLdapRequest kerberosConfigLdapRequest = default(KerberosConfigLdapRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosConfigLdapRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthKerberosConfigLdapWithHttpInfoAsync(KerberosConfigLdapRequest kerberosConfigLdapRequest = default(KerberosConfigLdapRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="kerberosGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthKerberosGroupsNameAsync(string name, KerberosGroupsRequest kerberosGroupsRequest = default(KerberosGroupsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="kerberosGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthKerberosGroupsNameWithHttpInfoAsync(string name, KerberosGroupsRequest kerberosGroupsRequest = default(KerberosGroupsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthKerberosLoginAsync(KerberosLoginRequest kerberosLoginRequest = default(KerberosLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthKerberosLoginWithHttpInfoAsync(KerberosLoginRequest kerberosLoginRequest = default(KerberosLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Configures the JWT Public Key and Kubernetes API information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthKubernetesConfigAsync(KubernetesConfigRequest kubernetesConfigRequest = default(KubernetesConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Configures the JWT Public Key and Kubernetes API information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthKubernetesConfigWithHttpInfoAsync(KubernetesConfigRequest kubernetesConfigRequest = default(KubernetesConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Authenticates Kubernetes service accounts with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthKubernetesLoginAsync(KubernetesLoginRequest kubernetesLoginRequest = default(KubernetesLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Authenticates Kubernetes service accounts with Vault.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthKubernetesLoginWithHttpInfoAsync(KubernetesLoginRequest kubernetesLoginRequest = default(KubernetesLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="kubernetesRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthKubernetesRoleNameAsync(string name, KubernetesRoleRequest kubernetesRoleRequest = default(KubernetesRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="kubernetesRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthKubernetesRoleNameWithHttpInfoAsync(string name, KubernetesRoleRequest kubernetesRoleRequest = default(KubernetesRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Configure the LDAP server to connect to, along with its options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ldapConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthLdapConfigAsync(LdapConfigRequest ldapConfigRequest = default(LdapConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Configure the LDAP server to connect to, along with its options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ldapConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthLdapConfigWithHttpInfoAsync(LdapConfigRequest ldapConfigRequest = default(LdapConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="ldapGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthLdapGroupsNameAsync(string name, LdapGroupsRequest ldapGroupsRequest = default(LdapGroupsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="ldapGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthLdapGroupsNameWithHttpInfoAsync(string name, LdapGroupsRequest ldapGroupsRequest = default(LdapGroupsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">DN (distinguished name) to be used for login.</param>
        /// <param name="ldapLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthLdapLoginUsernameAsync(string username, LdapLoginRequest ldapLoginRequest = default(LdapLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">DN (distinguished name) to be used for login.</param>
        /// <param name="ldapLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthLdapLoginUsernameWithHttpInfoAsync(string username, LdapLoginRequest ldapLoginRequest = default(LdapLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <param name="ldapUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthLdapUsersNameAsync(string name, LdapUsersRequest ldapUsersRequest = default(LdapUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <param name="ldapUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthLdapUsersNameWithHttpInfoAsync(string name, LdapUsersRequest ldapUsersRequest = default(LdapUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ociConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthOciConfigAsync(OciConfigRequest ociConfigRequest = default(OciConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ociConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthOciConfigWithHttpInfoAsync(OciConfigRequest ociConfigRequest = default(OciConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Authenticates to Vault using OCI credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="ociLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthOciLoginRoleAsync(string role, OciLoginRequest ociLoginRequest = default(OciLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Authenticates to Vault using OCI credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="ociLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthOciLoginRoleWithHttpInfoAsync(string role, OciLoginRequest ociLoginRequest = default(OciLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="ociRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthOciRoleRoleAsync(string role, OciRoleRequest ociRoleRequest = default(OciRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a role and associate policies to it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="ociRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthOciRoleRoleWithHttpInfoAsync(string role, OciRoleRequest ociRoleRequest = default(OciRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Configure the JWT authentication backend.
        /// </summary>
        /// <remarks>
        /// The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthOidcConfigAsync(OidcConfigRequest oidcConfigRequest = default(OidcConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Configure the JWT authentication backend.
        /// </summary>
        /// <remarks>
        /// The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthOidcConfigWithHttpInfoAsync(OidcConfigRequest oidcConfigRequest = default(OidcConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Authenticates to Vault using a JWT (or OIDC) token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthOidcLoginAsync(OidcLoginRequest oidcLoginRequest = default(OidcLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Authenticates to Vault using a JWT (or OIDC) token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthOidcLoginWithHttpInfoAsync(OidcLoginRequest oidcLoginRequest = default(OidcLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Request an authorization URL to start an OIDC login flow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcOidcAuthUrlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthOidcOidcAuthUrlAsync(OidcOidcAuthUrlRequest oidcOidcAuthUrlRequest = default(OidcOidcAuthUrlRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request an authorization URL to start an OIDC login flow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcOidcAuthUrlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthOidcOidcAuthUrlWithHttpInfoAsync(OidcOidcAuthUrlRequest oidcOidcAuthUrlRequest = default(OidcOidcAuthUrlRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Callback endpoint to handle form_posts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcOidcCallbackRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthOidcOidcCallbackAsync(OidcOidcCallbackRequest oidcOidcCallbackRequest = default(OidcOidcCallbackRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Callback endpoint to handle form_posts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcOidcCallbackRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthOidcOidcCallbackWithHttpInfoAsync(OidcOidcCallbackRequest oidcOidcCallbackRequest = default(OidcOidcCallbackRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="oidcRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthOidcRoleNameAsync(string name, OidcRoleRequest oidcRoleRequest = default(OidcRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register an role with the backend.
        /// </summary>
        /// <remarks>
        /// A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="oidcRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthOidcRoleNameWithHttpInfoAsync(string name, OidcRoleRequest oidcRoleRequest = default(OidcRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint allows you to configure the Okta and its configuration options.  The Okta organization are the characters at the front of the URL for Okta. Example https://ORG.okta.com
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oktaConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthOktaConfigAsync(OktaConfigRequest oktaConfigRequest = default(OktaConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint allows you to configure the Okta and its configuration options.  The Okta organization are the characters at the front of the URL for Okta. Example https://ORG.okta.com
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oktaConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthOktaConfigWithHttpInfoAsync(OktaConfigRequest oktaConfigRequest = default(OktaConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <param name="oktaGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthOktaGroupsNameAsync(string name, OktaGroupsRequest oktaGroupsRequest = default(OktaGroupsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <param name="oktaGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthOktaGroupsNameWithHttpInfoAsync(string name, OktaGroupsRequest oktaGroupsRequest = default(OktaGroupsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to be used for login.</param>
        /// <param name="oktaLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthOktaLoginUsernameAsync(string username, OktaLoginRequest oktaLoginRequest = default(OktaLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to be used for login.</param>
        /// <param name="oktaLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthOktaLoginUsernameWithHttpInfoAsync(string username, OktaLoginRequest oktaLoginRequest = default(OktaLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <param name="oktaUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthOktaUsersNameAsync(string name, OktaUsersRequest oktaUsersRequest = default(OktaUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage additional groups for users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <param name="oktaUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthOktaUsersNameWithHttpInfoAsync(string name, OktaUsersRequest oktaUsersRequest = default(OktaUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Configure the RADIUS server to connect to, along with its options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radiusConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthRadiusConfigAsync(RadiusConfigRequest radiusConfigRequest = default(RadiusConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Configure the RADIUS server to connect to, along with its options.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radiusConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthRadiusConfigWithHttpInfoAsync(RadiusConfigRequest radiusConfigRequest = default(RadiusConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radiusLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthRadiusLoginAsync(RadiusLoginRequest radiusLoginRequest = default(RadiusLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radiusLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthRadiusLoginWithHttpInfoAsync(RadiusLoginRequest radiusLoginRequest = default(RadiusLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlusername">Username to be used for login. (URL parameter)</param>
        /// <param name="radiusLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthRadiusLoginUrlusernameAsync(string urlusername, RadiusLoginRequest radiusLoginRequest = default(RadiusLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlusername">Username to be used for login. (URL parameter)</param>
        /// <param name="radiusLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthRadiusLoginUrlusernameWithHttpInfoAsync(string urlusername, RadiusLoginRequest radiusLoginRequest = default(RadiusLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <param name="radiusUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthRadiusUsersNameAsync(string name, RadiusUsersRequest radiusUsersRequest = default(RadiusUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <param name="radiusUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthRadiusUsersNameWithHttpInfoAsync(string name, RadiusUsersRequest radiusUsersRequest = default(RadiusUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The token create path is used to create new tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthTokenCreateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The token create path is used to create new tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthTokenCreateWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The token create path is used to create new orphan tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthTokenCreateOrphanAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The token create path is used to create new orphan tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthTokenCreateOrphanWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This token create path is used to create new tokens adhering to the given role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthTokenCreateRoleNameAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This token create path is used to create new tokens adhering to the given role.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthTokenCreateRoleNameWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint will lookup a token and its properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthTokenLookupAsync(TokenLookupRequest tokenLookupRequest = default(TokenLookupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint will lookup a token and its properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthTokenLookupWithHttpInfoAsync(TokenLookupRequest tokenLookupRequest = default(TokenLookupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint will lookup a token associated with the given accessor and its properties. Response will not contain the token ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupAccessorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthTokenLookupAccessorAsync(TokenLookupAccessorRequest tokenLookupAccessorRequest = default(TokenLookupAccessorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint will lookup a token associated with the given accessor and its properties. Response will not contain the token ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupAccessorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthTokenLookupAccessorWithHttpInfoAsync(TokenLookupAccessorRequest tokenLookupAccessorRequest = default(TokenLookupAccessorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint will lookup a token and its properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupSelfRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthTokenLookupSelfAsync(TokenLookupSelfRequest tokenLookupSelfRequest = default(TokenLookupSelfRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint will lookup a token and its properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupSelfRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthTokenLookupSelfWithHttpInfoAsync(TokenLookupSelfRequest tokenLookupSelfRequest = default(TokenLookupSelfRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint will renew the given token and prevent expiration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthTokenRenewAsync(TokenRenewRequest tokenRenewRequest = default(TokenRenewRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint will renew the given token and prevent expiration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthTokenRenewWithHttpInfoAsync(TokenRenewRequest tokenRenewRequest = default(TokenRenewRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint will renew a token associated with the given accessor and its properties. Response will not contain the token ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewAccessorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthTokenRenewAccessorAsync(TokenRenewAccessorRequest tokenRenewAccessorRequest = default(TokenRenewAccessorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint will renew a token associated with the given accessor and its properties. Response will not contain the token ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewAccessorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthTokenRenewAccessorWithHttpInfoAsync(TokenRenewAccessorRequest tokenRenewAccessorRequest = default(TokenRenewAccessorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint will renew the token used to call it and prevent expiration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewSelfRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthTokenRenewSelfAsync(TokenRenewSelfRequest tokenRenewSelfRequest = default(TokenRenewSelfRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint will renew the token used to call it and prevent expiration.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewSelfRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthTokenRenewSelfWithHttpInfoAsync(TokenRenewSelfRequest tokenRenewSelfRequest = default(TokenRenewSelfRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint will delete the given token and all of its child tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthTokenRevokeAsync(TokenRevokeRequest tokenRevokeRequest = default(TokenRevokeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint will delete the given token and all of its child tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthTokenRevokeWithHttpInfoAsync(TokenRevokeRequest tokenRevokeRequest = default(TokenRevokeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint will delete the token associated with the accessor and all of its child tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeAccessorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthTokenRevokeAccessorAsync(TokenRevokeAccessorRequest tokenRevokeAccessorRequest = default(TokenRevokeAccessorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint will delete the token associated with the accessor and all of its child tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeAccessorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthTokenRevokeAccessorWithHttpInfoAsync(TokenRevokeAccessorRequest tokenRevokeAccessorRequest = default(TokenRevokeAccessorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint will delete the token and orphan its child tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeOrphanRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthTokenRevokeOrphanAsync(TokenRevokeOrphanRequest tokenRevokeOrphanRequest = default(TokenRevokeOrphanRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint will delete the token and orphan its child tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeOrphanRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthTokenRevokeOrphanWithHttpInfoAsync(TokenRevokeOrphanRequest tokenRevokeOrphanRequest = default(TokenRevokeOrphanRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint will delete the token used to call it and all of its child tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthTokenRevokeSelfAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint will delete the token used to call it and all of its child tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthTokenRevokeSelfWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <param name="tokenRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthTokenRolesRoleNameAsync(string roleName, TokenRolesRequest tokenRolesRequest = default(TokenRolesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <param name="tokenRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthTokenRolesRoleNameWithHttpInfoAsync(string roleName, TokenRolesRequest tokenRolesRequest = default(TokenRolesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// This endpoint performs cleanup tasks that can be run if certain error conditions have occurred.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthTokenTidyAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint performs cleanup tasks that can be run if certain error conditions have occurred.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthTokenTidyWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the user.</param>
        /// <param name="userpassLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthUserpassLoginUsernameAsync(string username, UserpassLoginRequest userpassLoginRequest = default(UserpassLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Log in with a username and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the user.</param>
        /// <param name="userpassLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthUserpassLoginUsernameWithHttpInfoAsync(string username, UserpassLoginRequest userpassLoginRequest = default(UserpassLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthUserpassUsersUsernameAsync(string username, UserpassUsersRequest userpassUsersRequest = default(UserpassUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Manage users allowed to authenticate.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthUserpassUsersUsernameWithHttpInfoAsync(string username, UserpassUsersRequest userpassUsersRequest = default(UserpassUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reset user&#39;s password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthUserpassUsersUsernamePasswordAsync(string username, UserpassUsersPasswordRequest userpassUsersPasswordRequest = default(UserpassUsersPasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reset user&#39;s password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthUserpassUsersUsernamePasswordWithHttpInfoAsync(string username, UserpassUsersPasswordRequest userpassUsersPasswordRequest = default(UserpassUsersPasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the policies associated with the username.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersPoliciesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostAuthUserpassUsersUsernamePoliciesAsync(string username, UserpassUsersPoliciesRequest userpassUsersPoliciesRequest = default(UserpassUsersPoliciesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the policies associated with the username.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersPoliciesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostAuthUserpassUsersUsernamePoliciesWithHttpInfoAsync(string username, UserpassUsersPoliciesRequest userpassUsersPoliciesRequest = default(UserpassUsersPoliciesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthApi : IAuthApiSync, IAuthApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthApi : IDisposable, IAuthApi
    {
        private VaultClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AuthApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AuthApi(string basePath)
        {
            this.Configuration = VaultClient.Client.Configuration.MergeConfigurations(
                VaultClient.Client.GlobalConfiguration.Instance,
                new VaultClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new VaultClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = VaultClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AuthApi(VaultClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VaultClient.Client.Configuration.MergeConfigurations(
                VaultClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new VaultClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = VaultClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuthApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuthApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = VaultClient.Client.Configuration.MergeConfigurations(
                VaultClient.Client.GlobalConfiguration.Instance,
                new VaultClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new VaultClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = VaultClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuthApi(HttpClient client, VaultClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = VaultClient.Client.Configuration.MergeConfigurations(
                VaultClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new VaultClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = VaultClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AuthApi(VaultClient.Client.ISynchronousClient client, VaultClient.Client.IAsynchronousClient asyncClient, VaultClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VaultClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public VaultClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VaultClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VaultClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VaultClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VaultClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <returns></returns>
        public void DeleteAuthAlicloudRoleRole(string role)
        {
            DeleteAuthAlicloudRoleRoleWithHttpInfo(role);
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthAlicloudRoleRoleWithHttpInfo(string role)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->DeleteAuthAlicloudRoleRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/alicloud/role/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAlicloudRoleRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthAlicloudRoleRoleAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthAlicloudRoleRoleWithHttpInfoAsync(role, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthAlicloudRoleRoleWithHttpInfoAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->DeleteAuthAlicloudRoleRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/alicloud/role/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAlicloudRoleRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single app-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <returns></returns>
        public void DeleteAuthAppIdMapAppIdKey(string key)
        {
            DeleteAuthAppIdMapAppIdKeyWithHttpInfo(key);
        }

        /// <summary>
        /// Read/write/delete a single app-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthAppIdMapAppIdKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->DeleteAuthAppIdMapAppIdKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/app-id/map/app-id/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAppIdMapAppIdKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single app-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthAppIdMapAppIdKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthAppIdMapAppIdKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read/write/delete a single app-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthAppIdMapAppIdKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->DeleteAuthAppIdMapAppIdKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/app-id/map/app-id/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAppIdMapAppIdKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single user-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <returns></returns>
        public void DeleteAuthAppIdMapUserIdKey(string key)
        {
            DeleteAuthAppIdMapUserIdKeyWithHttpInfo(key);
        }

        /// <summary>
        /// Read/write/delete a single user-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthAppIdMapUserIdKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->DeleteAuthAppIdMapUserIdKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/app-id/map/user-id/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAppIdMapUserIdKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single user-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthAppIdMapUserIdKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthAppIdMapUserIdKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read/write/delete a single user-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthAppIdMapUserIdKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->DeleteAuthAppIdMapUserIdKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/app-id/map/user-id/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAppIdMapUserIdKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthApproleRoleRoleName(string roleName)
        {
            DeleteAuthApproleRoleRoleNameWithHttpInfo(roleName);
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthApproleRoleRoleNameWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/approle/role/{role_name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthApproleRoleRoleNameWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthApproleRoleRoleNameWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/approle/role/{role_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Impose secret_id to be presented during login using this role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthApproleRoleRoleNameBindSecretId(string roleName)
        {
            DeleteAuthApproleRoleRoleNameBindSecretIdWithHttpInfo(roleName);
        }

        /// <summary>
        /// Impose secret_id to be presented during login using this role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthApproleRoleRoleNameBindSecretIdWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameBindSecretId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/approle/role/{role_name}/bind-secret-id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameBindSecretId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Impose secret_id to be presented during login using this role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameBindSecretIdAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthApproleRoleRoleNameBindSecretIdWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Impose secret_id to be presented during login using this role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthApproleRoleRoleNameBindSecretIdWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameBindSecretId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/approle/role/{role_name}/bind-secret-id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameBindSecretId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthApproleRoleRoleNameBoundCidrList(string roleName)
        {
            DeleteAuthApproleRoleRoleNameBoundCidrListWithHttpInfo(roleName);
        }

        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthApproleRoleRoleNameBoundCidrListWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameBoundCidrList");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/approle/role/{role_name}/bound-cidr-list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameBoundCidrList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameBoundCidrListAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthApproleRoleRoleNameBoundCidrListWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthApproleRoleRoleNameBoundCidrListWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameBoundCidrList");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/approle/role/{role_name}/bound-cidr-list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameBoundCidrList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the value of &#39;period&#39; on the role 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthApproleRoleRoleNamePeriod(string roleName)
        {
            DeleteAuthApproleRoleRoleNamePeriodWithHttpInfo(roleName);
        }

        /// <summary>
        /// Updates the value of &#39;period&#39; on the role 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthApproleRoleRoleNamePeriodWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNamePeriod");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/approle/role/{role_name}/period", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNamePeriod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the value of &#39;period&#39; on the role 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNamePeriodAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthApproleRoleRoleNamePeriodWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates the value of &#39;period&#39; on the role 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthApproleRoleRoleNamePeriodWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNamePeriod");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/approle/role/{role_name}/period", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNamePeriod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Policies of the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthApproleRoleRoleNamePolicies(string roleName)
        {
            DeleteAuthApproleRoleRoleNamePoliciesWithHttpInfo(roleName);
        }

        /// <summary>
        /// Policies of the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthApproleRoleRoleNamePoliciesWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNamePolicies");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/approle/role/{role_name}/policies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNamePolicies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Policies of the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNamePoliciesAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthApproleRoleRoleNamePoliciesWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Policies of the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthApproleRoleRoleNamePoliciesWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNamePolicies");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/approle/role/{role_name}/policies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNamePolicies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthApproleRoleRoleNameSecretIdAccessorDestroy(string roleName)
        {
            DeleteAuthApproleRoleRoleNameSecretIdAccessorDestroyWithHttpInfo(roleName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthApproleRoleRoleNameSecretIdAccessorDestroyWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameSecretIdAccessorDestroy");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/approle/role/{role_name}/secret-id-accessor/destroy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameSecretIdAccessorDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameSecretIdAccessorDestroyAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthApproleRoleRoleNameSecretIdAccessorDestroyWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthApproleRoleRoleNameSecretIdAccessorDestroyWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameSecretIdAccessorDestroy");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/approle/role/{role_name}/secret-id-accessor/destroy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameSecretIdAccessorDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthApproleRoleRoleNameSecretIdBoundCidrs(string roleName)
        {
            DeleteAuthApproleRoleRoleNameSecretIdBoundCidrsWithHttpInfo(roleName);
        }

        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthApproleRoleRoleNameSecretIdBoundCidrsWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameSecretIdBoundCidrs");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/approle/role/{role_name}/secret-id-bound-cidrs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameSecretIdBoundCidrs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameSecretIdBoundCidrsAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthApproleRoleRoleNameSecretIdBoundCidrsWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthApproleRoleRoleNameSecretIdBoundCidrsWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameSecretIdBoundCidrs");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/approle/role/{role_name}/secret-id-bound-cidrs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameSecretIdBoundCidrs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invalidate an issued secret_id 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthApproleRoleRoleNameSecretIdDestroy(string roleName)
        {
            DeleteAuthApproleRoleRoleNameSecretIdDestroyWithHttpInfo(roleName);
        }

        /// <summary>
        /// Invalidate an issued secret_id 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthApproleRoleRoleNameSecretIdDestroyWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameSecretIdDestroy");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/approle/role/{role_name}/secret-id/destroy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameSecretIdDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invalidate an issued secret_id 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameSecretIdDestroyAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthApproleRoleRoleNameSecretIdDestroyWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Invalidate an issued secret_id 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthApproleRoleRoleNameSecretIdDestroyWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameSecretIdDestroy");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/approle/role/{role_name}/secret-id/destroy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameSecretIdDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Use limit of the SecretID generated against the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthApproleRoleRoleNameSecretIdNumUses(string roleName)
        {
            DeleteAuthApproleRoleRoleNameSecretIdNumUsesWithHttpInfo(roleName);
        }

        /// <summary>
        /// Use limit of the SecretID generated against the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthApproleRoleRoleNameSecretIdNumUsesWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameSecretIdNumUses");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/approle/role/{role_name}/secret-id-num-uses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameSecretIdNumUses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Use limit of the SecretID generated against the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameSecretIdNumUsesAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthApproleRoleRoleNameSecretIdNumUsesWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Use limit of the SecretID generated against the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthApproleRoleRoleNameSecretIdNumUsesWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameSecretIdNumUses");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/approle/role/{role_name}/secret-id-num-uses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameSecretIdNumUses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthApproleRoleRoleNameSecretIdTtl(string roleName)
        {
            DeleteAuthApproleRoleRoleNameSecretIdTtlWithHttpInfo(roleName);
        }

        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthApproleRoleRoleNameSecretIdTtlWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameSecretIdTtl");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/approle/role/{role_name}/secret-id-ttl", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameSecretIdTtl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameSecretIdTtlAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthApproleRoleRoleNameSecretIdTtlWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthApproleRoleRoleNameSecretIdTtlWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameSecretIdTtl");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/approle/role/{role_name}/secret-id-ttl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameSecretIdTtl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthApproleRoleRoleNameTokenBoundCidrs(string roleName)
        {
            DeleteAuthApproleRoleRoleNameTokenBoundCidrsWithHttpInfo(roleName);
        }

        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthApproleRoleRoleNameTokenBoundCidrsWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameTokenBoundCidrs");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/approle/role/{role_name}/token-bound-cidrs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameTokenBoundCidrs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameTokenBoundCidrsAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthApproleRoleRoleNameTokenBoundCidrsWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthApproleRoleRoleNameTokenBoundCidrsWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameTokenBoundCidrs");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/approle/role/{role_name}/token-bound-cidrs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameTokenBoundCidrs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthApproleRoleRoleNameTokenMaxTtl(string roleName)
        {
            DeleteAuthApproleRoleRoleNameTokenMaxTtlWithHttpInfo(roleName);
        }

        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthApproleRoleRoleNameTokenMaxTtlWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameTokenMaxTtl");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/approle/role/{role_name}/token-max-ttl", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameTokenMaxTtl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameTokenMaxTtlAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthApproleRoleRoleNameTokenMaxTtlWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthApproleRoleRoleNameTokenMaxTtlWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameTokenMaxTtl");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/approle/role/{role_name}/token-max-ttl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameTokenMaxTtl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Number of times issued tokens can be used 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthApproleRoleRoleNameTokenNumUses(string roleName)
        {
            DeleteAuthApproleRoleRoleNameTokenNumUsesWithHttpInfo(roleName);
        }

        /// <summary>
        /// Number of times issued tokens can be used 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthApproleRoleRoleNameTokenNumUsesWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameTokenNumUses");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/approle/role/{role_name}/token-num-uses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameTokenNumUses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Number of times issued tokens can be used 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameTokenNumUsesAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthApproleRoleRoleNameTokenNumUsesWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Number of times issued tokens can be used 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthApproleRoleRoleNameTokenNumUsesWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameTokenNumUses");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/approle/role/{role_name}/token-num-uses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameTokenNumUses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthApproleRoleRoleNameTokenTtl(string roleName)
        {
            DeleteAuthApproleRoleRoleNameTokenTtlWithHttpInfo(roleName);
        }

        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthApproleRoleRoleNameTokenTtlWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameTokenTtl");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/approle/role/{role_name}/token-ttl", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameTokenTtl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthApproleRoleRoleNameTokenTtlAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthApproleRoleRoleNameTokenTtlWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthApproleRoleRoleNameTokenTtlWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthApproleRoleRoleNameTokenTtl");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/approle/role/{role_name}/token-ttl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthApproleRoleRoleNameTokenTtl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <returns></returns>
        public void DeleteAuthAwsConfigCertificateCertName(string certName)
        {
            DeleteAuthAwsConfigCertificateCertNameWithHttpInfo(certName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthAwsConfigCertificateCertNameWithHttpInfo(string certName)
        {
            // verify the required parameter 'certName' is set
            if (certName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'certName' when calling AuthApi->DeleteAuthAwsConfigCertificateCertName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("cert_name", VaultClient.Client.ClientUtils.ParameterToString(certName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/aws/config/certificate/{cert_name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsConfigCertificateCertName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthAwsConfigCertificateCertNameAsync(string certName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthAwsConfigCertificateCertNameWithHttpInfoAsync(certName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthAwsConfigCertificateCertNameWithHttpInfoAsync(string certName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'certName' is set
            if (certName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'certName' when calling AuthApi->DeleteAuthAwsConfigCertificateCertName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("cert_name", VaultClient.Client.ClientUtils.ParameterToString(certName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/aws/config/certificate/{cert_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsConfigCertificateCertName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAuthAwsConfigClient()
        {
            DeleteAuthAwsConfigClientWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthAwsConfigClientWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/aws/config/client", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsConfigClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthAwsConfigClientAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthAwsConfigClientWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthAwsConfigClientWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/aws/config/client", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsConfigClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <returns></returns>
        public void DeleteAuthAwsConfigStsAccountId(string accountId)
        {
            DeleteAuthAwsConfigStsAccountIdWithHttpInfo(accountId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthAwsConfigStsAccountIdWithHttpInfo(string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'accountId' when calling AuthApi->DeleteAuthAwsConfigStsAccountId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("account_id", VaultClient.Client.ClientUtils.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/aws/config/sts/{account_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsConfigStsAccountId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthAwsConfigStsAccountIdAsync(string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthAwsConfigStsAccountIdWithHttpInfoAsync(accountId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthAwsConfigStsAccountIdWithHttpInfoAsync(string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'accountId' when calling AuthApi->DeleteAuthAwsConfigStsAccountId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("account_id", VaultClient.Client.ClientUtils.ParameterToString(accountId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/aws/config/sts/{account_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsConfigStsAccountId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAuthAwsConfigTidyIdentityAccesslist()
        {
            DeleteAuthAwsConfigTidyIdentityAccesslistWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthAwsConfigTidyIdentityAccesslistWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/aws/config/tidy/identity-accesslist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsConfigTidyIdentityAccesslist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthAwsConfigTidyIdentityAccesslistAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthAwsConfigTidyIdentityAccesslistWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthAwsConfigTidyIdentityAccesslistWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/aws/config/tidy/identity-accesslist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsConfigTidyIdentityAccesslist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAuthAwsConfigTidyIdentityWhitelist()
        {
            DeleteAuthAwsConfigTidyIdentityWhitelistWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthAwsConfigTidyIdentityWhitelistWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/aws/config/tidy/identity-whitelist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsConfigTidyIdentityWhitelist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthAwsConfigTidyIdentityWhitelistAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthAwsConfigTidyIdentityWhitelistWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthAwsConfigTidyIdentityWhitelistWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/aws/config/tidy/identity-whitelist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsConfigTidyIdentityWhitelist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAuthAwsConfigTidyRoletagBlacklist()
        {
            DeleteAuthAwsConfigTidyRoletagBlacklistWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthAwsConfigTidyRoletagBlacklistWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/aws/config/tidy/roletag-blacklist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsConfigTidyRoletagBlacklist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthAwsConfigTidyRoletagBlacklistAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthAwsConfigTidyRoletagBlacklistWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthAwsConfigTidyRoletagBlacklistWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/aws/config/tidy/roletag-blacklist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsConfigTidyRoletagBlacklist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAuthAwsConfigTidyRoletagDenylist()
        {
            DeleteAuthAwsConfigTidyRoletagDenylistWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthAwsConfigTidyRoletagDenylistWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/aws/config/tidy/roletag-denylist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsConfigTidyRoletagDenylist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthAwsConfigTidyRoletagDenylistAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthAwsConfigTidyRoletagDenylistWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthAwsConfigTidyRoletagDenylistWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/aws/config/tidy/roletag-denylist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsConfigTidyRoletagDenylist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <returns></returns>
        public void DeleteAuthAwsIdentityAccesslistInstanceId(string instanceId)
        {
            DeleteAuthAwsIdentityAccesslistInstanceIdWithHttpInfo(instanceId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthAwsIdentityAccesslistInstanceIdWithHttpInfo(string instanceId)
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'instanceId' when calling AuthApi->DeleteAuthAwsIdentityAccesslistInstanceId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("instance_id", VaultClient.Client.ClientUtils.ParameterToString(instanceId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/aws/identity-accesslist/{instance_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsIdentityAccesslistInstanceId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthAwsIdentityAccesslistInstanceIdAsync(string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthAwsIdentityAccesslistInstanceIdWithHttpInfoAsync(instanceId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthAwsIdentityAccesslistInstanceIdWithHttpInfoAsync(string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'instanceId' when calling AuthApi->DeleteAuthAwsIdentityAccesslistInstanceId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("instance_id", VaultClient.Client.ClientUtils.ParameterToString(instanceId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/aws/identity-accesslist/{instance_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsIdentityAccesslistInstanceId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <returns></returns>
        public void DeleteAuthAwsIdentityWhitelistInstanceId(string instanceId)
        {
            DeleteAuthAwsIdentityWhitelistInstanceIdWithHttpInfo(instanceId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthAwsIdentityWhitelistInstanceIdWithHttpInfo(string instanceId)
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'instanceId' when calling AuthApi->DeleteAuthAwsIdentityWhitelistInstanceId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("instance_id", VaultClient.Client.ClientUtils.ParameterToString(instanceId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/aws/identity-whitelist/{instance_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsIdentityWhitelistInstanceId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthAwsIdentityWhitelistInstanceIdAsync(string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthAwsIdentityWhitelistInstanceIdWithHttpInfoAsync(instanceId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthAwsIdentityWhitelistInstanceIdWithHttpInfoAsync(string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'instanceId' when calling AuthApi->DeleteAuthAwsIdentityWhitelistInstanceId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("instance_id", VaultClient.Client.ClientUtils.ParameterToString(instanceId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/aws/identity-whitelist/{instance_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsIdentityWhitelistInstanceId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthAwsRoleRole(string role)
        {
            DeleteAuthAwsRoleRoleWithHttpInfo(role);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthAwsRoleRoleWithHttpInfo(string role)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->DeleteAuthAwsRoleRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/aws/role/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsRoleRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthAwsRoleRoleAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthAwsRoleRoleWithHttpInfoAsync(role, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthAwsRoleRoleWithHttpInfoAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->DeleteAuthAwsRoleRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/aws/role/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsRoleRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns></returns>
        public void DeleteAuthAwsRoletagBlacklistRoleTag(string roleTag)
        {
            DeleteAuthAwsRoletagBlacklistRoleTagWithHttpInfo(roleTag);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthAwsRoletagBlacklistRoleTagWithHttpInfo(string roleTag)
        {
            // verify the required parameter 'roleTag' is set
            if (roleTag == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleTag' when calling AuthApi->DeleteAuthAwsRoletagBlacklistRoleTag");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_tag", VaultClient.Client.ClientUtils.ParameterToString(roleTag)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/aws/roletag-blacklist/{role_tag}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsRoletagBlacklistRoleTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthAwsRoletagBlacklistRoleTagAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthAwsRoletagBlacklistRoleTagWithHttpInfoAsync(roleTag, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthAwsRoletagBlacklistRoleTagWithHttpInfoAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleTag' is set
            if (roleTag == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleTag' when calling AuthApi->DeleteAuthAwsRoletagBlacklistRoleTag");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_tag", VaultClient.Client.ClientUtils.ParameterToString(roleTag)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/aws/roletag-blacklist/{role_tag}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsRoletagBlacklistRoleTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns></returns>
        public void DeleteAuthAwsRoletagDenylistRoleTag(string roleTag)
        {
            DeleteAuthAwsRoletagDenylistRoleTagWithHttpInfo(roleTag);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthAwsRoletagDenylistRoleTagWithHttpInfo(string roleTag)
        {
            // verify the required parameter 'roleTag' is set
            if (roleTag == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleTag' when calling AuthApi->DeleteAuthAwsRoletagDenylistRoleTag");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_tag", VaultClient.Client.ClientUtils.ParameterToString(roleTag)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/aws/roletag-denylist/{role_tag}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsRoletagDenylistRoleTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthAwsRoletagDenylistRoleTagAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthAwsRoletagDenylistRoleTagWithHttpInfoAsync(roleTag, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthAwsRoletagDenylistRoleTagWithHttpInfoAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleTag' is set
            if (roleTag == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleTag' when calling AuthApi->DeleteAuthAwsRoletagDenylistRoleTag");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_tag", VaultClient.Client.ClientUtils.ParameterToString(roleTag)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/aws/roletag-denylist/{role_tag}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAwsRoletagDenylistRoleTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAuthAzureConfig()
        {
            DeleteAuthAzureConfigWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthAzureConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/azure/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAzureConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthAzureConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthAzureConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthAzureConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/azure/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAzureConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthAzureRoleName(string name)
        {
            DeleteAuthAzureRoleNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthAzureRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthAzureRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/azure/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAzureRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthAzureRoleNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthAzureRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthAzureRoleNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthAzureRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/azure/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthAzureRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage trusted certificates used for authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <returns></returns>
        public void DeleteAuthCertCertsName(string name)
        {
            DeleteAuthCertCertsNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage trusted certificates used for authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthCertCertsNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthCertCertsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/cert/certs/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthCertCertsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage trusted certificates used for authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthCertCertsNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthCertCertsNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage trusted certificates used for authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthCertCertsNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthCertCertsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/cert/certs/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthCertCertsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <returns></returns>
        public void DeleteAuthCertCrlsName(string name)
        {
            DeleteAuthCertCrlsNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthCertCrlsNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthCertCrlsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/cert/crls/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthCertCrlsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthCertCrlsNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthCertCrlsNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthCertCrlsNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthCertCrlsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/cert/crls/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthCertCrlsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAuthCfConfig()
        {
            DeleteAuthCfConfigWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthCfConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/cf/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthCfConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthCfConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthCfConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthCfConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/cf/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthCfConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthCfRolesRole(string role)
        {
            DeleteAuthCfRolesRoleWithHttpInfo(role);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthCfRolesRoleWithHttpInfo(string role)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->DeleteAuthCfRolesRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/cf/roles/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthCfRolesRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthCfRolesRoleAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthCfRolesRoleWithHttpInfoAsync(role, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthCfRolesRoleWithHttpInfoAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->DeleteAuthCfRolesRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/cf/roles/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthCfRolesRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a GCP role with associated policies and required attributes. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthGcpRoleName(string name)
        {
            DeleteAuthGcpRoleNameWithHttpInfo(name);
        }

        /// <summary>
        /// Create a GCP role with associated policies and required attributes. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthGcpRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthGcpRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/gcp/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthGcpRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a GCP role with associated policies and required attributes. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthGcpRoleNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthGcpRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a GCP role with associated policies and required attributes. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthGcpRoleNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthGcpRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/gcp/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthGcpRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single teams mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <returns></returns>
        public void DeleteAuthGithubMapTeamsKey(string key)
        {
            DeleteAuthGithubMapTeamsKeyWithHttpInfo(key);
        }

        /// <summary>
        /// Read/write/delete a single teams mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthGithubMapTeamsKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->DeleteAuthGithubMapTeamsKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/github/map/teams/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthGithubMapTeamsKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single teams mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthGithubMapTeamsKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthGithubMapTeamsKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read/write/delete a single teams mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthGithubMapTeamsKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->DeleteAuthGithubMapTeamsKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/github/map/teams/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthGithubMapTeamsKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single users mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <returns></returns>
        public void DeleteAuthGithubMapUsersKey(string key)
        {
            DeleteAuthGithubMapUsersKeyWithHttpInfo(key);
        }

        /// <summary>
        /// Read/write/delete a single users mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthGithubMapUsersKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->DeleteAuthGithubMapUsersKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/github/map/users/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthGithubMapUsersKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single users mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthGithubMapUsersKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthGithubMapUsersKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read/write/delete a single users mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthGithubMapUsersKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->DeleteAuthGithubMapUsersKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/github/map/users/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthGithubMapUsersKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthJwtRoleName(string name)
        {
            DeleteAuthJwtRoleNameWithHttpInfo(name);
        }

        /// <summary>
        /// Delete an existing role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthJwtRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthJwtRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/jwt/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthJwtRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthJwtRoleNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthJwtRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an existing role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthJwtRoleNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthJwtRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/jwt/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthJwtRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <returns></returns>
        public void DeleteAuthKerberosGroupsName(string name)
        {
            DeleteAuthKerberosGroupsNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthKerberosGroupsNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthKerberosGroupsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/kerberos/groups/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthKerberosGroupsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthKerberosGroupsNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthKerberosGroupsNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthKerberosGroupsNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthKerberosGroupsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/kerberos/groups/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthKerberosGroupsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthKubernetesRoleName(string name)
        {
            DeleteAuthKubernetesRoleNameWithHttpInfo(name);
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthKubernetesRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthKubernetesRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/kubernetes/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthKubernetesRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthKubernetesRoleNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthKubernetesRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthKubernetesRoleNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthKubernetesRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/kubernetes/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthKubernetesRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <returns></returns>
        public void DeleteAuthLdapGroupsName(string name)
        {
            DeleteAuthLdapGroupsNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthLdapGroupsNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthLdapGroupsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/ldap/groups/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthLdapGroupsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthLdapGroupsNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthLdapGroupsNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthLdapGroupsNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthLdapGroupsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/ldap/groups/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthLdapGroupsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <returns></returns>
        public void DeleteAuthLdapUsersName(string name)
        {
            DeleteAuthLdapUsersNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthLdapUsersNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthLdapUsersName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/ldap/users/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthLdapUsersName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthLdapUsersNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthLdapUsersNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthLdapUsersNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthLdapUsersName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/ldap/users/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthLdapUsersName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAuthOciConfig()
        {
            DeleteAuthOciConfigWithHttpInfo();
        }

        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthOciConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/oci/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthOciConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthOciConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthOciConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthOciConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/oci/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthOciConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthOciRoleRole(string role)
        {
            DeleteAuthOciRoleRoleWithHttpInfo(role);
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthOciRoleRoleWithHttpInfo(string role)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->DeleteAuthOciRoleRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/oci/role/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthOciRoleRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthOciRoleRoleAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthOciRoleRoleWithHttpInfoAsync(role, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthOciRoleRoleWithHttpInfoAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->DeleteAuthOciRoleRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/oci/role/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthOciRoleRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        public void DeleteAuthOidcRoleName(string name)
        {
            DeleteAuthOidcRoleNameWithHttpInfo(name);
        }

        /// <summary>
        /// Delete an existing role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthOidcRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthOidcRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/oidc/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthOidcRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthOidcRoleNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthOidcRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an existing role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthOidcRoleNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthOidcRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/oidc/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthOidcRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <returns></returns>
        public void DeleteAuthOktaGroupsName(string name)
        {
            DeleteAuthOktaGroupsNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthOktaGroupsNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthOktaGroupsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/okta/groups/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthOktaGroupsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthOktaGroupsNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthOktaGroupsNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthOktaGroupsNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthOktaGroupsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/okta/groups/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthOktaGroupsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <returns></returns>
        public void DeleteAuthOktaUsersName(string name)
        {
            DeleteAuthOktaUsersNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthOktaUsersNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthOktaUsersName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/okta/users/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthOktaUsersName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthOktaUsersNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthOktaUsersNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthOktaUsersNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthOktaUsersName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/okta/users/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthOktaUsersName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <returns></returns>
        public void DeleteAuthRadiusUsersName(string name)
        {
            DeleteAuthRadiusUsersNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthRadiusUsersNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthRadiusUsersName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/radius/users/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthRadiusUsersName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthRadiusUsersNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthRadiusUsersNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthRadiusUsersNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->DeleteAuthRadiusUsersName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/radius/users/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthRadiusUsersName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <returns></returns>
        public void DeleteAuthTokenRolesRoleName(string roleName)
        {
            DeleteAuthTokenRolesRoleNameWithHttpInfo(roleName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthTokenRolesRoleNameWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthTokenRolesRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/token/roles/{role_name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthTokenRolesRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthTokenRolesRoleNameAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthTokenRolesRoleNameWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthTokenRolesRoleNameWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->DeleteAuthTokenRolesRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/token/roles/{role_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthTokenRolesRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <returns></returns>
        public void DeleteAuthUserpassUsersUsername(string username)
        {
            DeleteAuthUserpassUsersUsernameWithHttpInfo(username);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteAuthUserpassUsersUsernameWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'username' when calling AuthApi->DeleteAuthUserpassUsersUsername");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", VaultClient.Client.ClientUtils.ParameterToString(username)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/auth/userpass/users/{username}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthUserpassUsersUsername", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthUserpassUsersUsernameAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAuthUserpassUsersUsernameWithHttpInfoAsync(username, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> DeleteAuthUserpassUsersUsernameWithHttpInfoAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'username' when calling AuthApi->DeleteAuthUserpassUsersUsername");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", VaultClient.Client.ClientUtils.ParameterToString(username)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/auth/userpass/users/{username}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthUserpassUsersUsername", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all the roles that are registered with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthAlicloudRole(string list)
        {
            GetAuthAlicloudRoleWithHttpInfo(list);
        }

        /// <summary>
        /// Lists all the roles that are registered with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAlicloudRoleWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAlicloudRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/alicloud/role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAlicloudRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all the roles that are registered with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAlicloudRoleAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAlicloudRoleWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Lists all the roles that are registered with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAlicloudRoleWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAlicloudRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/alicloud/role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAlicloudRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <returns></returns>
        public void GetAuthAlicloudRoleRole(string role)
        {
            GetAuthAlicloudRoleRoleWithHttpInfo(role);
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAlicloudRoleRoleWithHttpInfo(string role)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->GetAuthAlicloudRoleRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/alicloud/role/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAlicloudRoleRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAlicloudRoleRoleAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAlicloudRoleRoleWithHttpInfoAsync(role, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAlicloudRoleRoleWithHttpInfoAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->GetAuthAlicloudRoleRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/alicloud/role/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAlicloudRoleRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all the roles that are registered with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthAlicloudRoles(string list)
        {
            GetAuthAlicloudRolesWithHttpInfo(list);
        }

        /// <summary>
        /// Lists all the roles that are registered with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAlicloudRolesWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAlicloudRoles");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/alicloud/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAlicloudRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all the roles that are registered with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAlicloudRolesAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAlicloudRolesWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Lists all the roles that are registered with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAlicloudRolesWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAlicloudRoles");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/alicloud/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAlicloudRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read mappings for app-id 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns></returns>
        public void GetAuthAppIdMapAppId(string list = default(string))
        {
            GetAuthAppIdMapAppIdWithHttpInfo(list);
        }

        /// <summary>
        /// Read mappings for app-id 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAppIdMapAppIdWithHttpInfo(string list = default(string))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (list != null)
            {
                localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/app-id/map/app-id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAppIdMapAppId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read mappings for app-id 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAppIdMapAppIdAsync(string list = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAppIdMapAppIdWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read mappings for app-id 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAppIdMapAppIdWithHttpInfoAsync(string list = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (list != null)
            {
                localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/app-id/map/app-id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAppIdMapAppId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single app-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <returns></returns>
        public void GetAuthAppIdMapAppIdKey(string key)
        {
            GetAuthAppIdMapAppIdKeyWithHttpInfo(key);
        }

        /// <summary>
        /// Read/write/delete a single app-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAppIdMapAppIdKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->GetAuthAppIdMapAppIdKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/app-id/map/app-id/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAppIdMapAppIdKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single app-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAppIdMapAppIdKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAppIdMapAppIdKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read/write/delete a single app-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAppIdMapAppIdKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->GetAuthAppIdMapAppIdKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/app-id/map/app-id/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAppIdMapAppIdKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read mappings for user-id 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns></returns>
        public void GetAuthAppIdMapUserId(string list = default(string))
        {
            GetAuthAppIdMapUserIdWithHttpInfo(list);
        }

        /// <summary>
        /// Read mappings for user-id 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAppIdMapUserIdWithHttpInfo(string list = default(string))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (list != null)
            {
                localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/app-id/map/user-id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAppIdMapUserId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read mappings for user-id 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAppIdMapUserIdAsync(string list = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAppIdMapUserIdWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read mappings for user-id 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAppIdMapUserIdWithHttpInfoAsync(string list = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (list != null)
            {
                localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/app-id/map/user-id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAppIdMapUserId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single user-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <returns></returns>
        public void GetAuthAppIdMapUserIdKey(string key)
        {
            GetAuthAppIdMapUserIdKeyWithHttpInfo(key);
        }

        /// <summary>
        /// Read/write/delete a single user-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAppIdMapUserIdKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->GetAuthAppIdMapUserIdKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/app-id/map/user-id/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAppIdMapUserIdKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single user-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAppIdMapUserIdKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAppIdMapUserIdKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read/write/delete a single user-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAppIdMapUserIdKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->GetAuthAppIdMapUserIdKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/app-id/map/user-id/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAppIdMapUserIdKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all the roles registered with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthApproleRole(string list)
        {
            GetAuthApproleRoleWithHttpInfo(list);
        }

        /// <summary>
        /// Lists all the roles registered with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthApproleRoleWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthApproleRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/approle/role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all the roles registered with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthApproleRoleAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthApproleRoleWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Lists all the roles registered with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthApproleRoleWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthApproleRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/approle/role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void GetAuthApproleRoleRoleName(string roleName)
        {
            GetAuthApproleRoleRoleNameWithHttpInfo(roleName);
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthApproleRoleRoleNameWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/approle/role/{role_name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthApproleRoleRoleNameAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthApproleRoleRoleNameWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthApproleRoleRoleNameWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/approle/role/{role_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Impose secret_id to be presented during login using this role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void GetAuthApproleRoleRoleNameBindSecretId(string roleName)
        {
            GetAuthApproleRoleRoleNameBindSecretIdWithHttpInfo(roleName);
        }

        /// <summary>
        /// Impose secret_id to be presented during login using this role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthApproleRoleRoleNameBindSecretIdWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameBindSecretId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/approle/role/{role_name}/bind-secret-id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameBindSecretId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Impose secret_id to be presented during login using this role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthApproleRoleRoleNameBindSecretIdAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthApproleRoleRoleNameBindSecretIdWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Impose secret_id to be presented during login using this role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthApproleRoleRoleNameBindSecretIdWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameBindSecretId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/approle/role/{role_name}/bind-secret-id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameBindSecretId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void GetAuthApproleRoleRoleNameBoundCidrList(string roleName)
        {
            GetAuthApproleRoleRoleNameBoundCidrListWithHttpInfo(roleName);
        }

        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthApproleRoleRoleNameBoundCidrListWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameBoundCidrList");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/approle/role/{role_name}/bound-cidr-list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameBoundCidrList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthApproleRoleRoleNameBoundCidrListAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthApproleRoleRoleNameBoundCidrListWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthApproleRoleRoleNameBoundCidrListWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameBoundCidrList");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/approle/role/{role_name}/bound-cidr-list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameBoundCidrList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enables cluster local secret IDs 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void GetAuthApproleRoleRoleNameLocalSecretIds(string roleName)
        {
            GetAuthApproleRoleRoleNameLocalSecretIdsWithHttpInfo(roleName);
        }

        /// <summary>
        /// Enables cluster local secret IDs 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthApproleRoleRoleNameLocalSecretIdsWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameLocalSecretIds");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/approle/role/{role_name}/local-secret-ids", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameLocalSecretIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enables cluster local secret IDs 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthApproleRoleRoleNameLocalSecretIdsAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthApproleRoleRoleNameLocalSecretIdsWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Enables cluster local secret IDs 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthApproleRoleRoleNameLocalSecretIdsWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameLocalSecretIds");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/approle/role/{role_name}/local-secret-ids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameLocalSecretIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the value of &#39;period&#39; on the role 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void GetAuthApproleRoleRoleNamePeriod(string roleName)
        {
            GetAuthApproleRoleRoleNamePeriodWithHttpInfo(roleName);
        }

        /// <summary>
        /// Updates the value of &#39;period&#39; on the role 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthApproleRoleRoleNamePeriodWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNamePeriod");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/approle/role/{role_name}/period", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNamePeriod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the value of &#39;period&#39; on the role 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthApproleRoleRoleNamePeriodAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthApproleRoleRoleNamePeriodWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates the value of &#39;period&#39; on the role 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthApproleRoleRoleNamePeriodWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNamePeriod");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/approle/role/{role_name}/period", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNamePeriod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Policies of the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void GetAuthApproleRoleRoleNamePolicies(string roleName)
        {
            GetAuthApproleRoleRoleNamePoliciesWithHttpInfo(roleName);
        }

        /// <summary>
        /// Policies of the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthApproleRoleRoleNamePoliciesWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNamePolicies");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/approle/role/{role_name}/policies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNamePolicies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Policies of the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthApproleRoleRoleNamePoliciesAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthApproleRoleRoleNamePoliciesWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Policies of the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthApproleRoleRoleNamePoliciesWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNamePolicies");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/approle/role/{role_name}/policies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNamePolicies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the &#39;role_id&#39; of the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void GetAuthApproleRoleRoleNameRoleId(string roleName)
        {
            GetAuthApproleRoleRoleNameRoleIdWithHttpInfo(roleName);
        }

        /// <summary>
        /// Returns the &#39;role_id&#39; of the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthApproleRoleRoleNameRoleIdWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameRoleId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/approle/role/{role_name}/role-id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameRoleId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the &#39;role_id&#39; of the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthApproleRoleRoleNameRoleIdAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthApproleRoleRoleNameRoleIdWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Returns the &#39;role_id&#39; of the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthApproleRoleRoleNameRoleIdWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameRoleId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/approle/role/{role_name}/role-id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameRoleId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a SecretID against this role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthApproleRoleRoleNameSecretId(string roleName, string list)
        {
            GetAuthApproleRoleRoleNameSecretIdWithHttpInfo(roleName, list);
        }

        /// <summary>
        /// Generate a SecretID against this role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthApproleRoleRoleNameSecretIdWithHttpInfo(string roleName, string list)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameSecretId");

            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthApproleRoleRoleNameSecretId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/approle/role/{role_name}/secret-id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameSecretId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a SecretID against this role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthApproleRoleRoleNameSecretIdAsync(string roleName, string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthApproleRoleRoleNameSecretIdWithHttpInfoAsync(roleName, list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate a SecretID against this role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthApproleRoleRoleNameSecretIdWithHttpInfoAsync(string roleName, string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameSecretId");

            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthApproleRoleRoleNameSecretId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/approle/role/{role_name}/secret-id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameSecretId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void GetAuthApproleRoleRoleNameSecretIdBoundCidrs(string roleName)
        {
            GetAuthApproleRoleRoleNameSecretIdBoundCidrsWithHttpInfo(roleName);
        }

        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthApproleRoleRoleNameSecretIdBoundCidrsWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameSecretIdBoundCidrs");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/approle/role/{role_name}/secret-id-bound-cidrs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameSecretIdBoundCidrs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthApproleRoleRoleNameSecretIdBoundCidrsAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthApproleRoleRoleNameSecretIdBoundCidrsWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthApproleRoleRoleNameSecretIdBoundCidrsWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameSecretIdBoundCidrs");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/approle/role/{role_name}/secret-id-bound-cidrs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameSecretIdBoundCidrs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Use limit of the SecretID generated against the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void GetAuthApproleRoleRoleNameSecretIdNumUses(string roleName)
        {
            GetAuthApproleRoleRoleNameSecretIdNumUsesWithHttpInfo(roleName);
        }

        /// <summary>
        /// Use limit of the SecretID generated against the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthApproleRoleRoleNameSecretIdNumUsesWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameSecretIdNumUses");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/approle/role/{role_name}/secret-id-num-uses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameSecretIdNumUses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Use limit of the SecretID generated against the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthApproleRoleRoleNameSecretIdNumUsesAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthApproleRoleRoleNameSecretIdNumUsesWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Use limit of the SecretID generated against the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthApproleRoleRoleNameSecretIdNumUsesWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameSecretIdNumUses");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/approle/role/{role_name}/secret-id-num-uses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameSecretIdNumUses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void GetAuthApproleRoleRoleNameSecretIdTtl(string roleName)
        {
            GetAuthApproleRoleRoleNameSecretIdTtlWithHttpInfo(roleName);
        }

        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthApproleRoleRoleNameSecretIdTtlWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameSecretIdTtl");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/approle/role/{role_name}/secret-id-ttl", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameSecretIdTtl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthApproleRoleRoleNameSecretIdTtlAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthApproleRoleRoleNameSecretIdTtlWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthApproleRoleRoleNameSecretIdTtlWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameSecretIdTtl");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/approle/role/{role_name}/secret-id-ttl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameSecretIdTtl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void GetAuthApproleRoleRoleNameTokenBoundCidrs(string roleName)
        {
            GetAuthApproleRoleRoleNameTokenBoundCidrsWithHttpInfo(roleName);
        }

        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthApproleRoleRoleNameTokenBoundCidrsWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameTokenBoundCidrs");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/approle/role/{role_name}/token-bound-cidrs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameTokenBoundCidrs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthApproleRoleRoleNameTokenBoundCidrsAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthApproleRoleRoleNameTokenBoundCidrsWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthApproleRoleRoleNameTokenBoundCidrsWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameTokenBoundCidrs");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/approle/role/{role_name}/token-bound-cidrs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameTokenBoundCidrs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void GetAuthApproleRoleRoleNameTokenMaxTtl(string roleName)
        {
            GetAuthApproleRoleRoleNameTokenMaxTtlWithHttpInfo(roleName);
        }

        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthApproleRoleRoleNameTokenMaxTtlWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameTokenMaxTtl");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/approle/role/{role_name}/token-max-ttl", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameTokenMaxTtl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthApproleRoleRoleNameTokenMaxTtlAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthApproleRoleRoleNameTokenMaxTtlWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthApproleRoleRoleNameTokenMaxTtlWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameTokenMaxTtl");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/approle/role/{role_name}/token-max-ttl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameTokenMaxTtl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Number of times issued tokens can be used 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void GetAuthApproleRoleRoleNameTokenNumUses(string roleName)
        {
            GetAuthApproleRoleRoleNameTokenNumUsesWithHttpInfo(roleName);
        }

        /// <summary>
        /// Number of times issued tokens can be used 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthApproleRoleRoleNameTokenNumUsesWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameTokenNumUses");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/approle/role/{role_name}/token-num-uses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameTokenNumUses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Number of times issued tokens can be used 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthApproleRoleRoleNameTokenNumUsesAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthApproleRoleRoleNameTokenNumUsesWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Number of times issued tokens can be used 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthApproleRoleRoleNameTokenNumUsesWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameTokenNumUses");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/approle/role/{role_name}/token-num-uses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameTokenNumUses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns></returns>
        public void GetAuthApproleRoleRoleNameTokenTtl(string roleName)
        {
            GetAuthApproleRoleRoleNameTokenTtlWithHttpInfo(roleName);
        }

        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthApproleRoleRoleNameTokenTtlWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameTokenTtl");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/approle/role/{role_name}/token-ttl", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameTokenTtl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthApproleRoleRoleNameTokenTtlAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthApproleRoleRoleNameTokenTtlWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthApproleRoleRoleNameTokenTtlWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthApproleRoleRoleNameTokenTtl");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/approle/role/{role_name}/token-ttl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthApproleRoleRoleNameTokenTtl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <returns></returns>
        public void GetAuthAwsConfigCertificateCertName(string certName)
        {
            GetAuthAwsConfigCertificateCertNameWithHttpInfo(certName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAwsConfigCertificateCertNameWithHttpInfo(string certName)
        {
            // verify the required parameter 'certName' is set
            if (certName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'certName' when calling AuthApi->GetAuthAwsConfigCertificateCertName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("cert_name", VaultClient.Client.ClientUtils.ParameterToString(certName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/aws/config/certificate/{cert_name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsConfigCertificateCertName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAwsConfigCertificateCertNameAsync(string certName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAwsConfigCertificateCertNameWithHttpInfoAsync(certName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAwsConfigCertificateCertNameWithHttpInfoAsync(string certName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'certName' is set
            if (certName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'certName' when calling AuthApi->GetAuthAwsConfigCertificateCertName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("cert_name", VaultClient.Client.ClientUtils.ParameterToString(certName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/aws/config/certificate/{cert_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsConfigCertificateCertName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthAwsConfigCertificates(string list)
        {
            GetAuthAwsConfigCertificatesWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAwsConfigCertificatesWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAwsConfigCertificates");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/aws/config/certificates", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsConfigCertificates", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAwsConfigCertificatesAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAwsConfigCertificatesWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAwsConfigCertificatesWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAwsConfigCertificates");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/aws/config/certificates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsConfigCertificates", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthAwsConfigClient()
        {
            GetAuthAwsConfigClientWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAwsConfigClientWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/aws/config/client", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsConfigClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAwsConfigClientAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAwsConfigClientWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAwsConfigClientWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/aws/config/client", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsConfigClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthAwsConfigIdentity()
        {
            GetAuthAwsConfigIdentityWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAwsConfigIdentityWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/aws/config/identity", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsConfigIdentity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAwsConfigIdentityAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAwsConfigIdentityWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAwsConfigIdentityWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/aws/config/identity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsConfigIdentity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthAwsConfigSts(string list)
        {
            GetAuthAwsConfigStsWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAwsConfigStsWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAwsConfigSts");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/aws/config/sts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsConfigSts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAwsConfigStsAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAwsConfigStsWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAwsConfigStsWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAwsConfigSts");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/aws/config/sts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsConfigSts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <returns></returns>
        public void GetAuthAwsConfigStsAccountId(string accountId)
        {
            GetAuthAwsConfigStsAccountIdWithHttpInfo(accountId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAwsConfigStsAccountIdWithHttpInfo(string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'accountId' when calling AuthApi->GetAuthAwsConfigStsAccountId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("account_id", VaultClient.Client.ClientUtils.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/aws/config/sts/{account_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsConfigStsAccountId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAwsConfigStsAccountIdAsync(string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAwsConfigStsAccountIdWithHttpInfoAsync(accountId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAwsConfigStsAccountIdWithHttpInfoAsync(string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'accountId' when calling AuthApi->GetAuthAwsConfigStsAccountId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("account_id", VaultClient.Client.ClientUtils.ParameterToString(accountId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/aws/config/sts/{account_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsConfigStsAccountId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthAwsConfigTidyIdentityAccesslist()
        {
            GetAuthAwsConfigTidyIdentityAccesslistWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAwsConfigTidyIdentityAccesslistWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/aws/config/tidy/identity-accesslist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsConfigTidyIdentityAccesslist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAwsConfigTidyIdentityAccesslistAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAwsConfigTidyIdentityAccesslistWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAwsConfigTidyIdentityAccesslistWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/aws/config/tidy/identity-accesslist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsConfigTidyIdentityAccesslist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthAwsConfigTidyIdentityWhitelist()
        {
            GetAuthAwsConfigTidyIdentityWhitelistWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAwsConfigTidyIdentityWhitelistWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/aws/config/tidy/identity-whitelist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsConfigTidyIdentityWhitelist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAwsConfigTidyIdentityWhitelistAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAwsConfigTidyIdentityWhitelistWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAwsConfigTidyIdentityWhitelistWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/aws/config/tidy/identity-whitelist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsConfigTidyIdentityWhitelist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthAwsConfigTidyRoletagBlacklist()
        {
            GetAuthAwsConfigTidyRoletagBlacklistWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAwsConfigTidyRoletagBlacklistWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/aws/config/tidy/roletag-blacklist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsConfigTidyRoletagBlacklist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAwsConfigTidyRoletagBlacklistAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAwsConfigTidyRoletagBlacklistWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAwsConfigTidyRoletagBlacklistWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/aws/config/tidy/roletag-blacklist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsConfigTidyRoletagBlacklist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthAwsConfigTidyRoletagDenylist()
        {
            GetAuthAwsConfigTidyRoletagDenylistWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAwsConfigTidyRoletagDenylistWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/aws/config/tidy/roletag-denylist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsConfigTidyRoletagDenylist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAwsConfigTidyRoletagDenylistAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAwsConfigTidyRoletagDenylistWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAwsConfigTidyRoletagDenylistWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/aws/config/tidy/roletag-denylist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsConfigTidyRoletagDenylist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthAwsIdentityAccesslist(string list)
        {
            GetAuthAwsIdentityAccesslistWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAwsIdentityAccesslistWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAwsIdentityAccesslist");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/aws/identity-accesslist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsIdentityAccesslist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAwsIdentityAccesslistAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAwsIdentityAccesslistWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAwsIdentityAccesslistWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAwsIdentityAccesslist");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/aws/identity-accesslist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsIdentityAccesslist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <returns></returns>
        public void GetAuthAwsIdentityAccesslistInstanceId(string instanceId)
        {
            GetAuthAwsIdentityAccesslistInstanceIdWithHttpInfo(instanceId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAwsIdentityAccesslistInstanceIdWithHttpInfo(string instanceId)
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'instanceId' when calling AuthApi->GetAuthAwsIdentityAccesslistInstanceId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("instance_id", VaultClient.Client.ClientUtils.ParameterToString(instanceId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/aws/identity-accesslist/{instance_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsIdentityAccesslistInstanceId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAwsIdentityAccesslistInstanceIdAsync(string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAwsIdentityAccesslistInstanceIdWithHttpInfoAsync(instanceId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAwsIdentityAccesslistInstanceIdWithHttpInfoAsync(string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'instanceId' when calling AuthApi->GetAuthAwsIdentityAccesslistInstanceId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("instance_id", VaultClient.Client.ClientUtils.ParameterToString(instanceId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/aws/identity-accesslist/{instance_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsIdentityAccesslistInstanceId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthAwsIdentityWhitelist(string list)
        {
            GetAuthAwsIdentityWhitelistWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAwsIdentityWhitelistWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAwsIdentityWhitelist");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/aws/identity-whitelist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsIdentityWhitelist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAwsIdentityWhitelistAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAwsIdentityWhitelistWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAwsIdentityWhitelistWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAwsIdentityWhitelist");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/aws/identity-whitelist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsIdentityWhitelist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <returns></returns>
        public void GetAuthAwsIdentityWhitelistInstanceId(string instanceId)
        {
            GetAuthAwsIdentityWhitelistInstanceIdWithHttpInfo(instanceId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAwsIdentityWhitelistInstanceIdWithHttpInfo(string instanceId)
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'instanceId' when calling AuthApi->GetAuthAwsIdentityWhitelistInstanceId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("instance_id", VaultClient.Client.ClientUtils.ParameterToString(instanceId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/aws/identity-whitelist/{instance_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsIdentityWhitelistInstanceId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAwsIdentityWhitelistInstanceIdAsync(string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAwsIdentityWhitelistInstanceIdWithHttpInfoAsync(instanceId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId">EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAwsIdentityWhitelistInstanceIdWithHttpInfoAsync(string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'instanceId' when calling AuthApi->GetAuthAwsIdentityWhitelistInstanceId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("instance_id", VaultClient.Client.ClientUtils.ParameterToString(instanceId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/aws/identity-whitelist/{instance_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsIdentityWhitelistInstanceId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthAwsRole(string list)
        {
            GetAuthAwsRoleWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAwsRoleWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAwsRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/aws/role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAwsRoleAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAwsRoleWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAwsRoleWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAwsRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/aws/role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <returns></returns>
        public void GetAuthAwsRoleRole(string role)
        {
            GetAuthAwsRoleRoleWithHttpInfo(role);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAwsRoleRoleWithHttpInfo(string role)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->GetAuthAwsRoleRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/aws/role/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsRoleRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAwsRoleRoleAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAwsRoleRoleWithHttpInfoAsync(role, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAwsRoleRoleWithHttpInfoAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->GetAuthAwsRoleRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/aws/role/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsRoleRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthAwsRoles(string list)
        {
            GetAuthAwsRolesWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAwsRolesWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAwsRoles");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/aws/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAwsRolesAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAwsRolesWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAwsRolesWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAwsRoles");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/aws/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthAwsRoletagBlacklist(string list)
        {
            GetAuthAwsRoletagBlacklistWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAwsRoletagBlacklistWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAwsRoletagBlacklist");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/aws/roletag-blacklist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsRoletagBlacklist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAwsRoletagBlacklistAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAwsRoletagBlacklistWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAwsRoletagBlacklistWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAwsRoletagBlacklist");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/aws/roletag-blacklist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsRoletagBlacklist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns></returns>
        public void GetAuthAwsRoletagBlacklistRoleTag(string roleTag)
        {
            GetAuthAwsRoletagBlacklistRoleTagWithHttpInfo(roleTag);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAwsRoletagBlacklistRoleTagWithHttpInfo(string roleTag)
        {
            // verify the required parameter 'roleTag' is set
            if (roleTag == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleTag' when calling AuthApi->GetAuthAwsRoletagBlacklistRoleTag");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_tag", VaultClient.Client.ClientUtils.ParameterToString(roleTag)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/aws/roletag-blacklist/{role_tag}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsRoletagBlacklistRoleTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAwsRoletagBlacklistRoleTagAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAwsRoletagBlacklistRoleTagWithHttpInfoAsync(roleTag, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAwsRoletagBlacklistRoleTagWithHttpInfoAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleTag' is set
            if (roleTag == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleTag' when calling AuthApi->GetAuthAwsRoletagBlacklistRoleTag");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_tag", VaultClient.Client.ClientUtils.ParameterToString(roleTag)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/aws/roletag-blacklist/{role_tag}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsRoletagBlacklistRoleTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthAwsRoletagDenylist(string list)
        {
            GetAuthAwsRoletagDenylistWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAwsRoletagDenylistWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAwsRoletagDenylist");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/aws/roletag-denylist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsRoletagDenylist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAwsRoletagDenylistAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAwsRoletagDenylistWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAwsRoletagDenylistWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAwsRoletagDenylist");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/aws/roletag-denylist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsRoletagDenylist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns></returns>
        public void GetAuthAwsRoletagDenylistRoleTag(string roleTag)
        {
            GetAuthAwsRoletagDenylistRoleTagWithHttpInfo(roleTag);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAwsRoletagDenylistRoleTagWithHttpInfo(string roleTag)
        {
            // verify the required parameter 'roleTag' is set
            if (roleTag == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleTag' when calling AuthApi->GetAuthAwsRoletagDenylistRoleTag");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_tag", VaultClient.Client.ClientUtils.ParameterToString(roleTag)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/aws/roletag-denylist/{role_tag}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsRoletagDenylistRoleTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAwsRoletagDenylistRoleTagAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAwsRoletagDenylistRoleTagWithHttpInfoAsync(roleTag, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAwsRoletagDenylistRoleTagWithHttpInfoAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleTag' is set
            if (roleTag == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleTag' when calling AuthApi->GetAuthAwsRoletagDenylistRoleTag");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_tag", VaultClient.Client.ClientUtils.ParameterToString(roleTag)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/aws/roletag-denylist/{role_tag}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAwsRoletagDenylistRoleTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthAzureConfig()
        {
            GetAuthAzureConfigWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAzureConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/azure/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAzureConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAzureConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAzureConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAzureConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/azure/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAzureConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthAzureRole(string list)
        {
            GetAuthAzureRoleWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAzureRoleWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAzureRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/azure/role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAzureRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAzureRoleAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAzureRoleWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAzureRoleWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthAzureRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/azure/role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAzureRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        public void GetAuthAzureRoleName(string name)
        {
            GetAuthAzureRoleNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthAzureRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthAzureRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/azure/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAzureRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthAzureRoleNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthAzureRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthAzureRoleNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthAzureRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/azure/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthAzureRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform for authenticating users. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthCentrifyConfig()
        {
            GetAuthCentrifyConfigWithHttpInfo();
        }

        /// <summary>
        /// This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform for authenticating users. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthCentrifyConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/centrify/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthCentrifyConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform for authenticating users. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthCentrifyConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthCentrifyConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform for authenticating users. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthCentrifyConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/centrify/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthCentrifyConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage trusted certificates used for authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthCertCerts(string list)
        {
            GetAuthCertCertsWithHttpInfo(list);
        }

        /// <summary>
        /// Manage trusted certificates used for authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthCertCertsWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthCertCerts");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/cert/certs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthCertCerts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage trusted certificates used for authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthCertCertsAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthCertCertsWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage trusted certificates used for authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthCertCertsWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthCertCerts");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/cert/certs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthCertCerts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage trusted certificates used for authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <returns></returns>
        public void GetAuthCertCertsName(string name)
        {
            GetAuthCertCertsNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage trusted certificates used for authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthCertCertsNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthCertCertsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/cert/certs/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthCertCertsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage trusted certificates used for authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthCertCertsNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthCertCertsNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage trusted certificates used for authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthCertCertsNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthCertCertsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/cert/certs/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthCertCertsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <returns></returns>
        public void GetAuthCertCrlsName(string name)
        {
            GetAuthCertCrlsNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthCertCrlsNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthCertCrlsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/cert/crls/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthCertCrlsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthCertCrlsNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthCertCrlsNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthCertCrlsNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthCertCrlsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/cert/crls/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthCertCrlsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthCfConfig()
        {
            GetAuthCfConfigWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthCfConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/cf/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthCfConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthCfConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthCfConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthCfConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/cf/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthCfConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthCfRoles(string list)
        {
            GetAuthCfRolesWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthCfRolesWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthCfRoles");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/cf/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthCfRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthCfRolesAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthCfRolesWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthCfRolesWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthCfRoles");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/cf/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthCfRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <returns></returns>
        public void GetAuthCfRolesRole(string role)
        {
            GetAuthCfRolesRoleWithHttpInfo(role);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthCfRolesRoleWithHttpInfo(string role)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->GetAuthCfRolesRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/cf/roles/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthCfRolesRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthCfRolesRoleAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthCfRolesRoleWithHttpInfoAsync(role, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthCfRolesRoleWithHttpInfoAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->GetAuthCfRolesRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/cf/roles/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthCfRolesRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure credentials used to query the GCP IAM API to verify authenticating service accounts 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthGcpConfig()
        {
            GetAuthGcpConfigWithHttpInfo();
        }

        /// <summary>
        /// Configure credentials used to query the GCP IAM API to verify authenticating service accounts 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthGcpConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/gcp/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthGcpConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure credentials used to query the GCP IAM API to verify authenticating service accounts 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthGcpConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthGcpConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure credentials used to query the GCP IAM API to verify authenticating service accounts 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthGcpConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/gcp/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthGcpConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all the roles that are registered with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthGcpRole(string list)
        {
            GetAuthGcpRoleWithHttpInfo(list);
        }

        /// <summary>
        /// Lists all the roles that are registered with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthGcpRoleWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthGcpRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/gcp/role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthGcpRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all the roles that are registered with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthGcpRoleAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthGcpRoleWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Lists all the roles that are registered with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthGcpRoleWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthGcpRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/gcp/role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthGcpRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a GCP role with associated policies and required attributes. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        public void GetAuthGcpRoleName(string name)
        {
            GetAuthGcpRoleNameWithHttpInfo(name);
        }

        /// <summary>
        /// Create a GCP role with associated policies and required attributes. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthGcpRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthGcpRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/gcp/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthGcpRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a GCP role with associated policies and required attributes. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthGcpRoleNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthGcpRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a GCP role with associated policies and required attributes. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthGcpRoleNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthGcpRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/gcp/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthGcpRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all the roles that are registered with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthGcpRoles(string list)
        {
            GetAuthGcpRolesWithHttpInfo(list);
        }

        /// <summary>
        /// Lists all the roles that are registered with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthGcpRolesWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthGcpRoles");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/gcp/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthGcpRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all the roles that are registered with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthGcpRolesAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthGcpRolesWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Lists all the roles that are registered with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthGcpRolesWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthGcpRoles");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/gcp/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthGcpRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthGithubConfig()
        {
            GetAuthGithubConfigWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthGithubConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/github/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthGithubConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthGithubConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthGithubConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthGithubConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/github/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthGithubConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read mappings for teams 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns></returns>
        public void GetAuthGithubMapTeams(string list = default(string))
        {
            GetAuthGithubMapTeamsWithHttpInfo(list);
        }

        /// <summary>
        /// Read mappings for teams 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthGithubMapTeamsWithHttpInfo(string list = default(string))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (list != null)
            {
                localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/github/map/teams", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthGithubMapTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read mappings for teams 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthGithubMapTeamsAsync(string list = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthGithubMapTeamsWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read mappings for teams 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthGithubMapTeamsWithHttpInfoAsync(string list = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (list != null)
            {
                localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/github/map/teams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthGithubMapTeams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single teams mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <returns></returns>
        public void GetAuthGithubMapTeamsKey(string key)
        {
            GetAuthGithubMapTeamsKeyWithHttpInfo(key);
        }

        /// <summary>
        /// Read/write/delete a single teams mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthGithubMapTeamsKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->GetAuthGithubMapTeamsKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/github/map/teams/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthGithubMapTeamsKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single teams mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthGithubMapTeamsKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthGithubMapTeamsKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read/write/delete a single teams mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthGithubMapTeamsKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->GetAuthGithubMapTeamsKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/github/map/teams/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthGithubMapTeamsKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read mappings for users 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns></returns>
        public void GetAuthGithubMapUsers(string list = default(string))
        {
            GetAuthGithubMapUsersWithHttpInfo(list);
        }

        /// <summary>
        /// Read mappings for users 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthGithubMapUsersWithHttpInfo(string list = default(string))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (list != null)
            {
                localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/github/map/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthGithubMapUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read mappings for users 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthGithubMapUsersAsync(string list = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthGithubMapUsersWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read mappings for users 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Return a list if &#x60;true&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthGithubMapUsersWithHttpInfoAsync(string list = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (list != null)
            {
                localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/github/map/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthGithubMapUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single users mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <returns></returns>
        public void GetAuthGithubMapUsersKey(string key)
        {
            GetAuthGithubMapUsersKeyWithHttpInfo(key);
        }

        /// <summary>
        /// Read/write/delete a single users mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthGithubMapUsersKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->GetAuthGithubMapUsersKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/github/map/users/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthGithubMapUsersKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single users mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthGithubMapUsersKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthGithubMapUsersKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read/write/delete a single users mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthGithubMapUsersKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->GetAuthGithubMapUsersKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/github/map/users/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthGithubMapUsersKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the current JWT authentication backend configuration. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthJwtConfig()
        {
            GetAuthJwtConfigWithHttpInfo();
        }

        /// <summary>
        /// Read the current JWT authentication backend configuration. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthJwtConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/jwt/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthJwtConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the current JWT authentication backend configuration. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthJwtConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthJwtConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read the current JWT authentication backend configuration. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthJwtConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/jwt/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthJwtConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Callback endpoint to complete an OIDC login. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthJwtOidcCallback()
        {
            GetAuthJwtOidcCallbackWithHttpInfo();
        }

        /// <summary>
        /// Callback endpoint to complete an OIDC login. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthJwtOidcCallbackWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/jwt/oidc/callback", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthJwtOidcCallback", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Callback endpoint to complete an OIDC login. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthJwtOidcCallbackAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthJwtOidcCallbackWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Callback endpoint to complete an OIDC login. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthJwtOidcCallbackWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/jwt/oidc/callback", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthJwtOidcCallback", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all the roles registered with the backend. The list will contain the names of the roles.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthJwtRole(string list)
        {
            GetAuthJwtRoleWithHttpInfo(list);
        }

        /// <summary>
        /// Lists all the roles registered with the backend. The list will contain the names of the roles.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthJwtRoleWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthJwtRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/jwt/role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthJwtRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all the roles registered with the backend. The list will contain the names of the roles.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthJwtRoleAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthJwtRoleWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Lists all the roles registered with the backend. The list will contain the names of the roles.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthJwtRoleWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthJwtRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/jwt/role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthJwtRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read an existing role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        public void GetAuthJwtRoleName(string name)
        {
            GetAuthJwtRoleNameWithHttpInfo(name);
        }

        /// <summary>
        /// Read an existing role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthJwtRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthJwtRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/jwt/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthJwtRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read an existing role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthJwtRoleNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthJwtRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read an existing role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthJwtRoleNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthJwtRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/jwt/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthJwtRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthKerberosConfig()
        {
            GetAuthKerberosConfigWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthKerberosConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/kerberos/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthKerberosConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthKerberosConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthKerberosConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthKerberosConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/kerberos/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthKerberosConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthKerberosConfigLdap()
        {
            GetAuthKerberosConfigLdapWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthKerberosConfigLdapWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/kerberos/config/ldap", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthKerberosConfigLdap", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthKerberosConfigLdapAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthKerberosConfigLdapWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthKerberosConfigLdapWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/kerberos/config/ldap", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthKerberosConfigLdap", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthKerberosGroups(string list)
        {
            GetAuthKerberosGroupsWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthKerberosGroupsWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthKerberosGroups");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/kerberos/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthKerberosGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthKerberosGroupsAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthKerberosGroupsWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthKerberosGroupsWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthKerberosGroups");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/kerberos/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthKerberosGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <returns></returns>
        public void GetAuthKerberosGroupsName(string name)
        {
            GetAuthKerberosGroupsNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthKerberosGroupsNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthKerberosGroupsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/kerberos/groups/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthKerberosGroupsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthKerberosGroupsNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthKerberosGroupsNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthKerberosGroupsNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthKerberosGroupsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/kerberos/groups/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthKerberosGroupsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthKerberosLogin()
        {
            GetAuthKerberosLoginWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthKerberosLoginWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/kerberos/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthKerberosLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthKerberosLoginAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthKerberosLoginWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthKerberosLoginWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/kerberos/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthKerberosLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configures the JWT Public Key and Kubernetes API information. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthKubernetesConfig()
        {
            GetAuthKubernetesConfigWithHttpInfo();
        }

        /// <summary>
        /// Configures the JWT Public Key and Kubernetes API information. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthKubernetesConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/kubernetes/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthKubernetesConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configures the JWT Public Key and Kubernetes API information. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthKubernetesConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthKubernetesConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configures the JWT Public Key and Kubernetes API information. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthKubernetesConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/kubernetes/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthKubernetesConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all the roles registered with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthKubernetesRole(string list)
        {
            GetAuthKubernetesRoleWithHttpInfo(list);
        }

        /// <summary>
        /// Lists all the roles registered with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthKubernetesRoleWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthKubernetesRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/kubernetes/role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthKubernetesRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all the roles registered with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthKubernetesRoleAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthKubernetesRoleWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Lists all the roles registered with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthKubernetesRoleWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthKubernetesRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/kubernetes/role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthKubernetesRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        public void GetAuthKubernetesRoleName(string name)
        {
            GetAuthKubernetesRoleNameWithHttpInfo(name);
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthKubernetesRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthKubernetesRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/kubernetes/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthKubernetesRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthKubernetesRoleNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthKubernetesRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthKubernetesRoleNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthKubernetesRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/kubernetes/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthKubernetesRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the LDAP server to connect to, along with its options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthLdapConfig()
        {
            GetAuthLdapConfigWithHttpInfo();
        }

        /// <summary>
        /// Configure the LDAP server to connect to, along with its options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthLdapConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/ldap/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthLdapConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the LDAP server to connect to, along with its options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthLdapConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthLdapConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the LDAP server to connect to, along with its options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthLdapConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/ldap/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthLdapConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthLdapGroups(string list)
        {
            GetAuthLdapGroupsWithHttpInfo(list);
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthLdapGroupsWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthLdapGroups");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/ldap/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthLdapGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthLdapGroupsAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthLdapGroupsWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthLdapGroupsWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthLdapGroups");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/ldap/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthLdapGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <returns></returns>
        public void GetAuthLdapGroupsName(string name)
        {
            GetAuthLdapGroupsNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthLdapGroupsNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthLdapGroupsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/ldap/groups/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthLdapGroupsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthLdapGroupsNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthLdapGroupsNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthLdapGroupsNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthLdapGroupsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/ldap/groups/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthLdapGroupsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthLdapUsers(string list)
        {
            GetAuthLdapUsersWithHttpInfo(list);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthLdapUsersWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthLdapUsers");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/ldap/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthLdapUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthLdapUsersAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthLdapUsersWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthLdapUsersWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthLdapUsers");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/ldap/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthLdapUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <returns></returns>
        public void GetAuthLdapUsersName(string name)
        {
            GetAuthLdapUsersNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthLdapUsersNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthLdapUsersName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/ldap/users/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthLdapUsersName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthLdapUsersNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthLdapUsersNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthLdapUsersNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthLdapUsersName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/ldap/users/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthLdapUsersName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthOciConfig()
        {
            GetAuthOciConfigWithHttpInfo();
        }

        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthOciConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/oci/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOciConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthOciConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthOciConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthOciConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/oci/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOciConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all the roles that are registered with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthOciRole(string list)
        {
            GetAuthOciRoleWithHttpInfo(list);
        }

        /// <summary>
        /// Lists all the roles that are registered with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthOciRoleWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthOciRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/oci/role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOciRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all the roles that are registered with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthOciRoleAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthOciRoleWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Lists all the roles that are registered with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthOciRoleWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthOciRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/oci/role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOciRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <returns></returns>
        public void GetAuthOciRoleRole(string role)
        {
            GetAuthOciRoleRoleWithHttpInfo(role);
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthOciRoleRoleWithHttpInfo(string role)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->GetAuthOciRoleRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/oci/role/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOciRoleRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthOciRoleRoleAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthOciRoleRoleWithHttpInfoAsync(role, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthOciRoleRoleWithHttpInfoAsync(string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->GetAuthOciRoleRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/oci/role/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOciRoleRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the current JWT authentication backend configuration. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthOidcConfig()
        {
            GetAuthOidcConfigWithHttpInfo();
        }

        /// <summary>
        /// Read the current JWT authentication backend configuration. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthOidcConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/oidc/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOidcConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the current JWT authentication backend configuration. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthOidcConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthOidcConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read the current JWT authentication backend configuration. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthOidcConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/oidc/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOidcConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Callback endpoint to complete an OIDC login. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthOidcOidcCallback()
        {
            GetAuthOidcOidcCallbackWithHttpInfo();
        }

        /// <summary>
        /// Callback endpoint to complete an OIDC login. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthOidcOidcCallbackWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/oidc/oidc/callback", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOidcOidcCallback", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Callback endpoint to complete an OIDC login. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthOidcOidcCallbackAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthOidcOidcCallbackWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Callback endpoint to complete an OIDC login. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthOidcOidcCallbackWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/oidc/oidc/callback", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOidcOidcCallback", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all the roles registered with the backend. The list will contain the names of the roles.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthOidcRole(string list)
        {
            GetAuthOidcRoleWithHttpInfo(list);
        }

        /// <summary>
        /// Lists all the roles registered with the backend. The list will contain the names of the roles.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthOidcRoleWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthOidcRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/oidc/role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOidcRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all the roles registered with the backend. The list will contain the names of the roles.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthOidcRoleAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthOidcRoleWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Lists all the roles registered with the backend. The list will contain the names of the roles.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthOidcRoleWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthOidcRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/oidc/role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOidcRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read an existing role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns></returns>
        public void GetAuthOidcRoleName(string name)
        {
            GetAuthOidcRoleNameWithHttpInfo(name);
        }

        /// <summary>
        /// Read an existing role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthOidcRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthOidcRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/oidc/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOidcRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read an existing role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthOidcRoleNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthOidcRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read an existing role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthOidcRoleNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthOidcRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/oidc/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOidcRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint allows you to configure the Okta and its configuration options.  The Okta organization are the characters at the front of the URL for Okta. Example https://ORG.okta.com 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthOktaConfig()
        {
            GetAuthOktaConfigWithHttpInfo();
        }

        /// <summary>
        /// This endpoint allows you to configure the Okta and its configuration options.  The Okta organization are the characters at the front of the URL for Okta. Example https://ORG.okta.com 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthOktaConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/okta/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOktaConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint allows you to configure the Okta and its configuration options.  The Okta organization are the characters at the front of the URL for Okta. Example https://ORG.okta.com 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthOktaConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthOktaConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This endpoint allows you to configure the Okta and its configuration options.  The Okta organization are the characters at the front of the URL for Okta. Example https://ORG.okta.com 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthOktaConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/okta/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOktaConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthOktaGroups(string list)
        {
            GetAuthOktaGroupsWithHttpInfo(list);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthOktaGroupsWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthOktaGroups");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/okta/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOktaGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthOktaGroupsAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthOktaGroupsWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthOktaGroupsWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthOktaGroups");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/okta/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOktaGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <returns></returns>
        public void GetAuthOktaGroupsName(string name)
        {
            GetAuthOktaGroupsNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthOktaGroupsNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthOktaGroupsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/okta/groups/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOktaGroupsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthOktaGroupsNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthOktaGroupsNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthOktaGroupsNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthOktaGroupsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/okta/groups/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOktaGroupsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthOktaUsers(string list)
        {
            GetAuthOktaUsersWithHttpInfo(list);
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthOktaUsersWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthOktaUsers");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/okta/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOktaUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthOktaUsersAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthOktaUsersWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthOktaUsersWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthOktaUsers");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/okta/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOktaUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <returns></returns>
        public void GetAuthOktaUsersName(string name)
        {
            GetAuthOktaUsersNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthOktaUsersNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthOktaUsersName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/okta/users/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOktaUsersName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthOktaUsersNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthOktaUsersNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthOktaUsersNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthOktaUsersName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/okta/users/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOktaUsersName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonce">Nonce provided during a login request to retrieve the number verification challenge for the matching request.</param>
        /// <returns></returns>
        public void GetAuthOktaVerifyNonce(string nonce)
        {
            GetAuthOktaVerifyNonceWithHttpInfo(nonce);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonce">Nonce provided during a login request to retrieve the number verification challenge for the matching request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthOktaVerifyNonceWithHttpInfo(string nonce)
        {
            // verify the required parameter 'nonce' is set
            if (nonce == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'nonce' when calling AuthApi->GetAuthOktaVerifyNonce");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("nonce", VaultClient.Client.ClientUtils.ParameterToString(nonce)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/okta/verify/{nonce}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOktaVerifyNonce", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonce">Nonce provided during a login request to retrieve the number verification challenge for the matching request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthOktaVerifyNonceAsync(string nonce, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthOktaVerifyNonceWithHttpInfoAsync(nonce, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nonce">Nonce provided during a login request to retrieve the number verification challenge for the matching request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthOktaVerifyNonceWithHttpInfoAsync(string nonce, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'nonce' is set
            if (nonce == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'nonce' when calling AuthApi->GetAuthOktaVerifyNonce");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("nonce", VaultClient.Client.ClientUtils.ParameterToString(nonce)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/okta/verify/{nonce}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthOktaVerifyNonce", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the RADIUS server to connect to, along with its options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthRadiusConfig()
        {
            GetAuthRadiusConfigWithHttpInfo();
        }

        /// <summary>
        /// Configure the RADIUS server to connect to, along with its options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthRadiusConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/radius/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthRadiusConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the RADIUS server to connect to, along with its options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthRadiusConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthRadiusConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the RADIUS server to connect to, along with its options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthRadiusConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/radius/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthRadiusConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthRadiusUsers(string list)
        {
            GetAuthRadiusUsersWithHttpInfo(list);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthRadiusUsersWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthRadiusUsers");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/radius/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthRadiusUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthRadiusUsersAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthRadiusUsersWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthRadiusUsersWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthRadiusUsers");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/radius/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthRadiusUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <returns></returns>
        public void GetAuthRadiusUsersName(string name)
        {
            GetAuthRadiusUsersNameWithHttpInfo(name);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthRadiusUsersNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthRadiusUsersName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/radius/users/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthRadiusUsersName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthRadiusUsersNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthRadiusUsersNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthRadiusUsersNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->GetAuthRadiusUsersName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/radius/users/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthRadiusUsersName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List token accessors, which can then be be used to iterate and discover their properties or revoke them. Because this can be used to cause a denial of service, this endpoint requires &#39;sudo&#39; capability in addition to &#39;list&#39;. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthTokenAccessors(string list)
        {
            GetAuthTokenAccessorsWithHttpInfo(list);
        }

        /// <summary>
        /// List token accessors, which can then be be used to iterate and discover their properties or revoke them. Because this can be used to cause a denial of service, this endpoint requires &#39;sudo&#39; capability in addition to &#39;list&#39;. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthTokenAccessorsWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthTokenAccessors");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/token/accessors/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthTokenAccessors", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List token accessors, which can then be be used to iterate and discover their properties or revoke them. Because this can be used to cause a denial of service, this endpoint requires &#39;sudo&#39; capability in addition to &#39;list&#39;. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthTokenAccessorsAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthTokenAccessorsWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List token accessors, which can then be be used to iterate and discover their properties or revoke them. Because this can be used to cause a denial of service, this endpoint requires &#39;sudo&#39; capability in addition to &#39;list&#39;. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthTokenAccessorsWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthTokenAccessors");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/token/accessors/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthTokenAccessors", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will lookup a token and its properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthTokenLookup()
        {
            GetAuthTokenLookupWithHttpInfo();
        }

        /// <summary>
        /// This endpoint will lookup a token and its properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthTokenLookupWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/token/lookup", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthTokenLookup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will lookup a token and its properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthTokenLookupAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthTokenLookupWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This endpoint will lookup a token and its properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthTokenLookupWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/token/lookup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthTokenLookup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will lookup a token and its properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetAuthTokenLookupSelf()
        {
            GetAuthTokenLookupSelfWithHttpInfo();
        }

        /// <summary>
        /// This endpoint will lookup a token and its properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthTokenLookupSelfWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/token/lookup-self", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthTokenLookupSelf", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will lookup a token and its properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthTokenLookupSelfAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthTokenLookupSelfWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This endpoint will lookup a token and its properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthTokenLookupSelfWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/token/lookup-self", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthTokenLookupSelf", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint lists configured roles. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthTokenRoles(string list)
        {
            GetAuthTokenRolesWithHttpInfo(list);
        }

        /// <summary>
        /// This endpoint lists configured roles. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthTokenRolesWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthTokenRoles");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/token/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthTokenRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint lists configured roles. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthTokenRolesAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthTokenRolesWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This endpoint lists configured roles. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthTokenRolesWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthTokenRoles");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/token/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthTokenRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <returns></returns>
        public void GetAuthTokenRolesRoleName(string roleName)
        {
            GetAuthTokenRolesRoleNameWithHttpInfo(roleName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthTokenRolesRoleNameWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthTokenRolesRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/token/roles/{role_name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthTokenRolesRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthTokenRolesRoleNameAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthTokenRolesRoleNameWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthTokenRolesRoleNameWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->GetAuthTokenRolesRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/token/roles/{role_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthTokenRolesRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetAuthUserpassUsers(string list)
        {
            GetAuthUserpassUsersWithHttpInfo(list);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthUserpassUsersWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthUserpassUsers");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/userpass/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthUserpassUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthUserpassUsersAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthUserpassUsersWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthUserpassUsersWithHttpInfoAsync(string list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling AuthApi->GetAuthUserpassUsers");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/userpass/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthUserpassUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <returns></returns>
        public void GetAuthUserpassUsersUsername(string username)
        {
            GetAuthUserpassUsersUsernameWithHttpInfo(username);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetAuthUserpassUsersUsernameWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'username' when calling AuthApi->GetAuthUserpassUsersUsername");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", VaultClient.Client.ClientUtils.ParameterToString(username)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/auth/userpass/users/{username}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthUserpassUsersUsername", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAuthUserpassUsersUsernameAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAuthUserpassUsersUsernameWithHttpInfoAsync(username, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> GetAuthUserpassUsersUsernameWithHttpInfoAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'username' when calling AuthApi->GetAuthUserpassUsersUsername");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", VaultClient.Client.ClientUtils.ParameterToString(username)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/auth/userpass/users/{username}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthUserpassUsersUsername", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authenticates an RAM entity with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alicloudLoginRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAlicloudLogin(AlicloudLoginRequest alicloudLoginRequest = default(AlicloudLoginRequest))
        {
            PostAuthAlicloudLoginWithHttpInfo(alicloudLoginRequest);
        }

        /// <summary>
        /// Authenticates an RAM entity with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alicloudLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAlicloudLoginWithHttpInfo(AlicloudLoginRequest alicloudLoginRequest = default(AlicloudLoginRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = alicloudLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/alicloud/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAlicloudLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authenticates an RAM entity with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alicloudLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAlicloudLoginAsync(AlicloudLoginRequest alicloudLoginRequest = default(AlicloudLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAlicloudLoginWithHttpInfoAsync(alicloudLoginRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Authenticates an RAM entity with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alicloudLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAlicloudLoginWithHttpInfoAsync(AlicloudLoginRequest alicloudLoginRequest = default(AlicloudLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = alicloudLoginRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/alicloud/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAlicloudLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <param name="alicloudRoleRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAlicloudRoleRole(string role, AlicloudRoleRequest alicloudRoleRequest = default(AlicloudRoleRequest))
        {
            PostAuthAlicloudRoleRoleWithHttpInfo(role, alicloudRoleRequest);
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <param name="alicloudRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAlicloudRoleRoleWithHttpInfo(string role, AlicloudRoleRequest alicloudRoleRequest = default(AlicloudRoleRequest))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->PostAuthAlicloudRoleRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = alicloudRoleRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/alicloud/role/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAlicloudRoleRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <param name="alicloudRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAlicloudRoleRoleAsync(string role, AlicloudRoleRequest alicloudRoleRequest = default(AlicloudRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAlicloudRoleRoleWithHttpInfoAsync(role, alicloudRoleRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role as it should appear in Vault.</param>
        /// <param name="alicloudRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAlicloudRoleRoleWithHttpInfoAsync(string role, AlicloudRoleRequest alicloudRoleRequest = default(AlicloudRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->PostAuthAlicloudRoleRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = alicloudRoleRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/alicloud/role/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAlicloudRoleRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log in with an App ID and User ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appIdLoginRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAppIdLogin(AppIdLoginRequest appIdLoginRequest = default(AppIdLoginRequest))
        {
            PostAuthAppIdLoginWithHttpInfo(appIdLoginRequest);
        }

        /// <summary>
        /// Log in with an App ID and User ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appIdLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAppIdLoginWithHttpInfo(AppIdLoginRequest appIdLoginRequest = default(AppIdLoginRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = appIdLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/app-id/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAppIdLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log in with an App ID and User ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appIdLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAppIdLoginAsync(AppIdLoginRequest appIdLoginRequest = default(AppIdLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAppIdLoginWithHttpInfoAsync(appIdLoginRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Log in with an App ID and User ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appIdLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAppIdLoginWithHttpInfoAsync(AppIdLoginRequest appIdLoginRequest = default(AppIdLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = appIdLoginRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/app-id/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAppIdLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log in with an App ID and User ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The unique app ID</param>
        /// <param name="appIdLoginRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAppIdLoginAppId(string appId, AppIdLoginRequest appIdLoginRequest = default(AppIdLoginRequest))
        {
            PostAuthAppIdLoginAppIdWithHttpInfo(appId, appIdLoginRequest);
        }

        /// <summary>
        /// Log in with an App ID and User ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The unique app ID</param>
        /// <param name="appIdLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAppIdLoginAppIdWithHttpInfo(string appId, AppIdLoginRequest appIdLoginRequest = default(AppIdLoginRequest))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'appId' when calling AuthApi->PostAuthAppIdLoginAppId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app_id", VaultClient.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = appIdLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/app-id/login/{app_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAppIdLoginAppId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log in with an App ID and User ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The unique app ID</param>
        /// <param name="appIdLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAppIdLoginAppIdAsync(string appId, AppIdLoginRequest appIdLoginRequest = default(AppIdLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAppIdLoginAppIdWithHttpInfoAsync(appId, appIdLoginRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Log in with an App ID and User ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The unique app ID</param>
        /// <param name="appIdLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAppIdLoginAppIdWithHttpInfoAsync(string appId, AppIdLoginRequest appIdLoginRequest = default(AppIdLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'appId' when calling AuthApi->PostAuthAppIdLoginAppId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app_id", VaultClient.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = appIdLoginRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/app-id/login/{app_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAppIdLoginAppId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single app-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <param name="appIdMapAppIdRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAppIdMapAppIdKey(string key, AppIdMapAppIdRequest appIdMapAppIdRequest = default(AppIdMapAppIdRequest))
        {
            PostAuthAppIdMapAppIdKeyWithHttpInfo(key, appIdMapAppIdRequest);
        }

        /// <summary>
        /// Read/write/delete a single app-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <param name="appIdMapAppIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAppIdMapAppIdKeyWithHttpInfo(string key, AppIdMapAppIdRequest appIdMapAppIdRequest = default(AppIdMapAppIdRequest))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->PostAuthAppIdMapAppIdKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = appIdMapAppIdRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/app-id/map/app-id/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAppIdMapAppIdKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single app-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <param name="appIdMapAppIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAppIdMapAppIdKeyAsync(string key, AppIdMapAppIdRequest appIdMapAppIdRequest = default(AppIdMapAppIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAppIdMapAppIdKeyWithHttpInfoAsync(key, appIdMapAppIdRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read/write/delete a single app-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the app-id mapping</param>
        /// <param name="appIdMapAppIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAppIdMapAppIdKeyWithHttpInfoAsync(string key, AppIdMapAppIdRequest appIdMapAppIdRequest = default(AppIdMapAppIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->PostAuthAppIdMapAppIdKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = appIdMapAppIdRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/app-id/map/app-id/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAppIdMapAppIdKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single user-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <param name="appIdMapUserIdRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAppIdMapUserIdKey(string key, AppIdMapUserIdRequest appIdMapUserIdRequest = default(AppIdMapUserIdRequest))
        {
            PostAuthAppIdMapUserIdKeyWithHttpInfo(key, appIdMapUserIdRequest);
        }

        /// <summary>
        /// Read/write/delete a single user-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <param name="appIdMapUserIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAppIdMapUserIdKeyWithHttpInfo(string key, AppIdMapUserIdRequest appIdMapUserIdRequest = default(AppIdMapUserIdRequest))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->PostAuthAppIdMapUserIdKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = appIdMapUserIdRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/app-id/map/user-id/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAppIdMapUserIdKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single user-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <param name="appIdMapUserIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAppIdMapUserIdKeyAsync(string key, AppIdMapUserIdRequest appIdMapUserIdRequest = default(AppIdMapUserIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAppIdMapUserIdKeyWithHttpInfoAsync(key, appIdMapUserIdRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read/write/delete a single user-id mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the user-id mapping</param>
        /// <param name="appIdMapUserIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAppIdMapUserIdKeyWithHttpInfoAsync(string key, AppIdMapUserIdRequest appIdMapUserIdRequest = default(AppIdMapUserIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->PostAuthAppIdMapUserIdKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = appIdMapUserIdRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/app-id/map/user-id/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAppIdMapUserIdKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approleLoginRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthApproleLogin(ApproleLoginRequest approleLoginRequest = default(ApproleLoginRequest))
        {
            PostAuthApproleLoginWithHttpInfo(approleLoginRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approleLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthApproleLoginWithHttpInfo(ApproleLoginRequest approleLoginRequest = default(ApproleLoginRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = approleLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/approle/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approleLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthApproleLoginAsync(ApproleLoginRequest approleLoginRequest = default(ApproleLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthApproleLoginWithHttpInfoAsync(approleLoginRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approleLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthApproleLoginWithHttpInfoAsync(ApproleLoginRequest approleLoginRequest = default(ApproleLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = approleLoginRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/approle/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthApproleRoleRoleName(string roleName, ApproleRoleRequest approleRoleRequest = default(ApproleRoleRequest))
        {
            PostAuthApproleRoleRoleNameWithHttpInfo(roleName, approleRoleRequest);
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthApproleRoleRoleNameWithHttpInfo(string roleName, ApproleRoleRequest approleRoleRequest = default(ApproleRoleRequest))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/approle/role/{role_name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthApproleRoleRoleNameAsync(string roleName, ApproleRoleRequest approleRoleRequest = default(ApproleRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthApproleRoleRoleNameWithHttpInfoAsync(roleName, approleRoleRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthApproleRoleRoleNameWithHttpInfoAsync(string roleName, ApproleRoleRequest approleRoleRequest = default(ApproleRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/approle/role/{role_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Impose secret_id to be presented during login using this role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleBindSecretIdRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthApproleRoleRoleNameBindSecretId(string roleName, ApproleRoleBindSecretIdRequest approleRoleBindSecretIdRequest = default(ApproleRoleBindSecretIdRequest))
        {
            PostAuthApproleRoleRoleNameBindSecretIdWithHttpInfo(roleName, approleRoleBindSecretIdRequest);
        }

        /// <summary>
        /// Impose secret_id to be presented during login using this role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleBindSecretIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthApproleRoleRoleNameBindSecretIdWithHttpInfo(string roleName, ApproleRoleBindSecretIdRequest approleRoleBindSecretIdRequest = default(ApproleRoleBindSecretIdRequest))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameBindSecretId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleBindSecretIdRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/approle/role/{role_name}/bind-secret-id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameBindSecretId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Impose secret_id to be presented during login using this role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleBindSecretIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthApproleRoleRoleNameBindSecretIdAsync(string roleName, ApproleRoleBindSecretIdRequest approleRoleBindSecretIdRequest = default(ApproleRoleBindSecretIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthApproleRoleRoleNameBindSecretIdWithHttpInfoAsync(roleName, approleRoleBindSecretIdRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Impose secret_id to be presented during login using this role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleBindSecretIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthApproleRoleRoleNameBindSecretIdWithHttpInfoAsync(string roleName, ApproleRoleBindSecretIdRequest approleRoleBindSecretIdRequest = default(ApproleRoleBindSecretIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameBindSecretId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleBindSecretIdRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/approle/role/{role_name}/bind-secret-id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameBindSecretId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleBoundCidrListRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthApproleRoleRoleNameBoundCidrList(string roleName, ApproleRoleBoundCidrListRequest approleRoleBoundCidrListRequest = default(ApproleRoleBoundCidrListRequest))
        {
            PostAuthApproleRoleRoleNameBoundCidrListWithHttpInfo(roleName, approleRoleBoundCidrListRequest);
        }

        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleBoundCidrListRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthApproleRoleRoleNameBoundCidrListWithHttpInfo(string roleName, ApproleRoleBoundCidrListRequest approleRoleBoundCidrListRequest = default(ApproleRoleBoundCidrListRequest))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameBoundCidrList");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleBoundCidrListRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/approle/role/{role_name}/bound-cidr-list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameBoundCidrList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleBoundCidrListRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthApproleRoleRoleNameBoundCidrListAsync(string roleName, ApproleRoleBoundCidrListRequest approleRoleBoundCidrListRequest = default(ApproleRoleBoundCidrListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthApproleRoleRoleNameBoundCidrListWithHttpInfoAsync(roleName, approleRoleBoundCidrListRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleBoundCidrListRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthApproleRoleRoleNameBoundCidrListWithHttpInfoAsync(string roleName, ApproleRoleBoundCidrListRequest approleRoleBoundCidrListRequest = default(ApproleRoleBoundCidrListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameBoundCidrList");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleBoundCidrListRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/approle/role/{role_name}/bound-cidr-list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameBoundCidrList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a SecretID of choice against the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleCustomSecretIdRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthApproleRoleRoleNameCustomSecretId(string roleName, ApproleRoleCustomSecretIdRequest approleRoleCustomSecretIdRequest = default(ApproleRoleCustomSecretIdRequest))
        {
            PostAuthApproleRoleRoleNameCustomSecretIdWithHttpInfo(roleName, approleRoleCustomSecretIdRequest);
        }

        /// <summary>
        /// Assign a SecretID of choice against the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleCustomSecretIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthApproleRoleRoleNameCustomSecretIdWithHttpInfo(string roleName, ApproleRoleCustomSecretIdRequest approleRoleCustomSecretIdRequest = default(ApproleRoleCustomSecretIdRequest))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameCustomSecretId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleCustomSecretIdRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/approle/role/{role_name}/custom-secret-id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameCustomSecretId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a SecretID of choice against the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleCustomSecretIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthApproleRoleRoleNameCustomSecretIdAsync(string roleName, ApproleRoleCustomSecretIdRequest approleRoleCustomSecretIdRequest = default(ApproleRoleCustomSecretIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthApproleRoleRoleNameCustomSecretIdWithHttpInfoAsync(roleName, approleRoleCustomSecretIdRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Assign a SecretID of choice against the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleCustomSecretIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthApproleRoleRoleNameCustomSecretIdWithHttpInfoAsync(string roleName, ApproleRoleCustomSecretIdRequest approleRoleCustomSecretIdRequest = default(ApproleRoleCustomSecretIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameCustomSecretId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleCustomSecretIdRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/approle/role/{role_name}/custom-secret-id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameCustomSecretId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the value of &#39;period&#39; on the role 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRolePeriodRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthApproleRoleRoleNamePeriod(string roleName, ApproleRolePeriodRequest approleRolePeriodRequest = default(ApproleRolePeriodRequest))
        {
            PostAuthApproleRoleRoleNamePeriodWithHttpInfo(roleName, approleRolePeriodRequest);
        }

        /// <summary>
        /// Updates the value of &#39;period&#39; on the role 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRolePeriodRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthApproleRoleRoleNamePeriodWithHttpInfo(string roleName, ApproleRolePeriodRequest approleRolePeriodRequest = default(ApproleRolePeriodRequest))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNamePeriod");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRolePeriodRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/approle/role/{role_name}/period", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNamePeriod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the value of &#39;period&#39; on the role 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRolePeriodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthApproleRoleRoleNamePeriodAsync(string roleName, ApproleRolePeriodRequest approleRolePeriodRequest = default(ApproleRolePeriodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthApproleRoleRoleNamePeriodWithHttpInfoAsync(roleName, approleRolePeriodRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates the value of &#39;period&#39; on the role 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRolePeriodRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthApproleRoleRoleNamePeriodWithHttpInfoAsync(string roleName, ApproleRolePeriodRequest approleRolePeriodRequest = default(ApproleRolePeriodRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNamePeriod");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRolePeriodRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/approle/role/{role_name}/period", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNamePeriod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Policies of the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRolePoliciesRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthApproleRoleRoleNamePolicies(string roleName, ApproleRolePoliciesRequest approleRolePoliciesRequest = default(ApproleRolePoliciesRequest))
        {
            PostAuthApproleRoleRoleNamePoliciesWithHttpInfo(roleName, approleRolePoliciesRequest);
        }

        /// <summary>
        /// Policies of the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRolePoliciesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthApproleRoleRoleNamePoliciesWithHttpInfo(string roleName, ApproleRolePoliciesRequest approleRolePoliciesRequest = default(ApproleRolePoliciesRequest))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNamePolicies");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRolePoliciesRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/approle/role/{role_name}/policies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNamePolicies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Policies of the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRolePoliciesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthApproleRoleRoleNamePoliciesAsync(string roleName, ApproleRolePoliciesRequest approleRolePoliciesRequest = default(ApproleRolePoliciesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthApproleRoleRoleNamePoliciesWithHttpInfoAsync(roleName, approleRolePoliciesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Policies of the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRolePoliciesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthApproleRoleRoleNamePoliciesWithHttpInfoAsync(string roleName, ApproleRolePoliciesRequest approleRolePoliciesRequest = default(ApproleRolePoliciesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNamePolicies");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRolePoliciesRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/approle/role/{role_name}/policies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNamePolicies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the &#39;role_id&#39; of the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleRoleIdRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthApproleRoleRoleNameRoleId(string roleName, ApproleRoleRoleIdRequest approleRoleRoleIdRequest = default(ApproleRoleRoleIdRequest))
        {
            PostAuthApproleRoleRoleNameRoleIdWithHttpInfo(roleName, approleRoleRoleIdRequest);
        }

        /// <summary>
        /// Returns the &#39;role_id&#39; of the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleRoleIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthApproleRoleRoleNameRoleIdWithHttpInfo(string roleName, ApproleRoleRoleIdRequest approleRoleRoleIdRequest = default(ApproleRoleRoleIdRequest))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameRoleId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleRoleIdRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/approle/role/{role_name}/role-id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameRoleId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the &#39;role_id&#39; of the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleRoleIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthApproleRoleRoleNameRoleIdAsync(string roleName, ApproleRoleRoleIdRequest approleRoleRoleIdRequest = default(ApproleRoleRoleIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthApproleRoleRoleNameRoleIdWithHttpInfoAsync(roleName, approleRoleRoleIdRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Returns the &#39;role_id&#39; of the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleRoleIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthApproleRoleRoleNameRoleIdWithHttpInfoAsync(string roleName, ApproleRoleRoleIdRequest approleRoleRoleIdRequest = default(ApproleRoleRoleIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameRoleId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleRoleIdRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/approle/role/{role_name}/role-id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameRoleId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a SecretID against this role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthApproleRoleRoleNameSecretId(string roleName, ApproleRoleSecretIdRequest approleRoleSecretIdRequest = default(ApproleRoleSecretIdRequest))
        {
            PostAuthApproleRoleRoleNameSecretIdWithHttpInfo(roleName, approleRoleSecretIdRequest);
        }

        /// <summary>
        /// Generate a SecretID against this role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthApproleRoleRoleNameSecretIdWithHttpInfo(string roleName, ApproleRoleSecretIdRequest approleRoleSecretIdRequest = default(ApproleRoleSecretIdRequest))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameSecretId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleSecretIdRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/approle/role/{role_name}/secret-id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameSecretId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a SecretID against this role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthApproleRoleRoleNameSecretIdAsync(string roleName, ApproleRoleSecretIdRequest approleRoleSecretIdRequest = default(ApproleRoleSecretIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthApproleRoleRoleNameSecretIdWithHttpInfoAsync(roleName, approleRoleSecretIdRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate a SecretID against this role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthApproleRoleRoleNameSecretIdWithHttpInfoAsync(string roleName, ApproleRoleSecretIdRequest approleRoleSecretIdRequest = default(ApproleRoleSecretIdRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameSecretId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleSecretIdRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/approle/role/{role_name}/secret-id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameSecretId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdAccessorDestroyRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthApproleRoleRoleNameSecretIdAccessorDestroy(string roleName, ApproleRoleSecretIdAccessorDestroyRequest approleRoleSecretIdAccessorDestroyRequest = default(ApproleRoleSecretIdAccessorDestroyRequest))
        {
            PostAuthApproleRoleRoleNameSecretIdAccessorDestroyWithHttpInfo(roleName, approleRoleSecretIdAccessorDestroyRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdAccessorDestroyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthApproleRoleRoleNameSecretIdAccessorDestroyWithHttpInfo(string roleName, ApproleRoleSecretIdAccessorDestroyRequest approleRoleSecretIdAccessorDestroyRequest = default(ApproleRoleSecretIdAccessorDestroyRequest))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameSecretIdAccessorDestroy");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleSecretIdAccessorDestroyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/approle/role/{role_name}/secret-id-accessor/destroy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameSecretIdAccessorDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdAccessorDestroyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthApproleRoleRoleNameSecretIdAccessorDestroyAsync(string roleName, ApproleRoleSecretIdAccessorDestroyRequest approleRoleSecretIdAccessorDestroyRequest = default(ApproleRoleSecretIdAccessorDestroyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthApproleRoleRoleNameSecretIdAccessorDestroyWithHttpInfoAsync(roleName, approleRoleSecretIdAccessorDestroyRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdAccessorDestroyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthApproleRoleRoleNameSecretIdAccessorDestroyWithHttpInfoAsync(string roleName, ApproleRoleSecretIdAccessorDestroyRequest approleRoleSecretIdAccessorDestroyRequest = default(ApproleRoleSecretIdAccessorDestroyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameSecretIdAccessorDestroy");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleSecretIdAccessorDestroyRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/approle/role/{role_name}/secret-id-accessor/destroy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameSecretIdAccessorDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdAccessorLookupRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthApproleRoleRoleNameSecretIdAccessorLookup(string roleName, ApproleRoleSecretIdAccessorLookupRequest approleRoleSecretIdAccessorLookupRequest = default(ApproleRoleSecretIdAccessorLookupRequest))
        {
            PostAuthApproleRoleRoleNameSecretIdAccessorLookupWithHttpInfo(roleName, approleRoleSecretIdAccessorLookupRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdAccessorLookupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthApproleRoleRoleNameSecretIdAccessorLookupWithHttpInfo(string roleName, ApproleRoleSecretIdAccessorLookupRequest approleRoleSecretIdAccessorLookupRequest = default(ApproleRoleSecretIdAccessorLookupRequest))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameSecretIdAccessorLookup");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleSecretIdAccessorLookupRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/approle/role/{role_name}/secret-id-accessor/lookup", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameSecretIdAccessorLookup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdAccessorLookupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthApproleRoleRoleNameSecretIdAccessorLookupAsync(string roleName, ApproleRoleSecretIdAccessorLookupRequest approleRoleSecretIdAccessorLookupRequest = default(ApproleRoleSecretIdAccessorLookupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthApproleRoleRoleNameSecretIdAccessorLookupWithHttpInfoAsync(roleName, approleRoleSecretIdAccessorLookupRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdAccessorLookupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthApproleRoleRoleNameSecretIdAccessorLookupWithHttpInfoAsync(string roleName, ApproleRoleSecretIdAccessorLookupRequest approleRoleSecretIdAccessorLookupRequest = default(ApproleRoleSecretIdAccessorLookupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameSecretIdAccessorLookup");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleSecretIdAccessorLookupRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/approle/role/{role_name}/secret-id-accessor/lookup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameSecretIdAccessorLookup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdBoundCidrsRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthApproleRoleRoleNameSecretIdBoundCidrs(string roleName, ApproleRoleSecretIdBoundCidrsRequest approleRoleSecretIdBoundCidrsRequest = default(ApproleRoleSecretIdBoundCidrsRequest))
        {
            PostAuthApproleRoleRoleNameSecretIdBoundCidrsWithHttpInfo(roleName, approleRoleSecretIdBoundCidrsRequest);
        }

        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdBoundCidrsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthApproleRoleRoleNameSecretIdBoundCidrsWithHttpInfo(string roleName, ApproleRoleSecretIdBoundCidrsRequest approleRoleSecretIdBoundCidrsRequest = default(ApproleRoleSecretIdBoundCidrsRequest))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameSecretIdBoundCidrs");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleSecretIdBoundCidrsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/approle/role/{role_name}/secret-id-bound-cidrs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameSecretIdBoundCidrs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdBoundCidrsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthApproleRoleRoleNameSecretIdBoundCidrsAsync(string roleName, ApproleRoleSecretIdBoundCidrsRequest approleRoleSecretIdBoundCidrsRequest = default(ApproleRoleSecretIdBoundCidrsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthApproleRoleRoleNameSecretIdBoundCidrsWithHttpInfoAsync(roleName, approleRoleSecretIdBoundCidrsRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdBoundCidrsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthApproleRoleRoleNameSecretIdBoundCidrsWithHttpInfoAsync(string roleName, ApproleRoleSecretIdBoundCidrsRequest approleRoleSecretIdBoundCidrsRequest = default(ApproleRoleSecretIdBoundCidrsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameSecretIdBoundCidrs");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleSecretIdBoundCidrsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/approle/role/{role_name}/secret-id-bound-cidrs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameSecretIdBoundCidrs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invalidate an issued secret_id 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdDestroyRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthApproleRoleRoleNameSecretIdDestroy(string roleName, ApproleRoleSecretIdDestroyRequest approleRoleSecretIdDestroyRequest = default(ApproleRoleSecretIdDestroyRequest))
        {
            PostAuthApproleRoleRoleNameSecretIdDestroyWithHttpInfo(roleName, approleRoleSecretIdDestroyRequest);
        }

        /// <summary>
        /// Invalidate an issued secret_id 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdDestroyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthApproleRoleRoleNameSecretIdDestroyWithHttpInfo(string roleName, ApproleRoleSecretIdDestroyRequest approleRoleSecretIdDestroyRequest = default(ApproleRoleSecretIdDestroyRequest))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameSecretIdDestroy");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleSecretIdDestroyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/approle/role/{role_name}/secret-id/destroy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameSecretIdDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invalidate an issued secret_id 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdDestroyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthApproleRoleRoleNameSecretIdDestroyAsync(string roleName, ApproleRoleSecretIdDestroyRequest approleRoleSecretIdDestroyRequest = default(ApproleRoleSecretIdDestroyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthApproleRoleRoleNameSecretIdDestroyWithHttpInfoAsync(roleName, approleRoleSecretIdDestroyRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Invalidate an issued secret_id 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdDestroyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthApproleRoleRoleNameSecretIdDestroyWithHttpInfoAsync(string roleName, ApproleRoleSecretIdDestroyRequest approleRoleSecretIdDestroyRequest = default(ApproleRoleSecretIdDestroyRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameSecretIdDestroy");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleSecretIdDestroyRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/approle/role/{role_name}/secret-id/destroy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameSecretIdDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the properties of an issued secret_id 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdLookupRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthApproleRoleRoleNameSecretIdLookup(string roleName, ApproleRoleSecretIdLookupRequest approleRoleSecretIdLookupRequest = default(ApproleRoleSecretIdLookupRequest))
        {
            PostAuthApproleRoleRoleNameSecretIdLookupWithHttpInfo(roleName, approleRoleSecretIdLookupRequest);
        }

        /// <summary>
        /// Read the properties of an issued secret_id 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdLookupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthApproleRoleRoleNameSecretIdLookupWithHttpInfo(string roleName, ApproleRoleSecretIdLookupRequest approleRoleSecretIdLookupRequest = default(ApproleRoleSecretIdLookupRequest))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameSecretIdLookup");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleSecretIdLookupRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/approle/role/{role_name}/secret-id/lookup", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameSecretIdLookup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the properties of an issued secret_id 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdLookupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthApproleRoleRoleNameSecretIdLookupAsync(string roleName, ApproleRoleSecretIdLookupRequest approleRoleSecretIdLookupRequest = default(ApproleRoleSecretIdLookupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthApproleRoleRoleNameSecretIdLookupWithHttpInfoAsync(roleName, approleRoleSecretIdLookupRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read the properties of an issued secret_id 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdLookupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthApproleRoleRoleNameSecretIdLookupWithHttpInfoAsync(string roleName, ApproleRoleSecretIdLookupRequest approleRoleSecretIdLookupRequest = default(ApproleRoleSecretIdLookupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameSecretIdLookup");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleSecretIdLookupRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/approle/role/{role_name}/secret-id/lookup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameSecretIdLookup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Use limit of the SecretID generated against the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdNumUsesRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthApproleRoleRoleNameSecretIdNumUses(string roleName, ApproleRoleSecretIdNumUsesRequest approleRoleSecretIdNumUsesRequest = default(ApproleRoleSecretIdNumUsesRequest))
        {
            PostAuthApproleRoleRoleNameSecretIdNumUsesWithHttpInfo(roleName, approleRoleSecretIdNumUsesRequest);
        }

        /// <summary>
        /// Use limit of the SecretID generated against the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdNumUsesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthApproleRoleRoleNameSecretIdNumUsesWithHttpInfo(string roleName, ApproleRoleSecretIdNumUsesRequest approleRoleSecretIdNumUsesRequest = default(ApproleRoleSecretIdNumUsesRequest))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameSecretIdNumUses");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleSecretIdNumUsesRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/approle/role/{role_name}/secret-id-num-uses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameSecretIdNumUses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Use limit of the SecretID generated against the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdNumUsesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthApproleRoleRoleNameSecretIdNumUsesAsync(string roleName, ApproleRoleSecretIdNumUsesRequest approleRoleSecretIdNumUsesRequest = default(ApproleRoleSecretIdNumUsesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthApproleRoleRoleNameSecretIdNumUsesWithHttpInfoAsync(roleName, approleRoleSecretIdNumUsesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Use limit of the SecretID generated against the role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdNumUsesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthApproleRoleRoleNameSecretIdNumUsesWithHttpInfoAsync(string roleName, ApproleRoleSecretIdNumUsesRequest approleRoleSecretIdNumUsesRequest = default(ApproleRoleSecretIdNumUsesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameSecretIdNumUses");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleSecretIdNumUsesRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/approle/role/{role_name}/secret-id-num-uses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameSecretIdNumUses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdTtlRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthApproleRoleRoleNameSecretIdTtl(string roleName, ApproleRoleSecretIdTtlRequest approleRoleSecretIdTtlRequest = default(ApproleRoleSecretIdTtlRequest))
        {
            PostAuthApproleRoleRoleNameSecretIdTtlWithHttpInfo(roleName, approleRoleSecretIdTtlRequest);
        }

        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdTtlRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthApproleRoleRoleNameSecretIdTtlWithHttpInfo(string roleName, ApproleRoleSecretIdTtlRequest approleRoleSecretIdTtlRequest = default(ApproleRoleSecretIdTtlRequest))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameSecretIdTtl");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleSecretIdTtlRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/approle/role/{role_name}/secret-id-ttl", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameSecretIdTtl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdTtlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthApproleRoleRoleNameSecretIdTtlAsync(string roleName, ApproleRoleSecretIdTtlRequest approleRoleSecretIdTtlRequest = default(ApproleRoleSecretIdTtlRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthApproleRoleRoleNameSecretIdTtlWithHttpInfoAsync(roleName, approleRoleSecretIdTtlRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using &#39;role/&lt;role_name&gt;/secret-id&#39; or &#39;role/&lt;role_name&gt;/custom-secret-id&#39; endpoints. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleSecretIdTtlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthApproleRoleRoleNameSecretIdTtlWithHttpInfoAsync(string roleName, ApproleRoleSecretIdTtlRequest approleRoleSecretIdTtlRequest = default(ApproleRoleSecretIdTtlRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameSecretIdTtl");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleSecretIdTtlRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/approle/role/{role_name}/secret-id-ttl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameSecretIdTtl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenBoundCidrsRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthApproleRoleRoleNameTokenBoundCidrs(string roleName, ApproleRoleTokenBoundCidrsRequest approleRoleTokenBoundCidrsRequest = default(ApproleRoleTokenBoundCidrsRequest))
        {
            PostAuthApproleRoleRoleNameTokenBoundCidrsWithHttpInfo(roleName, approleRoleTokenBoundCidrsRequest);
        }

        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenBoundCidrsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthApproleRoleRoleNameTokenBoundCidrsWithHttpInfo(string roleName, ApproleRoleTokenBoundCidrsRequest approleRoleTokenBoundCidrsRequest = default(ApproleRoleTokenBoundCidrsRequest))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameTokenBoundCidrs");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleTokenBoundCidrsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/approle/role/{role_name}/token-bound-cidrs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameTokenBoundCidrs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenBoundCidrsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthApproleRoleRoleNameTokenBoundCidrsAsync(string roleName, ApproleRoleTokenBoundCidrsRequest approleRoleTokenBoundCidrsRequest = default(ApproleRoleTokenBoundCidrsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthApproleRoleRoleNameTokenBoundCidrsWithHttpInfoAsync(roleName, approleRoleTokenBoundCidrsRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenBoundCidrsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthApproleRoleRoleNameTokenBoundCidrsWithHttpInfoAsync(string roleName, ApproleRoleTokenBoundCidrsRequest approleRoleTokenBoundCidrsRequest = default(ApproleRoleTokenBoundCidrsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameTokenBoundCidrs");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleTokenBoundCidrsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/approle/role/{role_name}/token-bound-cidrs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameTokenBoundCidrs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenMaxTtlRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthApproleRoleRoleNameTokenMaxTtl(string roleName, ApproleRoleTokenMaxTtlRequest approleRoleTokenMaxTtlRequest = default(ApproleRoleTokenMaxTtlRequest))
        {
            PostAuthApproleRoleRoleNameTokenMaxTtlWithHttpInfo(roleName, approleRoleTokenMaxTtlRequest);
        }

        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenMaxTtlRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthApproleRoleRoleNameTokenMaxTtlWithHttpInfo(string roleName, ApproleRoleTokenMaxTtlRequest approleRoleTokenMaxTtlRequest = default(ApproleRoleTokenMaxTtlRequest))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameTokenMaxTtl");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleTokenMaxTtlRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/approle/role/{role_name}/token-max-ttl", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameTokenMaxTtl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenMaxTtlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthApproleRoleRoleNameTokenMaxTtlAsync(string roleName, ApproleRoleTokenMaxTtlRequest approleRoleTokenMaxTtlRequest = default(ApproleRoleTokenMaxTtlRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthApproleRoleRoleNameTokenMaxTtlWithHttpInfoAsync(roleName, approleRoleTokenMaxTtlRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenMaxTtlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthApproleRoleRoleNameTokenMaxTtlWithHttpInfoAsync(string roleName, ApproleRoleTokenMaxTtlRequest approleRoleTokenMaxTtlRequest = default(ApproleRoleTokenMaxTtlRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameTokenMaxTtl");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleTokenMaxTtlRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/approle/role/{role_name}/token-max-ttl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameTokenMaxTtl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Number of times issued tokens can be used 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenNumUsesRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthApproleRoleRoleNameTokenNumUses(string roleName, ApproleRoleTokenNumUsesRequest approleRoleTokenNumUsesRequest = default(ApproleRoleTokenNumUsesRequest))
        {
            PostAuthApproleRoleRoleNameTokenNumUsesWithHttpInfo(roleName, approleRoleTokenNumUsesRequest);
        }

        /// <summary>
        /// Number of times issued tokens can be used 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenNumUsesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthApproleRoleRoleNameTokenNumUsesWithHttpInfo(string roleName, ApproleRoleTokenNumUsesRequest approleRoleTokenNumUsesRequest = default(ApproleRoleTokenNumUsesRequest))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameTokenNumUses");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleTokenNumUsesRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/approle/role/{role_name}/token-num-uses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameTokenNumUses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Number of times issued tokens can be used 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenNumUsesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthApproleRoleRoleNameTokenNumUsesAsync(string roleName, ApproleRoleTokenNumUsesRequest approleRoleTokenNumUsesRequest = default(ApproleRoleTokenNumUsesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthApproleRoleRoleNameTokenNumUsesWithHttpInfoAsync(roleName, approleRoleTokenNumUsesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Number of times issued tokens can be used 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenNumUsesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthApproleRoleRoleNameTokenNumUsesWithHttpInfoAsync(string roleName, ApproleRoleTokenNumUsesRequest approleRoleTokenNumUsesRequest = default(ApproleRoleTokenNumUsesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameTokenNumUses");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleTokenNumUsesRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/approle/role/{role_name}/token-num-uses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameTokenNumUses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenTtlRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthApproleRoleRoleNameTokenTtl(string roleName, ApproleRoleTokenTtlRequest approleRoleTokenTtlRequest = default(ApproleRoleTokenTtlRequest))
        {
            PostAuthApproleRoleRoleNameTokenTtlWithHttpInfo(roleName, approleRoleTokenTtlRequest);
        }

        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenTtlRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthApproleRoleRoleNameTokenTtlWithHttpInfo(string roleName, ApproleRoleTokenTtlRequest approleRoleTokenTtlRequest = default(ApproleRoleTokenTtlRequest))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameTokenTtl");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleTokenTtlRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/approle/role/{role_name}/token-ttl", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameTokenTtl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenTtlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthApproleRoleRoleNameTokenTtlAsync(string roleName, ApproleRoleTokenTtlRequest approleRoleTokenTtlRequest = default(ApproleRoleTokenTtlRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthApproleRoleRoleNameTokenTtlWithHttpInfoAsync(roleName, approleRoleTokenTtlRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role.</param>
        /// <param name="approleRoleTokenTtlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthApproleRoleRoleNameTokenTtlWithHttpInfoAsync(string roleName, ApproleRoleTokenTtlRequest approleRoleTokenTtlRequest = default(ApproleRoleTokenTtlRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthApproleRoleRoleNameTokenTtl");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = approleRoleTokenTtlRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/approle/role/{role_name}/token-ttl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleRoleRoleNameTokenTtl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the clean-up of expired SecretID entries. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void PostAuthApproleTidySecretId()
        {
            PostAuthApproleTidySecretIdWithHttpInfo();
        }

        /// <summary>
        /// Trigger the clean-up of expired SecretID entries. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthApproleTidySecretIdWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/approle/tidy/secret-id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleTidySecretId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the clean-up of expired SecretID entries. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthApproleTidySecretIdAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthApproleTidySecretIdWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Trigger the clean-up of expired SecretID entries. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthApproleTidySecretIdWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/approle/tidy/secret-id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthApproleTidySecretId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <param name="awsConfigCertificateRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAwsConfigCertificateCertName(string certName, AwsConfigCertificateRequest awsConfigCertificateRequest = default(AwsConfigCertificateRequest))
        {
            PostAuthAwsConfigCertificateCertNameWithHttpInfo(certName, awsConfigCertificateRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <param name="awsConfigCertificateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAwsConfigCertificateCertNameWithHttpInfo(string certName, AwsConfigCertificateRequest awsConfigCertificateRequest = default(AwsConfigCertificateRequest))
        {
            // verify the required parameter 'certName' is set
            if (certName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'certName' when calling AuthApi->PostAuthAwsConfigCertificateCertName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("cert_name", VaultClient.Client.ClientUtils.ParameterToString(certName)); // path parameter
            localVarRequestOptions.Data = awsConfigCertificateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/aws/config/certificate/{cert_name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsConfigCertificateCertName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <param name="awsConfigCertificateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAwsConfigCertificateCertNameAsync(string certName, AwsConfigCertificateRequest awsConfigCertificateRequest = default(AwsConfigCertificateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAwsConfigCertificateCertNameWithHttpInfoAsync(certName, awsConfigCertificateRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certName">Name of the certificate.</param>
        /// <param name="awsConfigCertificateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAwsConfigCertificateCertNameWithHttpInfoAsync(string certName, AwsConfigCertificateRequest awsConfigCertificateRequest = default(AwsConfigCertificateRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'certName' is set
            if (certName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'certName' when calling AuthApi->PostAuthAwsConfigCertificateCertName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("cert_name", VaultClient.Client.ClientUtils.ParameterToString(certName)); // path parameter
            localVarRequestOptions.Data = awsConfigCertificateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/aws/config/certificate/{cert_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsConfigCertificateCertName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigClientRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAwsConfigClient(AwsConfigClientRequest awsConfigClientRequest = default(AwsConfigClientRequest))
        {
            PostAuthAwsConfigClientWithHttpInfo(awsConfigClientRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigClientRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAwsConfigClientWithHttpInfo(AwsConfigClientRequest awsConfigClientRequest = default(AwsConfigClientRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsConfigClientRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/aws/config/client", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsConfigClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigClientRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAwsConfigClientAsync(AwsConfigClientRequest awsConfigClientRequest = default(AwsConfigClientRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAwsConfigClientWithHttpInfoAsync(awsConfigClientRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigClientRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAwsConfigClientWithHttpInfoAsync(AwsConfigClientRequest awsConfigClientRequest = default(AwsConfigClientRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsConfigClientRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/aws/config/client", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsConfigClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigIdentityRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAwsConfigIdentity(AwsConfigIdentityRequest awsConfigIdentityRequest = default(AwsConfigIdentityRequest))
        {
            PostAuthAwsConfigIdentityWithHttpInfo(awsConfigIdentityRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigIdentityRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAwsConfigIdentityWithHttpInfo(AwsConfigIdentityRequest awsConfigIdentityRequest = default(AwsConfigIdentityRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsConfigIdentityRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/aws/config/identity", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsConfigIdentity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigIdentityRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAwsConfigIdentityAsync(AwsConfigIdentityRequest awsConfigIdentityRequest = default(AwsConfigIdentityRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAwsConfigIdentityWithHttpInfoAsync(awsConfigIdentityRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigIdentityRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAwsConfigIdentityWithHttpInfoAsync(AwsConfigIdentityRequest awsConfigIdentityRequest = default(AwsConfigIdentityRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsConfigIdentityRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/aws/config/identity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsConfigIdentity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void PostAuthAwsConfigRotateRoot()
        {
            PostAuthAwsConfigRotateRootWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAwsConfigRotateRootWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/aws/config/rotate-root", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsConfigRotateRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAwsConfigRotateRootAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAwsConfigRotateRootWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAwsConfigRotateRootWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/aws/config/rotate-root", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsConfigRotateRoot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <param name="awsConfigStsRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAwsConfigStsAccountId(string accountId, AwsConfigStsRequest awsConfigStsRequest = default(AwsConfigStsRequest))
        {
            PostAuthAwsConfigStsAccountIdWithHttpInfo(accountId, awsConfigStsRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <param name="awsConfigStsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAwsConfigStsAccountIdWithHttpInfo(string accountId, AwsConfigStsRequest awsConfigStsRequest = default(AwsConfigStsRequest))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'accountId' when calling AuthApi->PostAuthAwsConfigStsAccountId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("account_id", VaultClient.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = awsConfigStsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/aws/config/sts/{account_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsConfigStsAccountId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <param name="awsConfigStsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAwsConfigStsAccountIdAsync(string accountId, AwsConfigStsRequest awsConfigStsRequest = default(AwsConfigStsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAwsConfigStsAccountIdWithHttpInfoAsync(accountId, awsConfigStsRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.</param>
        /// <param name="awsConfigStsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAwsConfigStsAccountIdWithHttpInfoAsync(string accountId, AwsConfigStsRequest awsConfigStsRequest = default(AwsConfigStsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'accountId' when calling AuthApi->PostAuthAwsConfigStsAccountId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("account_id", VaultClient.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = awsConfigStsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/aws/config/sts/{account_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsConfigStsAccountId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyIdentityAccesslistRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAwsConfigTidyIdentityAccesslist(AwsConfigTidyIdentityAccesslistRequest awsConfigTidyIdentityAccesslistRequest = default(AwsConfigTidyIdentityAccesslistRequest))
        {
            PostAuthAwsConfigTidyIdentityAccesslistWithHttpInfo(awsConfigTidyIdentityAccesslistRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyIdentityAccesslistRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAwsConfigTidyIdentityAccesslistWithHttpInfo(AwsConfigTidyIdentityAccesslistRequest awsConfigTidyIdentityAccesslistRequest = default(AwsConfigTidyIdentityAccesslistRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsConfigTidyIdentityAccesslistRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/aws/config/tidy/identity-accesslist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsConfigTidyIdentityAccesslist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyIdentityAccesslistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAwsConfigTidyIdentityAccesslistAsync(AwsConfigTidyIdentityAccesslistRequest awsConfigTidyIdentityAccesslistRequest = default(AwsConfigTidyIdentityAccesslistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAwsConfigTidyIdentityAccesslistWithHttpInfoAsync(awsConfigTidyIdentityAccesslistRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyIdentityAccesslistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAwsConfigTidyIdentityAccesslistWithHttpInfoAsync(AwsConfigTidyIdentityAccesslistRequest awsConfigTidyIdentityAccesslistRequest = default(AwsConfigTidyIdentityAccesslistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsConfigTidyIdentityAccesslistRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/aws/config/tidy/identity-accesslist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsConfigTidyIdentityAccesslist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyIdentityWhitelistRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAwsConfigTidyIdentityWhitelist(AwsConfigTidyIdentityWhitelistRequest awsConfigTidyIdentityWhitelistRequest = default(AwsConfigTidyIdentityWhitelistRequest))
        {
            PostAuthAwsConfigTidyIdentityWhitelistWithHttpInfo(awsConfigTidyIdentityWhitelistRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyIdentityWhitelistRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAwsConfigTidyIdentityWhitelistWithHttpInfo(AwsConfigTidyIdentityWhitelistRequest awsConfigTidyIdentityWhitelistRequest = default(AwsConfigTidyIdentityWhitelistRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsConfigTidyIdentityWhitelistRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/aws/config/tidy/identity-whitelist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsConfigTidyIdentityWhitelist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyIdentityWhitelistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAwsConfigTidyIdentityWhitelistAsync(AwsConfigTidyIdentityWhitelistRequest awsConfigTidyIdentityWhitelistRequest = default(AwsConfigTidyIdentityWhitelistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAwsConfigTidyIdentityWhitelistWithHttpInfoAsync(awsConfigTidyIdentityWhitelistRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyIdentityWhitelistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAwsConfigTidyIdentityWhitelistWithHttpInfoAsync(AwsConfigTidyIdentityWhitelistRequest awsConfigTidyIdentityWhitelistRequest = default(AwsConfigTidyIdentityWhitelistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsConfigTidyIdentityWhitelistRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/aws/config/tidy/identity-whitelist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsConfigTidyIdentityWhitelist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyRoletagBlacklistRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAwsConfigTidyRoletagBlacklist(AwsConfigTidyRoletagBlacklistRequest awsConfigTidyRoletagBlacklistRequest = default(AwsConfigTidyRoletagBlacklistRequest))
        {
            PostAuthAwsConfigTidyRoletagBlacklistWithHttpInfo(awsConfigTidyRoletagBlacklistRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyRoletagBlacklistRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAwsConfigTidyRoletagBlacklistWithHttpInfo(AwsConfigTidyRoletagBlacklistRequest awsConfigTidyRoletagBlacklistRequest = default(AwsConfigTidyRoletagBlacklistRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsConfigTidyRoletagBlacklistRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/aws/config/tidy/roletag-blacklist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsConfigTidyRoletagBlacklist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyRoletagBlacklistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAwsConfigTidyRoletagBlacklistAsync(AwsConfigTidyRoletagBlacklistRequest awsConfigTidyRoletagBlacklistRequest = default(AwsConfigTidyRoletagBlacklistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAwsConfigTidyRoletagBlacklistWithHttpInfoAsync(awsConfigTidyRoletagBlacklistRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyRoletagBlacklistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAwsConfigTidyRoletagBlacklistWithHttpInfoAsync(AwsConfigTidyRoletagBlacklistRequest awsConfigTidyRoletagBlacklistRequest = default(AwsConfigTidyRoletagBlacklistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsConfigTidyRoletagBlacklistRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/aws/config/tidy/roletag-blacklist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsConfigTidyRoletagBlacklist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyRoletagDenylistRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAwsConfigTidyRoletagDenylist(AwsConfigTidyRoletagDenylistRequest awsConfigTidyRoletagDenylistRequest = default(AwsConfigTidyRoletagDenylistRequest))
        {
            PostAuthAwsConfigTidyRoletagDenylistWithHttpInfo(awsConfigTidyRoletagDenylistRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyRoletagDenylistRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAwsConfigTidyRoletagDenylistWithHttpInfo(AwsConfigTidyRoletagDenylistRequest awsConfigTidyRoletagDenylistRequest = default(AwsConfigTidyRoletagDenylistRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsConfigTidyRoletagDenylistRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/aws/config/tidy/roletag-denylist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsConfigTidyRoletagDenylist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyRoletagDenylistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAwsConfigTidyRoletagDenylistAsync(AwsConfigTidyRoletagDenylistRequest awsConfigTidyRoletagDenylistRequest = default(AwsConfigTidyRoletagDenylistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAwsConfigTidyRoletagDenylistWithHttpInfoAsync(awsConfigTidyRoletagDenylistRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsConfigTidyRoletagDenylistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAwsConfigTidyRoletagDenylistWithHttpInfoAsync(AwsConfigTidyRoletagDenylistRequest awsConfigTidyRoletagDenylistRequest = default(AwsConfigTidyRoletagDenylistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsConfigTidyRoletagDenylistRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/aws/config/tidy/roletag-denylist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsConfigTidyRoletagDenylist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsLoginRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAwsLogin(AwsLoginRequest awsLoginRequest = default(AwsLoginRequest))
        {
            PostAuthAwsLoginWithHttpInfo(awsLoginRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAwsLoginWithHttpInfo(AwsLoginRequest awsLoginRequest = default(AwsLoginRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/aws/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAwsLoginAsync(AwsLoginRequest awsLoginRequest = default(AwsLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAwsLoginWithHttpInfoAsync(awsLoginRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAwsLoginWithHttpInfoAsync(AwsLoginRequest awsLoginRequest = default(AwsLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsLoginRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/aws/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="awsRoleRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAwsRoleRole(string role, AwsRoleRequest awsRoleRequest = default(AwsRoleRequest))
        {
            PostAuthAwsRoleRoleWithHttpInfo(role, awsRoleRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="awsRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAwsRoleRoleWithHttpInfo(string role, AwsRoleRequest awsRoleRequest = default(AwsRoleRequest))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->PostAuthAwsRoleRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = awsRoleRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/aws/role/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsRoleRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="awsRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAwsRoleRoleAsync(string role, AwsRoleRequest awsRoleRequest = default(AwsRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAwsRoleRoleWithHttpInfoAsync(role, awsRoleRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="awsRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAwsRoleRoleWithHttpInfoAsync(string role, AwsRoleRequest awsRoleRequest = default(AwsRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->PostAuthAwsRoleRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = awsRoleRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/aws/role/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsRoleRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="awsRoleTagRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAwsRoleRoleTag(string role, AwsRoleTagRequest awsRoleTagRequest = default(AwsRoleTagRequest))
        {
            PostAuthAwsRoleRoleTagWithHttpInfo(role, awsRoleTagRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="awsRoleTagRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAwsRoleRoleTagWithHttpInfo(string role, AwsRoleTagRequest awsRoleTagRequest = default(AwsRoleTagRequest))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->PostAuthAwsRoleRoleTag");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = awsRoleTagRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/aws/role/{role}/tag", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsRoleRoleTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="awsRoleTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAwsRoleRoleTagAsync(string role, AwsRoleTagRequest awsRoleTagRequest = default(AwsRoleTagRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAwsRoleRoleTagWithHttpInfoAsync(role, awsRoleTagRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="awsRoleTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAwsRoleRoleTagWithHttpInfoAsync(string role, AwsRoleTagRequest awsRoleTagRequest = default(AwsRoleTagRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->PostAuthAwsRoleRoleTag");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = awsRoleTagRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/aws/role/{role}/tag", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsRoleRoleTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns></returns>
        public void PostAuthAwsRoletagBlacklistRoleTag(string roleTag)
        {
            PostAuthAwsRoletagBlacklistRoleTagWithHttpInfo(roleTag);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAwsRoletagBlacklistRoleTagWithHttpInfo(string roleTag)
        {
            // verify the required parameter 'roleTag' is set
            if (roleTag == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleTag' when calling AuthApi->PostAuthAwsRoletagBlacklistRoleTag");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_tag", VaultClient.Client.ClientUtils.ParameterToString(roleTag)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/aws/roletag-blacklist/{role_tag}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsRoletagBlacklistRoleTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAwsRoletagBlacklistRoleTagAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAwsRoletagBlacklistRoleTagWithHttpInfoAsync(roleTag, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAwsRoletagBlacklistRoleTagWithHttpInfoAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleTag' is set
            if (roleTag == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleTag' when calling AuthApi->PostAuthAwsRoletagBlacklistRoleTag");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_tag", VaultClient.Client.ClientUtils.ParameterToString(roleTag)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/aws/roletag-blacklist/{role_tag}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsRoletagBlacklistRoleTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns></returns>
        public void PostAuthAwsRoletagDenylistRoleTag(string roleTag)
        {
            PostAuthAwsRoletagDenylistRoleTagWithHttpInfo(roleTag);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAwsRoletagDenylistRoleTagWithHttpInfo(string roleTag)
        {
            // verify the required parameter 'roleTag' is set
            if (roleTag == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleTag' when calling AuthApi->PostAuthAwsRoletagDenylistRoleTag");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_tag", VaultClient.Client.ClientUtils.ParameterToString(roleTag)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/aws/roletag-denylist/{role_tag}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsRoletagDenylistRoleTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAwsRoletagDenylistRoleTagAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAwsRoletagDenylistRoleTagWithHttpInfoAsync(roleTag, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleTag">Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAwsRoletagDenylistRoleTagWithHttpInfoAsync(string roleTag, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleTag' is set
            if (roleTag == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleTag' when calling AuthApi->PostAuthAwsRoletagDenylistRoleTag");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_tag", VaultClient.Client.ClientUtils.ParameterToString(roleTag)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/aws/roletag-denylist/{role_tag}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsRoletagDenylistRoleTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyIdentityAccesslistRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAwsTidyIdentityAccesslist(AwsTidyIdentityAccesslistRequest awsTidyIdentityAccesslistRequest = default(AwsTidyIdentityAccesslistRequest))
        {
            PostAuthAwsTidyIdentityAccesslistWithHttpInfo(awsTidyIdentityAccesslistRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyIdentityAccesslistRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAwsTidyIdentityAccesslistWithHttpInfo(AwsTidyIdentityAccesslistRequest awsTidyIdentityAccesslistRequest = default(AwsTidyIdentityAccesslistRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsTidyIdentityAccesslistRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/aws/tidy/identity-accesslist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsTidyIdentityAccesslist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyIdentityAccesslistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAwsTidyIdentityAccesslistAsync(AwsTidyIdentityAccesslistRequest awsTidyIdentityAccesslistRequest = default(AwsTidyIdentityAccesslistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAwsTidyIdentityAccesslistWithHttpInfoAsync(awsTidyIdentityAccesslistRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyIdentityAccesslistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAwsTidyIdentityAccesslistWithHttpInfoAsync(AwsTidyIdentityAccesslistRequest awsTidyIdentityAccesslistRequest = default(AwsTidyIdentityAccesslistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsTidyIdentityAccesslistRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/aws/tidy/identity-accesslist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsTidyIdentityAccesslist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyIdentityWhitelistRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAwsTidyIdentityWhitelist(AwsTidyIdentityWhitelistRequest awsTidyIdentityWhitelistRequest = default(AwsTidyIdentityWhitelistRequest))
        {
            PostAuthAwsTidyIdentityWhitelistWithHttpInfo(awsTidyIdentityWhitelistRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyIdentityWhitelistRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAwsTidyIdentityWhitelistWithHttpInfo(AwsTidyIdentityWhitelistRequest awsTidyIdentityWhitelistRequest = default(AwsTidyIdentityWhitelistRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsTidyIdentityWhitelistRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/aws/tidy/identity-whitelist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsTidyIdentityWhitelist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyIdentityWhitelistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAwsTidyIdentityWhitelistAsync(AwsTidyIdentityWhitelistRequest awsTidyIdentityWhitelistRequest = default(AwsTidyIdentityWhitelistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAwsTidyIdentityWhitelistWithHttpInfoAsync(awsTidyIdentityWhitelistRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyIdentityWhitelistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAwsTidyIdentityWhitelistWithHttpInfoAsync(AwsTidyIdentityWhitelistRequest awsTidyIdentityWhitelistRequest = default(AwsTidyIdentityWhitelistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsTidyIdentityWhitelistRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/aws/tidy/identity-whitelist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsTidyIdentityWhitelist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyRoletagBlacklistRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAwsTidyRoletagBlacklist(AwsTidyRoletagBlacklistRequest awsTidyRoletagBlacklistRequest = default(AwsTidyRoletagBlacklistRequest))
        {
            PostAuthAwsTidyRoletagBlacklistWithHttpInfo(awsTidyRoletagBlacklistRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyRoletagBlacklistRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAwsTidyRoletagBlacklistWithHttpInfo(AwsTidyRoletagBlacklistRequest awsTidyRoletagBlacklistRequest = default(AwsTidyRoletagBlacklistRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsTidyRoletagBlacklistRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/aws/tidy/roletag-blacklist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsTidyRoletagBlacklist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyRoletagBlacklistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAwsTidyRoletagBlacklistAsync(AwsTidyRoletagBlacklistRequest awsTidyRoletagBlacklistRequest = default(AwsTidyRoletagBlacklistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAwsTidyRoletagBlacklistWithHttpInfoAsync(awsTidyRoletagBlacklistRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyRoletagBlacklistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAwsTidyRoletagBlacklistWithHttpInfoAsync(AwsTidyRoletagBlacklistRequest awsTidyRoletagBlacklistRequest = default(AwsTidyRoletagBlacklistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsTidyRoletagBlacklistRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/aws/tidy/roletag-blacklist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsTidyRoletagBlacklist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyRoletagDenylistRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAwsTidyRoletagDenylist(AwsTidyRoletagDenylistRequest awsTidyRoletagDenylistRequest = default(AwsTidyRoletagDenylistRequest))
        {
            PostAuthAwsTidyRoletagDenylistWithHttpInfo(awsTidyRoletagDenylistRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyRoletagDenylistRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAwsTidyRoletagDenylistWithHttpInfo(AwsTidyRoletagDenylistRequest awsTidyRoletagDenylistRequest = default(AwsTidyRoletagDenylistRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsTidyRoletagDenylistRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/aws/tidy/roletag-denylist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsTidyRoletagDenylist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyRoletagDenylistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAwsTidyRoletagDenylistAsync(AwsTidyRoletagDenylistRequest awsTidyRoletagDenylistRequest = default(AwsTidyRoletagDenylistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAwsTidyRoletagDenylistWithHttpInfoAsync(awsTidyRoletagDenylistRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awsTidyRoletagDenylistRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAwsTidyRoletagDenylistWithHttpInfoAsync(AwsTidyRoletagDenylistRequest awsTidyRoletagDenylistRequest = default(AwsTidyRoletagDenylistRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = awsTidyRoletagDenylistRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/aws/tidy/roletag-denylist", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAwsTidyRoletagDenylist", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAzureConfig(AzureConfigRequest azureConfigRequest = default(AzureConfigRequest))
        {
            PostAuthAzureConfigWithHttpInfo(azureConfigRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAzureConfigWithHttpInfo(AzureConfigRequest azureConfigRequest = default(AzureConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = azureConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/azure/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAzureConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAzureConfigAsync(AzureConfigRequest azureConfigRequest = default(AzureConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAzureConfigWithHttpInfoAsync(azureConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAzureConfigWithHttpInfoAsync(AzureConfigRequest azureConfigRequest = default(AzureConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = azureConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/azure/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAzureConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureLoginRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAzureLogin(AzureLoginRequest azureLoginRequest = default(AzureLoginRequest))
        {
            PostAuthAzureLoginWithHttpInfo(azureLoginRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAzureLoginWithHttpInfo(AzureLoginRequest azureLoginRequest = default(AzureLoginRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = azureLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/azure/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAzureLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAzureLoginAsync(AzureLoginRequest azureLoginRequest = default(AzureLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAzureLoginWithHttpInfoAsync(azureLoginRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAzureLoginWithHttpInfoAsync(AzureLoginRequest azureLoginRequest = default(AzureLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = azureLoginRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/azure/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAzureLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="azureRoleRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthAzureRoleName(string name, AzureRoleRequest azureRoleRequest = default(AzureRoleRequest))
        {
            PostAuthAzureRoleNameWithHttpInfo(name, azureRoleRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="azureRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthAzureRoleNameWithHttpInfo(string name, AzureRoleRequest azureRoleRequest = default(AzureRoleRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthAzureRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = azureRoleRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/azure/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAzureRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="azureRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthAzureRoleNameAsync(string name, AzureRoleRequest azureRoleRequest = default(AzureRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthAzureRoleNameWithHttpInfoAsync(name, azureRoleRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="azureRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthAzureRoleNameWithHttpInfoAsync(string name, AzureRoleRequest azureRoleRequest = default(AzureRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthAzureRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = azureRoleRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/azure/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthAzureRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform for authenticating users. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="centrifyConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthCentrifyConfig(CentrifyConfigRequest centrifyConfigRequest = default(CentrifyConfigRequest))
        {
            PostAuthCentrifyConfigWithHttpInfo(centrifyConfigRequest);
        }

        /// <summary>
        /// This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform for authenticating users. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="centrifyConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthCentrifyConfigWithHttpInfo(CentrifyConfigRequest centrifyConfigRequest = default(CentrifyConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = centrifyConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/centrify/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthCentrifyConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform for authenticating users. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="centrifyConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthCentrifyConfigAsync(CentrifyConfigRequest centrifyConfigRequest = default(CentrifyConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthCentrifyConfigWithHttpInfoAsync(centrifyConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform for authenticating users. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="centrifyConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthCentrifyConfigWithHttpInfoAsync(CentrifyConfigRequest centrifyConfigRequest = default(CentrifyConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = centrifyConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/centrify/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthCentrifyConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="centrifyLoginRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthCentrifyLogin(CentrifyLoginRequest centrifyLoginRequest = default(CentrifyLoginRequest))
        {
            PostAuthCentrifyLoginWithHttpInfo(centrifyLoginRequest);
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="centrifyLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthCentrifyLoginWithHttpInfo(CentrifyLoginRequest centrifyLoginRequest = default(CentrifyLoginRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = centrifyLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/centrify/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthCentrifyLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="centrifyLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthCentrifyLoginAsync(CentrifyLoginRequest centrifyLoginRequest = default(CentrifyLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthCentrifyLoginWithHttpInfoAsync(centrifyLoginRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="centrifyLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthCentrifyLoginWithHttpInfoAsync(CentrifyLoginRequest centrifyLoginRequest = default(CentrifyLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = centrifyLoginRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/centrify/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthCentrifyLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage trusted certificates used for authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="certCertsRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthCertCertsName(string name, CertCertsRequest certCertsRequest = default(CertCertsRequest))
        {
            PostAuthCertCertsNameWithHttpInfo(name, certCertsRequest);
        }

        /// <summary>
        /// Manage trusted certificates used for authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="certCertsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthCertCertsNameWithHttpInfo(string name, CertCertsRequest certCertsRequest = default(CertCertsRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthCertCertsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = certCertsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/cert/certs/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthCertCertsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage trusted certificates used for authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="certCertsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthCertCertsNameAsync(string name, CertCertsRequest certCertsRequest = default(CertCertsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthCertCertsNameWithHttpInfoAsync(name, certCertsRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage trusted certificates used for authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="certCertsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthCertCertsNameWithHttpInfoAsync(string name, CertCertsRequest certCertsRequest = default(CertCertsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthCertCertsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = certCertsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/cert/certs/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthCertCertsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthCertConfig(CertConfigRequest certConfigRequest = default(CertConfigRequest))
        {
            PostAuthCertConfigWithHttpInfo(certConfigRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthCertConfigWithHttpInfo(CertConfigRequest certConfigRequest = default(CertConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = certConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/cert/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthCertConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthCertConfigAsync(CertConfigRequest certConfigRequest = default(CertConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthCertConfigWithHttpInfoAsync(certConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthCertConfigWithHttpInfoAsync(CertConfigRequest certConfigRequest = default(CertConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = certConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/cert/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthCertConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="certCrlsRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthCertCrlsName(string name, CertCrlsRequest certCrlsRequest = default(CertCrlsRequest))
        {
            PostAuthCertCrlsNameWithHttpInfo(name, certCrlsRequest);
        }

        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="certCrlsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthCertCrlsNameWithHttpInfo(string name, CertCrlsRequest certCrlsRequest = default(CertCrlsRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthCertCrlsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = certCrlsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/cert/crls/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthCertCrlsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="certCrlsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthCertCrlsNameAsync(string name, CertCrlsRequest certCrlsRequest = default(CertCrlsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthCertCrlsNameWithHttpInfoAsync(name, certCrlsRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage Certificate Revocation Lists checked during authentication. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the certificate</param>
        /// <param name="certCrlsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthCertCrlsNameWithHttpInfoAsync(string name, CertCrlsRequest certCrlsRequest = default(CertCrlsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthCertCrlsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = certCrlsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/cert/crls/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthCertCrlsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certLoginRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthCertLogin(CertLoginRequest certLoginRequest = default(CertLoginRequest))
        {
            PostAuthCertLoginWithHttpInfo(certLoginRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthCertLoginWithHttpInfo(CertLoginRequest certLoginRequest = default(CertLoginRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = certLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/cert/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthCertLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthCertLoginAsync(CertLoginRequest certLoginRequest = default(CertLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthCertLoginWithHttpInfoAsync(certLoginRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthCertLoginWithHttpInfoAsync(CertLoginRequest certLoginRequest = default(CertLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = certLoginRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/cert/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthCertLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthCfConfig(CfConfigRequest cfConfigRequest = default(CfConfigRequest))
        {
            PostAuthCfConfigWithHttpInfo(cfConfigRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthCfConfigWithHttpInfo(CfConfigRequest cfConfigRequest = default(CfConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = cfConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/cf/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthCfConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthCfConfigAsync(CfConfigRequest cfConfigRequest = default(CfConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthCfConfigWithHttpInfoAsync(cfConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthCfConfigWithHttpInfoAsync(CfConfigRequest cfConfigRequest = default(CfConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = cfConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/cf/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthCfConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfLoginRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthCfLogin(CfLoginRequest cfLoginRequest = default(CfLoginRequest))
        {
            PostAuthCfLoginWithHttpInfo(cfLoginRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthCfLoginWithHttpInfo(CfLoginRequest cfLoginRequest = default(CfLoginRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = cfLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/cf/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthCfLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthCfLoginAsync(CfLoginRequest cfLoginRequest = default(CfLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthCfLoginWithHttpInfoAsync(cfLoginRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cfLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthCfLoginWithHttpInfoAsync(CfLoginRequest cfLoginRequest = default(CfLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = cfLoginRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/cf/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthCfLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <param name="cfRolesRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthCfRolesRole(string role, CfRolesRequest cfRolesRequest = default(CfRolesRequest))
        {
            PostAuthCfRolesRoleWithHttpInfo(role, cfRolesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <param name="cfRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthCfRolesRoleWithHttpInfo(string role, CfRolesRequest cfRolesRequest = default(CfRolesRequest))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->PostAuthCfRolesRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = cfRolesRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/cf/roles/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthCfRolesRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <param name="cfRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthCfRolesRoleAsync(string role, CfRolesRequest cfRolesRequest = default(CfRolesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthCfRolesRoleWithHttpInfoAsync(role, cfRolesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The name of the role.</param>
        /// <param name="cfRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthCfRolesRoleWithHttpInfoAsync(string role, CfRolesRequest cfRolesRequest = default(CfRolesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->PostAuthCfRolesRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = cfRolesRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/cf/roles/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthCfRolesRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure credentials used to query the GCP IAM API to verify authenticating service accounts 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthGcpConfig(GcpConfigRequest gcpConfigRequest = default(GcpConfigRequest))
        {
            PostAuthGcpConfigWithHttpInfo(gcpConfigRequest);
        }

        /// <summary>
        /// Configure credentials used to query the GCP IAM API to verify authenticating service accounts 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthGcpConfigWithHttpInfo(GcpConfigRequest gcpConfigRequest = default(GcpConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = gcpConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/gcp/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthGcpConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure credentials used to query the GCP IAM API to verify authenticating service accounts 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthGcpConfigAsync(GcpConfigRequest gcpConfigRequest = default(GcpConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthGcpConfigWithHttpInfoAsync(gcpConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure credentials used to query the GCP IAM API to verify authenticating service accounts 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthGcpConfigWithHttpInfoAsync(GcpConfigRequest gcpConfigRequest = default(GcpConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = gcpConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/gcp/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthGcpConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpLoginRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthGcpLogin(GcpLoginRequest gcpLoginRequest = default(GcpLoginRequest))
        {
            PostAuthGcpLoginWithHttpInfo(gcpLoginRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthGcpLoginWithHttpInfo(GcpLoginRequest gcpLoginRequest = default(GcpLoginRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = gcpLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/gcp/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthGcpLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthGcpLoginAsync(GcpLoginRequest gcpLoginRequest = default(GcpLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthGcpLoginWithHttpInfoAsync(gcpLoginRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gcpLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthGcpLoginWithHttpInfoAsync(GcpLoginRequest gcpLoginRequest = default(GcpLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = gcpLoginRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/gcp/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthGcpLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a GCP role with associated policies and required attributes. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthGcpRoleName(string name, GcpRoleRequest gcpRoleRequest = default(GcpRoleRequest))
        {
            PostAuthGcpRoleNameWithHttpInfo(name, gcpRoleRequest);
        }

        /// <summary>
        /// Create a GCP role with associated policies and required attributes. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthGcpRoleNameWithHttpInfo(string name, GcpRoleRequest gcpRoleRequest = default(GcpRoleRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthGcpRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = gcpRoleRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/gcp/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthGcpRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a GCP role with associated policies and required attributes. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthGcpRoleNameAsync(string name, GcpRoleRequest gcpRoleRequest = default(GcpRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthGcpRoleNameWithHttpInfoAsync(name, gcpRoleRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a GCP role with associated policies and required attributes. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthGcpRoleNameWithHttpInfoAsync(string name, GcpRoleRequest gcpRoleRequest = default(GcpRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthGcpRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = gcpRoleRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/gcp/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthGcpRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or remove labels for an existing &#39;gce&#39; role 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleLabelsRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthGcpRoleNameLabels(string name, GcpRoleLabelsRequest gcpRoleLabelsRequest = default(GcpRoleLabelsRequest))
        {
            PostAuthGcpRoleNameLabelsWithHttpInfo(name, gcpRoleLabelsRequest);
        }

        /// <summary>
        /// Add or remove labels for an existing &#39;gce&#39; role 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleLabelsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthGcpRoleNameLabelsWithHttpInfo(string name, GcpRoleLabelsRequest gcpRoleLabelsRequest = default(GcpRoleLabelsRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthGcpRoleNameLabels");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = gcpRoleLabelsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/gcp/role/{name}/labels", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthGcpRoleNameLabels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or remove labels for an existing &#39;gce&#39; role 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleLabelsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthGcpRoleNameLabelsAsync(string name, GcpRoleLabelsRequest gcpRoleLabelsRequest = default(GcpRoleLabelsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthGcpRoleNameLabelsWithHttpInfoAsync(name, gcpRoleLabelsRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add or remove labels for an existing &#39;gce&#39; role 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleLabelsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthGcpRoleNameLabelsWithHttpInfoAsync(string name, GcpRoleLabelsRequest gcpRoleLabelsRequest = default(GcpRoleLabelsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthGcpRoleNameLabels");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = gcpRoleLabelsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/gcp/role/{name}/labels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthGcpRoleNameLabels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or remove service accounts for an existing &#x60;iam&#x60; role 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleServiceAccountsRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthGcpRoleNameServiceAccounts(string name, GcpRoleServiceAccountsRequest gcpRoleServiceAccountsRequest = default(GcpRoleServiceAccountsRequest))
        {
            PostAuthGcpRoleNameServiceAccountsWithHttpInfo(name, gcpRoleServiceAccountsRequest);
        }

        /// <summary>
        /// Add or remove service accounts for an existing &#x60;iam&#x60; role 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleServiceAccountsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthGcpRoleNameServiceAccountsWithHttpInfo(string name, GcpRoleServiceAccountsRequest gcpRoleServiceAccountsRequest = default(GcpRoleServiceAccountsRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthGcpRoleNameServiceAccounts");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = gcpRoleServiceAccountsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/gcp/role/{name}/service-accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthGcpRoleNameServiceAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or remove service accounts for an existing &#x60;iam&#x60; role 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleServiceAccountsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthGcpRoleNameServiceAccountsAsync(string name, GcpRoleServiceAccountsRequest gcpRoleServiceAccountsRequest = default(GcpRoleServiceAccountsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthGcpRoleNameServiceAccountsWithHttpInfoAsync(name, gcpRoleServiceAccountsRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add or remove service accounts for an existing &#x60;iam&#x60; role 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="gcpRoleServiceAccountsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthGcpRoleNameServiceAccountsWithHttpInfoAsync(string name, GcpRoleServiceAccountsRequest gcpRoleServiceAccountsRequest = default(GcpRoleServiceAccountsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthGcpRoleNameServiceAccounts");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = gcpRoleServiceAccountsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/gcp/role/{name}/service-accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthGcpRoleNameServiceAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="githubConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthGithubConfig(GithubConfigRequest githubConfigRequest = default(GithubConfigRequest))
        {
            PostAuthGithubConfigWithHttpInfo(githubConfigRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="githubConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthGithubConfigWithHttpInfo(GithubConfigRequest githubConfigRequest = default(GithubConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = githubConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/github/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthGithubConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="githubConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthGithubConfigAsync(GithubConfigRequest githubConfigRequest = default(GithubConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthGithubConfigWithHttpInfoAsync(githubConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="githubConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthGithubConfigWithHttpInfoAsync(GithubConfigRequest githubConfigRequest = default(GithubConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = githubConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/github/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthGithubConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="githubLoginRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthGithubLogin(GithubLoginRequest githubLoginRequest = default(GithubLoginRequest))
        {
            PostAuthGithubLoginWithHttpInfo(githubLoginRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="githubLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthGithubLoginWithHttpInfo(GithubLoginRequest githubLoginRequest = default(GithubLoginRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = githubLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/github/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthGithubLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="githubLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthGithubLoginAsync(GithubLoginRequest githubLoginRequest = default(GithubLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthGithubLoginWithHttpInfoAsync(githubLoginRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="githubLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthGithubLoginWithHttpInfoAsync(GithubLoginRequest githubLoginRequest = default(GithubLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = githubLoginRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/github/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthGithubLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single teams mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <param name="githubMapTeamsRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthGithubMapTeamsKey(string key, GithubMapTeamsRequest githubMapTeamsRequest = default(GithubMapTeamsRequest))
        {
            PostAuthGithubMapTeamsKeyWithHttpInfo(key, githubMapTeamsRequest);
        }

        /// <summary>
        /// Read/write/delete a single teams mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <param name="githubMapTeamsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthGithubMapTeamsKeyWithHttpInfo(string key, GithubMapTeamsRequest githubMapTeamsRequest = default(GithubMapTeamsRequest))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->PostAuthGithubMapTeamsKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = githubMapTeamsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/github/map/teams/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthGithubMapTeamsKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single teams mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <param name="githubMapTeamsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthGithubMapTeamsKeyAsync(string key, GithubMapTeamsRequest githubMapTeamsRequest = default(GithubMapTeamsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthGithubMapTeamsKeyWithHttpInfoAsync(key, githubMapTeamsRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read/write/delete a single teams mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the teams mapping</param>
        /// <param name="githubMapTeamsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthGithubMapTeamsKeyWithHttpInfoAsync(string key, GithubMapTeamsRequest githubMapTeamsRequest = default(GithubMapTeamsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->PostAuthGithubMapTeamsKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = githubMapTeamsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/github/map/teams/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthGithubMapTeamsKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single users mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <param name="githubMapUsersRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthGithubMapUsersKey(string key, GithubMapUsersRequest githubMapUsersRequest = default(GithubMapUsersRequest))
        {
            PostAuthGithubMapUsersKeyWithHttpInfo(key, githubMapUsersRequest);
        }

        /// <summary>
        /// Read/write/delete a single users mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <param name="githubMapUsersRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthGithubMapUsersKeyWithHttpInfo(string key, GithubMapUsersRequest githubMapUsersRequest = default(GithubMapUsersRequest))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->PostAuthGithubMapUsersKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = githubMapUsersRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/github/map/users/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthGithubMapUsersKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read/write/delete a single users mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <param name="githubMapUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthGithubMapUsersKeyAsync(string key, GithubMapUsersRequest githubMapUsersRequest = default(GithubMapUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthGithubMapUsersKeyWithHttpInfoAsync(key, githubMapUsersRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read/write/delete a single users mapping 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key for the users mapping</param>
        /// <param name="githubMapUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthGithubMapUsersKeyWithHttpInfoAsync(string key, GithubMapUsersRequest githubMapUsersRequest = default(GithubMapUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'key' when calling AuthApi->PostAuthGithubMapUsersKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", VaultClient.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.Data = githubMapUsersRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/github/map/users/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthGithubMapUsersKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the JWT authentication backend. The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthJwtConfig(JwtConfigRequest jwtConfigRequest = default(JwtConfigRequest))
        {
            PostAuthJwtConfigWithHttpInfo(jwtConfigRequest);
        }

        /// <summary>
        /// Configure the JWT authentication backend. The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthJwtConfigWithHttpInfo(JwtConfigRequest jwtConfigRequest = default(JwtConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = jwtConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/jwt/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthJwtConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the JWT authentication backend. The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthJwtConfigAsync(JwtConfigRequest jwtConfigRequest = default(JwtConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthJwtConfigWithHttpInfoAsync(jwtConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the JWT authentication backend. The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthJwtConfigWithHttpInfoAsync(JwtConfigRequest jwtConfigRequest = default(JwtConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = jwtConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/jwt/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthJwtConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authenticates to Vault using a JWT (or OIDC) token. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtLoginRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthJwtLogin(JwtLoginRequest jwtLoginRequest = default(JwtLoginRequest))
        {
            PostAuthJwtLoginWithHttpInfo(jwtLoginRequest);
        }

        /// <summary>
        /// Authenticates to Vault using a JWT (or OIDC) token. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthJwtLoginWithHttpInfo(JwtLoginRequest jwtLoginRequest = default(JwtLoginRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = jwtLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/jwt/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthJwtLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authenticates to Vault using a JWT (or OIDC) token. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthJwtLoginAsync(JwtLoginRequest jwtLoginRequest = default(JwtLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthJwtLoginWithHttpInfoAsync(jwtLoginRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Authenticates to Vault using a JWT (or OIDC) token. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthJwtLoginWithHttpInfoAsync(JwtLoginRequest jwtLoginRequest = default(JwtLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = jwtLoginRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/jwt/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthJwtLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request an authorization URL to start an OIDC login flow. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtOidcAuthUrlRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthJwtOidcAuthUrl(JwtOidcAuthUrlRequest jwtOidcAuthUrlRequest = default(JwtOidcAuthUrlRequest))
        {
            PostAuthJwtOidcAuthUrlWithHttpInfo(jwtOidcAuthUrlRequest);
        }

        /// <summary>
        /// Request an authorization URL to start an OIDC login flow. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtOidcAuthUrlRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthJwtOidcAuthUrlWithHttpInfo(JwtOidcAuthUrlRequest jwtOidcAuthUrlRequest = default(JwtOidcAuthUrlRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = jwtOidcAuthUrlRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/jwt/oidc/auth_url", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthJwtOidcAuthUrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request an authorization URL to start an OIDC login flow. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtOidcAuthUrlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthJwtOidcAuthUrlAsync(JwtOidcAuthUrlRequest jwtOidcAuthUrlRequest = default(JwtOidcAuthUrlRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthJwtOidcAuthUrlWithHttpInfoAsync(jwtOidcAuthUrlRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Request an authorization URL to start an OIDC login flow. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtOidcAuthUrlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthJwtOidcAuthUrlWithHttpInfoAsync(JwtOidcAuthUrlRequest jwtOidcAuthUrlRequest = default(JwtOidcAuthUrlRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = jwtOidcAuthUrlRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/jwt/oidc/auth_url", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthJwtOidcAuthUrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Callback endpoint to handle form_posts. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtOidcCallbackRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthJwtOidcCallback(JwtOidcCallbackRequest jwtOidcCallbackRequest = default(JwtOidcCallbackRequest))
        {
            PostAuthJwtOidcCallbackWithHttpInfo(jwtOidcCallbackRequest);
        }

        /// <summary>
        /// Callback endpoint to handle form_posts. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtOidcCallbackRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthJwtOidcCallbackWithHttpInfo(JwtOidcCallbackRequest jwtOidcCallbackRequest = default(JwtOidcCallbackRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = jwtOidcCallbackRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/jwt/oidc/callback", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthJwtOidcCallback", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Callback endpoint to handle form_posts. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtOidcCallbackRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthJwtOidcCallbackAsync(JwtOidcCallbackRequest jwtOidcCallbackRequest = default(JwtOidcCallbackRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthJwtOidcCallbackWithHttpInfoAsync(jwtOidcCallbackRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Callback endpoint to handle form_posts. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jwtOidcCallbackRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthJwtOidcCallbackWithHttpInfoAsync(JwtOidcCallbackRequest jwtOidcCallbackRequest = default(JwtOidcCallbackRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = jwtOidcCallbackRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/jwt/oidc/callback", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthJwtOidcCallback", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register an role with the backend. A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="jwtRoleRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthJwtRoleName(string name, JwtRoleRequest jwtRoleRequest = default(JwtRoleRequest))
        {
            PostAuthJwtRoleNameWithHttpInfo(name, jwtRoleRequest);
        }

        /// <summary>
        /// Register an role with the backend. A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="jwtRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthJwtRoleNameWithHttpInfo(string name, JwtRoleRequest jwtRoleRequest = default(JwtRoleRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthJwtRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = jwtRoleRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/jwt/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthJwtRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register an role with the backend. A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="jwtRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthJwtRoleNameAsync(string name, JwtRoleRequest jwtRoleRequest = default(JwtRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthJwtRoleNameWithHttpInfoAsync(name, jwtRoleRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Register an role with the backend. A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="jwtRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthJwtRoleNameWithHttpInfoAsync(string name, JwtRoleRequest jwtRoleRequest = default(JwtRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthJwtRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = jwtRoleRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/jwt/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthJwtRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthKerberosConfig(KerberosConfigRequest kerberosConfigRequest = default(KerberosConfigRequest))
        {
            PostAuthKerberosConfigWithHttpInfo(kerberosConfigRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthKerberosConfigWithHttpInfo(KerberosConfigRequest kerberosConfigRequest = default(KerberosConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = kerberosConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/kerberos/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthKerberosConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthKerberosConfigAsync(KerberosConfigRequest kerberosConfigRequest = default(KerberosConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthKerberosConfigWithHttpInfoAsync(kerberosConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthKerberosConfigWithHttpInfoAsync(KerberosConfigRequest kerberosConfigRequest = default(KerberosConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = kerberosConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/kerberos/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthKerberosConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosConfigLdapRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthKerberosConfigLdap(KerberosConfigLdapRequest kerberosConfigLdapRequest = default(KerberosConfigLdapRequest))
        {
            PostAuthKerberosConfigLdapWithHttpInfo(kerberosConfigLdapRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosConfigLdapRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthKerberosConfigLdapWithHttpInfo(KerberosConfigLdapRequest kerberosConfigLdapRequest = default(KerberosConfigLdapRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = kerberosConfigLdapRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/kerberos/config/ldap", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthKerberosConfigLdap", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosConfigLdapRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthKerberosConfigLdapAsync(KerberosConfigLdapRequest kerberosConfigLdapRequest = default(KerberosConfigLdapRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthKerberosConfigLdapWithHttpInfoAsync(kerberosConfigLdapRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosConfigLdapRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthKerberosConfigLdapWithHttpInfoAsync(KerberosConfigLdapRequest kerberosConfigLdapRequest = default(KerberosConfigLdapRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = kerberosConfigLdapRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/kerberos/config/ldap", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthKerberosConfigLdap", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="kerberosGroupsRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthKerberosGroupsName(string name, KerberosGroupsRequest kerberosGroupsRequest = default(KerberosGroupsRequest))
        {
            PostAuthKerberosGroupsNameWithHttpInfo(name, kerberosGroupsRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="kerberosGroupsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthKerberosGroupsNameWithHttpInfo(string name, KerberosGroupsRequest kerberosGroupsRequest = default(KerberosGroupsRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthKerberosGroupsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = kerberosGroupsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/kerberos/groups/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthKerberosGroupsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="kerberosGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthKerberosGroupsNameAsync(string name, KerberosGroupsRequest kerberosGroupsRequest = default(KerberosGroupsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthKerberosGroupsNameWithHttpInfoAsync(name, kerberosGroupsRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="kerberosGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthKerberosGroupsNameWithHttpInfoAsync(string name, KerberosGroupsRequest kerberosGroupsRequest = default(KerberosGroupsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthKerberosGroupsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = kerberosGroupsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/kerberos/groups/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthKerberosGroupsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosLoginRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthKerberosLogin(KerberosLoginRequest kerberosLoginRequest = default(KerberosLoginRequest))
        {
            PostAuthKerberosLoginWithHttpInfo(kerberosLoginRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthKerberosLoginWithHttpInfo(KerberosLoginRequest kerberosLoginRequest = default(KerberosLoginRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = kerberosLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/kerberos/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthKerberosLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthKerberosLoginAsync(KerberosLoginRequest kerberosLoginRequest = default(KerberosLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthKerberosLoginWithHttpInfoAsync(kerberosLoginRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kerberosLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthKerberosLoginWithHttpInfoAsync(KerberosLoginRequest kerberosLoginRequest = default(KerberosLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = kerberosLoginRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/kerberos/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthKerberosLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configures the JWT Public Key and Kubernetes API information. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthKubernetesConfig(KubernetesConfigRequest kubernetesConfigRequest = default(KubernetesConfigRequest))
        {
            PostAuthKubernetesConfigWithHttpInfo(kubernetesConfigRequest);
        }

        /// <summary>
        /// Configures the JWT Public Key and Kubernetes API information. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthKubernetesConfigWithHttpInfo(KubernetesConfigRequest kubernetesConfigRequest = default(KubernetesConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = kubernetesConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/kubernetes/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthKubernetesConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configures the JWT Public Key and Kubernetes API information. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthKubernetesConfigAsync(KubernetesConfigRequest kubernetesConfigRequest = default(KubernetesConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthKubernetesConfigWithHttpInfoAsync(kubernetesConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configures the JWT Public Key and Kubernetes API information. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthKubernetesConfigWithHttpInfoAsync(KubernetesConfigRequest kubernetesConfigRequest = default(KubernetesConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = kubernetesConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/kubernetes/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthKubernetesConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authenticates Kubernetes service accounts with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesLoginRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthKubernetesLogin(KubernetesLoginRequest kubernetesLoginRequest = default(KubernetesLoginRequest))
        {
            PostAuthKubernetesLoginWithHttpInfo(kubernetesLoginRequest);
        }

        /// <summary>
        /// Authenticates Kubernetes service accounts with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthKubernetesLoginWithHttpInfo(KubernetesLoginRequest kubernetesLoginRequest = default(KubernetesLoginRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = kubernetesLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/kubernetes/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthKubernetesLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authenticates Kubernetes service accounts with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthKubernetesLoginAsync(KubernetesLoginRequest kubernetesLoginRequest = default(KubernetesLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthKubernetesLoginWithHttpInfoAsync(kubernetesLoginRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Authenticates Kubernetes service accounts with Vault. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kubernetesLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthKubernetesLoginWithHttpInfoAsync(KubernetesLoginRequest kubernetesLoginRequest = default(KubernetesLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = kubernetesLoginRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/kubernetes/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthKubernetesLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="kubernetesRoleRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthKubernetesRoleName(string name, KubernetesRoleRequest kubernetesRoleRequest = default(KubernetesRoleRequest))
        {
            PostAuthKubernetesRoleNameWithHttpInfo(name, kubernetesRoleRequest);
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="kubernetesRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthKubernetesRoleNameWithHttpInfo(string name, KubernetesRoleRequest kubernetesRoleRequest = default(KubernetesRoleRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthKubernetesRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = kubernetesRoleRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/kubernetes/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthKubernetesRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="kubernetesRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthKubernetesRoleNameAsync(string name, KubernetesRoleRequest kubernetesRoleRequest = default(KubernetesRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthKubernetesRoleNameWithHttpInfoAsync(name, kubernetesRoleRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Register an role with the backend. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="kubernetesRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthKubernetesRoleNameWithHttpInfoAsync(string name, KubernetesRoleRequest kubernetesRoleRequest = default(KubernetesRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthKubernetesRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = kubernetesRoleRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/kubernetes/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthKubernetesRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the LDAP server to connect to, along with its options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ldapConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthLdapConfig(LdapConfigRequest ldapConfigRequest = default(LdapConfigRequest))
        {
            PostAuthLdapConfigWithHttpInfo(ldapConfigRequest);
        }

        /// <summary>
        /// Configure the LDAP server to connect to, along with its options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ldapConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthLdapConfigWithHttpInfo(LdapConfigRequest ldapConfigRequest = default(LdapConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = ldapConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/ldap/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthLdapConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the LDAP server to connect to, along with its options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ldapConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthLdapConfigAsync(LdapConfigRequest ldapConfigRequest = default(LdapConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthLdapConfigWithHttpInfoAsync(ldapConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the LDAP server to connect to, along with its options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ldapConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthLdapConfigWithHttpInfoAsync(LdapConfigRequest ldapConfigRequest = default(LdapConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = ldapConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/ldap/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthLdapConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="ldapGroupsRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthLdapGroupsName(string name, LdapGroupsRequest ldapGroupsRequest = default(LdapGroupsRequest))
        {
            PostAuthLdapGroupsNameWithHttpInfo(name, ldapGroupsRequest);
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="ldapGroupsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthLdapGroupsNameWithHttpInfo(string name, LdapGroupsRequest ldapGroupsRequest = default(LdapGroupsRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthLdapGroupsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = ldapGroupsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/ldap/groups/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthLdapGroupsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="ldapGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthLdapGroupsNameAsync(string name, LdapGroupsRequest ldapGroupsRequest = default(LdapGroupsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthLdapGroupsNameWithHttpInfoAsync(name, ldapGroupsRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP group.</param>
        /// <param name="ldapGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthLdapGroupsNameWithHttpInfoAsync(string name, LdapGroupsRequest ldapGroupsRequest = default(LdapGroupsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthLdapGroupsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = ldapGroupsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/ldap/groups/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthLdapGroupsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">DN (distinguished name) to be used for login.</param>
        /// <param name="ldapLoginRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthLdapLoginUsername(string username, LdapLoginRequest ldapLoginRequest = default(LdapLoginRequest))
        {
            PostAuthLdapLoginUsernameWithHttpInfo(username, ldapLoginRequest);
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">DN (distinguished name) to be used for login.</param>
        /// <param name="ldapLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthLdapLoginUsernameWithHttpInfo(string username, LdapLoginRequest ldapLoginRequest = default(LdapLoginRequest))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'username' when calling AuthApi->PostAuthLdapLoginUsername");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", VaultClient.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = ldapLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/ldap/login/{username}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthLdapLoginUsername", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">DN (distinguished name) to be used for login.</param>
        /// <param name="ldapLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthLdapLoginUsernameAsync(string username, LdapLoginRequest ldapLoginRequest = default(LdapLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthLdapLoginUsernameWithHttpInfoAsync(username, ldapLoginRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">DN (distinguished name) to be used for login.</param>
        /// <param name="ldapLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthLdapLoginUsernameWithHttpInfoAsync(string username, LdapLoginRequest ldapLoginRequest = default(LdapLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'username' when calling AuthApi->PostAuthLdapLoginUsername");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", VaultClient.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = ldapLoginRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/ldap/login/{username}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthLdapLoginUsername", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <param name="ldapUsersRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthLdapUsersName(string name, LdapUsersRequest ldapUsersRequest = default(LdapUsersRequest))
        {
            PostAuthLdapUsersNameWithHttpInfo(name, ldapUsersRequest);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <param name="ldapUsersRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthLdapUsersNameWithHttpInfo(string name, LdapUsersRequest ldapUsersRequest = default(LdapUsersRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthLdapUsersName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = ldapUsersRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/ldap/users/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthLdapUsersName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <param name="ldapUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthLdapUsersNameAsync(string name, LdapUsersRequest ldapUsersRequest = default(LdapUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthLdapUsersNameWithHttpInfoAsync(name, ldapUsersRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the LDAP user.</param>
        /// <param name="ldapUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthLdapUsersNameWithHttpInfoAsync(string name, LdapUsersRequest ldapUsersRequest = default(LdapUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthLdapUsersName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = ldapUsersRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/ldap/users/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthLdapUsersName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ociConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthOciConfig(OciConfigRequest ociConfigRequest = default(OciConfigRequest))
        {
            PostAuthOciConfigWithHttpInfo(ociConfigRequest);
        }

        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ociConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthOciConfigWithHttpInfo(OciConfigRequest ociConfigRequest = default(OciConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = ociConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/oci/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOciConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ociConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthOciConfigAsync(OciConfigRequest ociConfigRequest = default(OciConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthOciConfigWithHttpInfoAsync(ociConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manages the configuration for the Vault Auth Plugin. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ociConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthOciConfigWithHttpInfoAsync(OciConfigRequest ociConfigRequest = default(OciConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = ociConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/oci/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOciConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authenticates to Vault using OCI credentials 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="ociLoginRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthOciLoginRole(string role, OciLoginRequest ociLoginRequest = default(OciLoginRequest))
        {
            PostAuthOciLoginRoleWithHttpInfo(role, ociLoginRequest);
        }

        /// <summary>
        /// Authenticates to Vault using OCI credentials 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="ociLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthOciLoginRoleWithHttpInfo(string role, OciLoginRequest ociLoginRequest = default(OciLoginRequest))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->PostAuthOciLoginRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = ociLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/oci/login/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOciLoginRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authenticates to Vault using OCI credentials 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="ociLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthOciLoginRoleAsync(string role, OciLoginRequest ociLoginRequest = default(OciLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthOciLoginRoleWithHttpInfoAsync(role, ociLoginRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Authenticates to Vault using OCI credentials 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="ociLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthOciLoginRoleWithHttpInfoAsync(string role, OciLoginRequest ociLoginRequest = default(OciLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->PostAuthOciLoginRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = ociLoginRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/oci/login/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOciLoginRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="ociRoleRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthOciRoleRole(string role, OciRoleRequest ociRoleRequest = default(OciRoleRequest))
        {
            PostAuthOciRoleRoleWithHttpInfo(role, ociRoleRequest);
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="ociRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthOciRoleRoleWithHttpInfo(string role, OciRoleRequest ociRoleRequest = default(OciRoleRequest))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->PostAuthOciRoleRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = ociRoleRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/oci/role/{role}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOciRoleRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="ociRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthOciRoleRoleAsync(string role, OciRoleRequest ociRoleRequest = default(OciRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthOciRoleRoleWithHttpInfoAsync(role, ociRoleRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a role and associate policies to it. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">Name of the role.</param>
        /// <param name="ociRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthOciRoleRoleWithHttpInfoAsync(string role, OciRoleRequest ociRoleRequest = default(OciRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'role' when calling AuthApi->PostAuthOciRoleRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role", VaultClient.Client.ClientUtils.ParameterToString(role)); // path parameter
            localVarRequestOptions.Data = ociRoleRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/oci/role/{role}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOciRoleRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the JWT authentication backend. The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthOidcConfig(OidcConfigRequest oidcConfigRequest = default(OidcConfigRequest))
        {
            PostAuthOidcConfigWithHttpInfo(oidcConfigRequest);
        }

        /// <summary>
        /// Configure the JWT authentication backend. The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthOidcConfigWithHttpInfo(OidcConfigRequest oidcConfigRequest = default(OidcConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = oidcConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/oidc/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOidcConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the JWT authentication backend. The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthOidcConfigAsync(OidcConfigRequest oidcConfigRequest = default(OidcConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthOidcConfigWithHttpInfoAsync(oidcConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the JWT authentication backend. The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthOidcConfigWithHttpInfoAsync(OidcConfigRequest oidcConfigRequest = default(OidcConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = oidcConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/oidc/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOidcConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authenticates to Vault using a JWT (or OIDC) token. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcLoginRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthOidcLogin(OidcLoginRequest oidcLoginRequest = default(OidcLoginRequest))
        {
            PostAuthOidcLoginWithHttpInfo(oidcLoginRequest);
        }

        /// <summary>
        /// Authenticates to Vault using a JWT (or OIDC) token. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthOidcLoginWithHttpInfo(OidcLoginRequest oidcLoginRequest = default(OidcLoginRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = oidcLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/oidc/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOidcLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authenticates to Vault using a JWT (or OIDC) token. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthOidcLoginAsync(OidcLoginRequest oidcLoginRequest = default(OidcLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthOidcLoginWithHttpInfoAsync(oidcLoginRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Authenticates to Vault using a JWT (or OIDC) token. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthOidcLoginWithHttpInfoAsync(OidcLoginRequest oidcLoginRequest = default(OidcLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = oidcLoginRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/oidc/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOidcLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request an authorization URL to start an OIDC login flow. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcOidcAuthUrlRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthOidcOidcAuthUrl(OidcOidcAuthUrlRequest oidcOidcAuthUrlRequest = default(OidcOidcAuthUrlRequest))
        {
            PostAuthOidcOidcAuthUrlWithHttpInfo(oidcOidcAuthUrlRequest);
        }

        /// <summary>
        /// Request an authorization URL to start an OIDC login flow. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcOidcAuthUrlRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthOidcOidcAuthUrlWithHttpInfo(OidcOidcAuthUrlRequest oidcOidcAuthUrlRequest = default(OidcOidcAuthUrlRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = oidcOidcAuthUrlRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/oidc/oidc/auth_url", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOidcOidcAuthUrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request an authorization URL to start an OIDC login flow. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcOidcAuthUrlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthOidcOidcAuthUrlAsync(OidcOidcAuthUrlRequest oidcOidcAuthUrlRequest = default(OidcOidcAuthUrlRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthOidcOidcAuthUrlWithHttpInfoAsync(oidcOidcAuthUrlRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Request an authorization URL to start an OIDC login flow. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcOidcAuthUrlRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthOidcOidcAuthUrlWithHttpInfoAsync(OidcOidcAuthUrlRequest oidcOidcAuthUrlRequest = default(OidcOidcAuthUrlRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = oidcOidcAuthUrlRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/oidc/oidc/auth_url", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOidcOidcAuthUrl", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Callback endpoint to handle form_posts. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcOidcCallbackRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthOidcOidcCallback(OidcOidcCallbackRequest oidcOidcCallbackRequest = default(OidcOidcCallbackRequest))
        {
            PostAuthOidcOidcCallbackWithHttpInfo(oidcOidcCallbackRequest);
        }

        /// <summary>
        /// Callback endpoint to handle form_posts. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcOidcCallbackRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthOidcOidcCallbackWithHttpInfo(OidcOidcCallbackRequest oidcOidcCallbackRequest = default(OidcOidcCallbackRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = oidcOidcCallbackRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/oidc/oidc/callback", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOidcOidcCallback", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Callback endpoint to handle form_posts. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcOidcCallbackRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthOidcOidcCallbackAsync(OidcOidcCallbackRequest oidcOidcCallbackRequest = default(OidcOidcCallbackRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthOidcOidcCallbackWithHttpInfoAsync(oidcOidcCallbackRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Callback endpoint to handle form_posts. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oidcOidcCallbackRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthOidcOidcCallbackWithHttpInfoAsync(OidcOidcCallbackRequest oidcOidcCallbackRequest = default(OidcOidcCallbackRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = oidcOidcCallbackRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/oidc/oidc/callback", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOidcOidcCallback", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register an role with the backend. A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="oidcRoleRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthOidcRoleName(string name, OidcRoleRequest oidcRoleRequest = default(OidcRoleRequest))
        {
            PostAuthOidcRoleNameWithHttpInfo(name, oidcRoleRequest);
        }

        /// <summary>
        /// Register an role with the backend. A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="oidcRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthOidcRoleNameWithHttpInfo(string name, OidcRoleRequest oidcRoleRequest = default(OidcRoleRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthOidcRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = oidcRoleRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/oidc/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOidcRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register an role with the backend. A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="oidcRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthOidcRoleNameAsync(string name, OidcRoleRequest oidcRoleRequest = default(OidcRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthOidcRoleNameWithHttpInfoAsync(name, oidcRoleRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Register an role with the backend. A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role.</param>
        /// <param name="oidcRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthOidcRoleNameWithHttpInfoAsync(string name, OidcRoleRequest oidcRoleRequest = default(OidcRoleRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthOidcRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = oidcRoleRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/oidc/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOidcRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint allows you to configure the Okta and its configuration options.  The Okta organization are the characters at the front of the URL for Okta. Example https://ORG.okta.com 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oktaConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthOktaConfig(OktaConfigRequest oktaConfigRequest = default(OktaConfigRequest))
        {
            PostAuthOktaConfigWithHttpInfo(oktaConfigRequest);
        }

        /// <summary>
        /// This endpoint allows you to configure the Okta and its configuration options.  The Okta organization are the characters at the front of the URL for Okta. Example https://ORG.okta.com 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oktaConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthOktaConfigWithHttpInfo(OktaConfigRequest oktaConfigRequest = default(OktaConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = oktaConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/okta/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOktaConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint allows you to configure the Okta and its configuration options.  The Okta organization are the characters at the front of the URL for Okta. Example https://ORG.okta.com 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oktaConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthOktaConfigAsync(OktaConfigRequest oktaConfigRequest = default(OktaConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthOktaConfigWithHttpInfoAsync(oktaConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This endpoint allows you to configure the Okta and its configuration options.  The Okta organization are the characters at the front of the URL for Okta. Example https://ORG.okta.com 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oktaConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthOktaConfigWithHttpInfoAsync(OktaConfigRequest oktaConfigRequest = default(OktaConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = oktaConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/okta/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOktaConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <param name="oktaGroupsRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthOktaGroupsName(string name, OktaGroupsRequest oktaGroupsRequest = default(OktaGroupsRequest))
        {
            PostAuthOktaGroupsNameWithHttpInfo(name, oktaGroupsRequest);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <param name="oktaGroupsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthOktaGroupsNameWithHttpInfo(string name, OktaGroupsRequest oktaGroupsRequest = default(OktaGroupsRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthOktaGroupsName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = oktaGroupsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/okta/groups/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOktaGroupsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <param name="oktaGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthOktaGroupsNameAsync(string name, OktaGroupsRequest oktaGroupsRequest = default(OktaGroupsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthOktaGroupsNameWithHttpInfoAsync(name, oktaGroupsRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the Okta group.</param>
        /// <param name="oktaGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthOktaGroupsNameWithHttpInfoAsync(string name, OktaGroupsRequest oktaGroupsRequest = default(OktaGroupsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthOktaGroupsName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = oktaGroupsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/okta/groups/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOktaGroupsName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to be used for login.</param>
        /// <param name="oktaLoginRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthOktaLoginUsername(string username, OktaLoginRequest oktaLoginRequest = default(OktaLoginRequest))
        {
            PostAuthOktaLoginUsernameWithHttpInfo(username, oktaLoginRequest);
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to be used for login.</param>
        /// <param name="oktaLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthOktaLoginUsernameWithHttpInfo(string username, OktaLoginRequest oktaLoginRequest = default(OktaLoginRequest))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'username' when calling AuthApi->PostAuthOktaLoginUsername");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", VaultClient.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = oktaLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/okta/login/{username}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOktaLoginUsername", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to be used for login.</param>
        /// <param name="oktaLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthOktaLoginUsernameAsync(string username, OktaLoginRequest oktaLoginRequest = default(OktaLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthOktaLoginUsernameWithHttpInfoAsync(username, oktaLoginRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to be used for login.</param>
        /// <param name="oktaLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthOktaLoginUsernameWithHttpInfoAsync(string username, OktaLoginRequest oktaLoginRequest = default(OktaLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'username' when calling AuthApi->PostAuthOktaLoginUsername");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", VaultClient.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = oktaLoginRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/okta/login/{username}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOktaLoginUsername", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <param name="oktaUsersRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthOktaUsersName(string name, OktaUsersRequest oktaUsersRequest = default(OktaUsersRequest))
        {
            PostAuthOktaUsersNameWithHttpInfo(name, oktaUsersRequest);
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <param name="oktaUsersRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthOktaUsersNameWithHttpInfo(string name, OktaUsersRequest oktaUsersRequest = default(OktaUsersRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthOktaUsersName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = oktaUsersRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/okta/users/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOktaUsersName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <param name="oktaUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthOktaUsersNameAsync(string name, OktaUsersRequest oktaUsersRequest = default(OktaUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthOktaUsersNameWithHttpInfoAsync(name, oktaUsersRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage additional groups for users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the user.</param>
        /// <param name="oktaUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthOktaUsersNameWithHttpInfoAsync(string name, OktaUsersRequest oktaUsersRequest = default(OktaUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthOktaUsersName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = oktaUsersRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/okta/users/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthOktaUsersName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the RADIUS server to connect to, along with its options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radiusConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthRadiusConfig(RadiusConfigRequest radiusConfigRequest = default(RadiusConfigRequest))
        {
            PostAuthRadiusConfigWithHttpInfo(radiusConfigRequest);
        }

        /// <summary>
        /// Configure the RADIUS server to connect to, along with its options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radiusConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthRadiusConfigWithHttpInfo(RadiusConfigRequest radiusConfigRequest = default(RadiusConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = radiusConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/radius/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthRadiusConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Configure the RADIUS server to connect to, along with its options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radiusConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthRadiusConfigAsync(RadiusConfigRequest radiusConfigRequest = default(RadiusConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthRadiusConfigWithHttpInfoAsync(radiusConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Configure the RADIUS server to connect to, along with its options. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radiusConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthRadiusConfigWithHttpInfoAsync(RadiusConfigRequest radiusConfigRequest = default(RadiusConfigRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = radiusConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/radius/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthRadiusConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radiusLoginRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthRadiusLogin(RadiusLoginRequest radiusLoginRequest = default(RadiusLoginRequest))
        {
            PostAuthRadiusLoginWithHttpInfo(radiusLoginRequest);
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radiusLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthRadiusLoginWithHttpInfo(RadiusLoginRequest radiusLoginRequest = default(RadiusLoginRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = radiusLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/radius/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthRadiusLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radiusLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthRadiusLoginAsync(RadiusLoginRequest radiusLoginRequest = default(RadiusLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthRadiusLoginWithHttpInfoAsync(radiusLoginRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radiusLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthRadiusLoginWithHttpInfoAsync(RadiusLoginRequest radiusLoginRequest = default(RadiusLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = radiusLoginRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/radius/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthRadiusLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlusername">Username to be used for login. (URL parameter)</param>
        /// <param name="radiusLoginRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthRadiusLoginUrlusername(string urlusername, RadiusLoginRequest radiusLoginRequest = default(RadiusLoginRequest))
        {
            PostAuthRadiusLoginUrlusernameWithHttpInfo(urlusername, radiusLoginRequest);
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlusername">Username to be used for login. (URL parameter)</param>
        /// <param name="radiusLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthRadiusLoginUrlusernameWithHttpInfo(string urlusername, RadiusLoginRequest radiusLoginRequest = default(RadiusLoginRequest))
        {
            // verify the required parameter 'urlusername' is set
            if (urlusername == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'urlusername' when calling AuthApi->PostAuthRadiusLoginUrlusername");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("urlusername", VaultClient.Client.ClientUtils.ParameterToString(urlusername)); // path parameter
            localVarRequestOptions.Data = radiusLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/radius/login/{urlusername}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthRadiusLoginUrlusername", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlusername">Username to be used for login. (URL parameter)</param>
        /// <param name="radiusLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthRadiusLoginUrlusernameAsync(string urlusername, RadiusLoginRequest radiusLoginRequest = default(RadiusLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthRadiusLoginUrlusernameWithHttpInfoAsync(urlusername, radiusLoginRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlusername">Username to be used for login. (URL parameter)</param>
        /// <param name="radiusLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthRadiusLoginUrlusernameWithHttpInfoAsync(string urlusername, RadiusLoginRequest radiusLoginRequest = default(RadiusLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'urlusername' is set
            if (urlusername == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'urlusername' when calling AuthApi->PostAuthRadiusLoginUrlusername");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("urlusername", VaultClient.Client.ClientUtils.ParameterToString(urlusername)); // path parameter
            localVarRequestOptions.Data = radiusLoginRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/radius/login/{urlusername}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthRadiusLoginUrlusername", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <param name="radiusUsersRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthRadiusUsersName(string name, RadiusUsersRequest radiusUsersRequest = default(RadiusUsersRequest))
        {
            PostAuthRadiusUsersNameWithHttpInfo(name, radiusUsersRequest);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <param name="radiusUsersRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthRadiusUsersNameWithHttpInfo(string name, RadiusUsersRequest radiusUsersRequest = default(RadiusUsersRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthRadiusUsersName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = radiusUsersRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/radius/users/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthRadiusUsersName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <param name="radiusUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthRadiusUsersNameAsync(string name, RadiusUsersRequest radiusUsersRequest = default(RadiusUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthRadiusUsersNameWithHttpInfoAsync(name, radiusUsersRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the RADIUS user.</param>
        /// <param name="radiusUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthRadiusUsersNameWithHttpInfoAsync(string name, RadiusUsersRequest radiusUsersRequest = default(RadiusUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling AuthApi->PostAuthRadiusUsersName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = radiusUsersRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/radius/users/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthRadiusUsersName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// The token create path is used to create new tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void PostAuthTokenCreate()
        {
            PostAuthTokenCreateWithHttpInfo();
        }

        /// <summary>
        /// The token create path is used to create new tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthTokenCreateWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/token/create", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// The token create path is used to create new tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthTokenCreateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthTokenCreateWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// The token create path is used to create new tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthTokenCreateWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/token/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// The token create path is used to create new orphan tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void PostAuthTokenCreateOrphan()
        {
            PostAuthTokenCreateOrphanWithHttpInfo();
        }

        /// <summary>
        /// The token create path is used to create new orphan tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthTokenCreateOrphanWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/token/create-orphan", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenCreateOrphan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// The token create path is used to create new orphan tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthTokenCreateOrphanAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthTokenCreateOrphanWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// The token create path is used to create new orphan tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthTokenCreateOrphanWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/token/create-orphan", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenCreateOrphan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This token create path is used to create new tokens adhering to the given role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <returns></returns>
        public void PostAuthTokenCreateRoleName(string roleName)
        {
            PostAuthTokenCreateRoleNameWithHttpInfo(roleName);
        }

        /// <summary>
        /// This token create path is used to create new tokens adhering to the given role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthTokenCreateRoleNameWithHttpInfo(string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthTokenCreateRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/token/create/{role_name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenCreateRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This token create path is used to create new tokens adhering to the given role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthTokenCreateRoleNameAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthTokenCreateRoleNameWithHttpInfoAsync(roleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This token create path is used to create new tokens adhering to the given role. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthTokenCreateRoleNameWithHttpInfoAsync(string roleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthTokenCreateRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/token/create/{role_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenCreateRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will lookup a token and its properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthTokenLookup(TokenLookupRequest tokenLookupRequest = default(TokenLookupRequest))
        {
            PostAuthTokenLookupWithHttpInfo(tokenLookupRequest);
        }

        /// <summary>
        /// This endpoint will lookup a token and its properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthTokenLookupWithHttpInfo(TokenLookupRequest tokenLookupRequest = default(TokenLookupRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenLookupRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/token/lookup", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenLookup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will lookup a token and its properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthTokenLookupAsync(TokenLookupRequest tokenLookupRequest = default(TokenLookupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthTokenLookupWithHttpInfoAsync(tokenLookupRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This endpoint will lookup a token and its properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthTokenLookupWithHttpInfoAsync(TokenLookupRequest tokenLookupRequest = default(TokenLookupRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenLookupRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/token/lookup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenLookup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will lookup a token associated with the given accessor and its properties. Response will not contain the token ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupAccessorRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthTokenLookupAccessor(TokenLookupAccessorRequest tokenLookupAccessorRequest = default(TokenLookupAccessorRequest))
        {
            PostAuthTokenLookupAccessorWithHttpInfo(tokenLookupAccessorRequest);
        }

        /// <summary>
        /// This endpoint will lookup a token associated with the given accessor and its properties. Response will not contain the token ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupAccessorRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthTokenLookupAccessorWithHttpInfo(TokenLookupAccessorRequest tokenLookupAccessorRequest = default(TokenLookupAccessorRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenLookupAccessorRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/token/lookup-accessor", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenLookupAccessor", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will lookup a token associated with the given accessor and its properties. Response will not contain the token ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupAccessorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthTokenLookupAccessorAsync(TokenLookupAccessorRequest tokenLookupAccessorRequest = default(TokenLookupAccessorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthTokenLookupAccessorWithHttpInfoAsync(tokenLookupAccessorRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This endpoint will lookup a token associated with the given accessor and its properties. Response will not contain the token ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupAccessorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthTokenLookupAccessorWithHttpInfoAsync(TokenLookupAccessorRequest tokenLookupAccessorRequest = default(TokenLookupAccessorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenLookupAccessorRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/token/lookup-accessor", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenLookupAccessor", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will lookup a token and its properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupSelfRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthTokenLookupSelf(TokenLookupSelfRequest tokenLookupSelfRequest = default(TokenLookupSelfRequest))
        {
            PostAuthTokenLookupSelfWithHttpInfo(tokenLookupSelfRequest);
        }

        /// <summary>
        /// This endpoint will lookup a token and its properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupSelfRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthTokenLookupSelfWithHttpInfo(TokenLookupSelfRequest tokenLookupSelfRequest = default(TokenLookupSelfRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenLookupSelfRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/token/lookup-self", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenLookupSelf", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will lookup a token and its properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupSelfRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthTokenLookupSelfAsync(TokenLookupSelfRequest tokenLookupSelfRequest = default(TokenLookupSelfRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthTokenLookupSelfWithHttpInfoAsync(tokenLookupSelfRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This endpoint will lookup a token and its properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenLookupSelfRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthTokenLookupSelfWithHttpInfoAsync(TokenLookupSelfRequest tokenLookupSelfRequest = default(TokenLookupSelfRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenLookupSelfRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/token/lookup-self", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenLookupSelf", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will renew the given token and prevent expiration. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthTokenRenew(TokenRenewRequest tokenRenewRequest = default(TokenRenewRequest))
        {
            PostAuthTokenRenewWithHttpInfo(tokenRenewRequest);
        }

        /// <summary>
        /// This endpoint will renew the given token and prevent expiration. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthTokenRenewWithHttpInfo(TokenRenewRequest tokenRenewRequest = default(TokenRenewRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenRenewRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/token/renew", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenRenew", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will renew the given token and prevent expiration. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthTokenRenewAsync(TokenRenewRequest tokenRenewRequest = default(TokenRenewRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthTokenRenewWithHttpInfoAsync(tokenRenewRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This endpoint will renew the given token and prevent expiration. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthTokenRenewWithHttpInfoAsync(TokenRenewRequest tokenRenewRequest = default(TokenRenewRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenRenewRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/token/renew", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenRenew", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will renew a token associated with the given accessor and its properties. Response will not contain the token ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewAccessorRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthTokenRenewAccessor(TokenRenewAccessorRequest tokenRenewAccessorRequest = default(TokenRenewAccessorRequest))
        {
            PostAuthTokenRenewAccessorWithHttpInfo(tokenRenewAccessorRequest);
        }

        /// <summary>
        /// This endpoint will renew a token associated with the given accessor and its properties. Response will not contain the token ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewAccessorRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthTokenRenewAccessorWithHttpInfo(TokenRenewAccessorRequest tokenRenewAccessorRequest = default(TokenRenewAccessorRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenRenewAccessorRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/token/renew-accessor", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenRenewAccessor", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will renew a token associated with the given accessor and its properties. Response will not contain the token ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewAccessorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthTokenRenewAccessorAsync(TokenRenewAccessorRequest tokenRenewAccessorRequest = default(TokenRenewAccessorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthTokenRenewAccessorWithHttpInfoAsync(tokenRenewAccessorRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This endpoint will renew a token associated with the given accessor and its properties. Response will not contain the token ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewAccessorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthTokenRenewAccessorWithHttpInfoAsync(TokenRenewAccessorRequest tokenRenewAccessorRequest = default(TokenRenewAccessorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenRenewAccessorRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/token/renew-accessor", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenRenewAccessor", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will renew the token used to call it and prevent expiration. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewSelfRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthTokenRenewSelf(TokenRenewSelfRequest tokenRenewSelfRequest = default(TokenRenewSelfRequest))
        {
            PostAuthTokenRenewSelfWithHttpInfo(tokenRenewSelfRequest);
        }

        /// <summary>
        /// This endpoint will renew the token used to call it and prevent expiration. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewSelfRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthTokenRenewSelfWithHttpInfo(TokenRenewSelfRequest tokenRenewSelfRequest = default(TokenRenewSelfRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenRenewSelfRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/token/renew-self", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenRenewSelf", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will renew the token used to call it and prevent expiration. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewSelfRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthTokenRenewSelfAsync(TokenRenewSelfRequest tokenRenewSelfRequest = default(TokenRenewSelfRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthTokenRenewSelfWithHttpInfoAsync(tokenRenewSelfRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This endpoint will renew the token used to call it and prevent expiration. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRenewSelfRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthTokenRenewSelfWithHttpInfoAsync(TokenRenewSelfRequest tokenRenewSelfRequest = default(TokenRenewSelfRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenRenewSelfRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/token/renew-self", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenRenewSelf", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will delete the given token and all of its child tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthTokenRevoke(TokenRevokeRequest tokenRevokeRequest = default(TokenRevokeRequest))
        {
            PostAuthTokenRevokeWithHttpInfo(tokenRevokeRequest);
        }

        /// <summary>
        /// This endpoint will delete the given token and all of its child tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthTokenRevokeWithHttpInfo(TokenRevokeRequest tokenRevokeRequest = default(TokenRevokeRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenRevokeRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/token/revoke", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenRevoke", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will delete the given token and all of its child tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthTokenRevokeAsync(TokenRevokeRequest tokenRevokeRequest = default(TokenRevokeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthTokenRevokeWithHttpInfoAsync(tokenRevokeRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This endpoint will delete the given token and all of its child tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthTokenRevokeWithHttpInfoAsync(TokenRevokeRequest tokenRevokeRequest = default(TokenRevokeRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenRevokeRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/token/revoke", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenRevoke", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will delete the token associated with the accessor and all of its child tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeAccessorRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthTokenRevokeAccessor(TokenRevokeAccessorRequest tokenRevokeAccessorRequest = default(TokenRevokeAccessorRequest))
        {
            PostAuthTokenRevokeAccessorWithHttpInfo(tokenRevokeAccessorRequest);
        }

        /// <summary>
        /// This endpoint will delete the token associated with the accessor and all of its child tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeAccessorRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthTokenRevokeAccessorWithHttpInfo(TokenRevokeAccessorRequest tokenRevokeAccessorRequest = default(TokenRevokeAccessorRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenRevokeAccessorRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/token/revoke-accessor", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenRevokeAccessor", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will delete the token associated with the accessor and all of its child tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeAccessorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthTokenRevokeAccessorAsync(TokenRevokeAccessorRequest tokenRevokeAccessorRequest = default(TokenRevokeAccessorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthTokenRevokeAccessorWithHttpInfoAsync(tokenRevokeAccessorRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This endpoint will delete the token associated with the accessor and all of its child tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeAccessorRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthTokenRevokeAccessorWithHttpInfoAsync(TokenRevokeAccessorRequest tokenRevokeAccessorRequest = default(TokenRevokeAccessorRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenRevokeAccessorRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/token/revoke-accessor", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenRevokeAccessor", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will delete the token and orphan its child tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeOrphanRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthTokenRevokeOrphan(TokenRevokeOrphanRequest tokenRevokeOrphanRequest = default(TokenRevokeOrphanRequest))
        {
            PostAuthTokenRevokeOrphanWithHttpInfo(tokenRevokeOrphanRequest);
        }

        /// <summary>
        /// This endpoint will delete the token and orphan its child tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeOrphanRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthTokenRevokeOrphanWithHttpInfo(TokenRevokeOrphanRequest tokenRevokeOrphanRequest = default(TokenRevokeOrphanRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenRevokeOrphanRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/token/revoke-orphan", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenRevokeOrphan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will delete the token and orphan its child tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeOrphanRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthTokenRevokeOrphanAsync(TokenRevokeOrphanRequest tokenRevokeOrphanRequest = default(TokenRevokeOrphanRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthTokenRevokeOrphanWithHttpInfoAsync(tokenRevokeOrphanRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This endpoint will delete the token and orphan its child tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRevokeOrphanRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthTokenRevokeOrphanWithHttpInfoAsync(TokenRevokeOrphanRequest tokenRevokeOrphanRequest = default(TokenRevokeOrphanRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tokenRevokeOrphanRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/token/revoke-orphan", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenRevokeOrphan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will delete the token used to call it and all of its child tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void PostAuthTokenRevokeSelf()
        {
            PostAuthTokenRevokeSelfWithHttpInfo();
        }

        /// <summary>
        /// This endpoint will delete the token used to call it and all of its child tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthTokenRevokeSelfWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/token/revoke-self", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenRevokeSelf", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint will delete the token used to call it and all of its child tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthTokenRevokeSelfAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthTokenRevokeSelfWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This endpoint will delete the token used to call it and all of its child tokens. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthTokenRevokeSelfWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/token/revoke-self", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenRevokeSelf", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <param name="tokenRolesRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthTokenRolesRoleName(string roleName, TokenRolesRequest tokenRolesRequest = default(TokenRolesRequest))
        {
            PostAuthTokenRolesRoleNameWithHttpInfo(roleName, tokenRolesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <param name="tokenRolesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthTokenRolesRoleNameWithHttpInfo(string roleName, TokenRolesRequest tokenRolesRequest = default(TokenRolesRequest))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthTokenRolesRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = tokenRolesRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/token/roles/{role_name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenRolesRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <param name="tokenRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthTokenRolesRoleNameAsync(string roleName, TokenRolesRequest tokenRolesRequest = default(TokenRolesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthTokenRolesRoleNameWithHttpInfoAsync(roleName, tokenRolesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Name of the role</param>
        /// <param name="tokenRolesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthTokenRolesRoleNameWithHttpInfoAsync(string roleName, TokenRolesRequest tokenRolesRequest = default(TokenRolesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'roleName' when calling AuthApi->PostAuthTokenRolesRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("role_name", VaultClient.Client.ClientUtils.ParameterToString(roleName)); // path parameter
            localVarRequestOptions.Data = tokenRolesRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/token/roles/{role_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenRolesRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint performs cleanup tasks that can be run if certain error conditions have occurred. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void PostAuthTokenTidy()
        {
            PostAuthTokenTidyWithHttpInfo();
        }

        /// <summary>
        /// This endpoint performs cleanup tasks that can be run if certain error conditions have occurred. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthTokenTidyWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/token/tidy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenTidy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint performs cleanup tasks that can be run if certain error conditions have occurred. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthTokenTidyAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthTokenTidyWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This endpoint performs cleanup tasks that can be run if certain error conditions have occurred. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthTokenTidyWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/token/tidy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthTokenTidy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the user.</param>
        /// <param name="userpassLoginRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthUserpassLoginUsername(string username, UserpassLoginRequest userpassLoginRequest = default(UserpassLoginRequest))
        {
            PostAuthUserpassLoginUsernameWithHttpInfo(username, userpassLoginRequest);
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the user.</param>
        /// <param name="userpassLoginRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthUserpassLoginUsernameWithHttpInfo(string username, UserpassLoginRequest userpassLoginRequest = default(UserpassLoginRequest))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'username' when calling AuthApi->PostAuthUserpassLoginUsername");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", VaultClient.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = userpassLoginRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/userpass/login/{username}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthUserpassLoginUsername", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the user.</param>
        /// <param name="userpassLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthUserpassLoginUsernameAsync(string username, UserpassLoginRequest userpassLoginRequest = default(UserpassLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthUserpassLoginUsernameWithHttpInfoAsync(username, userpassLoginRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Log in with a username and password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username of the user.</param>
        /// <param name="userpassLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthUserpassLoginUsernameWithHttpInfoAsync(string username, UserpassLoginRequest userpassLoginRequest = default(UserpassLoginRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'username' when calling AuthApi->PostAuthUserpassLoginUsername");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", VaultClient.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = userpassLoginRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/userpass/login/{username}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthUserpassLoginUsername", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthUserpassUsersUsername(string username, UserpassUsersRequest userpassUsersRequest = default(UserpassUsersRequest))
        {
            PostAuthUserpassUsersUsernameWithHttpInfo(username, userpassUsersRequest);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthUserpassUsersUsernameWithHttpInfo(string username, UserpassUsersRequest userpassUsersRequest = default(UserpassUsersRequest))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'username' when calling AuthApi->PostAuthUserpassUsersUsername");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", VaultClient.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = userpassUsersRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/userpass/users/{username}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthUserpassUsersUsername", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthUserpassUsersUsernameAsync(string username, UserpassUsersRequest userpassUsersRequest = default(UserpassUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthUserpassUsersUsernameWithHttpInfoAsync(username, userpassUsersRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Manage users allowed to authenticate. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthUserpassUsersUsernameWithHttpInfoAsync(string username, UserpassUsersRequest userpassUsersRequest = default(UserpassUsersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'username' when calling AuthApi->PostAuthUserpassUsersUsername");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", VaultClient.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = userpassUsersRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/userpass/users/{username}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthUserpassUsersUsername", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset user&#39;s password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersPasswordRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthUserpassUsersUsernamePassword(string username, UserpassUsersPasswordRequest userpassUsersPasswordRequest = default(UserpassUsersPasswordRequest))
        {
            PostAuthUserpassUsersUsernamePasswordWithHttpInfo(username, userpassUsersPasswordRequest);
        }

        /// <summary>
        /// Reset user&#39;s password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersPasswordRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthUserpassUsersUsernamePasswordWithHttpInfo(string username, UserpassUsersPasswordRequest userpassUsersPasswordRequest = default(UserpassUsersPasswordRequest))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'username' when calling AuthApi->PostAuthUserpassUsersUsernamePassword");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", VaultClient.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = userpassUsersPasswordRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/userpass/users/{username}/password", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthUserpassUsersUsernamePassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset user&#39;s password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthUserpassUsersUsernamePasswordAsync(string username, UserpassUsersPasswordRequest userpassUsersPasswordRequest = default(UserpassUsersPasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthUserpassUsersUsernamePasswordWithHttpInfoAsync(username, userpassUsersPasswordRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Reset user&#39;s password. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthUserpassUsersUsernamePasswordWithHttpInfoAsync(string username, UserpassUsersPasswordRequest userpassUsersPasswordRequest = default(UserpassUsersPasswordRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'username' when calling AuthApi->PostAuthUserpassUsersUsernamePassword");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", VaultClient.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = userpassUsersPasswordRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/userpass/users/{username}/password", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthUserpassUsersUsernamePassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the policies associated with the username. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersPoliciesRequest"> (optional)</param>
        /// <returns></returns>
        public void PostAuthUserpassUsersUsernamePolicies(string username, UserpassUsersPoliciesRequest userpassUsersPoliciesRequest = default(UserpassUsersPoliciesRequest))
        {
            PostAuthUserpassUsersUsernamePoliciesWithHttpInfo(username, userpassUsersPoliciesRequest);
        }

        /// <summary>
        /// Update the policies associated with the username. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersPoliciesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostAuthUserpassUsersUsernamePoliciesWithHttpInfo(string username, UserpassUsersPoliciesRequest userpassUsersPoliciesRequest = default(UserpassUsersPoliciesRequest))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'username' when calling AuthApi->PostAuthUserpassUsersUsernamePolicies");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", VaultClient.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = userpassUsersPoliciesRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/auth/userpass/users/{username}/policies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthUserpassUsersUsernamePolicies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the policies associated with the username. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersPoliciesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostAuthUserpassUsersUsernamePoliciesAsync(string username, UserpassUsersPoliciesRequest userpassUsersPoliciesRequest = default(UserpassUsersPoliciesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostAuthUserpassUsersUsernamePoliciesWithHttpInfoAsync(username, userpassUsersPoliciesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update the policies associated with the username. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username for this user.</param>
        /// <param name="userpassUsersPoliciesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VaultClient.Client.ApiResponse<Object>> PostAuthUserpassUsersUsernamePoliciesWithHttpInfoAsync(string username, UserpassUsersPoliciesRequest userpassUsersPoliciesRequest = default(UserpassUsersPoliciesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'username' when calling AuthApi->PostAuthUserpassUsersUsernamePolicies");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("username", VaultClient.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = userpassUsersPoliciesRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/auth/userpass/users/{username}/policies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAuthUserpassUsersUsernamePolicies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
