/*
 * HashiCorp Vault API
 *
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.12.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using VaultClient.Client;
using VaultClient.Model;

namespace VaultClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentitySync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityAliasIdId(string id);
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityEntityAliasIdId(string id);
        /// <summary>
        /// Update, read or delete an entity using entity ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityEntityIdId(string id);
        /// <summary>
        /// Update, read or delete an entity using entity name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityEntityNameName(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityGroupAliasIdId(string id);
        /// <summary>
        /// Update or delete an existing group using its ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityGroupIdId(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityGroupNameName(string name);
        /// <summary>
        /// Delete a login enforcement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityMfaLoginEnforcementName(string name);
        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityMfaMethodDuoMethodId(string methodId);
        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityMfaMethodOktaMethodId(string methodId);
        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityMfaMethodPingidMethodId(string methodId);
        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityMfaMethodTotpMethodId(string methodId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityOidcAssignmentName(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityOidcClientName(string name);
        /// <summary>
        /// CRUD operations for OIDC keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityOidcKeyName(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityOidcProviderName(string name);
        /// <summary>
        /// CRUD operations on OIDC Roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityOidcRoleName(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityOidcScopeName(string name);
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityPersonaIdId(string id);
        /// <summary>
        /// List all the alias IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityAliasId(string list);
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityAliasIdId(string id);
        /// <summary>
        /// List all the alias IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityEntityAliasId(string list);
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityEntityAliasIdId(string id);
        /// <summary>
        /// List all the entity IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityEntityId(string list);
        /// <summary>
        /// Update, read or delete an entity using entity ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityEntityIdId(string id);
        /// <summary>
        /// List all the entity names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityEntityName(string list);
        /// <summary>
        /// Update, read or delete an entity using entity name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityEntityNameName(string name);
        /// <summary>
        /// List all the group alias IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityGroupAliasId(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityGroupAliasIdId(string id);
        /// <summary>
        /// List all the group IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityGroupId(string list);
        /// <summary>
        /// Update or delete an existing group using its ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityGroupIdId(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityGroupName(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityGroupNameName(string name);
        /// <summary>
        /// List login enforcements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaLoginEnforcement(string list);
        /// <summary>
        /// Read the current login enforcement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaLoginEnforcementName(string name);
        /// <summary>
        /// List MFA method configurations for all MFA methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaMethod(string list);
        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaMethodDuo(string list);
        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaMethodDuoMethodId(string methodId);
        /// <summary>
        /// Read the current configuration for the given ID regardless of the MFA method type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaMethodMethodId(string methodId);
        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaMethodOkta(string list);
        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaMethodOktaMethodId(string methodId);
        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaMethodPingid(string list);
        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaMethodPingidMethodId(string methodId);
        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaMethodTotp(string list);
        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaMethodTotpMethodId(string methodId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcAssignment(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcAssignmentName(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcClient(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcClientName(string name);
        /// <summary>
        /// OIDC configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcConfig();
        /// <summary>
        /// List OIDC keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcKey(string list);
        /// <summary>
        /// CRUD operations for OIDC keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcKeyName(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcProvider(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcProviderName(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcProviderNameAuthorize(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcProviderNameUserinfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcProviderNameWellKnownKeys(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcProviderNameWellKnownOpenidConfiguration(string name);
        /// <summary>
        /// List configured OIDC roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcRole(string list);
        /// <summary>
        /// CRUD operations on OIDC Roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcRoleName(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcScope(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcScopeName(string name);
        /// <summary>
        /// Generate an OIDC token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcTokenName(string name);
        /// <summary>
        /// Retrieve public keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcWellKnownKeys();
        /// <summary>
        /// Query OIDC configurations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcWellKnownOpenidConfiguration();
        /// <summary>
        /// List all the alias IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityPersonaId(string list);
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityPersonaIdId(string id);
        /// <summary>
        /// Create a new alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityAliasRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityAlias(IdentityAliasRequest identityAliasRequest = default(IdentityAliasRequest));
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityAliasIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityAliasIdId(string id, IdentityAliasIdRequest identityAliasIdRequest = default(IdentityAliasIdRequest));
        /// <summary>
        /// Create a new entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityEntity(IdentityEntityRequest identityEntityRequest = default(IdentityEntityRequest));
        /// <summary>
        /// Create a new alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityAliasRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityEntityAlias(IdentityEntityAliasRequest identityEntityAliasRequest = default(IdentityEntityAliasRequest));
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityEntityAliasIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityEntityAliasIdId(string id, IdentityEntityAliasIdRequest identityEntityAliasIdRequest = default(IdentityEntityAliasIdRequest));
        /// <summary>
        /// Delete all of the entities provided
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityBatchDeleteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityEntityBatchDelete(IdentityEntityBatchDeleteRequest identityEntityBatchDeleteRequest = default(IdentityEntityBatchDeleteRequest));
        /// <summary>
        /// Update, read or delete an entity using entity ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="identityEntityIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityEntityIdId(string id, IdentityEntityIdRequest identityEntityIdRequest = default(IdentityEntityIdRequest));
        /// <summary>
        /// Merge two or more entities together
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityMergeRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityEntityMerge(IdentityEntityMergeRequest identityEntityMergeRequest = default(IdentityEntityMergeRequest));
        /// <summary>
        /// Update, read or delete an entity using entity name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="identityEntityNameRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityEntityNameName(string name, IdentityEntityNameRequest identityEntityNameRequest = default(IdentityEntityNameRequest));
        /// <summary>
        /// Create a new group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityGroup(IdentityGroupRequest identityGroupRequest = default(IdentityGroupRequest));
        /// <summary>
        /// Creates a new group alias, or updates an existing one.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupAliasRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityGroupAlias(IdentityGroupAliasRequest identityGroupAliasRequest = default(IdentityGroupAliasRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="identityGroupAliasIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityGroupAliasIdId(string id, IdentityGroupAliasIdRequest identityGroupAliasIdRequest = default(IdentityGroupAliasIdRequest));
        /// <summary>
        /// Update or delete an existing group using its ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="identityGroupIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityGroupIdId(string id, IdentityGroupIdRequest identityGroupIdRequest = default(IdentityGroupIdRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="identityGroupNameRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityGroupNameName(string name, IdentityGroupNameRequest identityGroupNameRequest = default(IdentityGroupNameRequest));
        /// <summary>
        /// Query entities based on various properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupEntityRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityLookupEntity(IdentityLookupEntityRequest identityLookupEntityRequest = default(IdentityLookupEntityRequest));
        /// <summary>
        /// Query groups based on various properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityLookupGroup(IdentityLookupGroupRequest identityLookupGroupRequest = default(IdentityLookupGroupRequest));
        /// <summary>
        /// Create or update a login enforcement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="identityMfaLoginEnforcementRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityMfaLoginEnforcementName(string name, IdentityMfaLoginEnforcementRequest identityMfaLoginEnforcementRequest = default(IdentityMfaLoginEnforcementRequest));
        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodDuoRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityMfaMethodDuoMethodId(string methodId, IdentityMfaMethodDuoRequest identityMfaMethodDuoRequest = default(IdentityMfaMethodDuoRequest));
        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodOktaRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityMfaMethodOktaMethodId(string methodId, IdentityMfaMethodOktaRequest identityMfaMethodOktaRequest = default(IdentityMfaMethodOktaRequest));
        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodPingidRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityMfaMethodPingidMethodId(string methodId, IdentityMfaMethodPingidRequest identityMfaMethodPingidRequest = default(IdentityMfaMethodPingidRequest));
        /// <summary>
        /// Destroys a TOTP secret for the given MFA method ID on the given entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminDestroyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityMfaMethodTotpAdminDestroy(IdentityMfaMethodTotpAdminDestroyRequest identityMfaMethodTotpAdminDestroyRequest = default(IdentityMfaMethodTotpAdminDestroyRequest));
        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminGenerateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityMfaMethodTotpAdminGenerate(IdentityMfaMethodTotpAdminGenerateRequest identityMfaMethodTotpAdminGenerateRequest = default(IdentityMfaMethodTotpAdminGenerateRequest));
        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpGenerateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityMfaMethodTotpGenerate(IdentityMfaMethodTotpGenerateRequest identityMfaMethodTotpGenerateRequest = default(IdentityMfaMethodTotpGenerateRequest));
        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodTotpRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityMfaMethodTotpMethodId(string methodId, IdentityMfaMethodTotpRequest identityMfaMethodTotpRequest = default(IdentityMfaMethodTotpRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="identityOidcAssignmentRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcAssignmentName(string name, IdentityOidcAssignmentRequest identityOidcAssignmentRequest = default(IdentityOidcAssignmentRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="identityOidcClientRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcClientName(string name, IdentityOidcClientRequest identityOidcClientRequest = default(IdentityOidcClientRequest));
        /// <summary>
        /// OIDC configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcConfig(IdentityOidcConfigRequest identityOidcConfigRequest = default(IdentityOidcConfigRequest));
        /// <summary>
        /// Verify the authenticity of an OIDC token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcIntrospectRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcIntrospect(IdentityOidcIntrospectRequest identityOidcIntrospectRequest = default(IdentityOidcIntrospectRequest));
        /// <summary>
        /// CRUD operations for OIDC keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcKeyName(string name, IdentityOidcKeyRequest identityOidcKeyRequest = default(IdentityOidcKeyRequest));
        /// <summary>
        /// Rotate a named OIDC key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRotateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcKeyNameRotate(string name, IdentityOidcKeyRotateRequest identityOidcKeyRotateRequest = default(IdentityOidcKeyRotateRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcProviderName(string name, IdentityOidcProviderRequest identityOidcProviderRequest = default(IdentityOidcProviderRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderAuthorizeRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcProviderNameAuthorize(string name, IdentityOidcProviderAuthorizeRequest identityOidcProviderAuthorizeRequest = default(IdentityOidcProviderAuthorizeRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderTokenRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcProviderNameToken(string name, IdentityOidcProviderTokenRequest identityOidcProviderTokenRequest = default(IdentityOidcProviderTokenRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcProviderNameUserinfo(string name);
        /// <summary>
        /// CRUD operations on OIDC Roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="identityOidcRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcRoleName(string name, IdentityOidcRoleRequest identityOidcRoleRequest = default(IdentityOidcRoleRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="identityOidcScopeRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcScopeName(string name, IdentityOidcScopeRequest identityOidcScopeRequest = default(IdentityOidcScopeRequest));
        /// <summary>
        /// Create a new alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityPersonaRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityPersona(IdentityPersonaRequest identityPersonaRequest = default(IdentityPersonaRequest));
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="identityPersonaIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityPersonaIdId(string id, IdentityPersonaIdRequest identityPersonaIdRequest = default(IdentityPersonaIdRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentityAsync : IApiAccessor
    {
        #region Asynchronous Operations
   
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityEntityAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update, read or delete an entity using entity ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityEntityIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update, read or delete an entity using entity name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityEntityNameNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityGroupAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update or delete an existing group using its ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityGroupIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityGroupNameNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Delete a login enforcement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityMfaLoginEnforcementNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityMfaMethodDuoMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityMfaMethodOktaMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityMfaMethodPingidMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityMfaMethodTotpMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityOidcAssignmentNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityOidcClientNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// CRUD operations for OIDC keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityOidcKeyNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityOidcProviderNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// CRUD operations on OIDC Roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityOidcRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityOidcScopeNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityPersonaIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// List all the alias IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityAliasIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// List all the alias IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityEntityAliasIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityEntityAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// List all the entity IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityEntityIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update, read or delete an entity using entity ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityEntityIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// List all the entity names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityEntityNameAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update, read or delete an entity using entity name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityEntityNameNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// List all the group alias IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityGroupAliasIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityGroupAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// List all the group IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityGroupIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update or delete an existing group using its ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityGroupIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityGroupNameAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityGroupNameNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// List login enforcements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaLoginEnforcementAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Read the current login enforcement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaLoginEnforcementNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// List MFA method configurations for all MFA methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaMethodAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaMethodDuoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaMethodDuoMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Read the current configuration for the given ID regardless of the MFA method type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaMethodMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaMethodOktaAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaMethodOktaMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaMethodPingidAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaMethodPingidMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaMethodTotpAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaMethodTotpMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcAssignmentAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcAssignmentNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcClientAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcClientNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// OIDC configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcConfigAsync(CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// List OIDC keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcKeyAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// CRUD operations for OIDC keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcKeyNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcProviderAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcProviderNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcProviderNameAuthorizeAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcProviderNameUserinfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcProviderNameWellKnownKeysAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcProviderNameWellKnownOpenidConfigurationAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// List configured OIDC roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcRoleAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// CRUD operations on OIDC Roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcScopeAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcScopeNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Generate an OIDC token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcTokenNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Retrieve public keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcWellKnownKeysAsync(CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Query OIDC configurations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcWellKnownOpenidConfigurationAsync(CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// List all the alias IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityPersonaIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityPersonaIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Create a new alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityAliasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityAliasAsync(IdentityAliasRequest identityAliasRequest = default(IdentityAliasRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityAliasIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityAliasIdIdAsync(string id, IdentityAliasIdRequest identityAliasIdRequest = default(IdentityAliasIdRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Create a new entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityEntityAsync(IdentityEntityRequest identityEntityRequest = default(IdentityEntityRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Create a new alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityAliasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityEntityAliasAsync(IdentityEntityAliasRequest identityEntityAliasRequest = default(IdentityEntityAliasRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityEntityAliasIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityEntityAliasIdIdAsync(string id, IdentityEntityAliasIdRequest identityEntityAliasIdRequest = default(IdentityEntityAliasIdRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Delete all of the entities provided
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityBatchDeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityEntityBatchDeleteAsync(IdentityEntityBatchDeleteRequest identityEntityBatchDeleteRequest = default(IdentityEntityBatchDeleteRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update, read or delete an entity using entity ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="identityEntityIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityEntityIdIdAsync(string id, IdentityEntityIdRequest identityEntityIdRequest = default(IdentityEntityIdRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Merge two or more entities together
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityMergeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityEntityMergeAsync(IdentityEntityMergeRequest identityEntityMergeRequest = default(IdentityEntityMergeRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update, read or delete an entity using entity name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="identityEntityNameRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityEntityNameNameAsync(string name, IdentityEntityNameRequest identityEntityNameRequest = default(IdentityEntityNameRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Create a new group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityGroupAsync(IdentityGroupRequest identityGroupRequest = default(IdentityGroupRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Creates a new group alias, or updates an existing one.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupAliasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityGroupAliasAsync(IdentityGroupAliasRequest identityGroupAliasRequest = default(IdentityGroupAliasRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="identityGroupAliasIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityGroupAliasIdIdAsync(string id, IdentityGroupAliasIdRequest identityGroupAliasIdRequest = default(IdentityGroupAliasIdRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update or delete an existing group using its ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="identityGroupIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityGroupIdIdAsync(string id, IdentityGroupIdRequest identityGroupIdRequest = default(IdentityGroupIdRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="identityGroupNameRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityGroupNameNameAsync(string name, IdentityGroupNameRequest identityGroupNameRequest = default(IdentityGroupNameRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Query entities based on various properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupEntityRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityLookupEntityAsync(IdentityLookupEntityRequest identityLookupEntityRequest = default(IdentityLookupEntityRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Query groups based on various properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityLookupGroupAsync(IdentityLookupGroupRequest identityLookupGroupRequest = default(IdentityLookupGroupRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Create or update a login enforcement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="identityMfaLoginEnforcementRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityMfaLoginEnforcementNameAsync(string name, IdentityMfaLoginEnforcementRequest identityMfaLoginEnforcementRequest = default(IdentityMfaLoginEnforcementRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodDuoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityMfaMethodDuoMethodIdAsync(string methodId, IdentityMfaMethodDuoRequest identityMfaMethodDuoRequest = default(IdentityMfaMethodDuoRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodOktaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityMfaMethodOktaMethodIdAsync(string methodId, IdentityMfaMethodOktaRequest identityMfaMethodOktaRequest = default(IdentityMfaMethodOktaRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodPingidRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityMfaMethodPingidMethodIdAsync(string methodId, IdentityMfaMethodPingidRequest identityMfaMethodPingidRequest = default(IdentityMfaMethodPingidRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Destroys a TOTP secret for the given MFA method ID on the given entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminDestroyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityMfaMethodTotpAdminDestroyAsync(IdentityMfaMethodTotpAdminDestroyRequest identityMfaMethodTotpAdminDestroyRequest = default(IdentityMfaMethodTotpAdminDestroyRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminGenerateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityMfaMethodTotpAdminGenerateAsync(IdentityMfaMethodTotpAdminGenerateRequest identityMfaMethodTotpAdminGenerateRequest = default(IdentityMfaMethodTotpAdminGenerateRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpGenerateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityMfaMethodTotpGenerateAsync(IdentityMfaMethodTotpGenerateRequest identityMfaMethodTotpGenerateRequest = default(IdentityMfaMethodTotpGenerateRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodTotpRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityMfaMethodTotpMethodIdAsync(string methodId, IdentityMfaMethodTotpRequest identityMfaMethodTotpRequest = default(IdentityMfaMethodTotpRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="identityOidcAssignmentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcAssignmentNameAsync(string name, IdentityOidcAssignmentRequest identityOidcAssignmentRequest = default(IdentityOidcAssignmentRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="identityOidcClientRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcClientNameAsync(string name, IdentityOidcClientRequest identityOidcClientRequest = default(IdentityOidcClientRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// OIDC configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcConfigAsync(IdentityOidcConfigRequest identityOidcConfigRequest = default(IdentityOidcConfigRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Verify the authenticity of an OIDC token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcIntrospectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcIntrospectAsync(IdentityOidcIntrospectRequest identityOidcIntrospectRequest = default(IdentityOidcIntrospectRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// CRUD operations for OIDC keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcKeyNameAsync(string name, IdentityOidcKeyRequest identityOidcKeyRequest = default(IdentityOidcKeyRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Rotate a named OIDC key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRotateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcKeyNameRotateAsync(string name, IdentityOidcKeyRotateRequest identityOidcKeyRotateRequest = default(IdentityOidcKeyRotateRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcProviderNameAsync(string name, IdentityOidcProviderRequest identityOidcProviderRequest = default(IdentityOidcProviderRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderAuthorizeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcProviderNameAuthorizeAsync(string name, IdentityOidcProviderAuthorizeRequest identityOidcProviderAuthorizeRequest = default(IdentityOidcProviderAuthorizeRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderTokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcProviderNameTokenAsync(string name, IdentityOidcProviderTokenRequest identityOidcProviderTokenRequest = default(IdentityOidcProviderTokenRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcProviderNameUserinfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// CRUD operations on OIDC Roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="identityOidcRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcRoleNameAsync(string name, IdentityOidcRoleRequest identityOidcRoleRequest = default(IdentityOidcRoleRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="identityOidcScopeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcScopeNameAsync(string name, IdentityOidcScopeRequest identityOidcScopeRequest = default(IdentityOidcScopeRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Create a new alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityPersonaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityPersonaAsync(IdentityPersonaRequest identityPersonaRequest = default(IdentityPersonaRequest), CancellationToken cancellationToken = default(CancellationToken));
   
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="identityPersonaIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityPersonaIdIdAsync(string id, IdentityPersonaIdRequest identityPersonaIdRequest = default(IdentityPersonaIdRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentity : IIdentitySync, IIdentityAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Identity : IDisposable, IIdentity
    {
        private VaultClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Identity"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public Identity() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Identity"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public Identity(string basePath)
        {
            this.Configuration = VaultClient.Client.Configuration.MergeConfigurations(
                VaultClient.Client.GlobalConfiguration.Instance,
                new VaultClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new VaultClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = VaultClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Identity"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public Identity(VaultClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VaultClient.Client.Configuration.MergeConfigurations(
                VaultClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new VaultClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = VaultClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Identity"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public Identity(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Identity"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public Identity(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = VaultClient.Client.Configuration.MergeConfigurations(
                VaultClient.Client.GlobalConfiguration.Instance,
                new VaultClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new VaultClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = VaultClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Identity"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public Identity(HttpClient client, VaultClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = VaultClient.Client.Configuration.MergeConfigurations(
                VaultClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new VaultClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = VaultClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Identity"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public Identity(VaultClient.Client.ISynchronousClient client, VaultClient.Client.IAsynchronousClient asyncClient, VaultClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VaultClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public VaultClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VaultClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VaultClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VaultClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VaultClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityAliasIdId(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->DeleteIdentityAliasIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/alias/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->DeleteIdentityAliasIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/alias/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityEntityAliasIdId(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->DeleteIdentityEntityAliasIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/entity-alias/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityEntityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityEntityAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->DeleteIdentityEntityAliasIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/entity-alias/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityEntityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an entity using entity ID 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityEntityIdId(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->DeleteIdentityEntityIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/entity/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityEntityIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an entity using entity ID 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityEntityIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->DeleteIdentityEntityIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/entity/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityEntityIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an entity using entity name 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityEntityNameName(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->DeleteIdentityEntityNameName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/entity/name/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityEntityNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an entity using entity name 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityEntityNameNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->DeleteIdentityEntityNameName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/entity/name/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityEntityNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityGroupAliasIdId(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->DeleteIdentityGroupAliasIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/group-alias/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityGroupAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityGroupAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->DeleteIdentityGroupAliasIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/group-alias/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityGroupAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update or delete an existing group using its ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityGroupIdId(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->DeleteIdentityGroupIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/group/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityGroupIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update or delete an existing group using its ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityGroupIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->DeleteIdentityGroupIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/group/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityGroupIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityGroupNameName(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->DeleteIdentityGroupNameName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/group/name/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityGroupNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityGroupNameNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->DeleteIdentityGroupNameName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/group/name/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityGroupNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Delete a login enforcement 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityMfaLoginEnforcementName(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->DeleteIdentityMfaLoginEnforcementName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/mfa/login-enforcement/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityMfaLoginEnforcementName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Delete a login enforcement 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityMfaLoginEnforcementNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->DeleteIdentityMfaLoginEnforcementName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/mfa/login-enforcement/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityMfaLoginEnforcementName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityMfaMethodDuoMethodId(string methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->DeleteIdentityMfaMethodDuoMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/mfa/method/duo/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityMfaMethodDuoMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityMfaMethodDuoMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->DeleteIdentityMfaMethodDuoMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/mfa/method/duo/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityMfaMethodDuoMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityMfaMethodOktaMethodId(string methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->DeleteIdentityMfaMethodOktaMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/mfa/method/okta/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityMfaMethodOktaMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityMfaMethodOktaMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->DeleteIdentityMfaMethodOktaMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/mfa/method/okta/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityMfaMethodOktaMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityMfaMethodPingidMethodId(string methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->DeleteIdentityMfaMethodPingidMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/mfa/method/pingid/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityMfaMethodPingidMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityMfaMethodPingidMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->DeleteIdentityMfaMethodPingidMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/mfa/method/pingid/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityMfaMethodPingidMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityMfaMethodTotpMethodId(string methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->DeleteIdentityMfaMethodTotpMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/mfa/method/totp/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityMfaMethodTotpMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityMfaMethodTotpMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->DeleteIdentityMfaMethodTotpMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/mfa/method/totp/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityMfaMethodTotpMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityOidcAssignmentName(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->DeleteIdentityOidcAssignmentName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/oidc/assignment/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcAssignmentName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityOidcAssignmentNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->DeleteIdentityOidcAssignmentName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/oidc/assignment/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcAssignmentName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityOidcClientName(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->DeleteIdentityOidcClientName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/oidc/client/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcClientName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityOidcClientNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->DeleteIdentityOidcClientName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/oidc/client/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcClientName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// CRUD operations for OIDC keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityOidcKeyName(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->DeleteIdentityOidcKeyName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/oidc/key/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcKeyName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// CRUD operations for OIDC keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityOidcKeyNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->DeleteIdentityOidcKeyName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/oidc/key/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcKeyName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityOidcProviderName(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->DeleteIdentityOidcProviderName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/oidc/provider/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcProviderName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityOidcProviderNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->DeleteIdentityOidcProviderName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/oidc/provider/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcProviderName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// CRUD operations on OIDC Roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityOidcRoleName(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->DeleteIdentityOidcRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/oidc/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// CRUD operations on OIDC Roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityOidcRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->DeleteIdentityOidcRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/oidc/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityOidcScopeName(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->DeleteIdentityOidcScopeName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/oidc/scope/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcScopeName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityOidcScopeNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->DeleteIdentityOidcScopeName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/oidc/scope/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcScopeName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityPersonaIdId(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->DeleteIdentityPersonaIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/persona/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityPersonaIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityPersonaIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->DeleteIdentityPersonaIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/persona/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityPersonaIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List all the alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityAliasId(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityAliasId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/alias/id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityAliasId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List all the alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityAliasIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityAliasId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/alias/id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityAliasId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityAliasIdId(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->GetIdentityAliasIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/alias/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->GetIdentityAliasIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/alias/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List all the alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityEntityAliasId(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityEntityAliasId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/entity-alias/id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityAliasId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List all the alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityEntityAliasIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityEntityAliasId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/entity-alias/id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityAliasId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityEntityAliasIdId(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->GetIdentityEntityAliasIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/entity-alias/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityEntityAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->GetIdentityEntityAliasIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/entity-alias/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List all the entity IDs 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityEntityId(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityEntityId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/entity/id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List all the entity IDs 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityEntityIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityEntityId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/entity/id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an entity using entity ID 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityEntityIdId(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->GetIdentityEntityIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/entity/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an entity using entity ID 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityEntityIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->GetIdentityEntityIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/entity/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List all the entity names 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityEntityName(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityEntityName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/entity/name", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List all the entity names 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityEntityNameAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityEntityName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/entity/name", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an entity using entity name 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityEntityNameName(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityEntityNameName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/entity/name/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an entity using entity name 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityEntityNameNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityEntityNameName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/entity/name/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List all the group alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityGroupAliasId(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityGroupAliasId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/group-alias/id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupAliasId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List all the group alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityGroupAliasIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityGroupAliasId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/group-alias/id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupAliasId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityGroupAliasIdId(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->GetIdentityGroupAliasIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/group-alias/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityGroupAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->GetIdentityGroupAliasIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/group-alias/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List all the group IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityGroupId(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityGroupId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/group/id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List all the group IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityGroupIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityGroupId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/group/id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update or delete an existing group using its ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityGroupIdId(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->GetIdentityGroupIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/group/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update or delete an existing group using its ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityGroupIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->GetIdentityGroupIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/group/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityGroupName(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityGroupName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/group/name", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityGroupNameAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityGroupName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/group/name", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityGroupNameName(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityGroupNameName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/group/name/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityGroupNameNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityGroupNameName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/group/name/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List login enforcements 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaLoginEnforcement(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityMfaLoginEnforcement");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/login-enforcement", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaLoginEnforcement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List login enforcements 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaLoginEnforcementAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityMfaLoginEnforcement");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/login-enforcement", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaLoginEnforcement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Read the current login enforcement 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaLoginEnforcementName(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityMfaLoginEnforcementName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/login-enforcement/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaLoginEnforcementName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Read the current login enforcement 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaLoginEnforcementNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityMfaLoginEnforcementName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/login-enforcement/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaLoginEnforcementName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List MFA method configurations for all MFA methods 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaMethod(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityMfaMethod");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/method", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List MFA method configurations for all MFA methods 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaMethodAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityMfaMethod");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/method", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaMethodDuo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityMfaMethodDuo");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/method/duo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodDuo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaMethodDuoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityMfaMethodDuo");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/method/duo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodDuo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaMethodDuoMethodId(string methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->GetIdentityMfaMethodDuoMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/method/duo/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodDuoMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaMethodDuoMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->GetIdentityMfaMethodDuoMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/method/duo/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodDuoMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Read the current configuration for the given ID regardless of the MFA method type 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaMethodMethodId(string methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->GetIdentityMfaMethodMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/method/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Read the current configuration for the given ID regardless of the MFA method type 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaMethodMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->GetIdentityMfaMethodMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/method/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaMethodOkta(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityMfaMethodOkta");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/method/okta", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodOkta", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaMethodOktaAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityMfaMethodOkta");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/method/okta", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodOkta", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaMethodOktaMethodId(string methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->GetIdentityMfaMethodOktaMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/method/okta/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodOktaMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaMethodOktaMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->GetIdentityMfaMethodOktaMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/method/okta/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodOktaMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaMethodPingid(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityMfaMethodPingid");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/method/pingid", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodPingid", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaMethodPingidAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityMfaMethodPingid");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/method/pingid", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodPingid", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaMethodPingidMethodId(string methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->GetIdentityMfaMethodPingidMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/method/pingid/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodPingidMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaMethodPingidMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->GetIdentityMfaMethodPingidMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/method/pingid/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodPingidMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaMethodTotp(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityMfaMethodTotp");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/method/totp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodTotp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaMethodTotpAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityMfaMethodTotp");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/method/totp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodTotp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaMethodTotpMethodId(string methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->GetIdentityMfaMethodTotpMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/method/totp/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodTotpMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaMethodTotpMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->GetIdentityMfaMethodTotpMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/method/totp/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodTotpMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcAssignment(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityOidcAssignment");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/assignment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcAssignment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcAssignmentAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityOidcAssignment");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/assignment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcAssignment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcAssignmentName(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcAssignmentName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/assignment/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcAssignmentName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcAssignmentNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcAssignmentName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/assignment/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcAssignmentName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcClient(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityOidcClient");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/client", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcClientAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityOidcClient");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/client", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcClientName(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcClientName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/client/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcClientName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcClientNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcClientName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/client/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcClientName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// OIDC configuration 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcConfig()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// OIDC configuration 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcConfigAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List OIDC keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcKey(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityOidcKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List OIDC keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcKeyAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityOidcKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// CRUD operations for OIDC keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcKeyName(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcKeyName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/key/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcKeyName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// CRUD operations for OIDC keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcKeyNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcKeyName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/key/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcKeyName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcProvider(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityOidcProvider");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/provider", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProvider", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcProviderAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityOidcProvider");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/provider", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProvider", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcProviderName(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcProviderName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/provider/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProviderName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcProviderNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcProviderName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/provider/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProviderName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcProviderNameAuthorize(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcProviderNameAuthorize");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/provider/{name}/authorize", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProviderNameAuthorize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcProviderNameAuthorizeAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcProviderNameAuthorize");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/provider/{name}/authorize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProviderNameAuthorize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcProviderNameUserinfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcProviderNameUserinfo");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/provider/{name}/userinfo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProviderNameUserinfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcProviderNameUserinfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcProviderNameUserinfo");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/provider/{name}/userinfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProviderNameUserinfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcProviderNameWellKnownKeys(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcProviderNameWellKnownKeys");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/provider/{name}/.well-known/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProviderNameWellKnownKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcProviderNameWellKnownKeysAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcProviderNameWellKnownKeys");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/provider/{name}/.well-known/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProviderNameWellKnownKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcProviderNameWellKnownOpenidConfiguration(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcProviderNameWellKnownOpenidConfiguration");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/provider/{name}/.well-known/openid-configuration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProviderNameWellKnownOpenidConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcProviderNameWellKnownOpenidConfigurationAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcProviderNameWellKnownOpenidConfiguration");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/provider/{name}/.well-known/openid-configuration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProviderNameWellKnownOpenidConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List configured OIDC roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcRole(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityOidcRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List configured OIDC roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcRoleAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityOidcRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// CRUD operations on OIDC Roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcRoleName(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// CRUD operations on OIDC Roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcScope(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityOidcScope");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/scope", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcScope", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcScopeAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityOidcScope");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/scope", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcScope", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcScopeName(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcScopeName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/scope/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcScopeName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcScopeNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcScopeName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/scope/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcScopeName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Generate an OIDC token 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcTokenName(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcTokenName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/token/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcTokenName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Generate an OIDC token 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcTokenNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->GetIdentityOidcTokenName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/token/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcTokenName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Retrieve public keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcWellKnownKeys()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/.well-known/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcWellKnownKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Retrieve public keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcWellKnownKeysAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/.well-known/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcWellKnownKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Query OIDC configurations 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcWellKnownOpenidConfiguration()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/.well-known/openid-configuration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcWellKnownOpenidConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Query OIDC configurations 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcWellKnownOpenidConfigurationAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/.well-known/openid-configuration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcWellKnownOpenidConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List all the alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityPersonaId(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityPersonaId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/persona/id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityPersonaId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// List all the alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityPersonaIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling Identity->GetIdentityPersonaId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/persona/id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityPersonaId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityPersonaIdId(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->GetIdentityPersonaIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/persona/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityPersonaIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityPersonaIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->GetIdentityPersonaIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/persona/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityPersonaIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Create a new alias. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityAliasRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityAlias(IdentityAliasRequest identityAliasRequest = default(IdentityAliasRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityAliasRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/alias", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Create a new alias. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityAliasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityAliasAsync(IdentityAliasRequest identityAliasRequest = default(IdentityAliasRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityAliasRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/alias", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityAliasIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityAliasIdId(string id, IdentityAliasIdRequest identityAliasIdRequest = default(IdentityAliasIdRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->PostIdentityAliasIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityAliasIdRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/alias/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityAliasIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityAliasIdIdAsync(string id, IdentityAliasIdRequest identityAliasIdRequest = default(IdentityAliasIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->PostIdentityAliasIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityAliasIdRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/alias/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Create a new entity 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityEntity(IdentityEntityRequest identityEntityRequest = default(IdentityEntityRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityEntityRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/entity", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Create a new entity 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityEntityAsync(IdentityEntityRequest identityEntityRequest = default(IdentityEntityRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityEntityRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/entity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Create a new alias. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityAliasRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityEntityAlias(IdentityEntityAliasRequest identityEntityAliasRequest = default(IdentityEntityAliasRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityEntityAliasRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/entity-alias", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Create a new alias. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityAliasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityEntityAliasAsync(IdentityEntityAliasRequest identityEntityAliasRequest = default(IdentityEntityAliasRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityEntityAliasRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/entity-alias", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityEntityAliasIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityEntityAliasIdId(string id, IdentityEntityAliasIdRequest identityEntityAliasIdRequest = default(IdentityEntityAliasIdRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->PostIdentityEntityAliasIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityEntityAliasIdRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/entity-alias/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityEntityAliasIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityEntityAliasIdIdAsync(string id, IdentityEntityAliasIdRequest identityEntityAliasIdRequest = default(IdentityEntityAliasIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->PostIdentityEntityAliasIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityEntityAliasIdRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/entity-alias/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Delete all of the entities provided 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityBatchDeleteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityEntityBatchDelete(IdentityEntityBatchDeleteRequest identityEntityBatchDeleteRequest = default(IdentityEntityBatchDeleteRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityEntityBatchDeleteRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/entity/batch-delete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityBatchDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Delete all of the entities provided 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityBatchDeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityEntityBatchDeleteAsync(IdentityEntityBatchDeleteRequest identityEntityBatchDeleteRequest = default(IdentityEntityBatchDeleteRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityEntityBatchDeleteRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/entity/batch-delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityBatchDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an entity using entity ID 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="identityEntityIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityEntityIdId(string id, IdentityEntityIdRequest identityEntityIdRequest = default(IdentityEntityIdRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->PostIdentityEntityIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityEntityIdRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/entity/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an entity using entity ID 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="identityEntityIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityEntityIdIdAsync(string id, IdentityEntityIdRequest identityEntityIdRequest = default(IdentityEntityIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->PostIdentityEntityIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityEntityIdRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/entity/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Merge two or more entities together 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityMergeRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityEntityMerge(IdentityEntityMergeRequest identityEntityMergeRequest = default(IdentityEntityMergeRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityEntityMergeRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/entity/merge", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityMerge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Merge two or more entities together 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityMergeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityEntityMergeAsync(IdentityEntityMergeRequest identityEntityMergeRequest = default(IdentityEntityMergeRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityEntityMergeRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/entity/merge", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityMerge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an entity using entity name 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="identityEntityNameRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityEntityNameName(string name, IdentityEntityNameRequest identityEntityNameRequest = default(IdentityEntityNameRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityEntityNameName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityEntityNameRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/entity/name/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an entity using entity name 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="identityEntityNameRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityEntityNameNameAsync(string name, IdentityEntityNameRequest identityEntityNameRequest = default(IdentityEntityNameRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityEntityNameName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityEntityNameRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/entity/name/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Create a new group. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityGroup(IdentityGroupRequest identityGroupRequest = default(IdentityGroupRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityGroupRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/group", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Create a new group. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityGroupAsync(IdentityGroupRequest identityGroupRequest = default(IdentityGroupRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityGroupRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/group", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Creates a new group alias, or updates an existing one. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupAliasRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityGroupAlias(IdentityGroupAliasRequest identityGroupAliasRequest = default(IdentityGroupAliasRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityGroupAliasRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/group-alias", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityGroupAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Creates a new group alias, or updates an existing one. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupAliasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityGroupAliasAsync(IdentityGroupAliasRequest identityGroupAliasRequest = default(IdentityGroupAliasRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityGroupAliasRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/group-alias", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityGroupAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="identityGroupAliasIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityGroupAliasIdId(string id, IdentityGroupAliasIdRequest identityGroupAliasIdRequest = default(IdentityGroupAliasIdRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->PostIdentityGroupAliasIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityGroupAliasIdRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/group-alias/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityGroupAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="identityGroupAliasIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityGroupAliasIdIdAsync(string id, IdentityGroupAliasIdRequest identityGroupAliasIdRequest = default(IdentityGroupAliasIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->PostIdentityGroupAliasIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityGroupAliasIdRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/group-alias/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityGroupAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update or delete an existing group using its ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="identityGroupIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityGroupIdId(string id, IdentityGroupIdRequest identityGroupIdRequest = default(IdentityGroupIdRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->PostIdentityGroupIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityGroupIdRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/group/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityGroupIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update or delete an existing group using its ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="identityGroupIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityGroupIdIdAsync(string id, IdentityGroupIdRequest identityGroupIdRequest = default(IdentityGroupIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->PostIdentityGroupIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityGroupIdRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/group/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityGroupIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="identityGroupNameRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityGroupNameName(string name, IdentityGroupNameRequest identityGroupNameRequest = default(IdentityGroupNameRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityGroupNameName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityGroupNameRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/group/name/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityGroupNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="identityGroupNameRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityGroupNameNameAsync(string name, IdentityGroupNameRequest identityGroupNameRequest = default(IdentityGroupNameRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityGroupNameName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityGroupNameRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/group/name/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityGroupNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Query entities based on various properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupEntityRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityLookupEntity(IdentityLookupEntityRequest identityLookupEntityRequest = default(IdentityLookupEntityRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityLookupEntityRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/lookup/entity", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityLookupEntity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Query entities based on various properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupEntityRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityLookupEntityAsync(IdentityLookupEntityRequest identityLookupEntityRequest = default(IdentityLookupEntityRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityLookupEntityRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/lookup/entity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityLookupEntity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Query groups based on various properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityLookupGroup(IdentityLookupGroupRequest identityLookupGroupRequest = default(IdentityLookupGroupRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityLookupGroupRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/lookup/group", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityLookupGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Query groups based on various properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityLookupGroupAsync(IdentityLookupGroupRequest identityLookupGroupRequest = default(IdentityLookupGroupRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityLookupGroupRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/lookup/group", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityLookupGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Create or update a login enforcement 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="identityMfaLoginEnforcementRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityMfaLoginEnforcementName(string name, IdentityMfaLoginEnforcementRequest identityMfaLoginEnforcementRequest = default(IdentityMfaLoginEnforcementRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityMfaLoginEnforcementName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityMfaLoginEnforcementRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/mfa/login-enforcement/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaLoginEnforcementName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Create or update a login enforcement 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="identityMfaLoginEnforcementRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityMfaLoginEnforcementNameAsync(string name, IdentityMfaLoginEnforcementRequest identityMfaLoginEnforcementRequest = default(IdentityMfaLoginEnforcementRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityMfaLoginEnforcementName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityMfaLoginEnforcementRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/mfa/login-enforcement/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaLoginEnforcementName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodDuoRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityMfaMethodDuoMethodId(string methodId, IdentityMfaMethodDuoRequest identityMfaMethodDuoRequest = default(IdentityMfaMethodDuoRequest))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->PostIdentityMfaMethodDuoMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter
            localVarRequestOptions.Data = identityMfaMethodDuoRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/mfa/method/duo/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodDuoMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodDuoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityMfaMethodDuoMethodIdAsync(string methodId, IdentityMfaMethodDuoRequest identityMfaMethodDuoRequest = default(IdentityMfaMethodDuoRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->PostIdentityMfaMethodDuoMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter
            localVarRequestOptions.Data = identityMfaMethodDuoRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/mfa/method/duo/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodDuoMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodOktaRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityMfaMethodOktaMethodId(string methodId, IdentityMfaMethodOktaRequest identityMfaMethodOktaRequest = default(IdentityMfaMethodOktaRequest))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->PostIdentityMfaMethodOktaMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter
            localVarRequestOptions.Data = identityMfaMethodOktaRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/mfa/method/okta/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodOktaMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodOktaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityMfaMethodOktaMethodIdAsync(string methodId, IdentityMfaMethodOktaRequest identityMfaMethodOktaRequest = default(IdentityMfaMethodOktaRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->PostIdentityMfaMethodOktaMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter
            localVarRequestOptions.Data = identityMfaMethodOktaRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/mfa/method/okta/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodOktaMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodPingidRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityMfaMethodPingidMethodId(string methodId, IdentityMfaMethodPingidRequest identityMfaMethodPingidRequest = default(IdentityMfaMethodPingidRequest))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->PostIdentityMfaMethodPingidMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter
            localVarRequestOptions.Data = identityMfaMethodPingidRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/mfa/method/pingid/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodPingidMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodPingidRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityMfaMethodPingidMethodIdAsync(string methodId, IdentityMfaMethodPingidRequest identityMfaMethodPingidRequest = default(IdentityMfaMethodPingidRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->PostIdentityMfaMethodPingidMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter
            localVarRequestOptions.Data = identityMfaMethodPingidRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/mfa/method/pingid/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodPingidMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Destroys a TOTP secret for the given MFA method ID on the given entity 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminDestroyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityMfaMethodTotpAdminDestroy(IdentityMfaMethodTotpAdminDestroyRequest identityMfaMethodTotpAdminDestroyRequest = default(IdentityMfaMethodTotpAdminDestroyRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityMfaMethodTotpAdminDestroyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/mfa/method/totp/admin-destroy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodTotpAdminDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Destroys a TOTP secret for the given MFA method ID on the given entity 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminDestroyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityMfaMethodTotpAdminDestroyAsync(IdentityMfaMethodTotpAdminDestroyRequest identityMfaMethodTotpAdminDestroyRequest = default(IdentityMfaMethodTotpAdminDestroyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityMfaMethodTotpAdminDestroyRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/mfa/method/totp/admin-destroy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodTotpAdminDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminGenerateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityMfaMethodTotpAdminGenerate(IdentityMfaMethodTotpAdminGenerateRequest identityMfaMethodTotpAdminGenerateRequest = default(IdentityMfaMethodTotpAdminGenerateRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityMfaMethodTotpAdminGenerateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/mfa/method/totp/admin-generate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodTotpAdminGenerate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminGenerateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityMfaMethodTotpAdminGenerateAsync(IdentityMfaMethodTotpAdminGenerateRequest identityMfaMethodTotpAdminGenerateRequest = default(IdentityMfaMethodTotpAdminGenerateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityMfaMethodTotpAdminGenerateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/mfa/method/totp/admin-generate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodTotpAdminGenerate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpGenerateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityMfaMethodTotpGenerate(IdentityMfaMethodTotpGenerateRequest identityMfaMethodTotpGenerateRequest = default(IdentityMfaMethodTotpGenerateRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityMfaMethodTotpGenerateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/mfa/method/totp/generate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodTotpGenerate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpGenerateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityMfaMethodTotpGenerateAsync(IdentityMfaMethodTotpGenerateRequest identityMfaMethodTotpGenerateRequest = default(IdentityMfaMethodTotpGenerateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityMfaMethodTotpGenerateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/mfa/method/totp/generate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodTotpGenerate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodTotpRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityMfaMethodTotpMethodId(string methodId, IdentityMfaMethodTotpRequest identityMfaMethodTotpRequest = default(IdentityMfaMethodTotpRequest))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->PostIdentityMfaMethodTotpMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter
            localVarRequestOptions.Data = identityMfaMethodTotpRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/mfa/method/totp/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodTotpMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodTotpRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityMfaMethodTotpMethodIdAsync(string methodId, IdentityMfaMethodTotpRequest identityMfaMethodTotpRequest = default(IdentityMfaMethodTotpRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling Identity->PostIdentityMfaMethodTotpMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter
            localVarRequestOptions.Data = identityMfaMethodTotpRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/mfa/method/totp/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodTotpMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="identityOidcAssignmentRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcAssignmentName(string name, IdentityOidcAssignmentRequest identityOidcAssignmentRequest = default(IdentityOidcAssignmentRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityOidcAssignmentName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcAssignmentRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/assignment/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcAssignmentName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="identityOidcAssignmentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcAssignmentNameAsync(string name, IdentityOidcAssignmentRequest identityOidcAssignmentRequest = default(IdentityOidcAssignmentRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityOidcAssignmentName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcAssignmentRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/assignment/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcAssignmentName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="identityOidcClientRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcClientName(string name, IdentityOidcClientRequest identityOidcClientRequest = default(IdentityOidcClientRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityOidcClientName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcClientRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/client/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcClientName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="identityOidcClientRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcClientNameAsync(string name, IdentityOidcClientRequest identityOidcClientRequest = default(IdentityOidcClientRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityOidcClientName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcClientRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/client/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcClientName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// OIDC configuration 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcConfig(IdentityOidcConfigRequest identityOidcConfigRequest = default(IdentityOidcConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityOidcConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// OIDC configuration 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcConfigAsync(IdentityOidcConfigRequest identityOidcConfigRequest = default(IdentityOidcConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityOidcConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Verify the authenticity of an OIDC token 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcIntrospectRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcIntrospect(IdentityOidcIntrospectRequest identityOidcIntrospectRequest = default(IdentityOidcIntrospectRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityOidcIntrospectRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/introspect", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcIntrospect", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Verify the authenticity of an OIDC token 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcIntrospectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcIntrospectAsync(IdentityOidcIntrospectRequest identityOidcIntrospectRequest = default(IdentityOidcIntrospectRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityOidcIntrospectRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/introspect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcIntrospect", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// CRUD operations for OIDC keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcKeyName(string name, IdentityOidcKeyRequest identityOidcKeyRequest = default(IdentityOidcKeyRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityOidcKeyName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcKeyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/key/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcKeyName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// CRUD operations for OIDC keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcKeyNameAsync(string name, IdentityOidcKeyRequest identityOidcKeyRequest = default(IdentityOidcKeyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityOidcKeyName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcKeyRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/key/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcKeyName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Rotate a named OIDC key. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRotateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcKeyNameRotate(string name, IdentityOidcKeyRotateRequest identityOidcKeyRotateRequest = default(IdentityOidcKeyRotateRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityOidcKeyNameRotate");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcKeyRotateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/key/{name}/rotate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcKeyNameRotate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Rotate a named OIDC key. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRotateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcKeyNameRotateAsync(string name, IdentityOidcKeyRotateRequest identityOidcKeyRotateRequest = default(IdentityOidcKeyRotateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityOidcKeyNameRotate");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcKeyRotateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/key/{name}/rotate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcKeyNameRotate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcProviderName(string name, IdentityOidcProviderRequest identityOidcProviderRequest = default(IdentityOidcProviderRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityOidcProviderName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcProviderRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/provider/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcProviderName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcProviderNameAsync(string name, IdentityOidcProviderRequest identityOidcProviderRequest = default(IdentityOidcProviderRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityOidcProviderName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcProviderRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/provider/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcProviderName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderAuthorizeRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcProviderNameAuthorize(string name, IdentityOidcProviderAuthorizeRequest identityOidcProviderAuthorizeRequest = default(IdentityOidcProviderAuthorizeRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityOidcProviderNameAuthorize");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcProviderAuthorizeRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/provider/{name}/authorize", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcProviderNameAuthorize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderAuthorizeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcProviderNameAuthorizeAsync(string name, IdentityOidcProviderAuthorizeRequest identityOidcProviderAuthorizeRequest = default(IdentityOidcProviderAuthorizeRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityOidcProviderNameAuthorize");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcProviderAuthorizeRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/provider/{name}/authorize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcProviderNameAuthorize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderTokenRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcProviderNameToken(string name, IdentityOidcProviderTokenRequest identityOidcProviderTokenRequest = default(IdentityOidcProviderTokenRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityOidcProviderNameToken");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcProviderTokenRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/provider/{name}/token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcProviderNameToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderTokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcProviderNameTokenAsync(string name, IdentityOidcProviderTokenRequest identityOidcProviderTokenRequest = default(IdentityOidcProviderTokenRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityOidcProviderNameToken");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcProviderTokenRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/provider/{name}/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcProviderNameToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcProviderNameUserinfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityOidcProviderNameUserinfo");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/provider/{name}/userinfo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcProviderNameUserinfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcProviderNameUserinfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityOidcProviderNameUserinfo");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/provider/{name}/userinfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcProviderNameUserinfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// CRUD operations on OIDC Roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="identityOidcRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcRoleName(string name, IdentityOidcRoleRequest identityOidcRoleRequest = default(IdentityOidcRoleRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityOidcRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcRoleRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// CRUD operations on OIDC Roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="identityOidcRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcRoleNameAsync(string name, IdentityOidcRoleRequest identityOidcRoleRequest = default(IdentityOidcRoleRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityOidcRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcRoleRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="identityOidcScopeRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcScopeName(string name, IdentityOidcScopeRequest identityOidcScopeRequest = default(IdentityOidcScopeRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityOidcScopeName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcScopeRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/scope/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcScopeName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="identityOidcScopeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcScopeNameAsync(string name, IdentityOidcScopeRequest identityOidcScopeRequest = default(IdentityOidcScopeRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling Identity->PostIdentityOidcScopeName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcScopeRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/scope/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcScopeName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Create a new alias. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityPersonaRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityPersona(IdentityPersonaRequest identityPersonaRequest = default(IdentityPersonaRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityPersonaRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/persona", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityPersona", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Create a new alias. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityPersonaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityPersonaAsync(IdentityPersonaRequest identityPersonaRequest = default(IdentityPersonaRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityPersonaRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/persona", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityPersona", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="identityPersonaIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityPersonaIdId(string id, IdentityPersonaIdRequest identityPersonaIdRequest = default(IdentityPersonaIdRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->PostIdentityPersonaIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityPersonaIdRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/persona/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityPersonaIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }


        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="identityPersonaIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityPersonaIdIdAsync(string id, IdentityPersonaIdRequest identityPersonaIdRequest = default(IdentityPersonaIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling Identity->PostIdentityPersonaIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityPersonaIdRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/persona/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityPersonaIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
