/*
 * HashiCorp Vault API
 *
 * HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.
 *
 * The version of the OpenAPI document: 1.12.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Net.Http;
using System.Net.Mime;
using System.Threading;
using System.Threading.Tasks;
using VaultClient.Client;
using VaultClient.Model;

namespace VaultClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentityApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns></returns>
        void DeleteIdentityAliasIdId(string id);

        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityAliasIdIdWithHttpInfo(string id);
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns></returns>
        void DeleteIdentityEntityAliasIdId(string id);

        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityEntityAliasIdIdWithHttpInfo(string id);
        /// <summary>
        /// Update, read or delete an entity using entity ID
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <returns></returns>
        void DeleteIdentityEntityIdId(string id);

        /// <summary>
        /// Update, read or delete an entity using entity ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityEntityIdIdWithHttpInfo(string id);
        /// <summary>
        /// Update, read or delete an entity using entity name
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <returns></returns>
        void DeleteIdentityEntityNameName(string name);

        /// <summary>
        /// Update, read or delete an entity using entity name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityEntityNameNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <returns></returns>
        void DeleteIdentityGroupAliasIdId(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityGroupAliasIdIdWithHttpInfo(string id);
        /// <summary>
        /// Update or delete an existing group using its ID.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <returns></returns>
        void DeleteIdentityGroupIdId(string id);

        /// <summary>
        /// Update or delete an existing group using its ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityGroupIdIdWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <returns></returns>
        void DeleteIdentityGroupNameName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityGroupNameNameWithHttpInfo(string name);
        /// <summary>
        /// Delete a login enforcement
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <returns></returns>
        void DeleteIdentityMfaLoginEnforcementName(string name);

        /// <summary>
        /// Delete a login enforcement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityMfaLoginEnforcementNameWithHttpInfo(string name);
        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns></returns>
        void DeleteIdentityMfaMethodDuoMethodId(string methodId);

        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityMfaMethodDuoMethodIdWithHttpInfo(string methodId);
        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns></returns>
        void DeleteIdentityMfaMethodOktaMethodId(string methodId);

        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityMfaMethodOktaMethodIdWithHttpInfo(string methodId);
        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns></returns>
        void DeleteIdentityMfaMethodPingidMethodId(string methodId);

        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityMfaMethodPingidMethodIdWithHttpInfo(string methodId);
        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns></returns>
        void DeleteIdentityMfaMethodTotpMethodId(string methodId);

        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityMfaMethodTotpMethodIdWithHttpInfo(string methodId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <returns></returns>
        void DeleteIdentityOidcAssignmentName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityOidcAssignmentNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <returns></returns>
        void DeleteIdentityOidcClientName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityOidcClientNameWithHttpInfo(string name);
        /// <summary>
        /// CRUD operations for OIDC keys.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns></returns>
        void DeleteIdentityOidcKeyName(string name);

        /// <summary>
        /// CRUD operations for OIDC keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityOidcKeyNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns></returns>
        void DeleteIdentityOidcProviderName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityOidcProviderNameWithHttpInfo(string name);
        /// <summary>
        /// CRUD operations on OIDC Roles
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void DeleteIdentityOidcRoleName(string name);

        /// <summary>
        /// CRUD operations on OIDC Roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityOidcRoleNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <returns></returns>
        void DeleteIdentityOidcScopeName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityOidcScopeNameWithHttpInfo(string name);
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <returns></returns>
        void DeleteIdentityPersonaIdId(string id);

        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityPersonaIdIdWithHttpInfo(string id);
        /// <summary>
        /// List all the alias IDs.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetIdentityAliasId(string list);

        /// <summary>
        /// List all the alias IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityAliasIdWithHttpInfo(string list);
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns></returns>
        void GetIdentityAliasIdId(string id);

        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityAliasIdIdWithHttpInfo(string id);
        /// <summary>
        /// List all the alias IDs.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetIdentityEntityAliasId(string list);

        /// <summary>
        /// List all the alias IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityEntityAliasIdWithHttpInfo(string list);
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns></returns>
        void GetIdentityEntityAliasIdId(string id);

        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityEntityAliasIdIdWithHttpInfo(string id);
        /// <summary>
        /// List all the entity IDs
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetIdentityEntityId(string list);

        /// <summary>
        /// List all the entity IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityEntityIdWithHttpInfo(string list);
        /// <summary>
        /// Update, read or delete an entity using entity ID
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <returns></returns>
        void GetIdentityEntityIdId(string id);

        /// <summary>
        /// Update, read or delete an entity using entity ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityEntityIdIdWithHttpInfo(string id);
        /// <summary>
        /// List all the entity names
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetIdentityEntityName(string list);

        /// <summary>
        /// List all the entity names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityEntityNameWithHttpInfo(string list);
        /// <summary>
        /// Update, read or delete an entity using entity name
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <returns></returns>
        void GetIdentityEntityNameName(string name);

        /// <summary>
        /// Update, read or delete an entity using entity name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityEntityNameNameWithHttpInfo(string name);
        /// <summary>
        /// List all the group alias IDs.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetIdentityGroupAliasId(string list);

        /// <summary>
        /// List all the group alias IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityGroupAliasIdWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <returns></returns>
        void GetIdentityGroupAliasIdId(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityGroupAliasIdIdWithHttpInfo(string id);
        /// <summary>
        /// List all the group IDs.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetIdentityGroupId(string list);

        /// <summary>
        /// List all the group IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityGroupIdWithHttpInfo(string list);
        /// <summary>
        /// Update or delete an existing group using its ID.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <returns></returns>
        void GetIdentityGroupIdId(string id);

        /// <summary>
        /// Update or delete an existing group using its ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityGroupIdIdWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetIdentityGroupName(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityGroupNameWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <returns></returns>
        void GetIdentityGroupNameName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityGroupNameNameWithHttpInfo(string name);
        /// <summary>
        /// List login enforcements
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetIdentityMfaLoginEnforcement(string list);

        /// <summary>
        /// List login enforcements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaLoginEnforcementWithHttpInfo(string list);
        /// <summary>
        /// Read the current login enforcement
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <returns></returns>
        void GetIdentityMfaLoginEnforcementName(string name);

        /// <summary>
        /// Read the current login enforcement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaLoginEnforcementNameWithHttpInfo(string name);
        /// <summary>
        /// List MFA method configurations for all MFA methods
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetIdentityMfaMethod(string list);

        /// <summary>
        /// List MFA method configurations for all MFA methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaMethodWithHttpInfo(string list);
        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetIdentityMfaMethodDuo(string list);

        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaMethodDuoWithHttpInfo(string list);
        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns></returns>
        void GetIdentityMfaMethodDuoMethodId(string methodId);

        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaMethodDuoMethodIdWithHttpInfo(string methodId);
        /// <summary>
        /// Read the current configuration for the given ID regardless of the MFA method type
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns></returns>
        void GetIdentityMfaMethodMethodId(string methodId);

        /// <summary>
        /// Read the current configuration for the given ID regardless of the MFA method type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaMethodMethodIdWithHttpInfo(string methodId);
        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetIdentityMfaMethodOkta(string list);

        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaMethodOktaWithHttpInfo(string list);
        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns></returns>
        void GetIdentityMfaMethodOktaMethodId(string methodId);

        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaMethodOktaMethodIdWithHttpInfo(string methodId);
        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetIdentityMfaMethodPingid(string list);

        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaMethodPingidWithHttpInfo(string list);
        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns></returns>
        void GetIdentityMfaMethodPingidMethodId(string methodId);

        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaMethodPingidMethodIdWithHttpInfo(string methodId);
        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetIdentityMfaMethodTotp(string list);

        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaMethodTotpWithHttpInfo(string list);
        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns></returns>
        void GetIdentityMfaMethodTotpMethodId(string methodId);

        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityMfaMethodTotpMethodIdWithHttpInfo(string methodId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetIdentityOidcAssignment(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcAssignmentWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <returns></returns>
        void GetIdentityOidcAssignmentName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcAssignmentNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetIdentityOidcClient(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcClientWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <returns></returns>
        void GetIdentityOidcClientName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcClientNameWithHttpInfo(string name);
        /// <summary>
        /// OIDC configuration
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetIdentityOidcConfig();

        /// <summary>
        /// OIDC configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcConfigWithHttpInfo();
        /// <summary>
        /// List OIDC keys
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetIdentityOidcKey(string list);

        /// <summary>
        /// List OIDC keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcKeyWithHttpInfo(string list);
        /// <summary>
        /// CRUD operations for OIDC keys.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns></returns>
        void GetIdentityOidcKeyName(string name);

        /// <summary>
        /// CRUD operations for OIDC keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcKeyNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetIdentityOidcProvider(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcProviderWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns></returns>
        void GetIdentityOidcProviderName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcProviderNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns></returns>
        void GetIdentityOidcProviderNameAuthorize(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcProviderNameAuthorizeWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns></returns>
        void GetIdentityOidcProviderNameUserinfo(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcProviderNameUserinfoWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns></returns>
        void GetIdentityOidcProviderNameWellKnownKeys(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcProviderNameWellKnownKeysWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns></returns>
        void GetIdentityOidcProviderNameWellKnownOpenidConfiguration(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcProviderNameWellKnownOpenidConfigurationWithHttpInfo(string name);
        /// <summary>
        /// List configured OIDC roles
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetIdentityOidcRole(string list);

        /// <summary>
        /// List configured OIDC roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcRoleWithHttpInfo(string list);
        /// <summary>
        /// CRUD operations on OIDC Roles
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void GetIdentityOidcRoleName(string name);

        /// <summary>
        /// CRUD operations on OIDC Roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcRoleNameWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetIdentityOidcScope(string list);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcScopeWithHttpInfo(string list);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <returns></returns>
        void GetIdentityOidcScopeName(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcScopeNameWithHttpInfo(string name);
        /// <summary>
        /// Generate an OIDC token
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        void GetIdentityOidcTokenName(string name);

        /// <summary>
        /// Generate an OIDC token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcTokenNameWithHttpInfo(string name);
        /// <summary>
        /// Retrieve public keys
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetIdentityOidcWellKnownKeys();

        /// <summary>
        /// Retrieve public keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcWellKnownKeysWithHttpInfo();
        /// <summary>
        /// Query OIDC configurations
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GetIdentityOidcWellKnownOpenidConfiguration();

        /// <summary>
        /// Query OIDC configurations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityOidcWellKnownOpenidConfigurationWithHttpInfo();
        /// <summary>
        /// List all the alias IDs.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        void GetIdentityPersonaId(string list);

        /// <summary>
        /// List all the alias IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityPersonaIdWithHttpInfo(string list);
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <returns></returns>
        void GetIdentityPersonaIdId(string id);

        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdentityPersonaIdIdWithHttpInfo(string id);
        /// <summary>
        /// Create a new alias.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityAliasRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityAlias(IdentityAliasRequest identityAliasRequest = default(IdentityAliasRequest));

        /// <summary>
        /// Create a new alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityAliasRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityAliasWithHttpInfo(IdentityAliasRequest identityAliasRequest = default(IdentityAliasRequest));
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityAliasIdRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityAliasIdId(string id, IdentityAliasIdRequest identityAliasIdRequest = default(IdentityAliasIdRequest));

        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityAliasIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityAliasIdIdWithHttpInfo(string id, IdentityAliasIdRequest identityAliasIdRequest = default(IdentityAliasIdRequest));
        /// <summary>
        /// Create a new entity
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityEntity(IdentityEntityRequest identityEntityRequest = default(IdentityEntityRequest));

        /// <summary>
        /// Create a new entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityEntityWithHttpInfo(IdentityEntityRequest identityEntityRequest = default(IdentityEntityRequest));
        /// <summary>
        /// Create a new alias.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityAliasRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityEntityAlias(IdentityEntityAliasRequest identityEntityAliasRequest = default(IdentityEntityAliasRequest));

        /// <summary>
        /// Create a new alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityAliasRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityEntityAliasWithHttpInfo(IdentityEntityAliasRequest identityEntityAliasRequest = default(IdentityEntityAliasRequest));
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityEntityAliasIdRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityEntityAliasIdId(string id, IdentityEntityAliasIdRequest identityEntityAliasIdRequest = default(IdentityEntityAliasIdRequest));

        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityEntityAliasIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityEntityAliasIdIdWithHttpInfo(string id, IdentityEntityAliasIdRequest identityEntityAliasIdRequest = default(IdentityEntityAliasIdRequest));
        /// <summary>
        /// Delete all of the entities provided
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityBatchDeleteRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityEntityBatchDelete(IdentityEntityBatchDeleteRequest identityEntityBatchDeleteRequest = default(IdentityEntityBatchDeleteRequest));

        /// <summary>
        /// Delete all of the entities provided
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityBatchDeleteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityEntityBatchDeleteWithHttpInfo(IdentityEntityBatchDeleteRequest identityEntityBatchDeleteRequest = default(IdentityEntityBatchDeleteRequest));
        /// <summary>
        /// Update, read or delete an entity using entity ID
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="identityEntityIdRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityEntityIdId(string id, IdentityEntityIdRequest identityEntityIdRequest = default(IdentityEntityIdRequest));

        /// <summary>
        /// Update, read or delete an entity using entity ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="identityEntityIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityEntityIdIdWithHttpInfo(string id, IdentityEntityIdRequest identityEntityIdRequest = default(IdentityEntityIdRequest));
        /// <summary>
        /// Merge two or more entities together
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityMergeRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityEntityMerge(IdentityEntityMergeRequest identityEntityMergeRequest = default(IdentityEntityMergeRequest));

        /// <summary>
        /// Merge two or more entities together
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityMergeRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityEntityMergeWithHttpInfo(IdentityEntityMergeRequest identityEntityMergeRequest = default(IdentityEntityMergeRequest));
        /// <summary>
        /// Update, read or delete an entity using entity name
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="identityEntityNameRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityEntityNameName(string name, IdentityEntityNameRequest identityEntityNameRequest = default(IdentityEntityNameRequest));

        /// <summary>
        /// Update, read or delete an entity using entity name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="identityEntityNameRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityEntityNameNameWithHttpInfo(string name, IdentityEntityNameRequest identityEntityNameRequest = default(IdentityEntityNameRequest));
        /// <summary>
        /// Create a new group.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityGroup(IdentityGroupRequest identityGroupRequest = default(IdentityGroupRequest));

        /// <summary>
        /// Create a new group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityGroupWithHttpInfo(IdentityGroupRequest identityGroupRequest = default(IdentityGroupRequest));
        /// <summary>
        /// Creates a new group alias, or updates an existing one.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupAliasRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityGroupAlias(IdentityGroupAliasRequest identityGroupAliasRequest = default(IdentityGroupAliasRequest));

        /// <summary>
        /// Creates a new group alias, or updates an existing one.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupAliasRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityGroupAliasWithHttpInfo(IdentityGroupAliasRequest identityGroupAliasRequest = default(IdentityGroupAliasRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="identityGroupAliasIdRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityGroupAliasIdId(string id, IdentityGroupAliasIdRequest identityGroupAliasIdRequest = default(IdentityGroupAliasIdRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="identityGroupAliasIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityGroupAliasIdIdWithHttpInfo(string id, IdentityGroupAliasIdRequest identityGroupAliasIdRequest = default(IdentityGroupAliasIdRequest));
        /// <summary>
        /// Update or delete an existing group using its ID.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="identityGroupIdRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityGroupIdId(string id, IdentityGroupIdRequest identityGroupIdRequest = default(IdentityGroupIdRequest));

        /// <summary>
        /// Update or delete an existing group using its ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="identityGroupIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityGroupIdIdWithHttpInfo(string id, IdentityGroupIdRequest identityGroupIdRequest = default(IdentityGroupIdRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="identityGroupNameRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityGroupNameName(string name, IdentityGroupNameRequest identityGroupNameRequest = default(IdentityGroupNameRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="identityGroupNameRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityGroupNameNameWithHttpInfo(string name, IdentityGroupNameRequest identityGroupNameRequest = default(IdentityGroupNameRequest));
        /// <summary>
        /// Query entities based on various properties.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupEntityRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityLookupEntity(IdentityLookupEntityRequest identityLookupEntityRequest = default(IdentityLookupEntityRequest));

        /// <summary>
        /// Query entities based on various properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupEntityRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityLookupEntityWithHttpInfo(IdentityLookupEntityRequest identityLookupEntityRequest = default(IdentityLookupEntityRequest));
        /// <summary>
        /// Query groups based on various properties.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupGroupRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityLookupGroup(IdentityLookupGroupRequest identityLookupGroupRequest = default(IdentityLookupGroupRequest));

        /// <summary>
        /// Query groups based on various properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityLookupGroupWithHttpInfo(IdentityLookupGroupRequest identityLookupGroupRequest = default(IdentityLookupGroupRequest));
        /// <summary>
        /// Create or update a login enforcement
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="identityMfaLoginEnforcementRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityMfaLoginEnforcementName(string name, IdentityMfaLoginEnforcementRequest identityMfaLoginEnforcementRequest = default(IdentityMfaLoginEnforcementRequest));

        /// <summary>
        /// Create or update a login enforcement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="identityMfaLoginEnforcementRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityMfaLoginEnforcementNameWithHttpInfo(string name, IdentityMfaLoginEnforcementRequest identityMfaLoginEnforcementRequest = default(IdentityMfaLoginEnforcementRequest));
        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodDuoRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityMfaMethodDuoMethodId(string methodId, IdentityMfaMethodDuoRequest identityMfaMethodDuoRequest = default(IdentityMfaMethodDuoRequest));

        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodDuoRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityMfaMethodDuoMethodIdWithHttpInfo(string methodId, IdentityMfaMethodDuoRequest identityMfaMethodDuoRequest = default(IdentityMfaMethodDuoRequest));
        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodOktaRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityMfaMethodOktaMethodId(string methodId, IdentityMfaMethodOktaRequest identityMfaMethodOktaRequest = default(IdentityMfaMethodOktaRequest));

        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodOktaRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityMfaMethodOktaMethodIdWithHttpInfo(string methodId, IdentityMfaMethodOktaRequest identityMfaMethodOktaRequest = default(IdentityMfaMethodOktaRequest));
        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodPingidRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityMfaMethodPingidMethodId(string methodId, IdentityMfaMethodPingidRequest identityMfaMethodPingidRequest = default(IdentityMfaMethodPingidRequest));

        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodPingidRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityMfaMethodPingidMethodIdWithHttpInfo(string methodId, IdentityMfaMethodPingidRequest identityMfaMethodPingidRequest = default(IdentityMfaMethodPingidRequest));
        /// <summary>
        /// Destroys a TOTP secret for the given MFA method ID on the given entity
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminDestroyRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityMfaMethodTotpAdminDestroy(IdentityMfaMethodTotpAdminDestroyRequest identityMfaMethodTotpAdminDestroyRequest = default(IdentityMfaMethodTotpAdminDestroyRequest));

        /// <summary>
        /// Destroys a TOTP secret for the given MFA method ID on the given entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminDestroyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityMfaMethodTotpAdminDestroyWithHttpInfo(IdentityMfaMethodTotpAdminDestroyRequest identityMfaMethodTotpAdminDestroyRequest = default(IdentityMfaMethodTotpAdminDestroyRequest));
        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminGenerateRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityMfaMethodTotpAdminGenerate(IdentityMfaMethodTotpAdminGenerateRequest identityMfaMethodTotpAdminGenerateRequest = default(IdentityMfaMethodTotpAdminGenerateRequest));

        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminGenerateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityMfaMethodTotpAdminGenerateWithHttpInfo(IdentityMfaMethodTotpAdminGenerateRequest identityMfaMethodTotpAdminGenerateRequest = default(IdentityMfaMethodTotpAdminGenerateRequest));
        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpGenerateRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityMfaMethodTotpGenerate(IdentityMfaMethodTotpGenerateRequest identityMfaMethodTotpGenerateRequest = default(IdentityMfaMethodTotpGenerateRequest));

        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpGenerateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityMfaMethodTotpGenerateWithHttpInfo(IdentityMfaMethodTotpGenerateRequest identityMfaMethodTotpGenerateRequest = default(IdentityMfaMethodTotpGenerateRequest));
        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodTotpRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityMfaMethodTotpMethodId(string methodId, IdentityMfaMethodTotpRequest identityMfaMethodTotpRequest = default(IdentityMfaMethodTotpRequest));

        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodTotpRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityMfaMethodTotpMethodIdWithHttpInfo(string methodId, IdentityMfaMethodTotpRequest identityMfaMethodTotpRequest = default(IdentityMfaMethodTotpRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="identityOidcAssignmentRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityOidcAssignmentName(string name, IdentityOidcAssignmentRequest identityOidcAssignmentRequest = default(IdentityOidcAssignmentRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="identityOidcAssignmentRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcAssignmentNameWithHttpInfo(string name, IdentityOidcAssignmentRequest identityOidcAssignmentRequest = default(IdentityOidcAssignmentRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="identityOidcClientRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityOidcClientName(string name, IdentityOidcClientRequest identityOidcClientRequest = default(IdentityOidcClientRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="identityOidcClientRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcClientNameWithHttpInfo(string name, IdentityOidcClientRequest identityOidcClientRequest = default(IdentityOidcClientRequest));
        /// <summary>
        /// OIDC configuration
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcConfigRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityOidcConfig(IdentityOidcConfigRequest identityOidcConfigRequest = default(IdentityOidcConfigRequest));

        /// <summary>
        /// OIDC configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcConfigWithHttpInfo(IdentityOidcConfigRequest identityOidcConfigRequest = default(IdentityOidcConfigRequest));
        /// <summary>
        /// Verify the authenticity of an OIDC token
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcIntrospectRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityOidcIntrospect(IdentityOidcIntrospectRequest identityOidcIntrospectRequest = default(IdentityOidcIntrospectRequest));

        /// <summary>
        /// Verify the authenticity of an OIDC token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcIntrospectRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcIntrospectWithHttpInfo(IdentityOidcIntrospectRequest identityOidcIntrospectRequest = default(IdentityOidcIntrospectRequest));
        /// <summary>
        /// CRUD operations for OIDC keys.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityOidcKeyName(string name, IdentityOidcKeyRequest identityOidcKeyRequest = default(IdentityOidcKeyRequest));

        /// <summary>
        /// CRUD operations for OIDC keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcKeyNameWithHttpInfo(string name, IdentityOidcKeyRequest identityOidcKeyRequest = default(IdentityOidcKeyRequest));
        /// <summary>
        /// Rotate a named OIDC key.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRotateRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityOidcKeyNameRotate(string name, IdentityOidcKeyRotateRequest identityOidcKeyRotateRequest = default(IdentityOidcKeyRotateRequest));

        /// <summary>
        /// Rotate a named OIDC key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRotateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcKeyNameRotateWithHttpInfo(string name, IdentityOidcKeyRotateRequest identityOidcKeyRotateRequest = default(IdentityOidcKeyRotateRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityOidcProviderName(string name, IdentityOidcProviderRequest identityOidcProviderRequest = default(IdentityOidcProviderRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcProviderNameWithHttpInfo(string name, IdentityOidcProviderRequest identityOidcProviderRequest = default(IdentityOidcProviderRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderAuthorizeRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityOidcProviderNameAuthorize(string name, IdentityOidcProviderAuthorizeRequest identityOidcProviderAuthorizeRequest = default(IdentityOidcProviderAuthorizeRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderAuthorizeRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcProviderNameAuthorizeWithHttpInfo(string name, IdentityOidcProviderAuthorizeRequest identityOidcProviderAuthorizeRequest = default(IdentityOidcProviderAuthorizeRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderTokenRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityOidcProviderNameToken(string name, IdentityOidcProviderTokenRequest identityOidcProviderTokenRequest = default(IdentityOidcProviderTokenRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderTokenRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcProviderNameTokenWithHttpInfo(string name, IdentityOidcProviderTokenRequest identityOidcProviderTokenRequest = default(IdentityOidcProviderTokenRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns></returns>
        void PostIdentityOidcProviderNameUserinfo(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcProviderNameUserinfoWithHttpInfo(string name);
        /// <summary>
        /// CRUD operations on OIDC Roles
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="identityOidcRoleRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityOidcRoleName(string name, IdentityOidcRoleRequest identityOidcRoleRequest = default(IdentityOidcRoleRequest));

        /// <summary>
        /// CRUD operations on OIDC Roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="identityOidcRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcRoleNameWithHttpInfo(string name, IdentityOidcRoleRequest identityOidcRoleRequest = default(IdentityOidcRoleRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="identityOidcScopeRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityOidcScopeName(string name, IdentityOidcScopeRequest identityOidcScopeRequest = default(IdentityOidcScopeRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="identityOidcScopeRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityOidcScopeNameWithHttpInfo(string name, IdentityOidcScopeRequest identityOidcScopeRequest = default(IdentityOidcScopeRequest));
        /// <summary>
        /// Create a new alias.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityPersonaRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityPersona(IdentityPersonaRequest identityPersonaRequest = default(IdentityPersonaRequest));

        /// <summary>
        /// Create a new alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityPersonaRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityPersonaWithHttpInfo(IdentityPersonaRequest identityPersonaRequest = default(IdentityPersonaRequest));
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="identityPersonaIdRequest"> (optional)</param>
        /// <returns></returns>
        void PostIdentityPersonaIdId(string id, IdentityPersonaIdRequest identityPersonaIdRequest = default(IdentityPersonaIdRequest));

        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="identityPersonaIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostIdentityPersonaIdIdWithHttpInfo(string id, IdentityPersonaIdRequest identityPersonaIdRequest = default(IdentityPersonaIdRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentityApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteIdentityAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityAliasIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteIdentityEntityAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityEntityAliasIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update, read or delete an entity using entity ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteIdentityEntityIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update, read or delete an entity using entity ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityEntityIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update, read or delete an entity using entity name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteIdentityEntityNameNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update, read or delete an entity using entity name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityEntityNameNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteIdentityGroupAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityGroupAliasIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update or delete an existing group using its ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteIdentityGroupIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update or delete an existing group using its ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityGroupIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteIdentityGroupNameNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityGroupNameNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a login enforcement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteIdentityMfaLoginEnforcementNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a login enforcement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityMfaLoginEnforcementNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteIdentityMfaMethodDuoMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityMfaMethodDuoMethodIdWithHttpInfoAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteIdentityMfaMethodOktaMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityMfaMethodOktaMethodIdWithHttpInfoAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteIdentityMfaMethodPingidMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityMfaMethodPingidMethodIdWithHttpInfoAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteIdentityMfaMethodTotpMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityMfaMethodTotpMethodIdWithHttpInfoAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteIdentityOidcAssignmentNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityOidcAssignmentNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteIdentityOidcClientNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityOidcClientNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// CRUD operations for OIDC keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteIdentityOidcKeyNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// CRUD operations for OIDC keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityOidcKeyNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteIdentityOidcProviderNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityOidcProviderNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// CRUD operations on OIDC Roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteIdentityOidcRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// CRUD operations on OIDC Roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityOidcRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteIdentityOidcScopeNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityOidcScopeNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteIdentityPersonaIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteIdentityPersonaIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all the alias IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityAliasIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all the alias IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityAliasIdWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityAliasIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all the alias IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityEntityAliasIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all the alias IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityEntityAliasIdWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityEntityAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityEntityAliasIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all the entity IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityEntityIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all the entity IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityEntityIdWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update, read or delete an entity using entity ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityEntityIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update, read or delete an entity using entity ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityEntityIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all the entity names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityEntityNameAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all the entity names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityEntityNameWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update, read or delete an entity using entity name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityEntityNameNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update, read or delete an entity using entity name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityEntityNameNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all the group alias IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityGroupAliasIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all the group alias IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityGroupAliasIdWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityGroupAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityGroupAliasIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all the group IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityGroupIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all the group IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityGroupIdWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update or delete an existing group using its ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityGroupIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update or delete an existing group using its ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityGroupIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityGroupNameAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityGroupNameWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityGroupNameNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityGroupNameNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List login enforcements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityMfaLoginEnforcementAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List login enforcements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaLoginEnforcementWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Read the current login enforcement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityMfaLoginEnforcementNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Read the current login enforcement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaLoginEnforcementNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List MFA method configurations for all MFA methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityMfaMethodAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List MFA method configurations for all MFA methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaMethodWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityMfaMethodDuoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaMethodDuoWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityMfaMethodDuoMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaMethodDuoMethodIdWithHttpInfoAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Read the current configuration for the given ID regardless of the MFA method type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityMfaMethodMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Read the current configuration for the given ID regardless of the MFA method type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaMethodMethodIdWithHttpInfoAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityMfaMethodOktaAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaMethodOktaWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityMfaMethodOktaMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaMethodOktaMethodIdWithHttpInfoAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityMfaMethodPingidAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaMethodPingidWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityMfaMethodPingidMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaMethodPingidMethodIdWithHttpInfoAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityMfaMethodTotpAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List MFA method configurations for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaMethodTotpWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityMfaMethodTotpMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Read the current configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityMfaMethodTotpMethodIdWithHttpInfoAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityOidcAssignmentAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcAssignmentWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityOidcAssignmentNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcAssignmentNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityOidcClientAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcClientWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityOidcClientNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcClientNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// OIDC configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityOidcConfigAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// OIDC configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List OIDC keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityOidcKeyAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List OIDC keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcKeyWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// CRUD operations for OIDC keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityOidcKeyNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// CRUD operations for OIDC keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcKeyNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityOidcProviderAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcProviderWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityOidcProviderNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcProviderNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityOidcProviderNameAuthorizeAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcProviderNameAuthorizeWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityOidcProviderNameUserinfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcProviderNameUserinfoWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityOidcProviderNameWellKnownKeysAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcProviderNameWellKnownKeysWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityOidcProviderNameWellKnownOpenidConfigurationAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcProviderNameWellKnownOpenidConfigurationWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List configured OIDC roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityOidcRoleAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List configured OIDC roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcRoleWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// CRUD operations on OIDC Roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityOidcRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// CRUD operations on OIDC Roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityOidcScopeAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcScopeWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityOidcScopeNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcScopeNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate an OIDC token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityOidcTokenNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate an OIDC token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcTokenNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve public keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityOidcWellKnownKeysAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve public keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcWellKnownKeysWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Query OIDC configurations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityOidcWellKnownOpenidConfigurationAsync(CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query OIDC configurations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityOidcWellKnownOpenidConfigurationWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all the alias IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityPersonaIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all the alias IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityPersonaIdWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task GetIdentityPersonaIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> GetIdentityPersonaIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityAliasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityAliasAsync(IdentityAliasRequest identityAliasRequest = default(IdentityAliasRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityAliasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityAliasWithHttpInfoAsync(IdentityAliasRequest identityAliasRequest = default(IdentityAliasRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityAliasIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityAliasIdIdAsync(string id, IdentityAliasIdRequest identityAliasIdRequest = default(IdentityAliasIdRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityAliasIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityAliasIdIdWithHttpInfoAsync(string id, IdentityAliasIdRequest identityAliasIdRequest = default(IdentityAliasIdRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityEntityAsync(IdentityEntityRequest identityEntityRequest = default(IdentityEntityRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityEntityWithHttpInfoAsync(IdentityEntityRequest identityEntityRequest = default(IdentityEntityRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityAliasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityEntityAliasAsync(IdentityEntityAliasRequest identityEntityAliasRequest = default(IdentityEntityAliasRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityAliasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityEntityAliasWithHttpInfoAsync(IdentityEntityAliasRequest identityEntityAliasRequest = default(IdentityEntityAliasRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityEntityAliasIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityEntityAliasIdIdAsync(string id, IdentityEntityAliasIdRequest identityEntityAliasIdRequest = default(IdentityEntityAliasIdRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityEntityAliasIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityEntityAliasIdIdWithHttpInfoAsync(string id, IdentityEntityAliasIdRequest identityEntityAliasIdRequest = default(IdentityEntityAliasIdRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete all of the entities provided
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityBatchDeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityEntityBatchDeleteAsync(IdentityEntityBatchDeleteRequest identityEntityBatchDeleteRequest = default(IdentityEntityBatchDeleteRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete all of the entities provided
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityBatchDeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityEntityBatchDeleteWithHttpInfoAsync(IdentityEntityBatchDeleteRequest identityEntityBatchDeleteRequest = default(IdentityEntityBatchDeleteRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update, read or delete an entity using entity ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="identityEntityIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityEntityIdIdAsync(string id, IdentityEntityIdRequest identityEntityIdRequest = default(IdentityEntityIdRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update, read or delete an entity using entity ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="identityEntityIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityEntityIdIdWithHttpInfoAsync(string id, IdentityEntityIdRequest identityEntityIdRequest = default(IdentityEntityIdRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Merge two or more entities together
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityMergeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityEntityMergeAsync(IdentityEntityMergeRequest identityEntityMergeRequest = default(IdentityEntityMergeRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Merge two or more entities together
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityMergeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityEntityMergeWithHttpInfoAsync(IdentityEntityMergeRequest identityEntityMergeRequest = default(IdentityEntityMergeRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update, read or delete an entity using entity name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="identityEntityNameRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityEntityNameNameAsync(string name, IdentityEntityNameRequest identityEntityNameRequest = default(IdentityEntityNameRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update, read or delete an entity using entity name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="identityEntityNameRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityEntityNameNameWithHttpInfoAsync(string name, IdentityEntityNameRequest identityEntityNameRequest = default(IdentityEntityNameRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityGroupAsync(IdentityGroupRequest identityGroupRequest = default(IdentityGroupRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityGroupWithHttpInfoAsync(IdentityGroupRequest identityGroupRequest = default(IdentityGroupRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a new group alias, or updates an existing one.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupAliasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityGroupAliasAsync(IdentityGroupAliasRequest identityGroupAliasRequest = default(IdentityGroupAliasRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new group alias, or updates an existing one.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupAliasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityGroupAliasWithHttpInfoAsync(IdentityGroupAliasRequest identityGroupAliasRequest = default(IdentityGroupAliasRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="identityGroupAliasIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityGroupAliasIdIdAsync(string id, IdentityGroupAliasIdRequest identityGroupAliasIdRequest = default(IdentityGroupAliasIdRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="identityGroupAliasIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityGroupAliasIdIdWithHttpInfoAsync(string id, IdentityGroupAliasIdRequest identityGroupAliasIdRequest = default(IdentityGroupAliasIdRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update or delete an existing group using its ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="identityGroupIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityGroupIdIdAsync(string id, IdentityGroupIdRequest identityGroupIdRequest = default(IdentityGroupIdRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update or delete an existing group using its ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="identityGroupIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityGroupIdIdWithHttpInfoAsync(string id, IdentityGroupIdRequest identityGroupIdRequest = default(IdentityGroupIdRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="identityGroupNameRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityGroupNameNameAsync(string name, IdentityGroupNameRequest identityGroupNameRequest = default(IdentityGroupNameRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="identityGroupNameRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityGroupNameNameWithHttpInfoAsync(string name, IdentityGroupNameRequest identityGroupNameRequest = default(IdentityGroupNameRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Query entities based on various properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupEntityRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityLookupEntityAsync(IdentityLookupEntityRequest identityLookupEntityRequest = default(IdentityLookupEntityRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query entities based on various properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupEntityRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityLookupEntityWithHttpInfoAsync(IdentityLookupEntityRequest identityLookupEntityRequest = default(IdentityLookupEntityRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Query groups based on various properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityLookupGroupAsync(IdentityLookupGroupRequest identityLookupGroupRequest = default(IdentityLookupGroupRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query groups based on various properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityLookupGroupWithHttpInfoAsync(IdentityLookupGroupRequest identityLookupGroupRequest = default(IdentityLookupGroupRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create or update a login enforcement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="identityMfaLoginEnforcementRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityMfaLoginEnforcementNameAsync(string name, IdentityMfaLoginEnforcementRequest identityMfaLoginEnforcementRequest = default(IdentityMfaLoginEnforcementRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create or update a login enforcement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="identityMfaLoginEnforcementRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityMfaLoginEnforcementNameWithHttpInfoAsync(string name, IdentityMfaLoginEnforcementRequest identityMfaLoginEnforcementRequest = default(IdentityMfaLoginEnforcementRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodDuoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityMfaMethodDuoMethodIdAsync(string methodId, IdentityMfaMethodDuoRequest identityMfaMethodDuoRequest = default(IdentityMfaMethodDuoRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodDuoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityMfaMethodDuoMethodIdWithHttpInfoAsync(string methodId, IdentityMfaMethodDuoRequest identityMfaMethodDuoRequest = default(IdentityMfaMethodDuoRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodOktaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityMfaMethodOktaMethodIdAsync(string methodId, IdentityMfaMethodOktaRequest identityMfaMethodOktaRequest = default(IdentityMfaMethodOktaRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodOktaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityMfaMethodOktaMethodIdWithHttpInfoAsync(string methodId, IdentityMfaMethodOktaRequest identityMfaMethodOktaRequest = default(IdentityMfaMethodOktaRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodPingidRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityMfaMethodPingidMethodIdAsync(string methodId, IdentityMfaMethodPingidRequest identityMfaMethodPingidRequest = default(IdentityMfaMethodPingidRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodPingidRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityMfaMethodPingidMethodIdWithHttpInfoAsync(string methodId, IdentityMfaMethodPingidRequest identityMfaMethodPingidRequest = default(IdentityMfaMethodPingidRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Destroys a TOTP secret for the given MFA method ID on the given entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminDestroyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityMfaMethodTotpAdminDestroyAsync(IdentityMfaMethodTotpAdminDestroyRequest identityMfaMethodTotpAdminDestroyRequest = default(IdentityMfaMethodTotpAdminDestroyRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Destroys a TOTP secret for the given MFA method ID on the given entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminDestroyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityMfaMethodTotpAdminDestroyWithHttpInfoAsync(IdentityMfaMethodTotpAdminDestroyRequest identityMfaMethodTotpAdminDestroyRequest = default(IdentityMfaMethodTotpAdminDestroyRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminGenerateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityMfaMethodTotpAdminGenerateAsync(IdentityMfaMethodTotpAdminGenerateRequest identityMfaMethodTotpAdminGenerateRequest = default(IdentityMfaMethodTotpAdminGenerateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminGenerateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityMfaMethodTotpAdminGenerateWithHttpInfoAsync(IdentityMfaMethodTotpAdminGenerateRequest identityMfaMethodTotpAdminGenerateRequest = default(IdentityMfaMethodTotpAdminGenerateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpGenerateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityMfaMethodTotpGenerateAsync(IdentityMfaMethodTotpGenerateRequest identityMfaMethodTotpGenerateRequest = default(IdentityMfaMethodTotpGenerateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpGenerateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityMfaMethodTotpGenerateWithHttpInfoAsync(IdentityMfaMethodTotpGenerateRequest identityMfaMethodTotpGenerateRequest = default(IdentityMfaMethodTotpGenerateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodTotpRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityMfaMethodTotpMethodIdAsync(string methodId, IdentityMfaMethodTotpRequest identityMfaMethodTotpRequest = default(IdentityMfaMethodTotpRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update or create a configuration for the given MFA method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodTotpRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityMfaMethodTotpMethodIdWithHttpInfoAsync(string methodId, IdentityMfaMethodTotpRequest identityMfaMethodTotpRequest = default(IdentityMfaMethodTotpRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="identityOidcAssignmentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityOidcAssignmentNameAsync(string name, IdentityOidcAssignmentRequest identityOidcAssignmentRequest = default(IdentityOidcAssignmentRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="identityOidcAssignmentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcAssignmentNameWithHttpInfoAsync(string name, IdentityOidcAssignmentRequest identityOidcAssignmentRequest = default(IdentityOidcAssignmentRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="identityOidcClientRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityOidcClientNameAsync(string name, IdentityOidcClientRequest identityOidcClientRequest = default(IdentityOidcClientRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="identityOidcClientRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcClientNameWithHttpInfoAsync(string name, IdentityOidcClientRequest identityOidcClientRequest = default(IdentityOidcClientRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// OIDC configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityOidcConfigAsync(IdentityOidcConfigRequest identityOidcConfigRequest = default(IdentityOidcConfigRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// OIDC configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcConfigWithHttpInfoAsync(IdentityOidcConfigRequest identityOidcConfigRequest = default(IdentityOidcConfigRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Verify the authenticity of an OIDC token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcIntrospectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityOidcIntrospectAsync(IdentityOidcIntrospectRequest identityOidcIntrospectRequest = default(IdentityOidcIntrospectRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Verify the authenticity of an OIDC token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcIntrospectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcIntrospectWithHttpInfoAsync(IdentityOidcIntrospectRequest identityOidcIntrospectRequest = default(IdentityOidcIntrospectRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// CRUD operations for OIDC keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityOidcKeyNameAsync(string name, IdentityOidcKeyRequest identityOidcKeyRequest = default(IdentityOidcKeyRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// CRUD operations for OIDC keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcKeyNameWithHttpInfoAsync(string name, IdentityOidcKeyRequest identityOidcKeyRequest = default(IdentityOidcKeyRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Rotate a named OIDC key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRotateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityOidcKeyNameRotateAsync(string name, IdentityOidcKeyRotateRequest identityOidcKeyRotateRequest = default(IdentityOidcKeyRotateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Rotate a named OIDC key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRotateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcKeyNameRotateWithHttpInfoAsync(string name, IdentityOidcKeyRotateRequest identityOidcKeyRotateRequest = default(IdentityOidcKeyRotateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityOidcProviderNameAsync(string name, IdentityOidcProviderRequest identityOidcProviderRequest = default(IdentityOidcProviderRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcProviderNameWithHttpInfoAsync(string name, IdentityOidcProviderRequest identityOidcProviderRequest = default(IdentityOidcProviderRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderAuthorizeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityOidcProviderNameAuthorizeAsync(string name, IdentityOidcProviderAuthorizeRequest identityOidcProviderAuthorizeRequest = default(IdentityOidcProviderAuthorizeRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderAuthorizeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcProviderNameAuthorizeWithHttpInfoAsync(string name, IdentityOidcProviderAuthorizeRequest identityOidcProviderAuthorizeRequest = default(IdentityOidcProviderAuthorizeRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderTokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityOidcProviderNameTokenAsync(string name, IdentityOidcProviderTokenRequest identityOidcProviderTokenRequest = default(IdentityOidcProviderTokenRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderTokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcProviderNameTokenWithHttpInfoAsync(string name, IdentityOidcProviderTokenRequest identityOidcProviderTokenRequest = default(IdentityOidcProviderTokenRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityOidcProviderNameUserinfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcProviderNameUserinfoWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// CRUD operations on OIDC Roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="identityOidcRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityOidcRoleNameAsync(string name, IdentityOidcRoleRequest identityOidcRoleRequest = default(IdentityOidcRoleRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// CRUD operations on OIDC Roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="identityOidcRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcRoleNameWithHttpInfoAsync(string name, IdentityOidcRoleRequest identityOidcRoleRequest = default(IdentityOidcRoleRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="identityOidcScopeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityOidcScopeNameAsync(string name, IdentityOidcScopeRequest identityOidcScopeRequest = default(IdentityOidcScopeRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="identityOidcScopeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityOidcScopeNameWithHttpInfoAsync(string name, IdentityOidcScopeRequest identityOidcScopeRequest = default(IdentityOidcScopeRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityPersonaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityPersonaAsync(IdentityPersonaRequest identityPersonaRequest = default(IdentityPersonaRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new alias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityPersonaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityPersonaWithHttpInfoAsync(IdentityPersonaRequest identityPersonaRequest = default(IdentityPersonaRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="identityPersonaIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task PostIdentityPersonaIdIdAsync(string id, IdentityPersonaIdRequest identityPersonaIdRequest = default(IdentityPersonaIdRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update, read or delete an alias ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="identityPersonaIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> PostIdentityPersonaIdIdWithHttpInfoAsync(string id, IdentityPersonaIdRequest identityPersonaIdRequest = default(IdentityPersonaIdRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentityApi : IIdentityApiSync, IIdentityApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IdentityApi : IDisposable, IIdentityApi
    {
        private VaultClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public IdentityApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public IdentityApi(string basePath)
        {
            this.Configuration = new VaultClient.Client.Configuration { BasePath = basePath };
            this.ApiClient = new VaultClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = VaultClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public IdentityApi(VaultClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = configuration;
            this.ApiClient = new VaultClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = VaultClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public IdentityApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public IdentityApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = new VaultClient.Client.Configuration { BasePath = basePath };
            this.ApiClient = new VaultClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = VaultClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public IdentityApi(HttpClient client, VaultClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = configuration;
            this.ApiClient = new VaultClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = VaultClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public IdentityApi(VaultClient.Client.ISynchronousClient client, VaultClient.Client.IAsynchronousClient asyncClient, VaultClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VaultClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public VaultClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VaultClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VaultClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VaultClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VaultClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns></returns>
        public void DeleteIdentityAliasIdId(string id)
        {
            DeleteIdentityAliasIdIdWithHttpInfo(id);
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityAliasIdIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->DeleteIdentityAliasIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/alias/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteIdentityAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteIdentityAliasIdIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityAliasIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->DeleteIdentityAliasIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/alias/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns></returns>
        public void DeleteIdentityEntityAliasIdId(string id)
        {
            DeleteIdentityEntityAliasIdIdWithHttpInfo(id);
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityEntityAliasIdIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->DeleteIdentityEntityAliasIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/entity-alias/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityEntityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteIdentityEntityAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteIdentityEntityAliasIdIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityEntityAliasIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->DeleteIdentityEntityAliasIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/entity-alias/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityEntityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an entity using entity ID 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <returns></returns>
        public void DeleteIdentityEntityIdId(string id)
        {
            DeleteIdentityEntityIdIdWithHttpInfo(id);
        }

        /// <summary>
        /// Update, read or delete an entity using entity ID 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityEntityIdIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->DeleteIdentityEntityIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/entity/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityEntityIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an entity using entity ID 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteIdentityEntityIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteIdentityEntityIdIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update, read or delete an entity using entity ID 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityEntityIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->DeleteIdentityEntityIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/entity/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityEntityIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an entity using entity name 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <returns></returns>
        public void DeleteIdentityEntityNameName(string name)
        {
            DeleteIdentityEntityNameNameWithHttpInfo(name);
        }

        /// <summary>
        /// Update, read or delete an entity using entity name 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityEntityNameNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->DeleteIdentityEntityNameName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/entity/name/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityEntityNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an entity using entity name 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteIdentityEntityNameNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteIdentityEntityNameNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update, read or delete an entity using entity name 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityEntityNameNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->DeleteIdentityEntityNameName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/entity/name/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityEntityNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <returns></returns>
        public void DeleteIdentityGroupAliasIdId(string id)
        {
            DeleteIdentityGroupAliasIdIdWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityGroupAliasIdIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->DeleteIdentityGroupAliasIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/group-alias/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityGroupAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteIdentityGroupAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteIdentityGroupAliasIdIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityGroupAliasIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->DeleteIdentityGroupAliasIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/group-alias/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityGroupAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update or delete an existing group using its ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <returns></returns>
        public void DeleteIdentityGroupIdId(string id)
        {
            DeleteIdentityGroupIdIdWithHttpInfo(id);
        }

        /// <summary>
        /// Update or delete an existing group using its ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityGroupIdIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->DeleteIdentityGroupIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/group/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityGroupIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update or delete an existing group using its ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteIdentityGroupIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteIdentityGroupIdIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update or delete an existing group using its ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityGroupIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->DeleteIdentityGroupIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/group/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityGroupIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <returns></returns>
        public void DeleteIdentityGroupNameName(string name)
        {
            DeleteIdentityGroupNameNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityGroupNameNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->DeleteIdentityGroupNameName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/group/name/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityGroupNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteIdentityGroupNameNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteIdentityGroupNameNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityGroupNameNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->DeleteIdentityGroupNameName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/group/name/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityGroupNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a login enforcement 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <returns></returns>
        public void DeleteIdentityMfaLoginEnforcementName(string name)
        {
            DeleteIdentityMfaLoginEnforcementNameWithHttpInfo(name);
        }

        /// <summary>
        /// Delete a login enforcement 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityMfaLoginEnforcementNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->DeleteIdentityMfaLoginEnforcementName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/mfa/login-enforcement/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityMfaLoginEnforcementName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a login enforcement 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteIdentityMfaLoginEnforcementNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteIdentityMfaLoginEnforcementNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a login enforcement 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityMfaLoginEnforcementNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->DeleteIdentityMfaLoginEnforcementName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/mfa/login-enforcement/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityMfaLoginEnforcementName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns></returns>
        public void DeleteIdentityMfaMethodDuoMethodId(string methodId)
        {
            DeleteIdentityMfaMethodDuoMethodIdWithHttpInfo(methodId);
        }

        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityMfaMethodDuoMethodIdWithHttpInfo(string methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->DeleteIdentityMfaMethodDuoMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/mfa/method/duo/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityMfaMethodDuoMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteIdentityMfaMethodDuoMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteIdentityMfaMethodDuoMethodIdWithHttpInfoAsync(methodId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityMfaMethodDuoMethodIdWithHttpInfoAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->DeleteIdentityMfaMethodDuoMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/mfa/method/duo/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityMfaMethodDuoMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns></returns>
        public void DeleteIdentityMfaMethodOktaMethodId(string methodId)
        {
            DeleteIdentityMfaMethodOktaMethodIdWithHttpInfo(methodId);
        }

        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityMfaMethodOktaMethodIdWithHttpInfo(string methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->DeleteIdentityMfaMethodOktaMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/mfa/method/okta/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityMfaMethodOktaMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteIdentityMfaMethodOktaMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteIdentityMfaMethodOktaMethodIdWithHttpInfoAsync(methodId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityMfaMethodOktaMethodIdWithHttpInfoAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->DeleteIdentityMfaMethodOktaMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/mfa/method/okta/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityMfaMethodOktaMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns></returns>
        public void DeleteIdentityMfaMethodPingidMethodId(string methodId)
        {
            DeleteIdentityMfaMethodPingidMethodIdWithHttpInfo(methodId);
        }

        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityMfaMethodPingidMethodIdWithHttpInfo(string methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->DeleteIdentityMfaMethodPingidMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/mfa/method/pingid/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityMfaMethodPingidMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteIdentityMfaMethodPingidMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteIdentityMfaMethodPingidMethodIdWithHttpInfoAsync(methodId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityMfaMethodPingidMethodIdWithHttpInfoAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->DeleteIdentityMfaMethodPingidMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/mfa/method/pingid/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityMfaMethodPingidMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns></returns>
        public void DeleteIdentityMfaMethodTotpMethodId(string methodId)
        {
            DeleteIdentityMfaMethodTotpMethodIdWithHttpInfo(methodId);
        }

        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityMfaMethodTotpMethodIdWithHttpInfo(string methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->DeleteIdentityMfaMethodTotpMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/mfa/method/totp/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityMfaMethodTotpMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteIdentityMfaMethodTotpMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteIdentityMfaMethodTotpMethodIdWithHttpInfoAsync(methodId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityMfaMethodTotpMethodIdWithHttpInfoAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->DeleteIdentityMfaMethodTotpMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/mfa/method/totp/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityMfaMethodTotpMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <returns></returns>
        public void DeleteIdentityOidcAssignmentName(string name)
        {
            DeleteIdentityOidcAssignmentNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityOidcAssignmentNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->DeleteIdentityOidcAssignmentName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/oidc/assignment/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcAssignmentName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteIdentityOidcAssignmentNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteIdentityOidcAssignmentNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityOidcAssignmentNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->DeleteIdentityOidcAssignmentName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/oidc/assignment/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcAssignmentName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <returns></returns>
        public void DeleteIdentityOidcClientName(string name)
        {
            DeleteIdentityOidcClientNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityOidcClientNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->DeleteIdentityOidcClientName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/oidc/client/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcClientName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteIdentityOidcClientNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteIdentityOidcClientNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityOidcClientNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->DeleteIdentityOidcClientName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/oidc/client/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcClientName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// CRUD operations for OIDC keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns></returns>
        public void DeleteIdentityOidcKeyName(string name)
        {
            DeleteIdentityOidcKeyNameWithHttpInfo(name);
        }

        /// <summary>
        /// CRUD operations for OIDC keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityOidcKeyNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->DeleteIdentityOidcKeyName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/oidc/key/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcKeyName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// CRUD operations for OIDC keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteIdentityOidcKeyNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteIdentityOidcKeyNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// CRUD operations for OIDC keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityOidcKeyNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->DeleteIdentityOidcKeyName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/oidc/key/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcKeyName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns></returns>
        public void DeleteIdentityOidcProviderName(string name)
        {
            DeleteIdentityOidcProviderNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityOidcProviderNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->DeleteIdentityOidcProviderName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/oidc/provider/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcProviderName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteIdentityOidcProviderNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteIdentityOidcProviderNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityOidcProviderNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->DeleteIdentityOidcProviderName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/oidc/provider/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcProviderName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// CRUD operations on OIDC Roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void DeleteIdentityOidcRoleName(string name)
        {
            DeleteIdentityOidcRoleNameWithHttpInfo(name);
        }

        /// <summary>
        /// CRUD operations on OIDC Roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityOidcRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->DeleteIdentityOidcRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/oidc/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// CRUD operations on OIDC Roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteIdentityOidcRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteIdentityOidcRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// CRUD operations on OIDC Roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityOidcRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->DeleteIdentityOidcRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/oidc/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <returns></returns>
        public void DeleteIdentityOidcScopeName(string name)
        {
            DeleteIdentityOidcScopeNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityOidcScopeNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->DeleteIdentityOidcScopeName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/oidc/scope/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcScopeName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteIdentityOidcScopeNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteIdentityOidcScopeNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityOidcScopeNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->DeleteIdentityOidcScopeName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/oidc/scope/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityOidcScopeName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <returns></returns>
        public void DeleteIdentityPersonaIdId(string id)
        {
            DeleteIdentityPersonaIdIdWithHttpInfo(id);
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> DeleteIdentityPersonaIdIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->DeleteIdentityPersonaIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/identity/persona/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityPersonaIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteIdentityPersonaIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteIdentityPersonaIdIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> DeleteIdentityPersonaIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->DeleteIdentityPersonaIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/identity/persona/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIdentityPersonaIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetIdentityAliasId(string list)
        {
            GetIdentityAliasIdWithHttpInfo(list);
        }

        /// <summary>
        /// List all the alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityAliasIdWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityAliasId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/alias/id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityAliasId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityAliasIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityAliasIdWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List all the alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityAliasIdWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityAliasId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/alias/id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityAliasId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns></returns>
        public void GetIdentityAliasIdId(string id)
        {
            GetIdentityAliasIdIdWithHttpInfo(id);
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityAliasIdIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->GetIdentityAliasIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/alias/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityAliasIdIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityAliasIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->GetIdentityAliasIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/alias/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetIdentityEntityAliasId(string list)
        {
            GetIdentityEntityAliasIdWithHttpInfo(list);
        }

        /// <summary>
        /// List all the alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityEntityAliasIdWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityEntityAliasId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/entity-alias/id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityAliasId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityEntityAliasIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityEntityAliasIdWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List all the alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityEntityAliasIdWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityEntityAliasId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/entity-alias/id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityAliasId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns></returns>
        public void GetIdentityEntityAliasIdId(string id)
        {
            GetIdentityEntityAliasIdIdWithHttpInfo(id);
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityEntityAliasIdIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->GetIdentityEntityAliasIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/entity-alias/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityEntityAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityEntityAliasIdIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityEntityAliasIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->GetIdentityEntityAliasIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/entity-alias/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the entity IDs 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetIdentityEntityId(string list)
        {
            GetIdentityEntityIdWithHttpInfo(list);
        }

        /// <summary>
        /// List all the entity IDs 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityEntityIdWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityEntityId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/entity/id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the entity IDs 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityEntityIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityEntityIdWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List all the entity IDs 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityEntityIdWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityEntityId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/entity/id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an entity using entity ID 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <returns></returns>
        public void GetIdentityEntityIdId(string id)
        {
            GetIdentityEntityIdIdWithHttpInfo(id);
        }

        /// <summary>
        /// Update, read or delete an entity using entity ID 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityEntityIdIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->GetIdentityEntityIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/entity/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an entity using entity ID 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityEntityIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityEntityIdIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update, read or delete an entity using entity ID 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityEntityIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->GetIdentityEntityIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/entity/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the entity names 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetIdentityEntityName(string list)
        {
            GetIdentityEntityNameWithHttpInfo(list);
        }

        /// <summary>
        /// List all the entity names 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityEntityNameWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityEntityName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/entity/name", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the entity names 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityEntityNameAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityEntityNameWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List all the entity names 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityEntityNameWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityEntityName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/entity/name", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an entity using entity name 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <returns></returns>
        public void GetIdentityEntityNameName(string name)
        {
            GetIdentityEntityNameNameWithHttpInfo(name);
        }

        /// <summary>
        /// Update, read or delete an entity using entity name 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityEntityNameNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityEntityNameName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/entity/name/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an entity using entity name 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityEntityNameNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityEntityNameNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update, read or delete an entity using entity name 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityEntityNameNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityEntityNameName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/entity/name/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityEntityNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the group alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetIdentityGroupAliasId(string list)
        {
            GetIdentityGroupAliasIdWithHttpInfo(list);
        }

        /// <summary>
        /// List all the group alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityGroupAliasIdWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityGroupAliasId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/group-alias/id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupAliasId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the group alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityGroupAliasIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityGroupAliasIdWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List all the group alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityGroupAliasIdWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityGroupAliasId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/group-alias/id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupAliasId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <returns></returns>
        public void GetIdentityGroupAliasIdId(string id)
        {
            GetIdentityGroupAliasIdIdWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityGroupAliasIdIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->GetIdentityGroupAliasIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/group-alias/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityGroupAliasIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityGroupAliasIdIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityGroupAliasIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->GetIdentityGroupAliasIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/group-alias/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the group IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetIdentityGroupId(string list)
        {
            GetIdentityGroupIdWithHttpInfo(list);
        }

        /// <summary>
        /// List all the group IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityGroupIdWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityGroupId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/group/id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the group IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityGroupIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityGroupIdWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List all the group IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityGroupIdWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityGroupId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/group/id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update or delete an existing group using its ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <returns></returns>
        public void GetIdentityGroupIdId(string id)
        {
            GetIdentityGroupIdIdWithHttpInfo(id);
        }

        /// <summary>
        /// Update or delete an existing group using its ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityGroupIdIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->GetIdentityGroupIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/group/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update or delete an existing group using its ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityGroupIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityGroupIdIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update or delete an existing group using its ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityGroupIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->GetIdentityGroupIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/group/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetIdentityGroupName(string list)
        {
            GetIdentityGroupNameWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityGroupNameWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityGroupName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/group/name", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityGroupNameAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityGroupNameWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityGroupNameWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityGroupName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/group/name", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <returns></returns>
        public void GetIdentityGroupNameName(string name)
        {
            GetIdentityGroupNameNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityGroupNameNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityGroupNameName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/group/name/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityGroupNameNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityGroupNameNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityGroupNameNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityGroupNameName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/group/name/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityGroupNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List login enforcements 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetIdentityMfaLoginEnforcement(string list)
        {
            GetIdentityMfaLoginEnforcementWithHttpInfo(list);
        }

        /// <summary>
        /// List login enforcements 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaLoginEnforcementWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityMfaLoginEnforcement");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/login-enforcement", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaLoginEnforcement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List login enforcements 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityMfaLoginEnforcementAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityMfaLoginEnforcementWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List login enforcements 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaLoginEnforcementWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityMfaLoginEnforcement");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/login-enforcement", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaLoginEnforcement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the current login enforcement 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <returns></returns>
        public void GetIdentityMfaLoginEnforcementName(string name)
        {
            GetIdentityMfaLoginEnforcementNameWithHttpInfo(name);
        }

        /// <summary>
        /// Read the current login enforcement 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaLoginEnforcementNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityMfaLoginEnforcementName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/login-enforcement/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaLoginEnforcementName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the current login enforcement 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityMfaLoginEnforcementNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityMfaLoginEnforcementNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read the current login enforcement 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaLoginEnforcementNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityMfaLoginEnforcementName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/login-enforcement/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaLoginEnforcementName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List MFA method configurations for all MFA methods 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetIdentityMfaMethod(string list)
        {
            GetIdentityMfaMethodWithHttpInfo(list);
        }

        /// <summary>
        /// List MFA method configurations for all MFA methods 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaMethodWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityMfaMethod");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/method", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List MFA method configurations for all MFA methods 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityMfaMethodAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityMfaMethodWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List MFA method configurations for all MFA methods 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaMethodWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityMfaMethod");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/method", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetIdentityMfaMethodDuo(string list)
        {
            GetIdentityMfaMethodDuoWithHttpInfo(list);
        }

        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaMethodDuoWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityMfaMethodDuo");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/method/duo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodDuo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityMfaMethodDuoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityMfaMethodDuoWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaMethodDuoWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityMfaMethodDuo");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/method/duo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodDuo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns></returns>
        public void GetIdentityMfaMethodDuoMethodId(string methodId)
        {
            GetIdentityMfaMethodDuoMethodIdWithHttpInfo(methodId);
        }

        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaMethodDuoMethodIdWithHttpInfo(string methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->GetIdentityMfaMethodDuoMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/method/duo/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodDuoMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityMfaMethodDuoMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityMfaMethodDuoMethodIdWithHttpInfoAsync(methodId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaMethodDuoMethodIdWithHttpInfoAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->GetIdentityMfaMethodDuoMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/method/duo/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodDuoMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the current configuration for the given ID regardless of the MFA method type 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns></returns>
        public void GetIdentityMfaMethodMethodId(string methodId)
        {
            GetIdentityMfaMethodMethodIdWithHttpInfo(methodId);
        }

        /// <summary>
        /// Read the current configuration for the given ID regardless of the MFA method type 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaMethodMethodIdWithHttpInfo(string methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->GetIdentityMfaMethodMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/method/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the current configuration for the given ID regardless of the MFA method type 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityMfaMethodMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityMfaMethodMethodIdWithHttpInfoAsync(methodId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read the current configuration for the given ID regardless of the MFA method type 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaMethodMethodIdWithHttpInfoAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->GetIdentityMfaMethodMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/method/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetIdentityMfaMethodOkta(string list)
        {
            GetIdentityMfaMethodOktaWithHttpInfo(list);
        }

        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaMethodOktaWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityMfaMethodOkta");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/method/okta", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodOkta", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityMfaMethodOktaAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityMfaMethodOktaWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaMethodOktaWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityMfaMethodOkta");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/method/okta", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodOkta", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns></returns>
        public void GetIdentityMfaMethodOktaMethodId(string methodId)
        {
            GetIdentityMfaMethodOktaMethodIdWithHttpInfo(methodId);
        }

        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaMethodOktaMethodIdWithHttpInfo(string methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->GetIdentityMfaMethodOktaMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/method/okta/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodOktaMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityMfaMethodOktaMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityMfaMethodOktaMethodIdWithHttpInfoAsync(methodId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaMethodOktaMethodIdWithHttpInfoAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->GetIdentityMfaMethodOktaMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/method/okta/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodOktaMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetIdentityMfaMethodPingid(string list)
        {
            GetIdentityMfaMethodPingidWithHttpInfo(list);
        }

        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaMethodPingidWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityMfaMethodPingid");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/method/pingid", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodPingid", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityMfaMethodPingidAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityMfaMethodPingidWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaMethodPingidWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityMfaMethodPingid");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/method/pingid", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodPingid", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns></returns>
        public void GetIdentityMfaMethodPingidMethodId(string methodId)
        {
            GetIdentityMfaMethodPingidMethodIdWithHttpInfo(methodId);
        }

        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaMethodPingidMethodIdWithHttpInfo(string methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->GetIdentityMfaMethodPingidMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/method/pingid/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodPingidMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityMfaMethodPingidMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityMfaMethodPingidMethodIdWithHttpInfoAsync(methodId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaMethodPingidMethodIdWithHttpInfoAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->GetIdentityMfaMethodPingidMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/method/pingid/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodPingidMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetIdentityMfaMethodTotp(string list)
        {
            GetIdentityMfaMethodTotpWithHttpInfo(list);
        }

        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaMethodTotpWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityMfaMethodTotp");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/method/totp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodTotp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityMfaMethodTotpAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityMfaMethodTotpWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List MFA method configurations for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaMethodTotpWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityMfaMethodTotp");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/method/totp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodTotp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns></returns>
        public void GetIdentityMfaMethodTotpMethodId(string methodId)
        {
            GetIdentityMfaMethodTotpMethodIdWithHttpInfo(methodId);
        }

        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityMfaMethodTotpMethodIdWithHttpInfo(string methodId)
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->GetIdentityMfaMethodTotpMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/mfa/method/totp/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodTotpMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityMfaMethodTotpMethodIdAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityMfaMethodTotpMethodIdWithHttpInfoAsync(methodId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Read the current configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityMfaMethodTotpMethodIdWithHttpInfoAsync(string methodId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->GetIdentityMfaMethodTotpMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/mfa/method/totp/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityMfaMethodTotpMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetIdentityOidcAssignment(string list)
        {
            GetIdentityOidcAssignmentWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcAssignmentWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityOidcAssignment");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/assignment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcAssignment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityOidcAssignmentAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityOidcAssignmentWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcAssignmentWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityOidcAssignment");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/assignment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcAssignment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <returns></returns>
        public void GetIdentityOidcAssignmentName(string name)
        {
            GetIdentityOidcAssignmentNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcAssignmentNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcAssignmentName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/assignment/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcAssignmentName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityOidcAssignmentNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityOidcAssignmentNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcAssignmentNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcAssignmentName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/assignment/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcAssignmentName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetIdentityOidcClient(string list)
        {
            GetIdentityOidcClientWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcClientWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityOidcClient");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/client", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityOidcClientAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityOidcClientWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcClientWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityOidcClient");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/client", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <returns></returns>
        public void GetIdentityOidcClientName(string name)
        {
            GetIdentityOidcClientNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcClientNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcClientName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/client/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcClientName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityOidcClientNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityOidcClientNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcClientNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcClientName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/client/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcClientName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OIDC configuration 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetIdentityOidcConfig()
        {
            GetIdentityOidcConfigWithHttpInfo();
        }

        /// <summary>
        /// OIDC configuration 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcConfigWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OIDC configuration 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityOidcConfigAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityOidcConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// OIDC configuration 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcConfigWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List OIDC keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetIdentityOidcKey(string list)
        {
            GetIdentityOidcKeyWithHttpInfo(list);
        }

        /// <summary>
        /// List OIDC keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcKeyWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityOidcKey");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/key", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List OIDC keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityOidcKeyAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityOidcKeyWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List OIDC keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcKeyWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityOidcKey");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// CRUD operations for OIDC keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns></returns>
        public void GetIdentityOidcKeyName(string name)
        {
            GetIdentityOidcKeyNameWithHttpInfo(name);
        }

        /// <summary>
        /// CRUD operations for OIDC keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcKeyNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcKeyName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/key/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcKeyName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// CRUD operations for OIDC keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityOidcKeyNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityOidcKeyNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// CRUD operations for OIDC keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcKeyNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcKeyName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/key/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcKeyName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetIdentityOidcProvider(string list)
        {
            GetIdentityOidcProviderWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcProviderWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityOidcProvider");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/provider", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProvider", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityOidcProviderAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityOidcProviderWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcProviderWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityOidcProvider");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/provider", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProvider", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns></returns>
        public void GetIdentityOidcProviderName(string name)
        {
            GetIdentityOidcProviderNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcProviderNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcProviderName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/provider/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProviderName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityOidcProviderNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityOidcProviderNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcProviderNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcProviderName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/provider/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProviderName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns></returns>
        public void GetIdentityOidcProviderNameAuthorize(string name)
        {
            GetIdentityOidcProviderNameAuthorizeWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcProviderNameAuthorizeWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcProviderNameAuthorize");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/provider/{name}/authorize", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProviderNameAuthorize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityOidcProviderNameAuthorizeAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityOidcProviderNameAuthorizeWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcProviderNameAuthorizeWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcProviderNameAuthorize");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/provider/{name}/authorize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProviderNameAuthorize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns></returns>
        public void GetIdentityOidcProviderNameUserinfo(string name)
        {
            GetIdentityOidcProviderNameUserinfoWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcProviderNameUserinfoWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcProviderNameUserinfo");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/provider/{name}/userinfo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProviderNameUserinfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityOidcProviderNameUserinfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityOidcProviderNameUserinfoWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcProviderNameUserinfoWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcProviderNameUserinfo");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/provider/{name}/userinfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProviderNameUserinfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns></returns>
        public void GetIdentityOidcProviderNameWellKnownKeys(string name)
        {
            GetIdentityOidcProviderNameWellKnownKeysWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcProviderNameWellKnownKeysWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcProviderNameWellKnownKeys");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/provider/{name}/.well-known/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProviderNameWellKnownKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityOidcProviderNameWellKnownKeysAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityOidcProviderNameWellKnownKeysWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcProviderNameWellKnownKeysWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcProviderNameWellKnownKeys");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/provider/{name}/.well-known/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProviderNameWellKnownKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns></returns>
        public void GetIdentityOidcProviderNameWellKnownOpenidConfiguration(string name)
        {
            GetIdentityOidcProviderNameWellKnownOpenidConfigurationWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcProviderNameWellKnownOpenidConfigurationWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcProviderNameWellKnownOpenidConfiguration");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/provider/{name}/.well-known/openid-configuration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProviderNameWellKnownOpenidConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityOidcProviderNameWellKnownOpenidConfigurationAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityOidcProviderNameWellKnownOpenidConfigurationWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcProviderNameWellKnownOpenidConfigurationWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcProviderNameWellKnownOpenidConfiguration");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/provider/{name}/.well-known/openid-configuration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcProviderNameWellKnownOpenidConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List configured OIDC roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetIdentityOidcRole(string list)
        {
            GetIdentityOidcRoleWithHttpInfo(list);
        }

        /// <summary>
        /// List configured OIDC roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcRoleWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityOidcRole");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/role", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List configured OIDC roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityOidcRoleAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityOidcRoleWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List configured OIDC roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcRoleWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityOidcRole");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/role", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// CRUD operations on OIDC Roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void GetIdentityOidcRoleName(string name)
        {
            GetIdentityOidcRoleNameWithHttpInfo(name);
        }

        /// <summary>
        /// CRUD operations on OIDC Roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcRoleNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// CRUD operations on OIDC Roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityOidcRoleNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityOidcRoleNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// CRUD operations on OIDC Roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcRoleNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetIdentityOidcScope(string list)
        {
            GetIdentityOidcScopeWithHttpInfo(list);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcScopeWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityOidcScope");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/scope", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcScope", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityOidcScopeAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityOidcScopeWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcScopeWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityOidcScope");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/scope", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcScope", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <returns></returns>
        public void GetIdentityOidcScopeName(string name)
        {
            GetIdentityOidcScopeNameWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcScopeNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcScopeName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/scope/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcScopeName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityOidcScopeNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityOidcScopeNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcScopeNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcScopeName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/scope/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcScopeName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate an OIDC token 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns></returns>
        public void GetIdentityOidcTokenName(string name)
        {
            GetIdentityOidcTokenNameWithHttpInfo(name);
        }

        /// <summary>
        /// Generate an OIDC token 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcTokenNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcTokenName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/token/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcTokenName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate an OIDC token 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityOidcTokenNameAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityOidcTokenNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Generate an OIDC token 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcTokenNameWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->GetIdentityOidcTokenName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/token/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcTokenName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve public keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetIdentityOidcWellKnownKeys()
        {
            GetIdentityOidcWellKnownKeysWithHttpInfo();
        }

        /// <summary>
        /// Retrieve public keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcWellKnownKeysWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/.well-known/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcWellKnownKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve public keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityOidcWellKnownKeysAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityOidcWellKnownKeysWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieve public keys 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcWellKnownKeysWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/.well-known/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcWellKnownKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query OIDC configurations 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GetIdentityOidcWellKnownOpenidConfiguration()
        {
            GetIdentityOidcWellKnownOpenidConfigurationWithHttpInfo();
        }

        /// <summary>
        /// Query OIDC configurations 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityOidcWellKnownOpenidConfigurationWithHttpInfo()
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/oidc/.well-known/openid-configuration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcWellKnownOpenidConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query OIDC configurations 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityOidcWellKnownOpenidConfigurationAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityOidcWellKnownOpenidConfigurationWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Query OIDC configurations 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityOidcWellKnownOpenidConfigurationWithHttpInfoAsync(CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/oidc/.well-known/openid-configuration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityOidcWellKnownOpenidConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns></returns>
        public void GetIdentityPersonaId(string list)
        {
            GetIdentityPersonaIdWithHttpInfo(list);
        }

        /// <summary>
        /// List all the alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityPersonaIdWithHttpInfo(string list)
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityPersonaId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/persona/id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityPersonaId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityPersonaIdAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityPersonaIdWithHttpInfoAsync(list, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// List all the alias IDs. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="list">Must be set to &#x60;true&#x60;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityPersonaIdWithHttpInfoAsync(string list, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'list' is set
            if (list == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'list' when calling IdentityApi->GetIdentityPersonaId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(VaultClient.Client.ClientUtils.ParameterToMultiMap("", "list", list));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/persona/id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityPersonaId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <returns></returns>
        public void GetIdentityPersonaIdId(string id)
        {
            GetIdentityPersonaIdIdWithHttpInfo(id);
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> GetIdentityPersonaIdIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->GetIdentityPersonaIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/identity/persona/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityPersonaIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task GetIdentityPersonaIdIdAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            await GetIdentityPersonaIdIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> GetIdentityPersonaIdIdWithHttpInfoAsync(string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->GetIdentityPersonaIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/identity/persona/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityPersonaIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new alias. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityAliasRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityAlias(IdentityAliasRequest identityAliasRequest = default(IdentityAliasRequest))
        {
            PostIdentityAliasWithHttpInfo(identityAliasRequest);
        }

        /// <summary>
        /// Create a new alias. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityAliasRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityAliasWithHttpInfo(IdentityAliasRequest identityAliasRequest = default(IdentityAliasRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityAliasRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/alias", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new alias. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityAliasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityAliasAsync(IdentityAliasRequest identityAliasRequest = default(IdentityAliasRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityAliasWithHttpInfoAsync(identityAliasRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a new alias. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityAliasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityAliasWithHttpInfoAsync(IdentityAliasRequest identityAliasRequest = default(IdentityAliasRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityAliasRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/alias", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityAliasIdRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityAliasIdId(string id, IdentityAliasIdRequest identityAliasIdRequest = default(IdentityAliasIdRequest))
        {
            PostIdentityAliasIdIdWithHttpInfo(id, identityAliasIdRequest);
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityAliasIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityAliasIdIdWithHttpInfo(string id, IdentityAliasIdRequest identityAliasIdRequest = default(IdentityAliasIdRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->PostIdentityAliasIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityAliasIdRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/alias/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityAliasIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityAliasIdIdAsync(string id, IdentityAliasIdRequest identityAliasIdRequest = default(IdentityAliasIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityAliasIdIdWithHttpInfoAsync(id, identityAliasIdRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityAliasIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityAliasIdIdWithHttpInfoAsync(string id, IdentityAliasIdRequest identityAliasIdRequest = default(IdentityAliasIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->PostIdentityAliasIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityAliasIdRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/alias/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new entity 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityEntity(IdentityEntityRequest identityEntityRequest = default(IdentityEntityRequest))
        {
            PostIdentityEntityWithHttpInfo(identityEntityRequest);
        }

        /// <summary>
        /// Create a new entity 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityEntityWithHttpInfo(IdentityEntityRequest identityEntityRequest = default(IdentityEntityRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityEntityRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/entity", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new entity 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityEntityAsync(IdentityEntityRequest identityEntityRequest = default(IdentityEntityRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityEntityWithHttpInfoAsync(identityEntityRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a new entity 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityEntityWithHttpInfoAsync(IdentityEntityRequest identityEntityRequest = default(IdentityEntityRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityEntityRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/entity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new alias. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityAliasRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityEntityAlias(IdentityEntityAliasRequest identityEntityAliasRequest = default(IdentityEntityAliasRequest))
        {
            PostIdentityEntityAliasWithHttpInfo(identityEntityAliasRequest);
        }

        /// <summary>
        /// Create a new alias. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityAliasRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityEntityAliasWithHttpInfo(IdentityEntityAliasRequest identityEntityAliasRequest = default(IdentityEntityAliasRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityEntityAliasRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/entity-alias", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new alias. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityAliasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityEntityAliasAsync(IdentityEntityAliasRequest identityEntityAliasRequest = default(IdentityEntityAliasRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityEntityAliasWithHttpInfoAsync(identityEntityAliasRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a new alias. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityAliasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityEntityAliasWithHttpInfoAsync(IdentityEntityAliasRequest identityEntityAliasRequest = default(IdentityEntityAliasRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityEntityAliasRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/entity-alias", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityEntityAliasIdRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityEntityAliasIdId(string id, IdentityEntityAliasIdRequest identityEntityAliasIdRequest = default(IdentityEntityAliasIdRequest))
        {
            PostIdentityEntityAliasIdIdWithHttpInfo(id, identityEntityAliasIdRequest);
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityEntityAliasIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityEntityAliasIdIdWithHttpInfo(string id, IdentityEntityAliasIdRequest identityEntityAliasIdRequest = default(IdentityEntityAliasIdRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->PostIdentityEntityAliasIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityEntityAliasIdRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/entity-alias/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityEntityAliasIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityEntityAliasIdIdAsync(string id, IdentityEntityAliasIdRequest identityEntityAliasIdRequest = default(IdentityEntityAliasIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityEntityAliasIdIdWithHttpInfoAsync(id, identityEntityAliasIdRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the alias</param>
        /// <param name="identityEntityAliasIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityEntityAliasIdIdWithHttpInfoAsync(string id, IdentityEntityAliasIdRequest identityEntityAliasIdRequest = default(IdentityEntityAliasIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->PostIdentityEntityAliasIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityEntityAliasIdRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/entity-alias/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all of the entities provided 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityBatchDeleteRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityEntityBatchDelete(IdentityEntityBatchDeleteRequest identityEntityBatchDeleteRequest = default(IdentityEntityBatchDeleteRequest))
        {
            PostIdentityEntityBatchDeleteWithHttpInfo(identityEntityBatchDeleteRequest);
        }

        /// <summary>
        /// Delete all of the entities provided 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityBatchDeleteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityEntityBatchDeleteWithHttpInfo(IdentityEntityBatchDeleteRequest identityEntityBatchDeleteRequest = default(IdentityEntityBatchDeleteRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityEntityBatchDeleteRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/entity/batch-delete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityBatchDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all of the entities provided 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityBatchDeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityEntityBatchDeleteAsync(IdentityEntityBatchDeleteRequest identityEntityBatchDeleteRequest = default(IdentityEntityBatchDeleteRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityEntityBatchDeleteWithHttpInfoAsync(identityEntityBatchDeleteRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete all of the entities provided 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityBatchDeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityEntityBatchDeleteWithHttpInfoAsync(IdentityEntityBatchDeleteRequest identityEntityBatchDeleteRequest = default(IdentityEntityBatchDeleteRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityEntityBatchDeleteRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/entity/batch-delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityBatchDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an entity using entity ID 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="identityEntityIdRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityEntityIdId(string id, IdentityEntityIdRequest identityEntityIdRequest = default(IdentityEntityIdRequest))
        {
            PostIdentityEntityIdIdWithHttpInfo(id, identityEntityIdRequest);
        }

        /// <summary>
        /// Update, read or delete an entity using entity ID 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="identityEntityIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityEntityIdIdWithHttpInfo(string id, IdentityEntityIdRequest identityEntityIdRequest = default(IdentityEntityIdRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->PostIdentityEntityIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityEntityIdRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/entity/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an entity using entity ID 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="identityEntityIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityEntityIdIdAsync(string id, IdentityEntityIdRequest identityEntityIdRequest = default(IdentityEntityIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityEntityIdIdWithHttpInfoAsync(id, identityEntityIdRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update, read or delete an entity using entity ID 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the entity. If set, updates the corresponding existing entity.</param>
        /// <param name="identityEntityIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityEntityIdIdWithHttpInfoAsync(string id, IdentityEntityIdRequest identityEntityIdRequest = default(IdentityEntityIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->PostIdentityEntityIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityEntityIdRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/entity/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Merge two or more entities together 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityMergeRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityEntityMerge(IdentityEntityMergeRequest identityEntityMergeRequest = default(IdentityEntityMergeRequest))
        {
            PostIdentityEntityMergeWithHttpInfo(identityEntityMergeRequest);
        }

        /// <summary>
        /// Merge two or more entities together 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityMergeRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityEntityMergeWithHttpInfo(IdentityEntityMergeRequest identityEntityMergeRequest = default(IdentityEntityMergeRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityEntityMergeRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/entity/merge", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityMerge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Merge two or more entities together 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityMergeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityEntityMergeAsync(IdentityEntityMergeRequest identityEntityMergeRequest = default(IdentityEntityMergeRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityEntityMergeWithHttpInfoAsync(identityEntityMergeRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Merge two or more entities together 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityEntityMergeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityEntityMergeWithHttpInfoAsync(IdentityEntityMergeRequest identityEntityMergeRequest = default(IdentityEntityMergeRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityEntityMergeRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/entity/merge", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityMerge", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an entity using entity name 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="identityEntityNameRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityEntityNameName(string name, IdentityEntityNameRequest identityEntityNameRequest = default(IdentityEntityNameRequest))
        {
            PostIdentityEntityNameNameWithHttpInfo(name, identityEntityNameRequest);
        }

        /// <summary>
        /// Update, read or delete an entity using entity name 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="identityEntityNameRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityEntityNameNameWithHttpInfo(string name, IdentityEntityNameRequest identityEntityNameRequest = default(IdentityEntityNameRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityEntityNameName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityEntityNameRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/entity/name/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an entity using entity name 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="identityEntityNameRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityEntityNameNameAsync(string name, IdentityEntityNameRequest identityEntityNameRequest = default(IdentityEntityNameRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityEntityNameNameWithHttpInfoAsync(name, identityEntityNameRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update, read or delete an entity using entity name 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the entity</param>
        /// <param name="identityEntityNameRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityEntityNameNameWithHttpInfoAsync(string name, IdentityEntityNameRequest identityEntityNameRequest = default(IdentityEntityNameRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityEntityNameName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityEntityNameRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/entity/name/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityEntityNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new group. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityGroup(IdentityGroupRequest identityGroupRequest = default(IdentityGroupRequest))
        {
            PostIdentityGroupWithHttpInfo(identityGroupRequest);
        }

        /// <summary>
        /// Create a new group. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityGroupWithHttpInfo(IdentityGroupRequest identityGroupRequest = default(IdentityGroupRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityGroupRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/group", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new group. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityGroupAsync(IdentityGroupRequest identityGroupRequest = default(IdentityGroupRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityGroupWithHttpInfoAsync(identityGroupRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a new group. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityGroupWithHttpInfoAsync(IdentityGroupRequest identityGroupRequest = default(IdentityGroupRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityGroupRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/group", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new group alias, or updates an existing one. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupAliasRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityGroupAlias(IdentityGroupAliasRequest identityGroupAliasRequest = default(IdentityGroupAliasRequest))
        {
            PostIdentityGroupAliasWithHttpInfo(identityGroupAliasRequest);
        }

        /// <summary>
        /// Creates a new group alias, or updates an existing one. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupAliasRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityGroupAliasWithHttpInfo(IdentityGroupAliasRequest identityGroupAliasRequest = default(IdentityGroupAliasRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityGroupAliasRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/group-alias", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityGroupAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new group alias, or updates an existing one. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupAliasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityGroupAliasAsync(IdentityGroupAliasRequest identityGroupAliasRequest = default(IdentityGroupAliasRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityGroupAliasWithHttpInfoAsync(identityGroupAliasRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates a new group alias, or updates an existing one. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityGroupAliasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityGroupAliasWithHttpInfoAsync(IdentityGroupAliasRequest identityGroupAliasRequest = default(IdentityGroupAliasRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityGroupAliasRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/group-alias", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityGroupAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="identityGroupAliasIdRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityGroupAliasIdId(string id, IdentityGroupAliasIdRequest identityGroupAliasIdRequest = default(IdentityGroupAliasIdRequest))
        {
            PostIdentityGroupAliasIdIdWithHttpInfo(id, identityGroupAliasIdRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="identityGroupAliasIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityGroupAliasIdIdWithHttpInfo(string id, IdentityGroupAliasIdRequest identityGroupAliasIdRequest = default(IdentityGroupAliasIdRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->PostIdentityGroupAliasIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityGroupAliasIdRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/group-alias/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityGroupAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="identityGroupAliasIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityGroupAliasIdIdAsync(string id, IdentityGroupAliasIdRequest identityGroupAliasIdRequest = default(IdentityGroupAliasIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityGroupAliasIdIdWithHttpInfoAsync(id, identityGroupAliasIdRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group alias.</param>
        /// <param name="identityGroupAliasIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityGroupAliasIdIdWithHttpInfoAsync(string id, IdentityGroupAliasIdRequest identityGroupAliasIdRequest = default(IdentityGroupAliasIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->PostIdentityGroupAliasIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityGroupAliasIdRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/group-alias/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityGroupAliasIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update or delete an existing group using its ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="identityGroupIdRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityGroupIdId(string id, IdentityGroupIdRequest identityGroupIdRequest = default(IdentityGroupIdRequest))
        {
            PostIdentityGroupIdIdWithHttpInfo(id, identityGroupIdRequest);
        }

        /// <summary>
        /// Update or delete an existing group using its ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="identityGroupIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityGroupIdIdWithHttpInfo(string id, IdentityGroupIdRequest identityGroupIdRequest = default(IdentityGroupIdRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->PostIdentityGroupIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityGroupIdRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/group/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityGroupIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update or delete an existing group using its ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="identityGroupIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityGroupIdIdAsync(string id, IdentityGroupIdRequest identityGroupIdRequest = default(IdentityGroupIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityGroupIdIdWithHttpInfoAsync(id, identityGroupIdRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update or delete an existing group using its ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the group. If set, updates the corresponding existing group.</param>
        /// <param name="identityGroupIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityGroupIdIdWithHttpInfoAsync(string id, IdentityGroupIdRequest identityGroupIdRequest = default(IdentityGroupIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->PostIdentityGroupIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityGroupIdRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/group/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityGroupIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="identityGroupNameRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityGroupNameName(string name, IdentityGroupNameRequest identityGroupNameRequest = default(IdentityGroupNameRequest))
        {
            PostIdentityGroupNameNameWithHttpInfo(name, identityGroupNameRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="identityGroupNameRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityGroupNameNameWithHttpInfo(string name, IdentityGroupNameRequest identityGroupNameRequest = default(IdentityGroupNameRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityGroupNameName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityGroupNameRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/group/name/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityGroupNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="identityGroupNameRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityGroupNameNameAsync(string name, IdentityGroupNameRequest identityGroupNameRequest = default(IdentityGroupNameRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityGroupNameNameWithHttpInfoAsync(name, identityGroupNameRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the group.</param>
        /// <param name="identityGroupNameRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityGroupNameNameWithHttpInfoAsync(string name, IdentityGroupNameRequest identityGroupNameRequest = default(IdentityGroupNameRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityGroupNameName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityGroupNameRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/group/name/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityGroupNameName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query entities based on various properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupEntityRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityLookupEntity(IdentityLookupEntityRequest identityLookupEntityRequest = default(IdentityLookupEntityRequest))
        {
            PostIdentityLookupEntityWithHttpInfo(identityLookupEntityRequest);
        }

        /// <summary>
        /// Query entities based on various properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupEntityRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityLookupEntityWithHttpInfo(IdentityLookupEntityRequest identityLookupEntityRequest = default(IdentityLookupEntityRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityLookupEntityRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/lookup/entity", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityLookupEntity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query entities based on various properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupEntityRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityLookupEntityAsync(IdentityLookupEntityRequest identityLookupEntityRequest = default(IdentityLookupEntityRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityLookupEntityWithHttpInfoAsync(identityLookupEntityRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Query entities based on various properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupEntityRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityLookupEntityWithHttpInfoAsync(IdentityLookupEntityRequest identityLookupEntityRequest = default(IdentityLookupEntityRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityLookupEntityRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/lookup/entity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityLookupEntity", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query groups based on various properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupGroupRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityLookupGroup(IdentityLookupGroupRequest identityLookupGroupRequest = default(IdentityLookupGroupRequest))
        {
            PostIdentityLookupGroupWithHttpInfo(identityLookupGroupRequest);
        }

        /// <summary>
        /// Query groups based on various properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityLookupGroupWithHttpInfo(IdentityLookupGroupRequest identityLookupGroupRequest = default(IdentityLookupGroupRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityLookupGroupRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/lookup/group", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityLookupGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query groups based on various properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityLookupGroupAsync(IdentityLookupGroupRequest identityLookupGroupRequest = default(IdentityLookupGroupRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityLookupGroupWithHttpInfoAsync(identityLookupGroupRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Query groups based on various properties. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityLookupGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityLookupGroupWithHttpInfoAsync(IdentityLookupGroupRequest identityLookupGroupRequest = default(IdentityLookupGroupRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityLookupGroupRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/lookup/group", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityLookupGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or update a login enforcement 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="identityMfaLoginEnforcementRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityMfaLoginEnforcementName(string name, IdentityMfaLoginEnforcementRequest identityMfaLoginEnforcementRequest = default(IdentityMfaLoginEnforcementRequest))
        {
            PostIdentityMfaLoginEnforcementNameWithHttpInfo(name, identityMfaLoginEnforcementRequest);
        }

        /// <summary>
        /// Create or update a login enforcement 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="identityMfaLoginEnforcementRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityMfaLoginEnforcementNameWithHttpInfo(string name, IdentityMfaLoginEnforcementRequest identityMfaLoginEnforcementRequest = default(IdentityMfaLoginEnforcementRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityMfaLoginEnforcementName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityMfaLoginEnforcementRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/mfa/login-enforcement/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaLoginEnforcementName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or update a login enforcement 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="identityMfaLoginEnforcementRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityMfaLoginEnforcementNameAsync(string name, IdentityMfaLoginEnforcementRequest identityMfaLoginEnforcementRequest = default(IdentityMfaLoginEnforcementRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityMfaLoginEnforcementNameWithHttpInfoAsync(name, identityMfaLoginEnforcementRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create or update a login enforcement 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name for this login enforcement configuration</param>
        /// <param name="identityMfaLoginEnforcementRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityMfaLoginEnforcementNameWithHttpInfoAsync(string name, IdentityMfaLoginEnforcementRequest identityMfaLoginEnforcementRequest = default(IdentityMfaLoginEnforcementRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityMfaLoginEnforcementName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityMfaLoginEnforcementRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/mfa/login-enforcement/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaLoginEnforcementName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodDuoRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityMfaMethodDuoMethodId(string methodId, IdentityMfaMethodDuoRequest identityMfaMethodDuoRequest = default(IdentityMfaMethodDuoRequest))
        {
            PostIdentityMfaMethodDuoMethodIdWithHttpInfo(methodId, identityMfaMethodDuoRequest);
        }

        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodDuoRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityMfaMethodDuoMethodIdWithHttpInfo(string methodId, IdentityMfaMethodDuoRequest identityMfaMethodDuoRequest = default(IdentityMfaMethodDuoRequest))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->PostIdentityMfaMethodDuoMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter
            localVarRequestOptions.Data = identityMfaMethodDuoRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/mfa/method/duo/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodDuoMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodDuoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityMfaMethodDuoMethodIdAsync(string methodId, IdentityMfaMethodDuoRequest identityMfaMethodDuoRequest = default(IdentityMfaMethodDuoRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityMfaMethodDuoMethodIdWithHttpInfoAsync(methodId, identityMfaMethodDuoRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodDuoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityMfaMethodDuoMethodIdWithHttpInfoAsync(string methodId, IdentityMfaMethodDuoRequest identityMfaMethodDuoRequest = default(IdentityMfaMethodDuoRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->PostIdentityMfaMethodDuoMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter
            localVarRequestOptions.Data = identityMfaMethodDuoRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/mfa/method/duo/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodDuoMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodOktaRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityMfaMethodOktaMethodId(string methodId, IdentityMfaMethodOktaRequest identityMfaMethodOktaRequest = default(IdentityMfaMethodOktaRequest))
        {
            PostIdentityMfaMethodOktaMethodIdWithHttpInfo(methodId, identityMfaMethodOktaRequest);
        }

        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodOktaRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityMfaMethodOktaMethodIdWithHttpInfo(string methodId, IdentityMfaMethodOktaRequest identityMfaMethodOktaRequest = default(IdentityMfaMethodOktaRequest))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->PostIdentityMfaMethodOktaMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter
            localVarRequestOptions.Data = identityMfaMethodOktaRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/mfa/method/okta/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodOktaMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodOktaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityMfaMethodOktaMethodIdAsync(string methodId, IdentityMfaMethodOktaRequest identityMfaMethodOktaRequest = default(IdentityMfaMethodOktaRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityMfaMethodOktaMethodIdWithHttpInfoAsync(methodId, identityMfaMethodOktaRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodOktaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityMfaMethodOktaMethodIdWithHttpInfoAsync(string methodId, IdentityMfaMethodOktaRequest identityMfaMethodOktaRequest = default(IdentityMfaMethodOktaRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->PostIdentityMfaMethodOktaMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter
            localVarRequestOptions.Data = identityMfaMethodOktaRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/mfa/method/okta/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodOktaMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodPingidRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityMfaMethodPingidMethodId(string methodId, IdentityMfaMethodPingidRequest identityMfaMethodPingidRequest = default(IdentityMfaMethodPingidRequest))
        {
            PostIdentityMfaMethodPingidMethodIdWithHttpInfo(methodId, identityMfaMethodPingidRequest);
        }

        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodPingidRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityMfaMethodPingidMethodIdWithHttpInfo(string methodId, IdentityMfaMethodPingidRequest identityMfaMethodPingidRequest = default(IdentityMfaMethodPingidRequest))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->PostIdentityMfaMethodPingidMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter
            localVarRequestOptions.Data = identityMfaMethodPingidRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/mfa/method/pingid/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodPingidMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodPingidRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityMfaMethodPingidMethodIdAsync(string methodId, IdentityMfaMethodPingidRequest identityMfaMethodPingidRequest = default(IdentityMfaMethodPingidRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityMfaMethodPingidMethodIdWithHttpInfoAsync(methodId, identityMfaMethodPingidRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodPingidRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityMfaMethodPingidMethodIdWithHttpInfoAsync(string methodId, IdentityMfaMethodPingidRequest identityMfaMethodPingidRequest = default(IdentityMfaMethodPingidRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->PostIdentityMfaMethodPingidMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter
            localVarRequestOptions.Data = identityMfaMethodPingidRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/mfa/method/pingid/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodPingidMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a TOTP secret for the given MFA method ID on the given entity 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminDestroyRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityMfaMethodTotpAdminDestroy(IdentityMfaMethodTotpAdminDestroyRequest identityMfaMethodTotpAdminDestroyRequest = default(IdentityMfaMethodTotpAdminDestroyRequest))
        {
            PostIdentityMfaMethodTotpAdminDestroyWithHttpInfo(identityMfaMethodTotpAdminDestroyRequest);
        }

        /// <summary>
        /// Destroys a TOTP secret for the given MFA method ID on the given entity 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminDestroyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityMfaMethodTotpAdminDestroyWithHttpInfo(IdentityMfaMethodTotpAdminDestroyRequest identityMfaMethodTotpAdminDestroyRequest = default(IdentityMfaMethodTotpAdminDestroyRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityMfaMethodTotpAdminDestroyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/mfa/method/totp/admin-destroy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodTotpAdminDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a TOTP secret for the given MFA method ID on the given entity 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminDestroyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityMfaMethodTotpAdminDestroyAsync(IdentityMfaMethodTotpAdminDestroyRequest identityMfaMethodTotpAdminDestroyRequest = default(IdentityMfaMethodTotpAdminDestroyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityMfaMethodTotpAdminDestroyWithHttpInfoAsync(identityMfaMethodTotpAdminDestroyRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Destroys a TOTP secret for the given MFA method ID on the given entity 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminDestroyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityMfaMethodTotpAdminDestroyWithHttpInfoAsync(IdentityMfaMethodTotpAdminDestroyRequest identityMfaMethodTotpAdminDestroyRequest = default(IdentityMfaMethodTotpAdminDestroyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityMfaMethodTotpAdminDestroyRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/mfa/method/totp/admin-destroy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodTotpAdminDestroy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminGenerateRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityMfaMethodTotpAdminGenerate(IdentityMfaMethodTotpAdminGenerateRequest identityMfaMethodTotpAdminGenerateRequest = default(IdentityMfaMethodTotpAdminGenerateRequest))
        {
            PostIdentityMfaMethodTotpAdminGenerateWithHttpInfo(identityMfaMethodTotpAdminGenerateRequest);
        }

        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminGenerateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityMfaMethodTotpAdminGenerateWithHttpInfo(IdentityMfaMethodTotpAdminGenerateRequest identityMfaMethodTotpAdminGenerateRequest = default(IdentityMfaMethodTotpAdminGenerateRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityMfaMethodTotpAdminGenerateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/mfa/method/totp/admin-generate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodTotpAdminGenerate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminGenerateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityMfaMethodTotpAdminGenerateAsync(IdentityMfaMethodTotpAdminGenerateRequest identityMfaMethodTotpAdminGenerateRequest = default(IdentityMfaMethodTotpAdminGenerateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityMfaMethodTotpAdminGenerateWithHttpInfoAsync(identityMfaMethodTotpAdminGenerateRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpAdminGenerateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityMfaMethodTotpAdminGenerateWithHttpInfoAsync(IdentityMfaMethodTotpAdminGenerateRequest identityMfaMethodTotpAdminGenerateRequest = default(IdentityMfaMethodTotpAdminGenerateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityMfaMethodTotpAdminGenerateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/mfa/method/totp/admin-generate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodTotpAdminGenerate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpGenerateRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityMfaMethodTotpGenerate(IdentityMfaMethodTotpGenerateRequest identityMfaMethodTotpGenerateRequest = default(IdentityMfaMethodTotpGenerateRequest))
        {
            PostIdentityMfaMethodTotpGenerateWithHttpInfo(identityMfaMethodTotpGenerateRequest);
        }

        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpGenerateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityMfaMethodTotpGenerateWithHttpInfo(IdentityMfaMethodTotpGenerateRequest identityMfaMethodTotpGenerateRequest = default(IdentityMfaMethodTotpGenerateRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityMfaMethodTotpGenerateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/mfa/method/totp/generate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodTotpGenerate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpGenerateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityMfaMethodTotpGenerateAsync(IdentityMfaMethodTotpGenerateRequest identityMfaMethodTotpGenerateRequest = default(IdentityMfaMethodTotpGenerateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityMfaMethodTotpGenerateWithHttpInfoAsync(identityMfaMethodTotpGenerateRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update or create TOTP secret for the given method ID on the given entity. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityMfaMethodTotpGenerateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityMfaMethodTotpGenerateWithHttpInfoAsync(IdentityMfaMethodTotpGenerateRequest identityMfaMethodTotpGenerateRequest = default(IdentityMfaMethodTotpGenerateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityMfaMethodTotpGenerateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/mfa/method/totp/generate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodTotpGenerate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodTotpRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityMfaMethodTotpMethodId(string methodId, IdentityMfaMethodTotpRequest identityMfaMethodTotpRequest = default(IdentityMfaMethodTotpRequest))
        {
            PostIdentityMfaMethodTotpMethodIdWithHttpInfo(methodId, identityMfaMethodTotpRequest);
        }

        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodTotpRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityMfaMethodTotpMethodIdWithHttpInfo(string methodId, IdentityMfaMethodTotpRequest identityMfaMethodTotpRequest = default(IdentityMfaMethodTotpRequest))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->PostIdentityMfaMethodTotpMethodId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter
            localVarRequestOptions.Data = identityMfaMethodTotpRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/mfa/method/totp/{method_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodTotpMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodTotpRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityMfaMethodTotpMethodIdAsync(string methodId, IdentityMfaMethodTotpRequest identityMfaMethodTotpRequest = default(IdentityMfaMethodTotpRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityMfaMethodTotpMethodIdWithHttpInfoAsync(methodId, identityMfaMethodTotpRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update or create a configuration for the given MFA method 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="methodId">The unique identifier for this MFA method.</param>
        /// <param name="identityMfaMethodTotpRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityMfaMethodTotpMethodIdWithHttpInfoAsync(string methodId, IdentityMfaMethodTotpRequest identityMfaMethodTotpRequest = default(IdentityMfaMethodTotpRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'methodId' when calling IdentityApi->PostIdentityMfaMethodTotpMethodId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("method_id", VaultClient.Client.ClientUtils.ParameterToString(methodId)); // path parameter
            localVarRequestOptions.Data = identityMfaMethodTotpRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/mfa/method/totp/{method_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityMfaMethodTotpMethodId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="identityOidcAssignmentRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityOidcAssignmentName(string name, IdentityOidcAssignmentRequest identityOidcAssignmentRequest = default(IdentityOidcAssignmentRequest))
        {
            PostIdentityOidcAssignmentNameWithHttpInfo(name, identityOidcAssignmentRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="identityOidcAssignmentRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcAssignmentNameWithHttpInfo(string name, IdentityOidcAssignmentRequest identityOidcAssignmentRequest = default(IdentityOidcAssignmentRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityOidcAssignmentName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcAssignmentRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/assignment/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcAssignmentName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="identityOidcAssignmentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityOidcAssignmentNameAsync(string name, IdentityOidcAssignmentRequest identityOidcAssignmentRequest = default(IdentityOidcAssignmentRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityOidcAssignmentNameWithHttpInfoAsync(name, identityOidcAssignmentRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the assignment</param>
        /// <param name="identityOidcAssignmentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcAssignmentNameWithHttpInfoAsync(string name, IdentityOidcAssignmentRequest identityOidcAssignmentRequest = default(IdentityOidcAssignmentRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityOidcAssignmentName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcAssignmentRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/assignment/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcAssignmentName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="identityOidcClientRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityOidcClientName(string name, IdentityOidcClientRequest identityOidcClientRequest = default(IdentityOidcClientRequest))
        {
            PostIdentityOidcClientNameWithHttpInfo(name, identityOidcClientRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="identityOidcClientRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcClientNameWithHttpInfo(string name, IdentityOidcClientRequest identityOidcClientRequest = default(IdentityOidcClientRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityOidcClientName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcClientRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/client/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcClientName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="identityOidcClientRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityOidcClientNameAsync(string name, IdentityOidcClientRequest identityOidcClientRequest = default(IdentityOidcClientRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityOidcClientNameWithHttpInfoAsync(name, identityOidcClientRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the client.</param>
        /// <param name="identityOidcClientRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcClientNameWithHttpInfoAsync(string name, IdentityOidcClientRequest identityOidcClientRequest = default(IdentityOidcClientRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityOidcClientName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcClientRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/client/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcClientName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OIDC configuration 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcConfigRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityOidcConfig(IdentityOidcConfigRequest identityOidcConfigRequest = default(IdentityOidcConfigRequest))
        {
            PostIdentityOidcConfigWithHttpInfo(identityOidcConfigRequest);
        }

        /// <summary>
        /// OIDC configuration 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcConfigRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcConfigWithHttpInfo(IdentityOidcConfigRequest identityOidcConfigRequest = default(IdentityOidcConfigRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityOidcConfigRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/config", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OIDC configuration 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityOidcConfigAsync(IdentityOidcConfigRequest identityOidcConfigRequest = default(IdentityOidcConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityOidcConfigWithHttpInfoAsync(identityOidcConfigRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// OIDC configuration 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcConfigRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcConfigWithHttpInfoAsync(IdentityOidcConfigRequest identityOidcConfigRequest = default(IdentityOidcConfigRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityOidcConfigRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify the authenticity of an OIDC token 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcIntrospectRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityOidcIntrospect(IdentityOidcIntrospectRequest identityOidcIntrospectRequest = default(IdentityOidcIntrospectRequest))
        {
            PostIdentityOidcIntrospectWithHttpInfo(identityOidcIntrospectRequest);
        }

        /// <summary>
        /// Verify the authenticity of an OIDC token 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcIntrospectRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcIntrospectWithHttpInfo(IdentityOidcIntrospectRequest identityOidcIntrospectRequest = default(IdentityOidcIntrospectRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityOidcIntrospectRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/introspect", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcIntrospect", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify the authenticity of an OIDC token 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcIntrospectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityOidcIntrospectAsync(IdentityOidcIntrospectRequest identityOidcIntrospectRequest = default(IdentityOidcIntrospectRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityOidcIntrospectWithHttpInfoAsync(identityOidcIntrospectRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Verify the authenticity of an OIDC token 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityOidcIntrospectRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcIntrospectWithHttpInfoAsync(IdentityOidcIntrospectRequest identityOidcIntrospectRequest = default(IdentityOidcIntrospectRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityOidcIntrospectRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/introspect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcIntrospect", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// CRUD operations for OIDC keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityOidcKeyName(string name, IdentityOidcKeyRequest identityOidcKeyRequest = default(IdentityOidcKeyRequest))
        {
            PostIdentityOidcKeyNameWithHttpInfo(name, identityOidcKeyRequest);
        }

        /// <summary>
        /// CRUD operations for OIDC keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcKeyNameWithHttpInfo(string name, IdentityOidcKeyRequest identityOidcKeyRequest = default(IdentityOidcKeyRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityOidcKeyName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcKeyRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/key/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcKeyName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// CRUD operations for OIDC keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityOidcKeyNameAsync(string name, IdentityOidcKeyRequest identityOidcKeyRequest = default(IdentityOidcKeyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityOidcKeyNameWithHttpInfoAsync(name, identityOidcKeyRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// CRUD operations for OIDC keys. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcKeyNameWithHttpInfoAsync(string name, IdentityOidcKeyRequest identityOidcKeyRequest = default(IdentityOidcKeyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityOidcKeyName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcKeyRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/key/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcKeyName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rotate a named OIDC key. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRotateRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityOidcKeyNameRotate(string name, IdentityOidcKeyRotateRequest identityOidcKeyRotateRequest = default(IdentityOidcKeyRotateRequest))
        {
            PostIdentityOidcKeyNameRotateWithHttpInfo(name, identityOidcKeyRotateRequest);
        }

        /// <summary>
        /// Rotate a named OIDC key. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRotateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcKeyNameRotateWithHttpInfo(string name, IdentityOidcKeyRotateRequest identityOidcKeyRotateRequest = default(IdentityOidcKeyRotateRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityOidcKeyNameRotate");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcKeyRotateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/key/{name}/rotate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcKeyNameRotate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rotate a named OIDC key. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRotateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityOidcKeyNameRotateAsync(string name, IdentityOidcKeyRotateRequest identityOidcKeyRotateRequest = default(IdentityOidcKeyRotateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityOidcKeyNameRotateWithHttpInfoAsync(name, identityOidcKeyRotateRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Rotate a named OIDC key. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the key</param>
        /// <param name="identityOidcKeyRotateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcKeyNameRotateWithHttpInfoAsync(string name, IdentityOidcKeyRotateRequest identityOidcKeyRotateRequest = default(IdentityOidcKeyRotateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityOidcKeyNameRotate");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcKeyRotateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/key/{name}/rotate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcKeyNameRotate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityOidcProviderName(string name, IdentityOidcProviderRequest identityOidcProviderRequest = default(IdentityOidcProviderRequest))
        {
            PostIdentityOidcProviderNameWithHttpInfo(name, identityOidcProviderRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcProviderNameWithHttpInfo(string name, IdentityOidcProviderRequest identityOidcProviderRequest = default(IdentityOidcProviderRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityOidcProviderName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcProviderRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/provider/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcProviderName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityOidcProviderNameAsync(string name, IdentityOidcProviderRequest identityOidcProviderRequest = default(IdentityOidcProviderRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityOidcProviderNameWithHttpInfoAsync(name, identityOidcProviderRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcProviderNameWithHttpInfoAsync(string name, IdentityOidcProviderRequest identityOidcProviderRequest = default(IdentityOidcProviderRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityOidcProviderName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcProviderRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/provider/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcProviderName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderAuthorizeRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityOidcProviderNameAuthorize(string name, IdentityOidcProviderAuthorizeRequest identityOidcProviderAuthorizeRequest = default(IdentityOidcProviderAuthorizeRequest))
        {
            PostIdentityOidcProviderNameAuthorizeWithHttpInfo(name, identityOidcProviderAuthorizeRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderAuthorizeRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcProviderNameAuthorizeWithHttpInfo(string name, IdentityOidcProviderAuthorizeRequest identityOidcProviderAuthorizeRequest = default(IdentityOidcProviderAuthorizeRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityOidcProviderNameAuthorize");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcProviderAuthorizeRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/provider/{name}/authorize", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcProviderNameAuthorize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderAuthorizeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityOidcProviderNameAuthorizeAsync(string name, IdentityOidcProviderAuthorizeRequest identityOidcProviderAuthorizeRequest = default(IdentityOidcProviderAuthorizeRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityOidcProviderNameAuthorizeWithHttpInfoAsync(name, identityOidcProviderAuthorizeRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderAuthorizeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcProviderNameAuthorizeWithHttpInfoAsync(string name, IdentityOidcProviderAuthorizeRequest identityOidcProviderAuthorizeRequest = default(IdentityOidcProviderAuthorizeRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityOidcProviderNameAuthorize");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcProviderAuthorizeRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/provider/{name}/authorize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcProviderNameAuthorize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderTokenRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityOidcProviderNameToken(string name, IdentityOidcProviderTokenRequest identityOidcProviderTokenRequest = default(IdentityOidcProviderTokenRequest))
        {
            PostIdentityOidcProviderNameTokenWithHttpInfo(name, identityOidcProviderTokenRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderTokenRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcProviderNameTokenWithHttpInfo(string name, IdentityOidcProviderTokenRequest identityOidcProviderTokenRequest = default(IdentityOidcProviderTokenRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityOidcProviderNameToken");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcProviderTokenRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/provider/{name}/token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcProviderNameToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderTokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityOidcProviderNameTokenAsync(string name, IdentityOidcProviderTokenRequest identityOidcProviderTokenRequest = default(IdentityOidcProviderTokenRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityOidcProviderNameTokenWithHttpInfoAsync(name, identityOidcProviderTokenRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="identityOidcProviderTokenRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcProviderNameTokenWithHttpInfoAsync(string name, IdentityOidcProviderTokenRequest identityOidcProviderTokenRequest = default(IdentityOidcProviderTokenRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityOidcProviderNameToken");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcProviderTokenRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/provider/{name}/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcProviderNameToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns></returns>
        public void PostIdentityOidcProviderNameUserinfo(string name)
        {
            PostIdentityOidcProviderNameUserinfoWithHttpInfo(name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcProviderNameUserinfoWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityOidcProviderNameUserinfo");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/provider/{name}/userinfo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcProviderNameUserinfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityOidcProviderNameUserinfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityOidcProviderNameUserinfoWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the provider</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcProviderNameUserinfoWithHttpInfoAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityOidcProviderNameUserinfo");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/provider/{name}/userinfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcProviderNameUserinfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// CRUD operations on OIDC Roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="identityOidcRoleRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityOidcRoleName(string name, IdentityOidcRoleRequest identityOidcRoleRequest = default(IdentityOidcRoleRequest))
        {
            PostIdentityOidcRoleNameWithHttpInfo(name, identityOidcRoleRequest);
        }

        /// <summary>
        /// CRUD operations on OIDC Roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="identityOidcRoleRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcRoleNameWithHttpInfo(string name, IdentityOidcRoleRequest identityOidcRoleRequest = default(IdentityOidcRoleRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityOidcRoleName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcRoleRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/role/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// CRUD operations on OIDC Roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="identityOidcRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityOidcRoleNameAsync(string name, IdentityOidcRoleRequest identityOidcRoleRequest = default(IdentityOidcRoleRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityOidcRoleNameWithHttpInfoAsync(name, identityOidcRoleRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// CRUD operations on OIDC Roles 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the role</param>
        /// <param name="identityOidcRoleRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcRoleNameWithHttpInfoAsync(string name, IdentityOidcRoleRequest identityOidcRoleRequest = default(IdentityOidcRoleRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityOidcRoleName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcRoleRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/role/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcRoleName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="identityOidcScopeRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityOidcScopeName(string name, IdentityOidcScopeRequest identityOidcScopeRequest = default(IdentityOidcScopeRequest))
        {
            PostIdentityOidcScopeNameWithHttpInfo(name, identityOidcScopeRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="identityOidcScopeRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityOidcScopeNameWithHttpInfo(string name, IdentityOidcScopeRequest identityOidcScopeRequest = default(IdentityOidcScopeRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityOidcScopeName");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcScopeRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/oidc/scope/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcScopeName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="identityOidcScopeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityOidcScopeNameAsync(string name, IdentityOidcScopeRequest identityOidcScopeRequest = default(IdentityOidcScopeRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityOidcScopeNameWithHttpInfoAsync(name, identityOidcScopeRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the scope</param>
        /// <param name="identityOidcScopeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityOidcScopeNameWithHttpInfoAsync(string name, IdentityOidcScopeRequest identityOidcScopeRequest = default(IdentityOidcScopeRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'name' when calling IdentityApi->PostIdentityOidcScopeName");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", VaultClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = identityOidcScopeRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/oidc/scope/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityOidcScopeName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new alias. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityPersonaRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityPersona(IdentityPersonaRequest identityPersonaRequest = default(IdentityPersonaRequest))
        {
            PostIdentityPersonaWithHttpInfo(identityPersonaRequest);
        }

        /// <summary>
        /// Create a new alias. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityPersonaRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityPersonaWithHttpInfo(IdentityPersonaRequest identityPersonaRequest = default(IdentityPersonaRequest))
        {
            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityPersonaRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/persona", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityPersona", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new alias. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityPersonaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityPersonaAsync(IdentityPersonaRequest identityPersonaRequest = default(IdentityPersonaRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityPersonaWithHttpInfoAsync(identityPersonaRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a new alias. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityPersonaRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityPersonaWithHttpInfoAsync(IdentityPersonaRequest identityPersonaRequest = default(IdentityPersonaRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = identityPersonaRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/persona", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityPersona", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="identityPersonaIdRequest"> (optional)</param>
        /// <returns></returns>
        public void PostIdentityPersonaIdId(string id, IdentityPersonaIdRequest identityPersonaIdRequest = default(IdentityPersonaIdRequest))
        {
            PostIdentityPersonaIdIdWithHttpInfo(id, identityPersonaIdRequest);
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="identityPersonaIdRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VaultClient.Client.ApiResponse<Object> PostIdentityPersonaIdIdWithHttpInfo(string id, IdentityPersonaIdRequest identityPersonaIdRequest = default(IdentityPersonaIdRequest))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->PostIdentityPersonaIdId");

            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityPersonaIdRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/identity/persona/id/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityPersonaIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="identityPersonaIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task PostIdentityPersonaIdIdAsync(string id, IdentityPersonaIdRequest identityPersonaIdRequest = default(IdentityPersonaIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            await PostIdentityPersonaIdIdWithHttpInfoAsync(id, identityPersonaIdRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update, read or delete an alias ID. 
        /// </summary>
        /// <exception cref="VaultClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the persona</param>
        /// <param name="identityPersonaIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<VaultClient.Client.ApiResponse<Object>> PostIdentityPersonaIdIdWithHttpInfoAsync(string id, IdentityPersonaIdRequest identityPersonaIdRequest = default(IdentityPersonaIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new VaultClient.Client.ApiException(400, "Missing required parameter 'id' when calling IdentityApi->PostIdentityPersonaIdId");


            VaultClient.Client.RequestOptions localVarRequestOptions = new VaultClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = VaultClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VaultClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", VaultClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = identityPersonaIdRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/identity/persona/id/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostIdentityPersonaIdId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
