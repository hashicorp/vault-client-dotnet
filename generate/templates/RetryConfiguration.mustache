{{>partial_header}}

using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using Polly;
using Polly.Retry;

namespace {{packageName}}.Client
{
    /// <summary>
    /// Configuration class to set the polly retry policies to be applied to the requests.
    /// </summary>
    public class RetryConfiguration
    {
        /// <summary>
        /// Http status codes to retry on
        /// </summary>
        private static readonly HttpStatusCode[] _retryStatusCodes = {
            HttpStatusCode.RequestTimeout,      // 408
            HttpStatusCode.PreconditionFailed,  // 412
            HttpStatusCode.InternalServerError, // 500
            HttpStatusCode.BadGateway,          // 502
            HttpStatusCode.ServiceUnavailable,  // 503
            HttpStatusCode.GatewayTimeout,      // 504
        };

        /// <summary>
        /// Async retry policy
        /// </summary>
        public Polly.AsyncPolicy<HttpResponseMessage> AsyncRetryPolicy { get; set; }

        /// <summary>
        /// Creates a new RetryConfiguration object
        /// </summary>
        public RetryConfiguration(int MaxRetryCount, TimeSpan TimeSpan)
        {
            AsyncRetryPolicy = Policy
                    .HandleResult<HttpResponseMessage>(r => _retryStatusCodes.Contains(r.StatusCode))       
                    .WaitAndRetryAsync(MaxRetryCount, _ => TimeSpan);
        }

        /// <summary>
        /// Creates a new RetryConfiguration object
        /// </summary>
        public RetryConfiguration(AsyncRetryPolicy<HttpResponseMessage> asyncRetryPolicy)
        {
            AsyncRetryPolicy = asyncRetryPolicy;
        }
    }
}
