{{>partial_header}}

using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using Polly;
using Polly.Retry;

namespace {{packageName}}.Client
{
    /// <summary>
    /// Configuration class to set the polly retry policies to be applied to the requests.
    /// </summary>
    public class RetryConfiguration
    {
        /// <summary>
        /// Http status codes to retry on
        /// </summary>
        private static readonly HttpStatusCode[] _retryStatusCodes = {
            HttpStatusCode.RequestTimeout,
            HttpStatusCode.InternalServerError,
            HttpStatusCode.BadGateway, 
            HttpStatusCode.ServiceUnavailable,
            HttpStatusCode.GatewayTimeout
        };

        /// <summary>
        /// Async retry policy
        /// </summary>
        public AsyncPolicy<HttpResponseMessage> AsyncRetryPolicy { get; set; }

        /// <summary>
        /// Creates a new RetryConfiguration object
        /// </summary>
        public RetryConfiguration(int MaxRetryCount, TimeSpan TimeSpan)
        {
            AsyncRetryPolicy = Policy
                    .Handle<HttpRequestException>() 
                    .OrResult<HttpResponseMessage>(r => _retryStatusCodes.Contains(r.StatusCode))       
                    .RetryAsync(MaxRetryCount, (result, retryCount, context) => Console.WriteLine($"try: {retryCount}"));
        }

        /// <summary>
        /// Creates a new RetryConfiguration object
        /// </summary>
        public RetryConfiguration(AsyncRetryPolicy<HttpResponseMessage> asyncRetryPolicy)
        {
            AsyncRetryPolicy = asyncRetryPolicy;
        }
    }
}
