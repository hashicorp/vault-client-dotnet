    /// <summary>
    /// {{description}}{{#unless description}}{{classname}}{{/unless}}
    /// </summary>
    [DataContract(Name = "{{{name}}}")]
    {{>visibility}} partial class {{classname}} : {{#with parent}}{{{.}}}, {{/with}}IEquatable<{{classname}}>{{#if validatable}}, IValidatableObject{{/if}}
    {
        {{#each vars ~}}{{#with items.isEnum}}{{#with items}}{{#unless complexType}}{{>modelInnerEnum}}{{/unless}}{{/with}}{{/with}}
        {{#if isEnum}}{{#unless complexType}}{{>modelInnerEnum}}{{/unless}}{{/if}}
        {{#if isEnum}}/// <summary>
        /// {{description}}{{#unless description}}Gets or Sets {{{name}}}{{/unless}}
        /// </summary>
        {{#with description}}/// <value>{{.}}</value>{{/with}}
        {{#unless conditionalSerialization}}
        [DataMember(Name = "{{baseName}}"{{#with required}}, IsRequired = true{{/with}}, EmitDefaultValue = {{#with vendorExtensions.x-emit-default-value}}true{{/with}}{{#unless vendorExtensions.x-emit-default-value}}{{#if isBoolean}}true{{/if}}{{#unless isBoolean}}{{#if isNullable}}true{{/if}}{{#unless isNullable}}false{{/unless}}{{/unless}}{{/unless}})]
        {{#if deprecated}}[Obsolete]{{/if ~}}
        public {{{complexType}}}{{#unless complexType}}{{{datatypeWithEnum}}}{{/unless}}{{#unless isContainer}}{{#unless required}}?{{/unless}}{{/unless}} {{name}} { get; set; }
        {{#if isReadOnly}}
        /// <summary>
        /// Returns false as {{name}} should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerialize{{name}}()
        {
            return false;
        }{{/if}}{{/unless}}
        {{#with conditionalSerialization}}{{#if isReadOnly}}
        [DataMember(Name = "{{baseName}}"{{#with required}}, IsRequired = true{{/with}}, EmitDefaultValue = {{#with vendorExtensions.x-emit-default-value}}true{{/with}}{{#unless vendorExtensions.x-emit-default-value}}{{#if isBoolean}}true{{/if}}{{#unless isBoolean}}{{#if isNullable}}true{{/if}}{{#unless isNullable}}false{{/unless}}{{/unless}}{{/unless}})]
        {{#if deprecated}}[Obsolete]{{/if ~}}
        public {{{complexType}}}{{#unless complexType}}{{{datatypeWithEnum}}}{{/unless}}{{#unless isContainer}}{{#unless required}}?{{/unless}}{{/unless}} {{name}} { get; set; }

        /// <summary>
        /// Returns false as {{name}} should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerialize{{name}}()
        {
            return false;
        }{{/if}}

        {{#unless isReadOnly}}[DataMember(Name = "{{baseName}}"{{#with required}}, IsRequired = true{{/with}}, EmitDefaultValue = {{#with vendorExtensions.x-emit-default-value}}true{{/with}}{{#unless vendorExtensions.x-emit-default-value}}{{#if isBoolean}}true{{/if}}{{#unless isBoolean}}{{#if isNullable}}true{{/if}}{{#unless isNullable}}false{{/unless}}{{/unless}}{{/unless}})]
        {{#if deprecated}}[Obsolete]{{/if ~}}
        public {{{complexType}}}{{#unless complexType}}{{{datatypeWithEnum}}}{{/unless}}{{#unless isContainer}}{{#unless required}}?{{/unless}}{{/unless}} {{name}}
        {
            get{ return _{{name}};}
            set
            {
                _{{name}} = value;
                _flag{{name}} = true;
            }
        }
        private {{{complexType}}}{{#unless complexType}}{{{datatypeWithEnum}}}{{/unless}}{{#unless isContainer}}{{#unless required}}?{{/unless}}{{/unless}} _{{name}};
        private bool _flag{{name}};

        /// <summary>
        /// Returns false as {{name}} should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerialize{{name}}()
        {
            return _flag{{name}};
        }{{/unless}}{{/with}}{{/if}}{{/each}}
    {{#if hasRequired}}{{#unless hasOnlyReadOnly}}
        /// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        {{#unless isAdditionalPropertiesTrue}}protected {{classname}}() { }{{/unless}}
        {{#if isAdditionalPropertiesTrue}}
        protected {{classname}}()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }{{/if}}{{/unless}}{{/if}}

        /// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}" /> class.
        /// </summary>
        {{#each readWriteVars}}
        /// <param name="{{#with lambda.camelcase_param}}{{name}}{{/with}}">{{description}}{{#unless description}}{{#with lambda.camelcase_param}}{{name}}{{/with}}{{/unless}}{{#with required}} (required){{/with}}{{#with defaultValue}} (default to {{.}}){{/with}}.</param>
        {{/each}}
        {{#if hasOnlyReadOnly}}[JsonConstructorAttribute]{{/if}}
        public {{classname}}({{#each readWriteVars}}{{{datatypeWithEnum}}}{{#if isEnum}}{{#unless isContainer}}{{#unless required}}?{{/unless}}{{/unless}}{{/if}} {{#with lambda.camelcase_param}}{{name}}{{/with}} = {{#with defaultValue}}{{#unless isDateTime}}{{{defaultValue}}}{{/unless}}{{#if isDateTime}}default({{{datatypeWithEnum}}}){{/if}}{{/with}}{{#unless defaultValue}}default({{{datatypeWithEnum}}}{{#if isEnum}}{{#unless isContainer}}{{#unless required}}?{{/unless}}{{/unless}}{{/if}}){{/unless}}{{#unless @last}}, {{/unless}}{{/each}}){{#with parent}} : base({{#each parentVars}}{{#with lambda.camelcase_param}}{{name}}{{/with}}{{#unless @last}}, {{/unless}}{{/each}}){{/with}}
        {
            {{#if vars}}{{#each vars ~}}{{#unless isInherited}}{{#unless isReadOnly}}{{#with required}}{{#unless conditionalSerialization}}{{#unless vendorExtensions.x-csharp-value-type}}
            // to ensure "{{#with lambda.camelcase_param}}{{name}}{{/with}}" is required (not null)
            if ({{#with lambda.camelcase_param}}{{name}}{{/with}} == null) {
                throw new ArgumentNullException("{{#with lambda.camelcase_param}}{{name}}{{/with}} is a required property for {{classname}} and cannot be null");
            }
            this.{{name}} = {{#with lambda.camelcase_param}}{{name}}{{/with}};{{/unless}}
            {{#with vendorExtensions.x-csharp-value-type ~}}this.{{name}} = {{#with lambda.camelcase_param}}{{name}}{{/with}};{{/with}}{{/unless}}
            {{#with conditionalSerialization ~}}{{#unless vendorExtensions.x-csharp-value-type}}
            // to ensure "{{#with lambda.camelcase_param}}{{name}}{{/with}}" is required (not null)
            if ({{#with lambda.camelcase_param}}{{name}}{{/with}} == null) {
                throw new ArgumentNullException("{{#with lambda.camelcase_param}}{{name}}{{/with}} is a required property for {{classname}} and cannot be null");
            }
            this._{{name}} = {{#with lambda.camelcase_param}}{{name}}{{/with}};{{/unless}}
            {{#with vendorExtensions.x-csharp-value-type ~}}this._{{name}} = {{#with lambda.camelcase_param}}{{name}}{{/with}};{{/with}}{{/with}}{{/with}}{{/unless}}{{/unless}}{{/each}}{{/if ~}}
            {{#if vars}}{{#each vars ~}}{{#unless isInherited}}{{#unless isReadOnly}}{{#unless required}}{{#with defaultValue}}{{#unless conditionalSerialization}}{{#unless vendorExtensions.x-csharp-value-type}}
            // use default value if no "{{#with lambda.camelcase_param}}{{name}}{{/with}}" provided
            this.{{name}} = {{#with lambda.camelcase_param}}{{name}}{{/with}} ?? {{{defaultValue}}};{{/unless}}
            {{#with vendorExtensions.x-csharp-value-type ~}}
            this.{{name}} = {{#with lambda.camelcase_param}}{{name}}{{/with}};{{/with}}{{/unless}}{{/with}}
            {{#unless defaultValue ~}}{{#unless conditionalSerialization}}this.{{name}} = {{#with lambda.camelcase_param}}{{name}}{{/with}};{{/unless}}
            {{#with conditionalSerialization ~}}this._{{name}} = {{#with lambda.camelcase_param}}{{name}}{{/with}};{{/with}}{{/unless}}{{/unless}}{{/unless}}{{/unless}}{{/each}}{{/if ~}}
            {{#if isAdditionalPropertiesTrue ~}}this.AdditionalProperties = new Dictionary<string, object>();{{/if}}
        }

        {{#each vars}}{{#unless isInherited}}{{#unless isEnum}}/// <summary>
        /// {{description}}{{#unless description}}Gets or Sets {{{name}}}{{/unless}}
        /// </summary>{{#with description}}
        /// <value>{{.}}</value>{{/with}}
        {{#unless conditionalSerialization}}[DataMember(Name = "{{baseName}}"{{#with required}}, IsRequired = true{{/with}}, EmitDefaultValue = {{#with vendorExtensions.x-emit-default-value}}true{{/with}}{{#unless vendorExtensions.x-emit-default-value}}{{#if isBoolean}}true{{/if}}{{#unless isBoolean}}{{#if isNullable}}true{{/if}}{{#unless isNullable}}false{{/unless}}{{/unless}}{{/unless}})]
        {{#if isDate}}[JsonConverter(typeof(OpenAPIDateConverter))]{{/if}}
        {{#if deprecated}}[Obsolete]{{/if ~}}
        public {{{dataType}}} {{name}} { get; {{#if isReadOnly}}private {{/if}}set; }

        {{#if isReadOnly}}/// <summary>
        /// Returns false as {{name}} should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerialize{{name}}()
        {
            return false;
        }{{/if}}{{/unless}}
        {{#with conditionalSerialization}}{{#if isReadOnly}}[DataMember(Name = "{{baseName}}"{{#with required}}, IsRequired = true{{/with}}, EmitDefaultValue = {{#with vendorExtensions.x-emit-default-value}}true{{/with}}{{#unless vendorExtensions.x-emit-default-value}}{{#if isBoolean}}true{{/if}}{{#unless isBoolean}}{{#if isNullable}}true{{/if}}{{#unless isNullable}}false{{/unless}}{{/unless}}{{/unless}})]
        {{#if isDate}}[JsonConverter(typeof(OpenAPIDateConverter))]{{/if}}
        {{#if deprecated}}[Obsolete]{{/if}}
        public {{{dataType}}} {{name}} { get; private set; }

        /// <summary>
        /// Returns false as {{name}} should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerialize{{name}}()
        {
            return false;
        }{{/if}}
        {{#unless isReadOnly}}{{#if isDate}}
        [JsonConverter(typeof(OpenAPIDateConverter))]{{/if}}
        [DataMember(Name = "{{baseName}}"{{#with required}}, IsRequired = true{{/with}}, EmitDefaultValue = {{#with vendorExtensions.x-emit-default-value}}true{{/with}}{{#unless vendorExtensions.x-emit-default-value}}{{#if isBoolean}}true{{/if}}{{#unless isBoolean}}{{#if isNullable}}true{{/if}}{{#unless isNullable}}false{{/unless}}{{/unless}}{{/unless}})]
        {{#if deprecated}}[Obsolete]{{/if}}
        public {{{dataType}}} {{name}}
        {
            get{ return _{{name}};}
            set
            {
                _{{name}} = value;
                _flag{{name}} = true;
            }
        }
        private {{{dataType}}} _{{name}};
        private bool _flag{{name}};

        /// <summary>
        /// Returns false as {{name}} should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerialize{{name}}()
        {
            return _flag{{name}};
        }{{/unless}}{{/with}}{{/unless}}{{/unless}}{{/each}}
        {{#if isAdditionalPropertiesTrue}}
        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }
        {{/if}}
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class {{classname}} {\n");
            {{#if parent}}{{#with parent ~}}
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            {{/with ~}}{{/if ~}}
            {{#if vars}}{{#each vars~}}
            sb.Append("  {{name}}: ").Append({{name}}).Append("\n");
            {{/each ~}}{{/if ~}}
            {{#if isAdditionalPropertiesTrue}}sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            {{/if ~}}
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public {{#with parent}}{{#unless isArray}}{{#unless isMap}}override {{/unless}}{{/unless}}{{/with}}{{#unless parent}}virtual {{/unless}}string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            {{#if useCompareNetObjects ~}}return OpenAPIClientUtils.compareLogic.Compare(this, input as {{classname}}).AreEqual;{{/if ~}}
            {{#unless useCompareNetObjects ~}}return this.Equals(input as {{classname}});{{/unless}}
        }

        /// <summary>
        /// Returns true if {{classname}} instances are equal
        /// </summary>
        /// <param name="input">Instance of {{classname}} to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals({{classname}} input)
        {
            {{~#if useCompareNetObjects ~}}return OpenAPIClientUtils.compareLogic.Compare(this, input).AreEqual;{{/if}}
            {{~#unless useCompareNetObjects ~}}if (input == null)
            {
                return false;
            }
            return {{#each vars}}{{#with parent}}base.Equals(input) && {{/with}}{{#unless isContainer}}
                (
                    this.{{name}} == input.{{name}} ||
                    {{#unless vendorExtensions.x-is-value-type}}(this.{{name}} != null &&
                    this.{{name}}.Equals(input.{{name}})){{/unless}}
                    {{#with vendorExtensions.x-is-value-type}}this.{{name}}.Equals(input.{{name}}){{/with}}
                ){{#unless @last}} && {{/unless}}{{/unless}}{{#if isContainer}}
                (
                    this.{{name}} == input.{{name}} ||
                    {{#unless vendorExtensions.x-is-value-type}}this.{{name}} != null &&
                    input.{{name}} != null &&
                    {{/unless}}this.{{name}}.SequenceEqual(input.{{name}})
                ){{#unless @last}} && {{/unless}}{{/if}}{{/each}}{{#unless vars}}{{#with parent}}base.Equals(input){{/with}}{{#unless parent}}false{{/unless}}{{/unless}}{{#unless isAdditionalPropertiesTrue}};{{/unless}}
                {{#if isAdditionalPropertiesTrue}}
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());{{/if}}{{/unless}}
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                {{#with parent ~}}
                int hashCode = base.GetHashCode();
                {{/with ~}}
                {{#unless parent ~}}
                int hashCode = 41;
                {{/unless ~}}
                {{#if vars ~}}{{#each vars}}{{#unless vendorExtensions.x-is-value-type}}
                if (this.{{name}} != null)
                {
                    hashCode = (hashCode * 59) + this.{{name}}.GetHashCode();
                }{{/unless}}
                {{#with vendorExtensions.x-is-value-type}}
                hashCode = (hashCode * 59) + this.{{name}}.GetHashCode();{{/with}}{{/each}}{{/if ~}}
                {{#if isAdditionalPropertiesTrue ~}}
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }{{/if}}
                return hashCode;
            }
        }
{{#if validatable}}{{#unless discriminator}}
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        { {{/unless}}
            {{#with parent}}{{#unless isArray}}{{#unless isMap}}
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }{{/unless}}{{/unless}}{{/with ~}}
            {{#each vars}}{{#if hasValidation}}{{#unless isEnum}}{{#with maxLength}}// {{{name}}} ({{{dataType}}}) maxLength
            if (this.{{{name}}} != null && this.{{{name}}}.Length > {{maxLength}})
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for {{{name}}}, length must be less than {{maxLength}}.", new [] { "{{{name}}}" });
            }{{/with}}
            {{#with minLength}}// {{{name}}} ({{{dataType}}}) minLength
            if (this.{{{name}}} != null && this.{{{name}}}.Length < {{minLength}})
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for {{{name}}}, length must be greater than {{minLength}}.", new [] { "{{{name}}}" });
            }{{/with}}
            {{#with maximum}}// {{{name}}} ({{{dataType}}}) maximum
            if (this.{{{name}}} > ({{{dataType}}}){{maximum}})
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for {{{name}}}, must be a value less than or equal to {{maximum}}.", new [] { "{{{name}}}" });
            }{{/with}}
            {{#with minimum}}// {{{name}}} ({{{dataType}}}) minimum
            if (this.{{{name}}} < ({{{dataType}}}){{minimum}})
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for {{{name}}}, must be a value greater than or equal to {{minimum}}.", new [] { "{{{name}}}" });
            }{{/with}}
            {{#with pattern}}{{#unless isByteArray}}// {{{name}}} ({{{dataType}}}) pattern
            Regex regex{{{name}}} = new Regex(@"{{{vendorExtensions.x-regex}}}"{{#with vendorExtensions.x-modifiers}}{{#if @first}}, {{/if}}RegexOptions.{{{.}}}{{#unless @last}} | {{/unless}}{{/with}});
            if (false == regex{{{name}}}.Match(this.{{{name}}}).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for {{{name}}}, must match a pattern of " + regex{{{name}}}, new [] { "{{{name}}}" });
            }{{/unless}}{{/with}}{{/unless}}{{/if}}{{/each ~}}
            yield break;
        }{{/if}}
    }
