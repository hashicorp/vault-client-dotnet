{{>partial_header}}

using System;
using System.Threading;
using System.Threading.Tasks;
using {{packageName}}.Client;
{{#if hasImport}}using {{packageName}}.{{modelPackage}};
{{/if}}

namespace {{packageName}}.{{apiPackage}}
{
    {{#with operations}}

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    {{>visibility}} interface {{interfacePrefix}}{{classname}}Sync : IApiAccessor
    {
        #region Synchronous Operations
        {{#each operation}}
        /// <summary>
        /// {{summary}}
        /// </summary>
        /// <exception cref="{{packageName}}ApiException">Thrown when fails to make API call</exception>
        {{#if bodyParam}}{{~#with bodyParam ~}}
        /// <param name="{{paramName}}">{{description}}{{#unless required}} (optional{{#with defaultValue}}, default to {{.}}{{/with}}){{/unless}}{{#if isDeprecated}} (deprecated){{/if}}</param>
        {{/with}}{{/if ~}}
        {{#if pathParams}}{{#each pathParams~}}
        /// <param name="{{paramName}}">{{description}}{{#unless required}} (optional{{#with defaultValue}}, default to {{.}}{{/with}}){{/unless}}{{#if isDeprecated}} (deprecated){{/if}}</param>
        {{/each ~}}{{/if ~}}
        {{#if queryParams}}{{#each queryParams ~}}{{#unless required}}
        /// <param name="{{paramName}}">{{description}}{{#unless required}} (optional{{#with defaultValue}}, default to {{.}}{{/with}}){{/unless}}{{#if isDeprecated}} (deprecated){{/if}}</param>
        {{/unless}}{{/each}}{{/if ~}}
        /// <returns>VaultResponse of {{returnType}}{{#unless returnType}}Object(void){{/unless}}</returns>
        /// <param name="wrapTTL">
        /// Sets the X-Vault-Wrap-TTL Header
        /// <remarks>
        /// This will take precedence over client level wrapTTL value
        /// </remarks>
        /// <see href="See https://www.vaultproject.io/docs/concepts/response-wrapping">Vault Response Wrapping</see>
        /// </param>
        {{#if isDeprecated}}
        [Obsolete]
        {{/if ~}}
        VaultResponse<{{{returnType}}}{{#unless returnType}}Object{{/unless}}> {{operationId}}({{#each pathParams}}{{#with required}}{{{dataType}}} {{paramName}}, {{/with}}{{/each}}{{#with bodyParam}}{{{dataType}}} {{{paramName}}}, {{/with}}{{#each pathParams}}{{#unless required}}{{{dataType}}} {{paramName}}{{#if optionalMethodArgument}} = {{#with defaultValue}}{{{.}}}{{/with}}{{/if}}, {{/unless}}{{/each}}{{#each queryParams}}{{#unless required}}{{{dataType}}} {{paramName}} = default({{{dataType}}}), {{/unless}}{{/each}}TimeSpan? wrapTTL = null);
        {{/each}}
        #endregion Synchronous Operations
    }

    {{#if supportsAsync}}
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    {{>visibility}} interface {{interfacePrefix}}{{classname}}Async : IApiAccessor
    {
        #region Asynchronous Operations
        {{#each operation}}
        /// <summary>
        /// {{summary}}
        /// </summary>
        /// <exception cref="{{packageName}}ApiException">Thrown when fails to make API call</exception>
        {{#if bodyParam}}{{~#with bodyParam ~}}
        /// <param name="{{paramName}}">{{description}}{{#unless required}} (optional{{#with defaultValue}}, default to {{.}}{{/with}}){{/unless}}{{#if isDeprecated}} (deprecated){{/if}}</param>
        {{/with}}{{/if ~}}
        {{#if pathParams}}{{#each pathParams~}}
        /// <param name="{{paramName}}">{{description}}{{#unless required}} (optional{{#with defaultValue}}, default to {{.}}{{/with}}){{/unless}}{{#if isDeprecated}} (deprecated){{/if}}</param>
        {{/each ~}}{{/if ~}}
        {{#if queryParams}}{{#each queryParams ~}}{{#unless required}}
        /// <param name="{{paramName}}">{{description}}{{#unless required}} (optional{{#with defaultValue}}, default to {{.}}{{/with}}){{/unless}}{{#if isDeprecated}} (deprecated){{/if}}</param>
        {{/unless}}{{/each}}{{/if ~}}
        /// <param name="wrapTTL">
        /// Sets the X-Vault-Wrap-TTL Header
        /// <remarks>
        /// This will take precedence over client level wrapTTL value
        /// </remarks>
        /// <see href="See https://www.vaultproject.io/docs/concepts/response-wrapping">Vault Response Wrapping</see>
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VaultResponse{{#with returnType}} ({{.}}){{/with}}</returns>
        {{#if isDeprecated}}
        [Obsolete]
        {{/if ~}}
        Task<VaultResponse<{{{returnType}}}{{#unless returnType}}Object{{/unless}}>> {{operationId}}Async({{#each pathParams}}{{#with required}}{{{dataType}}} {{paramName}}, {{/with}}{{/each}}{{#with bodyParam}}{{{dataType}}} {{{paramName}}}, {{/with}}{{#each pathParams}}{{#unless required}}{{{dataType}}} {{paramName}}{{#if optionalMethodArgument}} = {{#with defaultValue}}{{{.}}}{{/with}}{{/if}}, {{/unless}}{{/each}}{{#each queryParams}}{{#unless required}}{{{dataType}}} {{paramName}} = default({{{dataType}}}), {{/unless}}{{/each}}TimeSpan? wrapTTL = null, CancellationToken cancellationToken = default(CancellationToken));
        {{/each}}
        #endregion Asynchronous Operations
    }
    {{/if}}

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    {{>visibility}} interface {{interfacePrefix}}{{classname}} : {{interfacePrefix}}{{classname}}Sync{{#if supportsAsync}}, {{interfacePrefix}}{{classname}}Async{{/if}}
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    {{>visibility}} partial class {{classname}} : {{interfacePrefix}}{{classname}}
    {
        private {{packageName}}.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Constructor for {{classname}}
        /// </summary>
        public {{classname}}(ApiClient apiClient)
        {
            if (apiClient == null) throw new ArgumentNullException("ApiClient");
            
            this.Configuration = apiClient.Configuration;
            this.Client = apiClient;
            this.AsynchronousClient = apiClient;
            this.ExceptionFactory = {{packageName}}Configuration.DefaultExceptionFactory;
        }

        {{#if supportsAsync}}
        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public {{packageName}}.Client.IAsynchronousClient AsynchronousClient { get; set; }
        {{/if}}

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public {{packageName}}.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public {{packageName}}Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public {{packageName}}.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        {{#each operation}}

        /// <summary>
        /// {{summary}} {{notes}}
        /// </summary>
        /// <exception cref="{{packageName}}ApiException">Thrown when fails to make API call</exception>
        {{#if bodyParam}}{{~#with bodyParam ~}}
        /// <param name="{{paramName}}">{{description}}{{#unless required}} (optional{{#with defaultValue}}, default to {{.}}{{/with}}){{/unless}}{{#if isDeprecated}} (deprecated){{/if}}</param>
        {{/with}}{{/if ~}}
        {{#if pathParams}}{{#each pathParams~}}
        /// <param name="{{paramName}}">{{description}}{{#unless required}} (optional{{#with defaultValue}}, default to {{.}}{{/with}}){{/unless}}{{#if isDeprecated}} (deprecated){{/if}}</param>
        {{/each ~}}{{/if ~}}
        {{#if queryParams}}{{#each queryParams ~}}{{#unless required}}
        /// <param name="{{paramName}}">{{description}}{{#unless required}} (optional{{#with defaultValue}}, default to {{.}}{{/with}}){{/unless}}{{#if isDeprecated}} (deprecated){{/if}}</param>
        {{/unless}}{{/each}}{{/if ~}}
        /// <returns>VaultResponse of {{returnType}}{{#unless returnType}}Object(void){{/unless}}</returns>
        /// <param name="wrapTTL">
        /// Sets the X-Vault-Wrap-TTL Header
        /// <remarks>
        /// This will take precedence over client level wrapTTL value
        /// </remarks>
        /// <see href="See https://www.vaultproject.io/docs/concepts/response-wrapping">Vault Response Wrapping</see>
        /// </param>
        {{#if isDeprecated}}
        [Obsolete]
        {{/if ~}}
        public VaultResponse<{{{returnType}}}{{#unless returnType}}Object{{/unless}}> {{operationId}}({{#each pathParams}}{{#with required}}{{{dataType}}} {{paramName}}, {{/with}}{{/each}}{{#with bodyParam}}{{{dataType}}} {{{paramName}}}, {{/with}}{{#each pathParams}}{{#unless required}}{{{dataType}}} {{paramName}}{{#if optionalMethodArgument}} = {{#with defaultValue}}{{{.}}}{{/with}}{{/if}}, {{/unless}}{{/each}}{{#each queryParams}}{{#unless required}}{{{dataType}}} {{paramName}} = default({{{dataType}}}), {{/unless}}{{/each}}TimeSpan? wrapTTL = null)
        {
            {{#each pathParams}}
            {{#with required}}
            {{#unless vendorExtensions.x-csharp-value-type}}
            // verify the required parameter '{{paramName}}' is set
            if ({{paramName}} == null)
                throw new {{packageName}}ApiException(400, "Missing required parameter '{{paramName}}' when calling {{classname}}->{{operationId}}");

            {{/unless}}
            {{/with}}
            {{/each}}
            {{#with bodyParam}}
            {{#with required}}
            {{#unless vendorExtensions.x-csharp-value-type}}
            // verify the required parameter '{{paramName}}' is set
            if ({{paramName}} == null)
                throw new {{packageName}}ApiException(400, "Missing required parameter '{{paramName}}' when calling {{classname}}->{{operationId}}");

            {{/unless}}
            {{/with}}
            {{/with}}
            RequestOptions requestOptions = new RequestOptions();

            if (wrapTTL != null)
            {
                requestOptions.HeaderParameters.Add("X-Vault-Wrap-TTL", wrapTTL.Value.TotalSeconds.ToString());
            }

            string[] _contentTypes = new string[] {
                {{#if consumes}}
                "{{{mediaType}}}"{{#unless @last}},{{/unless}}
                {{/if}}
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                {{#each produces}}
                "{{{mediaType}}}"{{#unless @last}},{{/unless}}
                {{/each}}
            };

            var contentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (contentType != null) requestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = ClientUtils.SelectHeaderAccept(_accepts);
            if (accept != null) requestOptions.HeaderParameters.Add("Accept", accept);

            {{#each pathParams}}
            {{#with required}}
            requestOptions.PathParameters.Add("{{baseName}}", ClientUtils.ParameterToString({{paramName}})); // path parameter
            {{/with}}
            {{#unless required}}
            if ({{paramName}} != null)
            {
                requestOptions.PathParameters.Add("{{baseName}}", ClientUtils.ParameterToString({{paramName}})); // path parameter
            }
            {{/unless}}
            {{/each}}
            {{#each queryParams}}
            {{#with required}}
            requestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("{{collectionFormat}}", "{{baseName}}", "true"));
            {{/with}}
            {{#unless required}}
            if ({{paramName}} != null)
            {
                {{#if isDeepObject}}
                    {{#each items.vars}}
                if ({{paramName}}.{{name}} != null)
                {
                    requestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("{{collectionFormat}}", "{{baseName}}", {{paramName}}.{{name}}));
                }
                    {{/each}}
                {{#unless items}}
                requestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("deepObject", "{{baseName}}", {{paramName}}));
                {{/unless}}
                {{/if}}
                {{#unless isDeepObject}}
                requestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("{{collectionFormat}}", "{{baseName}}", {{paramName}}));
                {{/unless}}
            }
            {{/unless}}
            {{/each}}
            {{#each headerParams}}
            {{#with required}}
            requestOptions.HeaderParameters.Add("{{baseName}}", ClientUtils.ParameterToString({{paramName}})); // header parameter
            {{/with}}
            {{#unless required}}
            if ({{paramName}} != null)
            {
                requestOptions.HeaderParameters.Add("{{baseName}}", ClientUtils.ParameterToString({{paramName}})); // header parameter
            }
            {{/unless}}
            {{/each}}
            {{#each formParams}}
            {{#with required}}
            {{#if isFile}}
            requestOptions.FileParameters.Add("{{baseName}}", {{paramName}});
            {{/if}}
            {{#unless isFile}}
            requestOptions.FormParameters.Add("{{baseName}}", ClientUtils.ParameterToString({{paramName}})); // form parameter
            {{/unless}}
            {{/with}}
            {{#unless required}}
            if ({{paramName}} != null)
            {
                {{#if isFile}}
                requestOptions.FileParameters.Add("{{baseName}}", {{paramName}});
                {{/if}}
                {{#unless isFile}}
                requestOptions.FormParameters.Add("{{baseName}}", ClientUtils.ParameterToString({{paramName}})); // form parameter
                {{/unless}}
            }
            {{/unless}}
            {{/each}}
            {{#with bodyParam}}
            requestOptions.Data = {{paramName}};
            {{/with}}

            {{#each authMethods}}
            // authentication ({{name}}) required
            {{#if isApiKey}}
            {{#if isKeyInCookie}}
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")))
            {
                requestOptions.Cookies.Add(new Cookie("{{keyParamName}}", this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")));
            }
            {{/if}}
            {{#if isKeyInHeader}}
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")))
            {
                requestOptions.HeaderParameters.Add("{{keyParamName}}", this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}"));
            }
            {{/if}}
            {{#if isKeyInQuery}}
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")))
            {
                requestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "{{keyParamName}}", this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")));
            }
            {{/if}}
            {{/if}}
            {{#if isBasicBasic}}
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !requestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            {{/if}}
            {{#if isBasicBearer}}
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !requestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            {{/if}}
            {{#if isOAuth}}
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !requestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            {{/if}}
            {{#if isHttpSignature}}
            if (this.Configuration.HttpSigningConfiguration != null)
            {
                var HttpSigningHeaders = this.Configuration.HttpSigningConfiguration.GetHttpSignedHeader(this.Configuration.BasePath, "{{{httpMethod}}}", "{{{path}}}", requestOptions);
                foreach (var headerItem in HttpSigningHeaders)
                {
                    if (requestOptions.HeaderParameters.ContainsKey(headerItem.Key))
                    {
                        requestOptions.HeaderParameters[headerItem.Key] = new List<string>() { headerItem.Value };
                    }
                    else
                    {
                        requestOptions.HeaderParameters.Add(headerItem.Key, headerItem.Value);
                    }
                }
            }
            {{/if}}
            {{/each}}
            // make the HTTP request
            var response = this.Client.{{#with lambda.titlecase}}{{#with lambda.lowercase}}{{httpMethod}}{{/with}}{{/with}}<{{{returnType}}}{{#unless returnType}}Object{{/unless}}>("{{{path}}}", requestOptions);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("{{operationId}}", response);
                if (exception != null) throw exception;
            }

            return ClientUtils.ToVaultResponse<{{{returnType}}}{{#unless returnType}}Object{{/unless}}>(response.RawContent);
        }

        {{#if supportsAsync}}

        /// <summary>
        /// {{summary}} {{notes}}
        /// </summary>
        /// <exception cref="{{packageName}}ApiException">Thrown when fails to make API call</exception>
        {{#if bodyParam}}{{~#with bodyParam ~}}
        /// <param name="{{paramName}}">{{description}}{{#unless required}} (optional{{#with defaultValue}}, default to {{.}}{{/with}}){{/unless}}{{#if isDeprecated}} (deprecated){{/if}}</param>
        {{/with}}{{/if ~}}
        {{#if pathParams}}{{#each pathParams~}}
        /// <param name="{{paramName}}">{{description}}{{#unless required}} (optional{{#with defaultValue}}, default to {{.}}{{/with}}){{/unless}}{{#if isDeprecated}} (deprecated){{/if}}</param>
        {{/each ~}}{{/if ~}}
        {{#if queryParams}}{{#each queryParams ~}}{{#unless required}}
        /// <param name="{{paramName}}">{{description}}{{#unless required}} (optional{{#with defaultValue}}, default to {{.}}{{/with}}){{/unless}}{{#if isDeprecated}} (deprecated){{/if}}</param>
        {{/unless}}{{/each}}{{/if ~}}
        /// <param name="wrapTTL">
        /// Sets the X-Vault-Wrap-TTL Header
        /// <remarks>
        /// This will take precedence over client level wrapTTL value
        /// </remarks>
        /// <see href="See https://www.vaultproject.io/docs/concepts/response-wrapping">Vault Response Wrapping</see>
        /// </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VaultResponse{{#with returnType}} ({{.}}){{/with}}</returns>
        {{#if isDeprecated}}
        [Obsolete]
        {{/if ~}}
        public async Task<VaultResponse<{{{returnType}}}{{#unless returnType}}Object{{/unless}}>> {{operationId}}Async({{#each pathParams}}{{#with required}}{{{dataType}}} {{paramName}}, {{/with}}{{/each}}{{#with bodyParam}}{{{dataType}}} {{{paramName}}}, {{/with}}{{#each pathParams}}{{#unless required}}{{{dataType}}} {{paramName}}{{#if optionalMethodArgument}} = {{#with defaultValue}}{{{.}}}{{/with}}{{/if}}, {{/unless}}{{/each}}{{#each queryParams}}{{#unless required}}{{{dataType}}} {{paramName}} = default({{{dataType}}}), {{/unless}}{{/each}}TimeSpan? wrapTTL = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            {{#each pathParams}}
            {{#with required}}
            {{#unless vendorExtensions.x-csharp-value-type}}
            // verify the required parameter '{{paramName}}' is set
            if ({{paramName}} == null)
                throw new {{packageName}}ApiException(400, "Missing required parameter '{{paramName}}' when calling {{classname}}->{{operationId}}");

            {{/unless}}
            {{/with}}
            {{/each}}
            {{#with bodyParam}}
            {{#with required}}
            {{#unless vendorExtensions.x-csharp-value-type}}
            // verify the required parameter '{{paramName}}' is set
            if ({{paramName}} == null)
                throw new {{packageName}}ApiException(400, "Missing required parameter '{{paramName}}' when calling {{classname}}->{{operationId}}");

            {{/unless}}
            {{/with}}
            {{/with}}

            RequestOptions requestOptions = new RequestOptions();

            if (wrapTTL != null)
            {
                requestOptions.HeaderParameters.Add("X-Vault-Wrap-TTL", wrapTTL.Value.TotalSeconds.ToString());
            }

            string[] _contentTypes = new string[] {
                {{#if consumes}}
                "{{{mediaType}}}"{{#unless @last}}, {{/unless}}
                {{/if}}
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                {{#each produces}}
                "{{{mediaType}}}"{{#unless @last}},{{/unless}}
                {{/each}}
            };

            var contentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (contentType != null) requestOptions.HeaderParameters.Add("Content-Type", contentType);

            var accept = ClientUtils.SelectHeaderAccept(_accepts);
            if (accept != null) requestOptions.HeaderParameters.Add("Accept", accept);

            {{#each pathParams}}
            {{#with required}}
            requestOptions.PathParameters.Add("{{baseName}}", ClientUtils.ParameterToString({{paramName}})); // path parameter
            {{/with}}
            {{#unless required}}
            if ({{paramName}} != null)
            {
                requestOptions.PathParameters.Add("{{baseName}}", ClientUtils.ParameterToString({{paramName}})); // path parameter
            }
            {{/unless}}
            {{/each}}
            {{#each queryParams}}
            {{#with required}}
            requestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("{{collectionFormat}}", "{{baseName}}", "true"));
            {{/with}}
            {{#unless required}}
            if ({{paramName}} != null)
            {
                requestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("{{collectionFormat}}", "{{baseName}}", {{paramName}}));
            }
            {{/unless}}
            {{/each}}
            {{#each headerParams}}
            {{#with required}}
            requestOptions.HeaderParameters.Add("{{baseName}}", ClientUtils.ParameterToString({{paramName}})); // header parameter
            {{/with}}
            {{#unless required}}
            if ({{paramName}} != null)
            {
                requestOptions.HeaderParameters.Add("{{baseName}}", ClientUtils.ParameterToString({{paramName}})); // header parameter
            }
            {{/unless}}
            {{/each}}
            {{#each formParams}}
            {{#with required}}
            {{#if isFile}}
            requestOptions.FileParameters.Add("{{baseName}}", {{paramName}});
            {{/if}}
            {{#unless isFile}}
            requestOptions.FormParameters.Add("{{baseName}}", ClientUtils.ParameterToString({{paramName}})); // form parameter
            {{/unless}}
            {{/with}}
            {{#unless required}}
            if ({{paramName}} != null)
            {
                {{#if isFile}}
                requestOptions.FileParameters.Add("{{baseName}}", {{paramName}});
                {{/if}}
                {{#unless isFile}}
                requestOptions.FormParameters.Add("{{baseName}}", ClientUtils.ParameterToString({{paramName}})); // form parameter
                {{/unless}}
            }
            {{/unless}}
            {{/each}}
            {{#with bodyParam}}
            requestOptions.Data = {{paramName}};
            {{/with}}

            {{#each authMethods}}
            // authentication ({{name}}) required
            {{#if isApiKey}}
            {{#if isKeyInCookie}}
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")))
            {
                requestOptions.Cookies.Add(new Cookie("{{keyParamName}}", this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")));
            }
            {{/if}}
            {{#if isKeyInHeader}}
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")))
            {
                requestOptions.HeaderParameters.Add("{{keyParamName}}", this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}"));
            }
            {{/if}}
            {{#if isKeyInQuery}}
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")))
            {
                requestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "{{keyParamName}}", this.Configuration.GetApiKeyWithPrefix("{{keyParamName}}")));
            }
            {{/if}}
            {{/if}}
            {{#if isBasic}}
            {{#if isBasicBasic}}
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !requestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            {{/if}}
            {{#if isBasicBearer}}
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !requestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            {{/if}}
            {{/if}}
            {{#if isOAuth}}
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !requestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            {{/if}}
            {{#if isHttpSignature}}
            if (this.Configuration.HttpSigningConfiguration != null)
            {
                var HttpSigningHeaders = this.Configuration.HttpSigningConfiguration.GetHttpSignedHeader(this.Configuration.BasePath, "{{{httpMethod}}}", "{{{path}}}", requestOptions);
                foreach (var headerItem in HttpSigningHeaders)
                {
                    if (requestOptions.HeaderParameters.ContainsKey(headerItem.Key))
                    {
                        requestOptions.HeaderParameters[headerItem.Key] = new List<string>() { headerItem.Value };
                    }
                    else
                    {
                        requestOptions.HeaderParameters.Add(headerItem.Key, headerItem.Value);
                    }
                }
            }
            {{/if}}
            {{/each}}
            // make the HTTP request
            var response = await this.AsynchronousClient.{{#with lambda.titlecase}}{{#with lambda.lowercase}}{{httpMethod}}{{/with}}{{/with}}Async<{{{returnType}}}{{#unless returnType}}Object{{/unless}}>("{{{path}}}", requestOptions, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("{{operationId}}", response);
                if (exception != null) throw exception;
            }

            return ClientUtils.ToVaultResponse<{{{returnType}}}{{#unless returnType}}Object{{/unless}}>(response.RawContent);
        }

        {{/if}}
        {{/each}}
    }
    {{/with}}
}
