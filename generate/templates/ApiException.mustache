{{>partial_header}}

using System;
using System.Collections.Generic;
using Newtonsoft.Json;

namespace {{packageName}}.Client
{
    /// <summary>
    /// API Exception
    /// </summary>
    {{>visibility}} class {{packageName}}ApiException : Exception
    {
        /// <summary>
        /// Gets or sets the error code (HTTP status code)
        /// </summary>
        /// <value>The error code (HTTP status code).</value>
        public int StatusCode { get; private set; }

        /// <summary>
        /// Gets or sets the list of Api Errors
        /// </summary>
        public IEnumerable<string> Errors { get; private set; }

        /// <summary>
        /// Gets or sets the HTTP headers
        /// </summary>
        /// <value>HTTP headers</value>
        public Multimap<string, string> Headers { get; private set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="{{packageName}}ApiException"/> class.
        /// </summary>
        public {{packageName}}ApiException() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="{{packageName}}ApiException"/> class.
        /// </summary>
        /// <param name="statusCode">HTTP status code.</param>
        /// <param name="message">Error message.</param>
        public {{packageName}}ApiException(int statusCode, string message) : base(message)
        {
            this.StatusCode = statusCode;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="{{packageName}}ApiException"/> class.
        /// </summary>
        /// <param name="statusCode">HTTP status code.</param>
        /// <param name="message">Error message.</param>
        /// <param name="errorContent">Error content.</param>
        /// <param name="headers">HTTP Headers.</param>
        public {{packageName}}ApiException(int statusCode, string message, string errorContent, Multimap<string, string> headers = null) : base(message)
        {
            this.StatusCode = statusCode;
            this.Headers = headers;

            try
            {
                var structured = JsonConvert.DeserializeObject<Dictionary<string, IEnumerable<string>>>(errorContent);

                if (structured.ContainsKey("errors"))
                {
                    this.Errors = structured["errors"];
                }
            }
            catch
            {
                // With a deserialization exception we set the full 
                // error content to the first element
                this.Errors = new List<string>() { errorContent };
            }
        }
    }

}
