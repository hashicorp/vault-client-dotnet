{{>partial_header}}

using System;
{{^net35}}
using System.Collections.Concurrent;
{{/net35}}
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Security;
using System.Reflection;
using System.Security.Cryptography.X509Certificates;
using System.Text;

namespace {{packageName}}.Client
{    
    /// <summary>
    /// Represents the TLS Configuration
    /// </summary>
    public class TLSConfiguration
    {
        /// <summary>
        /// X509 Certificate for the client 
        /// <remarks>
        /// This is a certificate used to authenticate
        /// with Vault via the cert auth method
        /// </remarks>
        /// <see>see https://www.vaultproject.io/docs/auth/cert</see>
        /// </summary>
        public X509Certificate2 ClientCertificate = null;

        /// <summary>
        /// X509 Certificate collection for the client
        /// <remarks>
        /// This is a certificate used to authenticate
        /// with Vault via the cert auth method
        /// </remarks>
        /// <see>see https://www.vaultproject.io/docs/auth/cert</see>
        /// </summary>
        public X509CertificateCollection ClientCertificateCollection = null;

        /// <summary>
        /// X509 Certificate for the server
        /// <remarks>
        /// This is a certificate used which the client
        /// will use to verify the Vault server TLS Certificate
        /// </remarks>
        /// </summary>
        public X509Certificate2 ServerCertificate = null;

        /// <summary>
        /// X509 Certificate collection for the server
        /// <remarks>
        /// This is a certificate collection used which the client
        /// will use to verify the Vault server TLS Certificate
        /// </remarks>
        /// </summary>
        public X509CertificateCollection ServerCertificateCollection = null;

        /// <summary>
        /// TLS Configuration object constructor
        /// </summary>
        public TLSConfiguration(X509Certificate2 serverCertificate = null,
                                X509CertificateCollection serverCertificateCollection = null,
                                X509Certificate2 clientCertificate = null,
                                X509CertificateCollection clientCertificateCollection = null)
        {
            if (serverCertificate == null && serverCertificateCollection == null)
            {
                throw new ArgumentNullException("Server certificate or server certificate collection must be specified");
            }

            ClientCertificate = clientCertificate;
            ClientCertificateCollection = clientCertificateCollection;
            ServerCertificate = serverCertificate;
            ServerCertificateCollection = serverCertificateCollection;
        }
    }

    /// <summary>
    /// Represents a set of {{packageName}} configuration settings
    /// </summary>
    {{>visibility}} class {{packageName}}Configuration
    {
        #region Constants
        /// <summary>
        /// Version of the package.
        /// </summary>
        /// <value>Version of the package.</value>
        public const string Version = "{{packageVersion}}";

        /// <summary>
        /// Identifier for ISO 8601 DateTime Format
        /// </summary>
        /// <remarks>See https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8 for more information.</remarks>
        // ReSharper disable once InconsistentNaming
        public const string ISO8601_DATETIME_FORMAT = "o";

        #endregion Constants

        #region Static Members

        /// <summary>
        /// Default creation of exceptions for a given method name and response object
        /// </summary>
        public static readonly ExceptionFactory DefaultExceptionFactory = (methodName, response) =>
        {
            var status = (int)response.StatusCode;
            if (status >= 400)
            {
                return new {{packageName}}ApiException(status,
                    string.Format("Error calling {0}: {1}", methodName, response.RawContent),
                    response.RawContent, response.Headers);
            }
            {{^netStandard}}
            if (status == 0)
            {
                return new {{packageName}}ApiException(status,
                    string.Format("Error calling {0}: {1}", methodName, response.ErrorText), response.ErrorText);
            }
            {{/netStandard}}
            return null;
        };

        #endregion Static Members

        #region Private Members

        /// <summary>
        /// Defines the base path of the target API server.
        /// Example: http://localhost:3000/v1/
        /// </summary>
        private string _basePath;

        /// <summary>
        /// Gets or sets the API key based on the authentication name.
        /// This is the key and value comprising the "secret" for accessing an API.
        /// </summary>
        /// <value>The API key.</value>
        private IDictionary<string, string> _apiKey;

        /// <summary>
        /// Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
        /// </summary>
        /// <value>The prefix of the API key.</value>
        private IDictionary<string, string> _apiKeyPrefix;

        private string _dateTimeFormat = ISO8601_DATETIME_FORMAT;
        private string _tempFolderPath = Path.GetTempPath();
        {{#servers.0}}

        /// <summary>
        /// Gets or sets the servers defined in the OpenAPI spec.
        /// </summary>
        /// <value>The servers</value>
        private IList<IReadOnlyDictionary<string, object>> _servers;
        {{/servers.0}}
        {{#hasHttpSignatureMethods}}

        /// <summary>
        /// HttpSigning configuration
        /// </summary>
        private HttpSigningConfiguration _HttpSigningConfiguration = null;
        {{/hasHttpSignatureMethods}}
        #endregion Private Members

        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="{{packageName}}Configuration" /> class
        /// </summary>
        public {{packageName}}Configuration(string basePath,
                            HttpClientHandler httpClientHandler = null,
                            TimeSpan? timeout = null,
                            RetryConfiguration retryConfiguration = null,
                            RateLimitConfiguration rateLimitConfiguration = null,
                            TLSConfiguration tlsConfiguration = null)
        {
            if (string.IsNullOrEmpty(basePath)) throw new ArgumentException("Cannot be empty", "BasePath");
            HttpClientHandler = httpClientHandler ?? new HttpClientHandler();

            if (tlsConfiguration != null)
            {
                TLSConfiguration = tlsConfiguration;
                if (TLSConfiguration.ClientCertificate != null)
                {
                    if (!TLSConfiguration.ClientCertificate.HasPrivateKey)
                    {
                        throw new ArgumentException("Certificate does not contain a private key");
                    }
                    httpClientHandler.ClientCertificates.Add(TLSConfiguration.ClientCertificate);
                }
                else if (TLSConfiguration.ClientCertificateCollection != null)
                {
                    foreach (X509Certificate2 cert in TLSConfiguration.ClientCertificateCollection)
                    {
                        if (!TLSConfiguration.ClientCertificate.HasPrivateKey)
                        {
                            throw new ArgumentException("Certificate does not contain a private key");
                        }
                    }

                    httpClientHandler.ClientCertificates.AddRange(TLSConfiguration.ClientCertificateCollection);
                }

                Func<object, X509Certificate, X509Chain, SslPolicyErrors, bool> ValidateServiceCertficate =
                delegate (object sender, X509Certificate serviceCertificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
                {
                    if (TLSConfiguration.ServerCertificate != null)
                    {
                        return serviceCertificate.Equals(TLSConfiguration.ServerCertificate);
                    }
                    else if (TLSConfiguration.ServerCertificateCollection != null)
                    {
                        foreach (X509Certificate2 cert in TLSConfiguration.ServerCertificateCollection)
                        {
                            if (serviceCertificate.Equals(cert))
                            {
                                return true;
                            }
                        }
                    }

                    return true;
                };

                httpClientHandler.ClientCertificateOptions = ClientCertificateOption.Manual;
                httpClientHandler.ServerCertificateCustomValidationCallback = ValidateServiceCertficate;
            }


            timeout = timeout ?? TimeSpan.FromSeconds(100);
            RetryConfiguration = retryConfiguration ?? new RetryConfiguration(5, TimeSpan.FromMilliseconds(500));
            RateLimitConfiguration = rateLimitConfiguration ?? new RateLimitConfiguration(50, TimeSpan.FromSeconds(5));

            BasePath = basePath.EndsWith("/") ? basePath : basePath + "/";
            HttpClient = new HttpClient(HttpClientHandler);
            HttpClient.Timeout = (TimeSpan)timeout;

            UserAgent = BuildUserAgent();
        }

        #endregion Constructors

        #region Properties

        /// <summary>
        /// Gets or sets the base path for API access.
        /// </summary>
        public virtual string BasePath 
        {
            get { return _basePath; }
            set { _basePath = value; }
        }

        /// <summary>
        /// The base HttpClient for making calls.
        /// </summary>
        public readonly HttpClient HttpClient;

        /// <summary>
        /// The HttpClientHandler for custom processing of api calls.
        /// </summary>
        public readonly HttpClientHandler HttpClientHandler;

        /// <summary>
        /// The Ratelimit Configuration that creates a polly policy
        /// </summary>
        public readonly RateLimitConfiguration RateLimitConfiguration;

        /// <summary>
        /// The Retry Configuration that creates a polly policy
        /// </summary>
        public readonly RetryConfiguration RetryConfiguration;

        /// <summary>
        /// The TLS Configuration that holds client and server Certificates
        /// </summary>
        public readonly TLSConfiguration TLSConfiguration;

        /// <summary>
        /// Gets or sets the default header.
        /// </summary>
        [Obsolete("Use DefaultHeaders instead.")]
        public virtual IDictionary<string, string> DefaultHeader
        {
            get
            {
                return DefaultHeaders;
            }
            set
            {
                DefaultHeaders = value;
            }
        }

        /// <summary>
        /// Gets or sets the default headers.
        /// </summary>
        public virtual IDictionary<string, string> DefaultHeaders { get; set; }

        /// <summary>
        /// Gets or sets the HTTP timeout (milliseconds) of ApiClient. Default to 100000 milliseconds.
        /// </summary>
        public virtual int Timeout { get; set; }

        /// <summary>
        /// Gets or sets the proxy
        /// </summary>
        /// <value>Proxy.</value>
        public virtual WebProxy Proxy { get; set; }

        /// <summary>
        /// Gets or sets the HTTP user agent.
        /// </summary>
        /// <value>Http user agent.</value>
        public string UserAgent { get; set; }

        /// <summary>
        /// Gets or sets the username (HTTP basic authentication).
        /// </summary>
        /// <value>The username.</value>
        public virtual string Username { get; set; }

        /// <summary>
        /// Gets or sets the password (HTTP basic authentication).
        /// </summary>
        /// <value>The password.</value>
        public virtual string Password { get; set; }

        /// <summary>
        /// Gets the API key with prefix.
        /// </summary>
        /// <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
        /// <returns>API key with prefix.</returns>
        public string GetApiKeyWithPrefix(string apiKeyIdentifier)
        {
            string apiKeyValue;
            ApiKey.TryGetValue(apiKeyIdentifier, out apiKeyValue);
            string apiKeyPrefix;
            if (ApiKeyPrefix.TryGetValue(apiKeyIdentifier, out apiKeyPrefix))
            {
                return apiKeyPrefix + " " + apiKeyValue;
            }

            return apiKeyValue;
        }

        /// <summary>
        /// Build a UserAgent string
        /// </summary>
        public string BuildUserAgent()
        {
            StringBuilder sb = new StringBuilder("vault-client-dotnet/");

            sb.AppendFormat("{0} (.Net {1})", Version, System.Environment.Version);
            return sb.ToString();
        }

        /// <summary>
        /// Gets or sets the access token for OAuth2 authentication.
        ///
        /// This helper property simplifies code generation.
        /// </summary>
        /// <value>The access token.</value>
        public virtual string AccessToken { get; set; }

        /// <summary>
        /// Gets or sets the temporary folder path to store the files downloaded from the server.
        /// </summary>
        /// <value>Folder path.</value>
        public virtual string TempFolderPath
        {
            get { return _tempFolderPath; }

            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    _tempFolderPath = Path.GetTempPath();
                    return;
                }

                // create the directory if it does not exist
                if (!Directory.Exists(value))
                {
                    Directory.CreateDirectory(value);
                }

                // check if the path contains directory separator at the end
                if (value[value.Length - 1] == Path.DirectorySeparatorChar)
                {
                    _tempFolderPath = value;
                }
                else
                {
                    _tempFolderPath = value + Path.DirectorySeparatorChar;
                }
            }
        }

        /// <summary>
        /// Gets or sets the date time format used when serializing in the ApiClient
        /// By default, it's set to ISO 8601 - "o", for others see:
        /// https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx
        /// and https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx
        /// No validation is done to ensure that the string you're providing is valid
        /// </summary>
        /// <value>The DateTimeFormat string</value>
        public virtual string DateTimeFormat
        {
            get { return _dateTimeFormat; }
            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    // Never allow a blank or null string, go back to the default
                    _dateTimeFormat = ISO8601_DATETIME_FORMAT;
                    return;
                }

                // Caution, no validation when you choose date time format other than ISO 8601
                // Take a look at the above links
                _dateTimeFormat = value;
            }
        }

        /// <summary>
        /// Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
        ///
        /// Whatever you set here will be prepended to the value defined in AddApiKey.
        ///
        /// An example invocation here might be:
        /// <example>
        /// ApiKeyPrefix["Authorization"] = "Bearer";
        /// </example>
        /// … where ApiKey["Authorization"] would then be used to set the value of your bearer token.
        ///
        /// <remarks>
        /// OAuth2 workflows should set tokens via AccessToken.
        /// </remarks>
        /// </summary>
        /// <value>The prefix of the API key.</value>
        public virtual IDictionary<string, string> ApiKeyPrefix
        {
            get { return _apiKeyPrefix; }
            set
            {
                if (value == null)
                {
                    throw new InvalidOperationException("ApiKeyPrefix collection may not be null.");
                }
                _apiKeyPrefix = value;
            }
        }

        /// <summary>
        /// Gets or sets the API key based on the authentication name.
        /// </summary>
        /// <value>The API key.</value>
        public virtual IDictionary<string, string> ApiKey
        {
            get { return _apiKey; }
            set
            {
                if (value == null)
                {
                    throw new InvalidOperationException("ApiKey collection may not be null.");
                }
                _apiKey = value;
            }
        }
        {{#servers.0}}

        /// <summary>
        /// Gets or sets the servers.
        /// </summary>
        /// <value>The servers.</value>
        public virtual IList<IReadOnlyDictionary<string, object>> Servers
        {
            get { return _servers; }
            set
            {
                if (value == null)
                {
                    throw new InvalidOperationException("Servers may not be null.");
                }
                _servers = value;
            }
        }

        /// <summary>
        /// Returns URL based on server settings without providing values
        /// for the variables
        /// </summary>
        /// <param name="index">Array index of the server settings.</param>
        /// <return>The server URL.</return>
        public string GetServerUrl(int index)
        {
            return GetServerUrl(index, null);
        }

        /// <summary>
        /// Returns URL based on server settings.
        /// </summary>
        /// <param name="index">Array index of the server settings.</param>
        /// <param name="inputVariables">Dictionary of the variables and the corresponding values.</param>
        /// <return>The server URL.</return>
        public string GetServerUrl(int index, Dictionary<string, string> inputVariables)
        {
            if (index < 0 || index >= Servers.Count)
            {
                throw new InvalidOperationException($"Invalid index {index} when selecting the server. Must be less than {Servers.Count}.");
            }

            if (inputVariables == null)
            {
                inputVariables = new Dictionary<string, string>();
            }

            IReadOnlyDictionary<string, object> server = Servers[index];
            string url = (string)server["url"];

            // go through variable and assign a value
            foreach (KeyValuePair<string, object> variable in (IReadOnlyDictionary<string, object>)server["variables"])
            {

                IReadOnlyDictionary<string, object> serverVariables = (IReadOnlyDictionary<string, object>)(variable.Value);

                if (inputVariables.ContainsKey(variable.Key))
                {
                    if (((List<string>)serverVariables["enum_values"]).Contains(inputVariables[variable.Key]))
                    {
                        url = url.Replace("{" + variable.Key + "}", inputVariables[variable.Key]);
                    }
                    else
                    {
                        throw new InvalidOperationException($"The variable `{variable.Key}` in the server URL has invalid value #{inputVariables[variable.Key]}. Must be {(List<string>)serverVariables["enum_values"]}");
                    }
                }
                else
                {
                    // use default value
                    url = url.Replace("{" + variable.Key + "}", (string)serverVariables["default_value"]);
                }
            }

            return url;
        }
        {{/servers.0}}
        {{#hasHttpSignatureMethods}}

        /// <summary>
        /// Gets and Sets the HttpSigningConfiguration
        /// </summary>
        public HttpSigningConfiguration HttpSigningConfiguration
        {
            get { return _HttpSigningConfiguration; }
            set { _HttpSigningConfiguration = value; }
        }
        {{/hasHttpSignatureMethods}}

        #endregion Properties

        #region Methods

        /// <summary>
        /// Returns a string with essential information for debugging.
        /// </summary>
        public static string ToDebugReport()
        {
            string report = "C# SDK ({{{packageName}}}) Debug Report:\n";
            report += "    OS: " + System.Environment.OSVersion + "\n";
            report += "    .NET Framework Version: " + System.Environment.Version + "\n";
            report += "    Version of the API: {{{version}}}\n";
            report += "    SDK Package Version: {{{packageVersion}}}\n";

            return report;
        }

        /// <summary>
        /// Add Api Key Header.
        /// </summary>
        /// <param name="key">Api Key name.</param>
        /// <param name="value">Api Key value.</param>
        /// <returns></returns>
        public void AddApiKey(string key, string value)
        {
            ApiKey[key] = value;
        }

        /// <summary>
        /// Sets the API key prefix.
        /// </summary>
        /// <param name="key">Api Key name.</param>
        /// <param name="value">Api Key value.</param>
        public void AddApiKeyPrefix(string key, string value)
        {
            ApiKeyPrefix[key] = value;
        }

        #endregion Methods
    }
}
