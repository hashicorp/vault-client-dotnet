{{>partial_header}}

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;

using Xunit;

using {{packageName}}.Client;
using {{packageName}}.{{apiPackage}};
{{#if hasImport}}
// uncomment below to import models
//using {{packageName}}.{{modelPackage}};{{/if}}

namespace {{packageName}}.Test.Api
{
    /// <summary>
    ///  Class for testing {{cut classname "Api"}}
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class {{cut classname "Api"}}Tests : IDisposable
    {
        {{#unless nonPublicApi}}private {{packageName}}.Api.{{cut classname "Api"}} instance;{{/unless}}

        public {{cut classname "Api"}}Tests()
        {
            {{#unless nonPublicApi}}// instance = new {{packageName}}.Api.{{cut classname "Api"}}();{{/unless}}
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of {{cut classname "Api"}}
        /// </summary>
        [Fact]
        public void {{operationId}}InstanceTest()
        {
            // TODO uncomment below to test 'IsType' {{cut classname "Api"}}
            //Assert.IsType<{{cut classname "Api"}}>(instance);
        }
        {{#with operations}}{{#each operation}}
        /// <summary>
        /// Test {{operationId}}
        /// </summary>
        [Fact]
        public void {{operationId}}Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            {{#each allParams}}//{{{dataType}}} {{paramName}} = null;{{/each}}
            //{{#with returnType}}var response = {{/with}}instance.{{operationId}}({{#each allParams}}{{paramName}}{{#unless @last}}, {{/unless}}{{/each}});
            {{~#with returnType~}}//Assert.IsType<{{{.}}}>(response);{{/with}}
        }
        {{/each}}{{/with}}
    }
}
